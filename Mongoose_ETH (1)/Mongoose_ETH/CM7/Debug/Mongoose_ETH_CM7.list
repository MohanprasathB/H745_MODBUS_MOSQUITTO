
Mongoose_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000233e0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .iram         000005a4  08023680  08023680  00024680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000e80c  08023c28  08023c28  00024c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08032434  08032434  000348c4  2**0
                  CONTENTS
  5 .ARM          00000008  08032434  08032434  00033434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0803243c  0803243c  000348c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0803243c  0803243c  0003343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08032440  08032440  00033440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000804  24000000  08032444  00034000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDescripSection 00000060  24000804  08032c48  00034804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDescripSection 00000060  24000864  08032ca8  00034864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000187fc  240008c8  08032d08  000348c8  2**3
                  ALLOC
 13 ._user_heap_stack 00000604  240190c4  08032d08  000350c4  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000348c4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003e47d  00000000  00000000  000348f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000573d  00000000  00000000  00072d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f88  00000000  00000000  000784b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000269d  00000000  00000000  0007b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004079c  00000000  00000000  0007dad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003634e  00000000  00000000  000be271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a20b7  00000000  00000000  000f45bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00296676  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e3ac  00000000  00000000  002966bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000053  00000000  00000000  002a4a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240008c8 	.word	0x240008c8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023668 	.word	0x08023668

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240008cc 	.word	0x240008cc
 80002dc:	08023668 	.word	0x08023668

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <SystemInit+0xfc>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a3c      	ldr	r2, [pc, #240]	@ (8000c24 <SystemInit+0xfc>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000b3c:	4b39      	ldr	r3, [pc, #228]	@ (8000c24 <SystemInit+0xfc>)
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	4a38      	ldr	r2, [pc, #224]	@ (8000c24 <SystemInit+0xfc>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <SystemInit+0x100>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d807      	bhi.n	8000b64 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <SystemInit+0x100>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f023 030f 	bic.w	r3, r3, #15
 8000b5c:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <SystemInit+0x100>)
 8000b5e:	f043 0307 	orr.w	r3, r3, #7
 8000b62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b64:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <SystemInit+0x104>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a30      	ldr	r2, [pc, #192]	@ (8000c2c <SystemInit+0x104>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <SystemInit+0x104>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <SystemInit+0x104>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	492c      	ldr	r1, [pc, #176]	@ (8000c2c <SystemInit+0x104>)
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <SystemInit+0x108>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemInit+0x100>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <SystemInit+0x100>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 030f 	bic.w	r3, r3, #15
 8000b96:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <SystemInit+0x100>)
 8000b98:	f043 0307 	orr.w	r3, r3, #7
 8000b9c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <SystemInit+0x104>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <SystemInit+0x104>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <SystemInit+0x104>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <SystemInit+0x104>)
 8000bb2:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <SystemInit+0x10c>)
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <SystemInit+0x104>)
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <SystemInit+0x110>)
 8000bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <SystemInit+0x104>)
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c3c <SystemInit+0x114>)
 8000bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <SystemInit+0x104>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <SystemInit+0x104>)
 8000bca:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <SystemInit+0x114>)
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <SystemInit+0x104>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <SystemInit+0x104>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <SystemInit+0x114>)
 8000bd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <SystemInit+0x104>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <SystemInit+0x104>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <SystemInit+0x104>)
 8000be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <SystemInit+0x104>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <SystemInit+0x118>)
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <SystemInit+0x118>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <SystemInit+0x11c>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <SystemInit+0x120>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c0a:	d202      	bcs.n	8000c12 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <SystemInit+0x124>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <SystemInit+0x128>)
 8000c14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c18:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	52002000 	.word	0x52002000
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c34:	02020200 	.word	0x02020200
 8000c38:	01ff0000 	.word	0x01ff0000
 8000c3c:	01010280 	.word	0x01010280
 8000c40:	580000c0 	.word	0x580000c0
 8000c44:	5c001000 	.word	0x5c001000
 8000c48:	ffff0000 	.word	0xffff0000
 8000c4c:	51008108 	.word	0x51008108
 8000c50:	52004000 	.word	0x52004000

08000c54 <mg_random>:
//static void run_mongoose(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e01a      	b.n	8000c9a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4810      	ldr	r0, [pc, #64]	@ (8000cac <mg_random+0x58>)
 8000c6c:	f01c feb6 	bl	801d9dc <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	18d0      	adds	r0, r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d203      	bcs.n	8000c88 <mg_random+0x34>
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	e000      	b.n	8000c8a <mg_random+0x36>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	f107 0108 	add.w	r1, r7, #8
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f021 fdf1 	bl	8022876 <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3304      	adds	r3, #4
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d3e0      	bcc.n	8000c64 <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	240009cc 	.word	0x240009cc

08000cb0 <mg_millis>:

uint64_t mg_millis(void) {
 8000cb0:	b5b0      	push	{r4, r5, r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000cb4:	f018 fd74 	bl	80197a0 <HAL_GetTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	461c      	mov	r4, r3
 8000cbe:	4615      	mov	r5, r2
 8000cc0:	4622      	mov	r2, r4
 8000cc2:	462b      	mov	r3, r5
}
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ccc <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d002      	beq.n	8000ce4 <_write+0x18>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d107      	bne.n	8000cf4 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <_write+0x34>)
 8000cf0:	f01d f9e2 	bl	801e0b8 <HAL_UART_Transmit>
  }
  return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	24000a74 	.word	0x24000a74

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f018 fcfa 	bl	8019700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f82c 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f000 f9a0 	bl	8001054 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d14:	f000 f8a4 	bl	8000e60 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d18:	f000 f950 	bl	8000fbc <MX_USART3_UART_Init>
  MX_RNG_Init();
 8000d1c:	f000 f8ec 	bl	8000ef8 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8000d20:	f000 f900 	bl	8000f24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d24:	f01e fb26 	bl	801f374 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d28:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <main+0x4c>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	@ (8000d54 <main+0x50>)
 8000d2e:	f01e fb6b 	bl	801f408 <osThreadNew>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <main+0x54>)
 8000d36:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000d38:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <main+0x58>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <main+0x5c>)
 8000d3e:	f01e fb63 	bl	801f408 <osThreadNew>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <main+0x60>)
 8000d46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d48:	f01e fb38 	bl	801f3bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <main+0x48>
 8000d50:	080260cc 	.word	0x080260cc
 8000d54:	08001139 	.word	0x08001139
 8000d58:	24000b08 	.word	0x24000b08
 8000d5c:	080260f0 	.word	0x080260f0
 8000d60:	0800114b 	.word	0x0800114b
 8000d64:	24001b54 	.word	0x24001b54

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09c      	sub	sp, #112	@ 0x70
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	224c      	movs	r2, #76	@ 0x4c
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f021 fbd9 	bl	802252e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2220      	movs	r2, #32
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f021 fbd3 	bl	802252e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d88:	2004      	movs	r0, #4
 8000d8a:	f019 ff17 	bl	801abbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <SystemClock_Config+0xf0>)
 8000d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d96:	4a30      	ldr	r2, [pc, #192]	@ (8000e58 <SystemClock_Config+0xf0>)
 8000d98:	f023 0301 	bic.w	r3, r3, #1
 8000d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <SystemClock_Config+0xf0>)
 8000da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e5c <SystemClock_Config+0xf4>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a2b      	ldr	r2, [pc, #172]	@ (8000e5c <SystemClock_Config+0xf4>)
 8000dae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <SystemClock_Config+0xf4>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dc0:	bf00      	nop
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <SystemClock_Config+0xf4>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dce:	d1f8      	bne.n	8000dc2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000dd0:	2321      	movs	r3, #33	@ 0x21
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	2302      	movs	r3, #2
 8000de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000dea:	2364      	movs	r3, #100	@ 0x64
 8000dec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f019 ff30 	bl	801ac70 <HAL_RCC_OscConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e16:	f000 f9b3 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	233f      	movs	r3, #63	@ 0x3f
 8000e1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e26:	2308      	movs	r3, #8
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e2a:	2340      	movs	r3, #64	@ 0x40
 8000e2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e2e:	2340      	movs	r3, #64	@ 0x40
 8000e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e38:	2340      	movs	r3, #64	@ 0x40
 8000e3a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f01a fb6f 	bl	801b524 <HAL_RCC_ClockConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000e4c:	f000 f998 	bl	8001180 <Error_Handler>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3770      	adds	r7, #112	@ 0x70
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	58000400 	.word	0x58000400
 8000e5c:	58024800 	.word	0x58024800

08000e60 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <MX_ETH_Init+0x80>)
 8000e66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <MX_ETH_Init+0x84>)
 8000e68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <MX_ETH_Init+0x88>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <MX_ETH_Init+0x88>)
 8000e72:	2280      	movs	r2, #128	@ 0x80
 8000e74:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_ETH_Init+0x88>)
 8000e78:	22e1      	movs	r2, #225	@ 0xe1
 8000e7a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <MX_ETH_Init+0x88>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_ETH_Init+0x88>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <MX_ETH_Init+0x88>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_ETH_Init+0x80>)
 8000e90:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <MX_ETH_Init+0x88>)
 8000e92:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_ETH_Init+0x80>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_ETH_Init+0x80>)
 8000e9c:	4a13      	ldr	r2, [pc, #76]	@ (8000eec <MX_ETH_Init+0x8c>)
 8000e9e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_ETH_Init+0x80>)
 8000ea2:	4a13      	ldr	r2, [pc, #76]	@ (8000ef0 <MX_ETH_Init+0x90>)
 8000ea4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_ETH_Init+0x80>)
 8000ea8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000eac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000eae:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <MX_ETH_Init+0x80>)
 8000eb0:	f018 fd82 	bl	80199b8 <HAL_ETH_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000eba:	f000 f961 	bl	8001180 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ebe:	2238      	movs	r2, #56	@ 0x38
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <MX_ETH_Init+0x94>)
 8000ec4:	f021 fb33 	bl	802252e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_ETH_Init+0x94>)
 8000eca:	2221      	movs	r2, #33	@ 0x21
 8000ecc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_ETH_Init+0x94>)
 8000ed0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ed4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <MX_ETH_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */
  /* USER CODE END ETH_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2400091c 	.word	0x2400091c
 8000ee4:	40028000 	.word	0x40028000
 8000ee8:	24002ba0 	.word	0x24002ba0
 8000eec:	24000864 	.word	0x24000864
 8000ef0:	24000804 	.word	0x24000804
 8000ef4:	240008e4 	.word	0x240008e4

08000ef8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <MX_RNG_Init+0x24>)
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <MX_RNG_Init+0x28>)
 8000f00:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_RNG_Init+0x24>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <MX_RNG_Init+0x24>)
 8000f0a:	f01c fd05 	bl	801d918 <HAL_RNG_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000f14:	f000 f934 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	240009cc 	.word	0x240009cc
 8000f20:	48021800 	.word	0x48021800

08000f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f28:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f2a:	4a23      	ldr	r2, [pc, #140]	@ (8000fb8 <MX_USART2_UART_Init+0x94>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f60:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f66:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6c:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f6e:	f01d f853 	bl	801e018 <HAL_UART_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f78:	f000 f902 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f80:	f01e f8e9 	bl	801f156 <HAL_UARTEx_SetTxFifoThreshold>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f8a:	f000 f8f9 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000f92:	f01e f91e 	bl	801f1d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f9c:	f000 f8f0 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <MX_USART2_UART_Init+0x90>)
 8000fa2:	f01e f89f 	bl	801f0e4 <HAL_UARTEx_DisableFifoMode>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fac:	f000 f8e8 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	240009e0 	.word	0x240009e0
 8000fb8:	40004400 	.word	0x40004400

08000fbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000fc2:	4a23      	ldr	r2, [pc, #140]	@ (8001050 <MX_USART3_UART_Init+0x94>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fc6:	4b21      	ldr	r3, [pc, #132]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001004:	4811      	ldr	r0, [pc, #68]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8001006:	f01d f807 	bl	801e018 <HAL_UART_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001010:	f000 f8b6 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001014:	2100      	movs	r1, #0
 8001016:	480d      	ldr	r0, [pc, #52]	@ (800104c <MX_USART3_UART_Init+0x90>)
 8001018:	f01e f89d 	bl	801f156 <HAL_UARTEx_SetTxFifoThreshold>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001022:	f000 f8ad 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001026:	2100      	movs	r1, #0
 8001028:	4808      	ldr	r0, [pc, #32]	@ (800104c <MX_USART3_UART_Init+0x90>)
 800102a:	f01e f8d2 	bl	801f1d2 <HAL_UARTEx_SetRxFifoThreshold>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001034:	f000 f8a4 	bl	8001180 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <MX_USART3_UART_Init+0x90>)
 800103a:	f01e f853 	bl	801f0e4 <HAL_UARTEx_DisableFifoMode>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001044:	f000 f89c 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	24000a74 	.word	0x24000a74
 8001050:	40004800 	.word	0x40004800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <MX_GPIO_Init+0xdc>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001070:	4a2f      	ldr	r2, [pc, #188]	@ (8001130 <MX_GPIO_Init+0xdc>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107a:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <MX_GPIO_Init+0xdc>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <MX_GPIO_Init+0xdc>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	4a28      	ldr	r2, [pc, #160]	@ (8001130 <MX_GPIO_Init+0xdc>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <MX_GPIO_Init+0xdc>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ac:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ca:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e8:	4a11      	ldr	r2, [pc, #68]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_GPIO_Init+0xdc>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2101      	movs	r1, #1
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <MX_GPIO_Init+0xe0>)
 8001106:	f019 fd3f 	bl	801ab88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_GPIO_Init+0xe0>)
 8001122:	f019 fb81 	bl	801a828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	58024400 	.word	0x58024400
 8001134:	58020400 	.word	0x58020400

08001138 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	  /* Infinite loop */
	  for(;;) {
		             run_mongoose();
 8001140:	f017 ff08 	bl	8018f54 <mongoose_init>
 8001144:	f017 ff5c 	bl	8019000 <mongoose_poll>
 8001148:	e7fc      	b.n	8001144 <StartDefaultTask+0xc>

0800114a <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  if (g_mqtt_conn != NULL) {

	     }
    osDelay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f01e f9ea 	bl	801f52c <osDelay>
	  if (g_mqtt_conn != NULL) {
 8001158:	e7fb      	b.n	8001152 <StartTask02+0x8>
	...

0800115c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800116e:	f018 fb03 	bl	8019778 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40001000 	.word	0x40001000

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <mg_base64_decode_single>:
  } else {
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b40      	cmp	r3, #64	@ 0x40
 8001198:	dd05      	ble.n	80011a6 <mg_base64_decode_single+0x1a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b5a      	cmp	r3, #90	@ 0x5a
 800119e:	dc02      	bgt.n	80011a6 <mg_base64_decode_single+0x1a>
    return c - 'A';
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b41      	subs	r3, #65	@ 0x41
 80011a4:	e022      	b.n	80011ec <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b60      	cmp	r3, #96	@ 0x60
 80011aa:	dd05      	ble.n	80011b8 <mg_base64_decode_single+0x2c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b7a      	cmp	r3, #122	@ 0x7a
 80011b0:	dc02      	bgt.n	80011b8 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3b47      	subs	r3, #71	@ 0x47
 80011b6:	e019      	b.n	80011ec <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80011bc:	dd05      	ble.n	80011ca <mg_base64_decode_single+0x3e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b39      	cmp	r3, #57	@ 0x39
 80011c2:	dc02      	bgt.n	80011ca <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3304      	adds	r3, #4
 80011c8:	e010      	b.n	80011ec <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b2b      	cmp	r3, #43	@ 0x2b
 80011ce:	d101      	bne.n	80011d4 <mg_base64_decode_single+0x48>
    return 62;
 80011d0:	233e      	movs	r3, #62	@ 0x3e
 80011d2:	e00b      	b.n	80011ec <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80011d8:	d101      	bne.n	80011de <mg_base64_decode_single+0x52>
    return 63;
 80011da:	233f      	movs	r3, #63	@ 0x3f
 80011dc:	e006      	b.n	80011ec <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b3d      	cmp	r3, #61	@ 0x3d
 80011e2:	d101      	bne.n	80011e8 <mg_base64_decode_single+0x5c>
    return 64;
 80011e4:	2340      	movs	r3, #64	@ 0x40
 80011e6:	e001      	b.n	80011ec <mg_base64_decode_single+0x60>
  } else {
    return -1;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <mg_base64_decode>:
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
  len = mg_base64_final(to, len);
  return len;
}

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <mg_base64_decode+0x1c>
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	4413      	add	r3, r2
 8001212:	e000      	b.n	8001216 <mg_base64_decode+0x1e>
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	089a      	lsrs	r2, r3, #2
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	3301      	adds	r3, #1
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d375      	bcc.n	800131a <mg_base64_decode+0x122>
  while (src != NULL && src + 3 < end) {
 800122e:	e065      	b.n	80012fc <mg_base64_decode+0x104>
    int a = mg_base64_decode_single(src[0]),
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffa9 	bl	800118c <mg_base64_decode_single>
 800123a:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffa2 	bl	800118c <mg_base64_decode_single>
 8001248:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3302      	adds	r3, #2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff9b 	bl	800118c <mg_base64_decode_single>
 8001256:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3303      	adds	r3, #3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff94 	bl	800118c <mg_base64_decode_single>
 8001264:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	2b40      	cmp	r3, #64	@ 0x40
 800126a:	d058      	beq.n	800131e <mg_base64_decode+0x126>
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db55      	blt.n	800131e <mg_base64_decode+0x126>
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b40      	cmp	r3, #64	@ 0x40
 8001276:	d052      	beq.n	800131e <mg_base64_decode+0x126>
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db4f      	blt.n	800131e <mg_base64_decode+0x126>
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db4c      	blt.n	800131e <mg_base64_decode+0x126>
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db49      	blt.n	800131e <mg_base64_decode+0x126>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	b25a      	sxtb	r2, r3
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	111b      	asrs	r3, r3, #4
 8001294:	b25b      	sxtb	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b259      	sxtb	r1, r3
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	627a      	str	r2, [r7, #36]	@ 0x24
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	b2ca      	uxtb	r2, r1
 80012a6:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3302      	adds	r3, #2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b3d      	cmp	r3, #61	@ 0x3d
 80012b0:	d021      	beq.n	80012f6 <mg_base64_decode+0xfe>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	109b      	asrs	r3, r3, #2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b259      	sxtb	r1, r3
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	b2ca      	uxtb	r2, r1
 80012ce:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3303      	adds	r3, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b3d      	cmp	r3, #61	@ 0x3d
 80012d8:	d00d      	beq.n	80012f6 <mg_base64_decode+0xfe>
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b259      	sxtb	r1, r3
 80012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	b2ca      	uxtb	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <mg_base64_decode+0x114>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3303      	adds	r3, #3
 8001306:	6a3a      	ldr	r2, [r7, #32]
 8001308:	429a      	cmp	r2, r3
 800130a:	d891      	bhi.n	8001230 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	4413      	add	r3, r2
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
  return len;
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	e009      	b.n	800132e <mg_base64_decode+0x136>
  if (dl < n / 4 * 3 + 1) goto fail;
 800131a:	bf00      	nop
 800131c:	e000      	b.n	8001320 <mg_base64_decode+0x128>
      goto fail;
 800131e:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <mg_base64_decode+0x134>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
  return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3728      	adds	r7, #40	@ 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <mg_flash_next>:
// | 32-bit size | 32-bit KEY | ..data.. | ..pad.. | 32-bit size | ......
//
// In order to get to the next object, read its size, then align up.

// Traverse the list of saved objects
size_t mg_flash_next(char *p, char *end, uint32_t *key, size_t *size) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b08a      	sub	sp, #40	@ 0x28
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	603b      	str	r3, [r7, #0]
  size_t aligned_size = 0, align = mg_flash_write_align(), left = end - p;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
 8001348:	f022 f9e7 	bl	802371a <mg_flash_write_align>
 800134c:	6238      	str	r0, [r7, #32]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	61fb      	str	r3, [r7, #28]
  uint32_t *p32 = (uint32_t *) p, min_size = sizeof(uint32_t) * 2;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	2308      	movs	r3, #8
 800135c:	617b      	str	r3, [r7, #20]
  if (p32[0] != 0xffffffff && left > MG_ROUND_UP(min_size, align)) {
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001366:	d038      	beq.n	80013da <mg_flash_next+0xa4>
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <mg_flash_next+0x4e>
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	4413      	add	r3, r2
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	6a3a      	ldr	r2, [r7, #32]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	e000      	b.n	8001386 <mg_flash_next+0x50>
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4293      	cmp	r3, r2
 800138a:	d226      	bcs.n	80013da <mg_flash_next+0xa4>
    if (size) *size = (size_t) p32[0];
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <mg_flash_next+0x64>
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
    if (key) *key = p32[1];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <mg_flash_next+0x72>
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	601a      	str	r2, [r3, #0]
    aligned_size = MG_ROUND_UP(p32[0] + sizeof(uint32_t) * 2, align);
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d103      	bne.n	80013b6 <mg_flash_next+0x80>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3308      	adds	r3, #8
 80013b4:	e00a      	b.n	80013cc <mg_flash_next+0x96>
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	4413      	add	r3, r2
 80013be:	1dda      	adds	r2, r3, #7
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	6a3a      	ldr	r2, [r7, #32]
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (left < aligned_size) aligned_size = 0;  // Out of bounds, fail
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d201      	bcs.n	80013da <mg_flash_next+0xa4>
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return aligned_size;
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3728      	adds	r7, #40	@ 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <flash_last_sector>:

// Return the last sector of Bank 2
static char *flash_last_sector(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
  size_t ss = mg_flash_sector_size(), size = mg_flash_size();
 80013ea:	f022 f98d 	bl	8023708 <mg_flash_sector_size>
 80013ee:	60b8      	str	r0, [r7, #8]
 80013f0:	f022 f97e 	bl	80236f0 <mg_flash_size>
 80013f4:	6078      	str	r0, [r7, #4]
  char *base = (char *) mg_flash_start(), *last = base + size - ss;
 80013f6:	f022 f972 	bl	80236de <mg_flash_start>
 80013fa:	6038      	str	r0, [r7, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4413      	add	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
  if (mg_flash_bank() == 2) last -= size / 2;
 8001408:	f022 f98f 	bl	802372a <mg_flash_bank>
 800140c:	4603      	mov	r3, r0
 800140e:	2b02      	cmp	r3, #2
 8001410:	d105      	bne.n	800141e <flash_last_sector+0x3a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	425b      	negs	r3, r3
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  return last;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <mg_flash_load>:

// Find a saved object with a given key
bool mg_flash_load(void *sector, uint32_t key, void *buf, size_t len) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	@ 0x38
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  char *base = (char *) mg_flash_start(), *s = (char *) sector, *res = NULL;
 8001436:	f022 f952 	bl	80236de <mg_flash_start>
 800143a:	6278      	str	r0, [r7, #36]	@ 0x24
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  size_t ss = mg_flash_sector_size(), ofs = 0, n, sz;
 8001444:	f022 f960 	bl	8023708 <mg_flash_sector_size>
 8001448:	61f8      	str	r0, [r7, #28]
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  bool ok = false;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (s == NULL) s = flash_last_sector();
 8001454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <mg_flash_load+0x38>
 800145a:	f7ff ffc3 	bl	80013e4 <flash_last_sector>
 800145e:	6378      	str	r0, [r7, #52]	@ 0x34
  if (s < base || s >= base + mg_flash_size()) {
 8001460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	429a      	cmp	r2, r3
 8001466:	d343      	bcc.n	80014f0 <mg_flash_load+0xc8>
 8001468:	f022 f942 	bl	80236f0 <mg_flash_size>
 800146c:	4602      	mov	r2, r0
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001470:	4413      	add	r3, r2
 8001472:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001474:	429a      	cmp	r2, r3
 8001476:	d23b      	bcs.n	80014f0 <mg_flash_load+0xc8>
    MG_ERROR(("%p is outsize of flash", sector));
  } else if (((s - base) % ss) != 0) {
 8001478:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	fbb3 f2f2 	udiv	r2, r3, r2
 8001484:	69f9      	ldr	r1, [r7, #28]
 8001486:	fb01 f202 	mul.w	r2, r1, r2
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d130      	bne.n	80014f2 <mg_flash_load+0xca>
    MG_ERROR(("%p is not a sector boundary", sector));
  } else {
    uint32_t k, scanned = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
    while ((n = mg_flash_next(s + ofs, s + ss, &k, &sz)) > 0) {
 8001494:	e01b      	b.n	80014ce <mg_flash_load+0xa6>
      // MG_DEBUG((" > obj %lu, ofs %lu, key %x/%x", scanned, ofs, k, key));
      // mg_hexdump(s + ofs, n);
      if (k == key && sz == len) {
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d110      	bne.n	80014c0 <mg_flash_load+0x98>
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d10c      	bne.n	80014c0 <mg_flash_load+0x98>
        res = s + ofs + sizeof(uint32_t) * 2;
 80014a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a8:	3308      	adds	r3, #8
 80014aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014ac:	4413      	add	r3, r2
 80014ae:	623b      	str	r3, [r7, #32]
        memcpy(buf, res, len);  // Copy object
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	6a39      	ldr	r1, [r7, #32]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f021 f9de 	bl	8022876 <memcpy>
        ok = true;              // Keep scanning for the newer versions of it
 80014ba:	2301      	movs	r3, #1
 80014bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
      ofs += n, scanned++;
 80014c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4413      	add	r3, r2
 80014c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80014c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ca:	3301      	adds	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    while ((n = mg_flash_next(s + ofs, s + ss, &k, &sz)) > 0) {
 80014ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014d2:	18d0      	adds	r0, r2, r3
 80014d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	18d1      	adds	r1, r2, r3
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	f107 0210 	add.w	r2, r7, #16
 80014e2:	f7ff ff28 	bl	8001336 <mg_flash_next>
 80014e6:	61b8      	str	r0, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1d3      	bne.n	8001496 <mg_flash_load+0x6e>
 80014ee:	e000      	b.n	80014f2 <mg_flash_load+0xca>
    MG_ERROR(("%p is outsize of flash", sector));
 80014f0:	bf00      	nop
    }
    MG_DEBUG(("Scanned %u objects, key %x is @ %p", scanned, key, res));
  }
  return ok;
 80014f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3738      	adds	r7, #56	@ 0x38
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <mg_flash_sector_cleanup>:

// For all saved objects in the sector, delete old versions of objects
static void mg_flash_sector_cleanup(char *sector) {
 80014fe:	b590      	push	{r4, r7, lr}
 8001500:	b091      	sub	sp, #68	@ 0x44
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  // Buffer all saved objects into an IO buffer (backed by RAM)
  // erase sector, and re-save them.
  struct mg_iobuf io = {0, 0, 0, 2048};
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001516:	623b      	str	r3, [r7, #32]
  size_t ss = mg_flash_sector_size();
 8001518:	f022 f8f6 	bl	8023708 <mg_flash_sector_size>
 800151c:	6378      	str	r0, [r7, #52]	@ 0x34
  size_t n, size, size2, ofs = 0, hs = sizeof(uint32_t) * 2;
 800151e:	2300      	movs	r3, #0
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001522:	2308      	movs	r3, #8
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t key;
  // Traverse all objects
  MG_DEBUG(("Cleaning up sector %p", sector));
  while ((n = mg_flash_next(sector + ofs, sector + ss, &key, &size)) > 0) {
 8001526:	e035      	b.n	8001594 <mg_flash_sector_cleanup+0x96>
    // Delete an old copy of this object in the cache
    for (size_t o = 0; o < io.len; o += size2 + hs) {
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800152c:	e01e      	b.n	800156c <mg_flash_sector_cleanup+0x6e>
      uint32_t k = *(uint32_t *) (io.buf + o + sizeof(uint32_t));
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001532:	3304      	adds	r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	62bb      	str	r3, [r7, #40]	@ 0x28
      size2 = *(uint32_t *) (io.buf + o);
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153e:	4413      	add	r3, r2
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
      if (k == key) {
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001548:	429a      	cmp	r2, r3
 800154a:	d109      	bne.n	8001560 <mg_flash_sector_cleanup+0x62>
        mg_iobuf_del(&io, o, size2 + hs);
 800154c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800154e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001550:	441a      	add	r2, r3
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fa40 	bl	80069de <mg_iobuf_del>
        break;
 800155e:	e009      	b.n	8001574 <mg_flash_sector_cleanup+0x76>
    for (size_t o = 0; o < io.len; o += size2 + hs) {
 8001560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001564:	4413      	add	r3, r2
 8001566:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001568:	4413      	add	r3, r2
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001570:	429a      	cmp	r2, r3
 8001572:	d3dc      	bcc.n	800152e <mg_flash_sector_cleanup+0x30>
      }
    }
    // And add the new copy
    mg_iobuf_add(&io, io.len, sector + ofs, size + hs);
 8001574:	69f9      	ldr	r1, [r7, #28]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800157a:	18d4      	adds	r4, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001580:	4413      	add	r3, r2
 8001582:	f107 0014 	add.w	r0, r7, #20
 8001586:	4622      	mov	r2, r4
 8001588:	f005 f9d7 	bl	800693a <mg_iobuf_add>
    ofs += n;
 800158c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800158e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001590:	4413      	add	r3, r2
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while ((n = mg_flash_next(sector + ofs, sector + ss, &key, &size)) > 0) {
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001598:	18d0      	adds	r0, r2, r3
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159e:	18d1      	adds	r1, r2, r3
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	f107 020c 	add.w	r2, r7, #12
 80015a8:	f7ff fec5 	bl	8001336 <mg_flash_next>
 80015ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1b9      	bne.n	8001528 <mg_flash_sector_cleanup+0x2a>
  }
  // All objects are cached in RAM now
  if (mg_flash_erase(sector)) {  // Erase sector. If successful,
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f022 f9a7 	bl	8023908 <mg_flash_erase>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d022      	beq.n	8001606 <mg_flash_sector_cleanup+0x108>
    for (ofs = 0; ofs < io.len; ofs += size + hs) {  // Traverse cached objects
 80015c0:	2300      	movs	r3, #0
 80015c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015c4:	e01b      	b.n	80015fe <mg_flash_sector_cleanup+0x100>
      size = *(uint32_t *) (io.buf + ofs);
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ca:	4413      	add	r3, r2
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	613b      	str	r3, [r7, #16]
      key = *(uint32_t *) (io.buf + ofs + sizeof(uint32_t));
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d4:	3304      	adds	r3, #4
 80015d6:	4413      	add	r3, r2
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
      mg_flash_save(sector, key, io.buf + ofs + hs, size);  // Save to flash
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80015e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015e4:	440b      	add	r3, r1
 80015e6:	441a      	add	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4601      	mov	r1, r0
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f813 	bl	8001618 <mg_flash_save>
    for (ofs = 0; ofs < io.len; ofs += size + hs) {  // Traverse cached objects
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015f6:	4413      	add	r3, r2
 80015f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015fa:	4413      	add	r3, r2
 80015fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001602:	429a      	cmp	r2, r3
 8001604:	d3df      	bcc.n	80015c6 <mg_flash_sector_cleanup+0xc8>
    }
  }
  mg_iobuf_free(&io);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4618      	mov	r0, r3
 800160c:	f005 fa32 	bl	8006a74 <mg_iobuf_free>
}
 8001610:	bf00      	nop
 8001612:	3744      	adds	r7, #68	@ 0x44
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}

08001618 <mg_flash_save>:

// Save an object with a given key - append to the end of an object list
bool mg_flash_save(void *sector, uint32_t key, const void *buf, size_t len) {
 8001618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800161c:	b092      	sub	sp, #72	@ 0x48
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	603b      	str	r3, [r7, #0]
  char *base = (char *) mg_flash_start(), *s = (char *) sector;
 8001628:	f022 f859 	bl	80236de <mg_flash_start>
 800162c:	6338      	str	r0, [r7, #48]	@ 0x30
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	643b      	str	r3, [r7, #64]	@ 0x40
  size_t ss = mg_flash_sector_size(), ofs = 0, n;
 8001632:	f022 f869 	bl	8023708 <mg_flash_sector_size>
 8001636:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001638:	2300      	movs	r3, #0
 800163a:	647b      	str	r3, [r7, #68]	@ 0x44
  bool ok = false;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (s == NULL) s = flash_last_sector();
 8001642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <mg_flash_save+0x36>
 8001648:	f7ff fecc 	bl	80013e4 <flash_last_sector>
 800164c:	6438      	str	r0, [r7, #64]	@ 0x40
  if (s < base || s >= base + mg_flash_size()) {
 800164e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001652:	429a      	cmp	r2, r3
 8001654:	f0c0 8127 	bcc.w	80018a6 <mg_flash_save+0x28e>
 8001658:	f022 f84a 	bl	80236f0 <mg_flash_size>
 800165c:	4602      	mov	r2, r0
 800165e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001660:	4413      	add	r3, r2
 8001662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001664:	429a      	cmp	r2, r3
 8001666:	f080 811e 	bcs.w	80018a6 <mg_flash_save+0x28e>
    MG_ERROR(("%p is outsize of flash", sector));
  } else if (((s - base) % ss) != 0) {
 800166a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800166c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001672:	fbb3 f2f2 	udiv	r2, r3, r2
 8001676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001678:	fb01 f202 	mul.w	r2, r1, r2
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 8112 	bne.w	80018a8 <mg_flash_save+0x290>
    MG_ERROR(("%p is not a sector boundary", sector));
  } else {
 8001684:	466b      	mov	r3, sp
 8001686:	461d      	mov	r5, r3
    char ab[mg_flash_write_align()];  // Aligned write block
 8001688:	f022 f847 	bl	802371a <mg_flash_write_align>
 800168c:	4604      	mov	r4, r0
 800168e:	4623      	mov	r3, r4
 8001690:	3b01      	subs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001694:	2300      	movs	r3, #0
 8001696:	46a2      	mov	sl, r4
 8001698:	469b      	mov	fp, r3
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016ae:	2300      	movs	r3, #0
 80016b0:	46a0      	mov	r8, r4
 80016b2:	4699      	mov	r9, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016c8:	1de3      	adds	r3, r4, #7
 80016ca:	08db      	lsrs	r3, r3, #3
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	ebad 0d03 	sub.w	sp, sp, r3
 80016d2:	466b      	mov	r3, sp
 80016d4:	3300      	adds	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t hdr[2] = {(uint32_t) len, key};
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	617b      	str	r3, [r7, #20]
    size_t needed = sizeof(hdr) + len;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	3308      	adds	r3, #8
 80016e4:	623b      	str	r3, [r7, #32]
    size_t needed_aligned = MG_ROUND_UP(needed, sizeof(ab));
 80016e6:	2c00      	cmp	r4, #0
 80016e8:	d101      	bne.n	80016ee <mg_flash_save+0xd6>
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	e006      	b.n	80016fc <mg_flash_save+0xe4>
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	4423      	add	r3, r4
 80016f2:	3b01      	subs	r3, #1
 80016f4:	fbb3 f3f4 	udiv	r3, r3, r4
 80016f8:	fb04 f303 	mul.w	r3, r4, r3
 80016fc:	61fb      	str	r3, [r7, #28]
    while ((n = mg_flash_next(s + ofs, s + ss, NULL, NULL)) > 0) ofs += n;
 80016fe:	e003      	b.n	8001708 <mg_flash_save+0xf0>
 8001700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001704:	4413      	add	r3, r2
 8001706:	647b      	str	r3, [r7, #68]	@ 0x44
 8001708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800170a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800170c:	18d0      	adds	r0, r2, r3
 800170e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001712:	18d1      	adds	r1, r2, r3
 8001714:	2300      	movs	r3, #0
 8001716:	2200      	movs	r2, #0
 8001718:	f7ff fe0d 	bl	8001336 <mg_flash_next>
 800171c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800171e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ed      	bne.n	8001700 <mg_flash_save+0xe8>

    // If there is not enough space left, cleanup sector and re-eval ofs
    if (ofs + needed_aligned >= ss) {
 8001724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800172c:	429a      	cmp	r2, r3
 800172e:	d817      	bhi.n	8001760 <mg_flash_save+0x148>
      mg_flash_sector_cleanup(s);
 8001730:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001732:	f7ff fee4 	bl	80014fe <mg_flash_sector_cleanup>
      ofs = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	647b      	str	r3, [r7, #68]	@ 0x44
      while ((n = mg_flash_next(s + ofs, s + ss, NULL, NULL)) > 0) ofs += n;
 800173a:	e003      	b.n	8001744 <mg_flash_save+0x12c>
 800173c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800173e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001740:	4413      	add	r3, r2
 8001742:	647b      	str	r3, [r7, #68]	@ 0x44
 8001744:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001748:	18d0      	adds	r0, r2, r3
 800174a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800174c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174e:	18d1      	adds	r1, r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	2200      	movs	r2, #0
 8001754:	f7ff fdef 	bl	8001336 <mg_flash_next>
 8001758:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800175a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ed      	bne.n	800173c <mg_flash_save+0x124>
    }

    if (ofs + needed_aligned <= ss) {
 8001760:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001768:	429a      	cmp	r2, r3
 800176a:	f0c0 809a 	bcc.w	80018a2 <mg_flash_save+0x28a>
      // Enough space to save this object
      if (sizeof(ab) < sizeof(hdr)) {
 800176e:	2c07      	cmp	r4, #7
 8001770:	d81a      	bhi.n	80017a8 <mg_flash_save+0x190>
        // Flash write granularity is 32 bit or less, write with no buffering
        ok = mg_flash_write(s + ofs, hdr, sizeof(hdr));
 8001772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001776:	4413      	add	r3, r2
 8001778:	f107 0110 	add.w	r1, r7, #16
 800177c:	2208      	movs	r2, #8
 800177e:	4618      	mov	r0, r3
 8001780:	f022 f96c 	bl	8023a5c <mg_flash_write>
 8001784:	4603      	mov	r3, r0
 8001786:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (ok) mg_flash_write(s + ofs + sizeof(hdr), buf, len);
 800178a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8087 	beq.w	80018a2 <mg_flash_save+0x28a>
 8001794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001796:	3308      	adds	r3, #8
 8001798:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800179a:	4413      	add	r3, r2
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f022 f95b 	bl	8023a5c <mg_flash_write>
 80017a6:	e07c      	b.n	80018a2 <mg_flash_save+0x28a>
      } else {
        // Flash granularity is sizeof(hdr) or more. We need to save in
        // 3 chunks: initial block, bulk, rest. This is because we have
        // two memory chunks to write: hdr and buf, on aligned boundaries.
        n = sizeof(ab) - sizeof(hdr);      // Initial chunk that we write
 80017a8:	f1a4 0308 	sub.w	r3, r4, #8
 80017ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (n > len) n = len;              // is
 80017ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d901      	bls.n	80017ba <mg_flash_save+0x1a2>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        memset(ab, 0xff, sizeof(ab));      // initialized to all-one
 80017ba:	4622      	mov	r2, r4
 80017bc:	21ff      	movs	r1, #255	@ 0xff
 80017be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017c0:	f020 feb5 	bl	802252e <memset>
        memcpy(ab, hdr, sizeof(hdr));      // contains the header (key + size)
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	2208      	movs	r2, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017ce:	f021 f852 	bl	8022876 <memcpy>
        memcpy(ab + sizeof(hdr), buf, n);  // and an initial part of buf
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	3308      	adds	r3, #8
 80017d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	f021 f84b 	bl	8022876 <memcpy>
        MG_INFO(("saving initial block of %lu", sizeof(ab)));
        ok = mg_flash_write(s + ofs, ab, sizeof(ab));
 80017e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017e4:	4413      	add	r3, r2
 80017e6:	4622      	mov	r2, r4
 80017e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017ea:	4618      	mov	r0, r3
 80017ec:	f022 f936 	bl	8023a5c <mg_flash_write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (ok && len > n) {
 80017f6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d051      	beq.n	80018a2 <mg_flash_save+0x28a>
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001802:	429a      	cmp	r2, r3
 8001804:	d94d      	bls.n	80018a2 <mg_flash_save+0x28a>
          size_t n2 = MG_ROUND_DOWN(len - n, sizeof(ab));
 8001806:	2c00      	cmp	r4, #0
 8001808:	d103      	bne.n	8001812 <mg_flash_save+0x1fa>
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	e006      	b.n	8001820 <mg_flash_save+0x208>
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	fbb3 f3f4 	udiv	r3, r3, r4
 800181c:	fb04 f303 	mul.w	r3, r4, r3
 8001820:	61bb      	str	r3, [r7, #24]
          if (n2 > 0) {
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00d      	beq.n	8001844 <mg_flash_save+0x22c>
            MG_INFO(("saving bulk, %lu", n2));
            ok = mg_flash_write(s + ofs + sizeof(ab), (char *) buf + n, n2);
 8001828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800182a:	4423      	add	r3, r4
 800182c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800182e:	18d0      	adds	r0, r2, r3
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001834:	4413      	add	r3, r2
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4619      	mov	r1, r3
 800183a:	f022 f90f 	bl	8023a5c <mg_flash_write>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          }
          if (ok && len > n) {
 8001844:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001848:	2b00      	cmp	r3, #0
 800184a:	d02a      	beq.n	80018a2 <mg_flash_save+0x28a>
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001850:	429a      	cmp	r2, r3
 8001852:	d926      	bls.n	80018a2 <mg_flash_save+0x28a>
            size_t n3 = len - n - n2;
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001858:	1ad2      	subs	r2, r2, r3
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
            if (n3 > sizeof(ab)) n3 = sizeof(ab);
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	429c      	cmp	r4, r3
 8001864:	d200      	bcs.n	8001868 <mg_flash_save+0x250>
 8001866:	637c      	str	r4, [r7, #52]	@ 0x34
            memset(ab, 0xff, sizeof(ab));
 8001868:	4622      	mov	r2, r4
 800186a:	21ff      	movs	r1, #255	@ 0xff
 800186c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800186e:	f020 fe5e 	bl	802252e <memset>
            memcpy(ab, (char *) buf + n + n2, n3);
 8001872:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	4413      	add	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800187e:	4619      	mov	r1, r3
 8001880:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001882:	f020 fff8 	bl	8022876 <memcpy>
            MG_INFO(("saving rest, %lu", n3));
            ok = mg_flash_write(s + ofs + sizeof(ab) + n2, ab, sizeof(ab));
 8001886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001888:	18e2      	adds	r2, r4, r3
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4413      	add	r3, r2
 800188e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001890:	4413      	add	r3, r2
 8001892:	4622      	mov	r2, r4
 8001894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001896:	4618      	mov	r0, r3
 8001898:	f022 f8e0 	bl	8023a5c <mg_flash_write>
 800189c:	4603      	mov	r3, r0
 800189e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80018a2:	46ad      	mov	sp, r5
 80018a4:	e000      	b.n	80018a8 <mg_flash_save+0x290>
    MG_ERROR(("%p is outsize of flash", sector));
 80018a6:	bf00      	nop
      MG_DEBUG(("Sector space left: %lu bytes", ss - ofs - needed_aligned));
    } else {
      MG_ERROR(("Sector is full"));
    }
  }
  return ok;
 80018a8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3748      	adds	r7, #72	@ 0x48
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080018b6 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e002      	b.n	80018cc <mg_dns_free+0x16>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d1f7      	bne.n	80018c6 <mg_dns_free+0x10>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	601a      	str	r2, [r3, #0]
  free(d);
 80018de:	6838      	ldr	r0, [r7, #0]
 80018e0:	f020 fb40 	bl	8021f64 <free>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	3330      	adds	r3, #48	@ 0x30
 80018fa:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e00d      	b.n	8001920 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	d103      	bne.n	800191c <mg_resolve_cancel+0x30>
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	6938      	ldr	r0, [r7, #16]
 8001918:	f7ff ffcd 	bl	80018b6 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ee      	bne.n	8001904 <mg_resolve_cancel+0x18>
  }
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af04      	add	r7, sp, #16
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8001942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <mg_dns_parse_name_depth+0x24>
 8001948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <mg_dns_parse_name_depth+0x24>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8001954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001956:	2b05      	cmp	r3, #5
 8001958:	f340 8084 	ble.w	8001a64 <mg_dns_parse_name_depth+0x134>
 800195c:	2300      	movs	r3, #0
 800195e:	e093      	b.n	8001a88 <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <mg_dns_parse_name_depth+0x4c>
      i++;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3301      	adds	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
      break;
 800197a:	e07b      	b.n	8001a74 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d02f      	beq.n	80019e6 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	440a      	add	r2, r1
 8001994:	3201      	adds	r2, #1
 8001996:	68f9      	ldr	r1, [r7, #12]
 8001998:	440a      	add	r2, r1
 800199a:	7812      	ldrb	r2, [r2, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d919      	bls.n	80019de <mg_dns_parse_name_depth+0xae>
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d111      	bne.n	80019de <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 80019ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019bc:	3301      	adds	r3, #1
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff ffae 	bl	8001930 <mg_dns_parse_name_depth>
 80019d4:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <mg_dns_parse_name_depth+0xae>
        return 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	e054      	b.n	8001a88 <mg_dns_parse_name_depth+0x158>
      i += 2;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3302      	adds	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
      break;
 80019e4:	e046      	b.n	8001a74 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	441a      	add	r2, r3
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	4413      	add	r3, r2
 80019f0:	3301      	adds	r3, #1
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d801      	bhi.n	80019fc <mg_dns_parse_name_depth+0xcc>
 80019f8:	2300      	movs	r3, #0
 80019fa:	e045      	b.n	8001a88 <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 80019fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8001a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d204      	bcs.n	8001a14 <mg_dns_parse_name_depth+0xe4>
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0e:	4413      	add	r3, r2
 8001a10:	222e      	movs	r2, #46	@ 0x2e
 8001a12:	701a      	strb	r2, [r3, #0]
      j++;
 8001a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a16:	3301      	adds	r3, #1
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8001a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	4413      	add	r3, r2
 8001a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d90c      	bls.n	8001a40 <mg_dns_parse_name_depth+0x110>
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2a:	18d0      	adds	r0, r2, r3
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	3301      	adds	r3, #1
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f020 ff1b 	bl	8022876 <memcpy>
    j += n;
 8001a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4413      	add	r3, r2
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3301      	adds	r3, #1
 8001a50:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8001a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d204      	bcs.n	8001a64 <mg_dns_parse_name_depth+0x134>
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5e:	4413      	add	r3, r2
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	f63f af76 	bhi.w	8001960 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8001a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <mg_dns_parse_name_depth+0x156>
 8001a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
  return i;
 8001a86:	69fb      	ldr	r3, [r7, #28]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af04      	add	r7, sp, #16
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9302      	str	r3, [sp, #8]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff ff3d 	bl	8001930 <mg_dns_parse_name_depth>
 8001ab6:	4603      	mov	r3, r0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4413      	add	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8001ade:	2208      	movs	r2, #8
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	6a38      	ldr	r0, [r7, #32]
 8001ae4:	f020 fd23 	bl	802252e <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b0b      	cmp	r3, #11
 8001aec:	d801      	bhi.n	8001af2 <mg_dns_parse_rr+0x32>
 8001aee:	2300      	movs	r3, #0
 8001af0:	e074      	b.n	8001bdc <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001af8:	d901      	bls.n	8001afe <mg_dns_parse_rr+0x3e>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e06e      	b.n	8001bdc <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d301      	bcc.n	8001b0a <mg_dns_parse_rr+0x4a>
 8001b06:	2300      	movs	r3, #0
 8001b08:	e068      	b.n	8001bdc <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff ffbb 	bl	8001a90 <mg_dns_parse_name>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	801a      	strh	r2, [r3, #0]
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <mg_dns_parse_rr+0x6e>
    return 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e056      	b.n	8001bdc <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	3304      	adds	r3, #4
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d901      	bls.n	8001b46 <mg_dns_parse_rr+0x86>
 8001b42:	2300      	movs	r3, #0
 8001b44:	e04a      	b.n	8001bdc <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3b04      	subs	r3, #4
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3b03      	subs	r3, #3
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3b02      	subs	r3, #2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <mg_dns_parse_rr+0xcc>
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	e027      	b.n	8001bdc <mg_dns_parse_rr+0x11c>

  s += 6;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3306      	adds	r3, #6
 8001b90:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d901      	bls.n	8001b9e <mg_dns_parse_rr+0xde>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e01e      	b.n	8001bdc <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3b02      	subs	r3, #2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	88db      	ldrh	r3, [r3, #6]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d201      	bcs.n	8001bce <mg_dns_parse_rr+0x10e>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e006      	b.n	8001bdc <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	88db      	ldrh	r3, [r3, #6]
 8001bd8:	4413      	add	r3, r2
 8001bda:	330a      	adds	r3, #10
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	@ 0x38
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 8001bf8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f020 fc95 	bl	802252e <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b0b      	cmp	r3, #11
 8001c08:	d801      	bhi.n	8001c0e <mg_dns_parse+0x2a>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e09b      	b.n	8001d46 <mg_dns_parse+0x162>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	889b      	ldrh	r3, [r3, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f014 f9eb 	bl	8015fee <mg_ntohs>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d901      	bls.n	8001c22 <mg_dns_parse+0x3e>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e091      	b.n	8001d46 <mg_dns_parse+0x162>
  num_answers = mg_ntohs(h->num_answers);
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	88db      	ldrh	r3, [r3, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f014 f9e1 	bl	8015fee <mg_ntohs>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8001c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c32:	2b0a      	cmp	r3, #10
 8001c34:	d901      	bls.n	8001c3a <mg_dns_parse+0x56>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
    num_answers = 10;  // Sanity cap
 8001c36:	230a      	movs	r3, #10
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f014 f9d5 	bl	8015fee <mg_ntohs>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c50:	e015      	b.n	8001c7e <mg_dns_parse+0x9a>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7ff ff2e 	bl	8001ac0 <mg_dns_parse_rr>
 8001c64:	61f8      	str	r0, [r7, #28]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <mg_dns_parse+0x8c>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e06a      	b.n	8001d46 <mg_dns_parse+0x162>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8001c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4413      	add	r3, r2
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	889b      	ldrh	r3, [r3, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f014 f9b3 	bl	8015fee <mg_ntohs>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d3df      	bcc.n	8001c52 <mg_dns_parse+0x6e>
  }
  for (i = 0; i < num_answers; i++) {
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c96:	e051      	b.n	8001d3c <mg_dns_parse+0x158>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff ff0b 	bl	8001ac0 <mg_dns_parse_rr>
 8001caa:	61f8      	str	r0, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <mg_dns_parse+0xd2>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e047      	b.n	8001d46 <mg_dns_parse+0x162>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3318      	adds	r3, #24
 8001cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fee3 	bl	8001a90 <mg_dns_parse_name>
    ofs += n;
 8001cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4413      	add	r3, r2
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8001cd2:	8b7b      	ldrh	r3, [r7, #26]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d114      	bne.n	8001d02 <mg_dns_parse+0x11e>
 8001cd8:	8afb      	ldrh	r3, [r7, #22]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d111      	bne.n	8001d02 <mg_dns_parse+0x11e>
 8001cde:	8b3b      	ldrh	r3, [r7, #24]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10e      	bne.n	8001d02 <mg_dns_parse+0x11e>
      dm->addr.is_ip6 = false;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	3a04      	subs	r2, #4
 8001cf2:	68f9      	ldr	r1, [r7, #12]
 8001cf4:	440a      	add	r2, r1
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001d00:	e020      	b.n	8001d44 <mg_dns_parse+0x160>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8001d02:	8b7b      	ldrh	r3, [r7, #26]
 8001d04:	2b10      	cmp	r3, #16
 8001d06:	d116      	bne.n	8001d36 <mg_dns_parse+0x152>
 8001d08:	8afb      	ldrh	r3, [r7, #22]
 8001d0a:	2b1c      	cmp	r3, #28
 8001d0c:	d113      	bne.n	8001d36 <mg_dns_parse+0x152>
 8001d0e:	8b3b      	ldrh	r3, [r7, #24]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d110      	bne.n	8001d36 <mg_dns_parse+0x152>
      dm->addr.is_ip6 = true;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1d18      	adds	r0, r3, #4
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	3b10      	subs	r3, #16
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	2210      	movs	r2, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f020 fda4 	bl	8022876 <memcpy>
      dm->resolved = true;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001d34:	e006      	b.n	8001d44 <mg_dns_parse+0x160>
  for (i = 0; i < num_answers; i++) {
 8001d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d38:	3301      	adds	r3, #1
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3a9      	bcc.n	8001c98 <mg_dns_parse+0xb4>
    }
  }
  return true;
 8001d44:	2301      	movs	r3, #1
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3730      	adds	r7, #48	@ 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b0d0      	sub	sp, #320	@ 0x140
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d5a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d5e:	6018      	str	r0, [r3, #0]
 8001d60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d64:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d68:	6019      	str	r1, [r3, #0]
 8001d6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d6e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d72:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8001d74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d78:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	3330      	adds	r3, #48	@ 0x30
 8001d82:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  if (ev == MG_EV_POLL) {
 8001d86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d12d      	bne.n	8001df0 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8001d94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 8001da6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001db0:	e019      	b.n	8001de6 <dns_cb+0x96>
      tmp = d->next;
 8001db2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8001dbc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dc0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dc4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001dc8:	4290      	cmp	r0, r2
 8001dca:	eb71 0303 	sbcs.w	r3, r1, r3
 8001dce:	d206      	bcs.n	8001dde <dns_cb+0x8e>
 8001dd0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	496a      	ldr	r1, [pc, #424]	@ (8001f80 <dns_cb+0x230>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fab3 	bl	8002344 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 8001dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001de2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001de6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1e1      	bne.n	8001db2 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 8001dee:	e0c2      	b.n	8001f76 <dns_cb+0x226>
  } else if (ev == MG_EV_READ) {
 8001df0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001df4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b07      	cmp	r3, #7
 8001dfc:	f040 8094 	bne.w	8001f28 <dns_cb+0x1d8>
    int resolved = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8001e06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e0a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e16:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f107 0210 	add.w	r2, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7ff fede 	bl	8001be4 <mg_dns_parse>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <dns_cb+0x106>
      mg_hexdump(c->recv.buf, c->recv.len);
 8001e34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e38:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f005 fcc8 	bl	80077e4 <mg_hexdump>
 8001e54:	e060      	b.n	8001f18 <dns_cb+0x1c8>
      for (d = *head; d != NULL; d = tmp) {
 8001e56:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001e60:	e056      	b.n	8001f10 <dns_cb+0x1c0>
        tmp = d->next;
 8001e62:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        if (dm.txnid != d->txnid) continue;
 8001e6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e70:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e74:	881a      	ldrh	r2, [r3, #0]
 8001e76:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e7a:	8a1b      	ldrh	r3, [r3, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d142      	bne.n	8001f06 <dns_cb+0x1b6>
        if (d->c->is_resolving) {
 8001e80:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d02e      	beq.n	8001ef2 <dns_cb+0x1a2>
          if (dm.resolved) {
 8001e94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e98:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e9c:	789b      	ldrb	r3, [r3, #2]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01d      	beq.n	8001ede <dns_cb+0x18e>
            dm.addr.port = d->c->rem.port;  // Save port
 8001ea2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001eaa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001eae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001eb2:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8001eb4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ebe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ec2:	f102 041c 	add.w	r4, r2, #28
 8001ec6:	1d1d      	adds	r5, r3, #4
 8001ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	6023      	str	r3, [r4, #0]
            mg_connect_resolved(d->c);
 8001ed0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fd20 	bl	800b91c <mg_connect_resolved>
 8001edc:	e009      	b.n	8001ef2 <dns_cb+0x1a2>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8001ede:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001ee2:	6858      	ldr	r0, [r3, #4]
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	3318      	adds	r3, #24
 8001eea:	461a      	mov	r2, r3
 8001eec:	4925      	ldr	r1, [pc, #148]	@ (8001f84 <dns_cb+0x234>)
 8001eee:	f000 fa29 	bl	8002344 <mg_error>
        mg_dns_free(head, d);
 8001ef2:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001ef6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001efa:	f7ff fcdc 	bl	80018b6 <mg_dns_free>
        resolved = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001f04:	e000      	b.n	8001f08 <dns_cb+0x1b8>
        if (dm.txnid != d->txnid) continue;
 8001f06:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8001f08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001f0c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f10:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1a4      	bne.n	8001e62 <dns_cb+0x112>
    c->recv.len = 0;
 8001f18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f26:	e026      	b.n	8001f76 <dns_cb+0x226>
  } else if (ev == MG_EV_CLOSE) {
 8001f28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f2c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	d11f      	bne.n	8001f76 <dns_cb+0x226>
    for (d = *head; d != NULL; d = tmp) {
 8001f36:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f40:	e015      	b.n	8001f6e <dns_cb+0x21e>
      tmp = d->next;
 8001f42:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
      mg_error(d->c, "DNS error");
 8001f4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	490d      	ldr	r1, [pc, #52]	@ (8001f88 <dns_cb+0x238>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f9f5 	bl	8002344 <mg_error>
      mg_dns_free(head, d);
 8001f5a:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f5e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001f62:	f7ff fca8 	bl	80018b6 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8001f66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001f6a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001f6e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e5      	bne.n	8001f42 <dns_cb+0x1f2>
}
 8001f76:	bf00      	nop
 8001f78:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f80:	08023c40 	.word	0x08023c40
 8001f84:	08023c4c 	.word	0x08023c4c
 8001f88:	08023c64 	.word	0x08023c64

08001f8c <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b0cb      	sub	sp, #300	@ 0x12c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8001f96:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8001f9a:	6020      	str	r0, [r4, #0]
 8001f9c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8001fa0:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8001fa4:	6001      	str	r1, [r0, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001fac:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001fb6:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8001fba:	460a      	mov	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f020 fab0 	bl	802252e <memset>
  pkt.header.txnid = mg_htons(txnid);
 8001fce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001fd2:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f014 f808 	bl	8015fee <mg_ntohs>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001fe6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fea:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8001fec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ff0:	f013 fffd 	bl	8015fee <mg_ntohs>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001ffc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002000:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8002002:	2001      	movs	r0, #1
 8002004:	f013 fff3 	bl	8015fee <mg_ntohs>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002010:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002014:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800201c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002020:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002024:	e054      	b.n	80020d0 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 8002026:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800202a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b2e      	cmp	r3, #46	@ 0x2e
 800203c:	d009      	beq.n	8002052 <mg_dns_send+0xc6>
 800203e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002042:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800204e:	429a      	cmp	r2, r3
 8002050:	d32f      	bcc.n	80020b2 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8002052:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002056:	b2da      	uxtb	r2, r3
 8002058:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800205c:	b2db      	uxtb	r3, r3
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	b2d9      	uxtb	r1, r3
 8002062:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002066:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800206a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800206e:	4413      	add	r3, r2
 8002070:	330c      	adds	r3, #12
 8002072:	460a      	mov	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8002076:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800207a:	3301      	adds	r3, #1
 800207c:	f107 0214 	add.w	r2, r7, #20
 8002080:	3308      	adds	r3, #8
 8002082:	4413      	add	r3, r2
 8002084:	1d18      	adds	r0, r3, #4
 8002086:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800208a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002096:	18d1      	adds	r1, r2, r3
 8002098:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800209c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	f020 fbe7 	bl	8022876 <memcpy>
      n = i + 1;
 80020a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80020ac:	3301      	adds	r3, #1
 80020ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 80020b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80020b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d209      	bcs.n	80020da <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80020c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80020ca:	3301      	adds	r3, #1
 80020cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80020d4:	2bfa      	cmp	r3, #250	@ 0xfa
 80020d6:	d9a6      	bls.n	8002026 <mg_dns_send+0x9a>
 80020d8:	e000      	b.n	80020dc <mg_dns_send+0x150>
    if (i >= name->len) break;
 80020da:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80020dc:	f107 0214 	add.w	r2, r7, #20
 80020e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020e4:	3308      	adds	r3, #8
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	2205      	movs	r2, #5
 80020ec:	4916      	ldr	r1, [pc, #88]	@ (8002148 <mg_dns_send+0x1bc>)
 80020ee:	4618      	mov	r0, r3
 80020f0:	f020 fbc1 	bl	8022876 <memcpy>
  n += 5;
 80020f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020f8:	3305      	adds	r3, #5
 80020fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80020fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002102:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <mg_dns_send+0x194>
 800210c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002110:	3b03      	subs	r3, #3
 8002112:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002116:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800211a:	4413      	add	r3, r2
 800211c:	221c      	movs	r2, #28
 800211e:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8002120:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002124:	f103 020c 	add.w	r2, r3, #12
 8002128:	f107 0114 	add.w	r1, r7, #20
 800212c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002130:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f009 fe27 	bl	800bd88 <mg_send>
 800213a:	4603      	mov	r3, r0
}
 800213c:	4618      	mov	r0, r3
 800213e:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop
 8002148:	08023c70 	.word	0x08023c70

0800214c <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 800214c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8002168:	493f      	ldr	r1, [pc, #252]	@ (8002268 <mg_sendnsreq+0x11c>)
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f8ea 	bl	8002344 <mg_error>
 8002170:	e017      	b.n	80021a2 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d113      	bne.n	80021a2 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6858      	ldr	r0, [r3, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	2300      	movs	r3, #0
 8002184:	2200      	movs	r2, #0
 8002186:	f006 fea9 	bl	8008edc <mg_connect>
 800218a:	4602      	mov	r2, r0
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a33      	ldr	r2, [pc, #204]	@ (800226c <mg_sendnsreq+0x120>)
 800219e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d104      	bne.n	80021b4 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 80021aa:	4931      	ldr	r1, [pc, #196]	@ (8002270 <mg_sendnsreq+0x124>)
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f8c9 	bl	8002344 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 80021b2:	e053      	b.n	800225c <mg_sendnsreq+0x110>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80021b4:	2118      	movs	r1, #24
 80021b6:	2001      	movs	r0, #1
 80021b8:	f01f feb0 	bl	8021f1c <calloc>
 80021bc:	4603      	mov	r3, r0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 80021c6:	492b      	ldr	r1, [pc, #172]	@ (8002274 <mg_sendnsreq+0x128>)
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f8bb 	bl	8002344 <mg_error>
}
 80021ce:	e045      	b.n	800225c <mg_sendnsreq+0x110>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <mg_sendnsreq+0x9c>
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	8a1b      	ldrh	r3, [r3, #16]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	e000      	b.n	80021ea <mg_sendnsreq+0x9e>
 80021e8:	2201      	movs	r2, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8002200:	f7fe fd56 	bl	8000cb0 <mg_millis>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	17c8      	asrs	r0, r1, #31
 800220c:	460c      	mov	r4, r1
 800220e:	4605      	mov	r5, r0
 8002210:	eb12 0804 	adds.w	r8, r2, r4
 8002214:	eb43 0905 	adc.w	r9, r3, r5
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6858      	ldr	r0, [r3, #4]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	8a1a      	ldrh	r2, [r3, #16]
 800223a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	f7ff fea4 	bl	8001f8c <mg_dns_send>
 8002244:	4603      	mov	r3, r0
 8002246:	f083 0301 	eor.w	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <mg_sendnsreq+0x110>
      mg_error(dnsc->c, "DNS send");
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4908      	ldr	r1, [pc, #32]	@ (8002278 <mg_sendnsreq+0x12c>)
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f874 	bl	8002344 <mg_error>
}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002266:	bf00      	nop
 8002268:	08023c78 	.word	0x08023c78
 800226c:	08001d51 	.word	0x08001d51
 8002270:	08023ca4 	.word	0x08023ca4
 8002274:	08023cb0 	.word	0x08023cb0
 8002278:	08023cbc 	.word	0x08023cbc

0800227c <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f013 fd9e 	bl	8015dce <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f013 fdce 	bl	8015e34 <mg_url_port>
 8002298:	4603      	mov	r3, r0
 800229a:	4618      	mov	r0, r3
 800229c:	f013 fea7 	bl	8015fee <mg_ntohs>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	331c      	adds	r3, #28
 80022ac:	461a      	mov	r2, r3
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022b6:	f006 fd5c 	bl	8008d72 <mg_aton>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f009 fb2b 	bl	800b91c <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 80022c6:	e019      	b.n	80022fc <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	7e1b      	ldrb	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <mg_resolve+0x5e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	330c      	adds	r3, #12
 80022d8:	e002      	b.n	80022e0 <mg_resolve+0x64>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	7e1b      	ldrb	r3, [r3, #24]
 80022ee:	f107 010c 	add.w	r1, r7, #12
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff28 	bl	800214c <mg_sendnsreq>
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <mg_call+0x24>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <mg_call+0x38>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	4798      	blx	r3
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8002344:	b40e      	push	{r1, r2, r3}
 8002346:	b580      	push	{r7, lr}
 8002348:	b095      	sub	sp, #84	@ 0x54
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 800234e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002352:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	f107 0010 	add.w	r0, r7, #16
 800235c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800235e:	2140      	movs	r1, #64	@ 0x40
 8002360:	f009 ff42 	bl	800c1e8 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800236a:	f043 0320 	orr.w	r3, r3, #32
 800236e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	461a      	mov	r2, r3
 8002378:	2100      	movs	r1, #0
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffc2 	bl	8002304 <mg_call>
}
 8002380:	bf00      	nop
 8002382:	3754      	adds	r7, #84	@ 0x54
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800238a:	b003      	add	sp, #12
 800238c:	4770      	bx	lr

0800238e <is_digit>:
#endif




static bool is_digit(int c) {
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b2f      	cmp	r3, #47	@ 0x2f
 800239a:	dd04      	ble.n	80023a6 <is_digit+0x18>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b39      	cmp	r3, #57	@ 0x39
 80023a0:	dc01      	bgt.n	80023a6 <is_digit+0x18>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <is_digit+0x1a>
 80023a6:	2300      	movs	r3, #0
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	b2db      	uxtb	r3, r3
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <addexp>:

static int addexp(char *buf, int e, int sign) {
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  int n = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	617a      	str	r2, [r7, #20]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	2265      	movs	r2, #101	@ 0x65
 80023da:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	617a      	str	r2, [r7, #20]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80023f4:	dd01      	ble.n	80023fa <addexp+0x3e>
 80023f6:	2300      	movs	r3, #0
 80023f8:	e057      	b.n	80024aa <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b09      	cmp	r3, #9
 80023fe:	dc07      	bgt.n	8002410 <addexp+0x54>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	617a      	str	r2, [r7, #20]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	2230      	movs	r2, #48	@ 0x30
 800240e:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b63      	cmp	r3, #99	@ 0x63
 8002414:	dd1c      	ble.n	8002450 <addexp+0x94>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4a27      	ldr	r2, [pc, #156]	@ (80024b8 <addexp+0xfc>)
 800241a:	fb82 1203 	smull	r1, r2, r2, r3
 800241e:	1152      	asrs	r2, r2, #5
 8002420:	17db      	asrs	r3, r3, #31
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b2da      	uxtb	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1c59      	adds	r1, r3, #1
 800242a:	6179      	str	r1, [r7, #20]
 800242c:	4619      	mov	r1, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	440b      	add	r3, r1
 8002432:	3230      	adds	r2, #48	@ 0x30
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4a1f      	ldr	r2, [pc, #124]	@ (80024b8 <addexp+0xfc>)
 800243c:	fb82 1203 	smull	r1, r2, r2, r3
 8002440:	1151      	asrs	r1, r2, #5
 8002442:	17da      	asrs	r2, r3, #31
 8002444:	1a8a      	subs	r2, r1, r2
 8002446:	2164      	movs	r1, #100	@ 0x64
 8002448:	fb01 f202 	mul.w	r2, r1, r2
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b09      	cmp	r3, #9
 8002454:	dd1d      	ble.n	8002492 <addexp+0xd6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4a18      	ldr	r2, [pc, #96]	@ (80024bc <addexp+0x100>)
 800245a:	fb82 1203 	smull	r1, r2, r2, r3
 800245e:	1092      	asrs	r2, r2, #2
 8002460:	17db      	asrs	r3, r3, #31
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b2da      	uxtb	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	1c59      	adds	r1, r3, #1
 800246a:	6179      	str	r1, [r7, #20]
 800246c:	4619      	mov	r1, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	440b      	add	r3, r1
 8002472:	3230      	adds	r2, #48	@ 0x30
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <addexp+0x100>)
 800247c:	fb83 1302 	smull	r1, r3, r3, r2
 8002480:	1099      	asrs	r1, r3, #2
 8002482:	17d3      	asrs	r3, r2, #31
 8002484:	1ac9      	subs	r1, r1, r3
 8002486:	460b      	mov	r3, r1
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1c59      	adds	r1, r3, #1
 800249a:	6179      	str	r1, [r7, #20]
 800249c:	4619      	mov	r1, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	440b      	add	r3, r1
 80024a2:	3230      	adds	r2, #48	@ 0x30
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
  return n;
 80024a8:	697b      	ldr	r3, [r7, #20]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	51eb851f 	.word	0x51eb851f
 80024bc:	66666667 	.word	0x66666667

080024c0 <xisinf>:

static int xisinf(double x) {
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80024ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80024d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	000a      	movs	r2, r1
 80024e0:	2300      	movs	r3, #0
 80024e2:	4613      	mov	r3, r2
 80024e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024e8:	4a08      	ldr	r2, [pc, #32]	@ (800250c <xisinf+0x4c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d106      	bne.n	80024fc <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 80024ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f2:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <xisinf+0x3c>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <xisinf+0x3e>
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	7ff00000 	.word	0x7ff00000

08002510 <xisnan>:

static int xisnan(double x) {
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800251a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800251e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	000a      	movs	r2, r1
 8002530:	2300      	movs	r3, #0
 8002532:	4613      	mov	r3, r2
 8002534:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8002538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800253c:	4613      	mov	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002548:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 800254a:	4a06      	ldr	r2, [pc, #24]	@ (8002564 <xisnan+0x54>)
 800254c:	4293      	cmp	r3, r2
 800254e:	bf8c      	ite	hi
 8002550:	2301      	movhi	r3, #1
 8002552:	2300      	movls	r3, #0
 8002554:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	7ff00000 	.word	0x7ff00000

08002568 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b09e      	sub	sp, #120	@ 0x78
 800256c:	af02      	add	r7, sp, #8
 800256e:	6178      	str	r0, [r7, #20]
 8002570:	6139      	str	r1, [r7, #16]
 8002572:	ed87 0b02 	vstr	d0, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800257e:	2300      	movs	r3, #0
 8002580:	667b      	str	r3, [r7, #100]	@ 0x64
 8002582:	2300      	movs	r3, #0
 8002584:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8002586:	ed97 7b02 	vldr	d7, [r7, #8]
 800258a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	d107      	bne.n	80025a4 <mg_dtoa+0x3c>
 8002594:	4bb1      	ldr	r3, [pc, #708]	@ (800285c <mg_dtoa+0x2f4>)
 8002596:	4ab2      	ldr	r2, [pc, #712]	@ (8002860 <mg_dtoa+0x2f8>)
 8002598:	6939      	ldr	r1, [r7, #16]
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f009 fe4c 	bl	800c238 <mg_snprintf>
 80025a0:	4603      	mov	r3, r0
 80025a2:	e266      	b.n	8002a72 <mg_dtoa+0x50a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80025a4:	ed97 0b02 	vldr	d0, [r7, #8]
 80025a8:	f7ff ff8a 	bl	80024c0 <xisinf>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d010      	beq.n	80025d4 <mg_dtoa+0x6c>
 80025b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80025b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	dd01      	ble.n	80025c4 <mg_dtoa+0x5c>
 80025c0:	4ba8      	ldr	r3, [pc, #672]	@ (8002864 <mg_dtoa+0x2fc>)
 80025c2:	e000      	b.n	80025c6 <mg_dtoa+0x5e>
 80025c4:	4ba8      	ldr	r3, [pc, #672]	@ (8002868 <mg_dtoa+0x300>)
 80025c6:	4aa6      	ldr	r2, [pc, #664]	@ (8002860 <mg_dtoa+0x2f8>)
 80025c8:	6939      	ldr	r1, [r7, #16]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f009 fe34 	bl	800c238 <mg_snprintf>
 80025d0:	4603      	mov	r3, r0
 80025d2:	e24e      	b.n	8002a72 <mg_dtoa+0x50a>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80025d4:	ed97 0b02 	vldr	d0, [r7, #8]
 80025d8:	f7ff ff9a 	bl	8002510 <xisnan>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <mg_dtoa+0x8a>
 80025e2:	4ba2      	ldr	r3, [pc, #648]	@ (800286c <mg_dtoa+0x304>)
 80025e4:	4a9e      	ldr	r2, [pc, #632]	@ (8002860 <mg_dtoa+0x2f8>)
 80025e6:	6939      	ldr	r1, [r7, #16]
 80025e8:	6978      	ldr	r0, [r7, #20]
 80025ea:	f009 fe25 	bl	800c238 <mg_snprintf>
 80025ee:	4603      	mov	r3, r0
 80025f0:	e23f      	b.n	8002a72 <mg_dtoa+0x50a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80025f2:	ed97 7b02 	vldr	d7, [r7, #8]
 80025f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	d50d      	bpl.n	800261c <mg_dtoa+0xb4>
 8002600:	ed97 7b02 	vldr	d7, [r7, #8]
 8002604:	eeb1 7b47 	vneg.f64	d7, d7
 8002608:	ed87 7b02 	vstr	d7, [r7, #8]
 800260c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002612:	3370      	adds	r3, #112	@ 0x70
 8002614:	443b      	add	r3, r7
 8002616:	222d      	movs	r2, #45	@ 0x2d
 8002618:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 800261c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002620:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b91      	ldr	r3, [pc, #580]	@ (8002870 <mg_dtoa+0x308>)
 800262a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 800262e:	e007      	b.n	8002640 <mg_dtoa+0xd8>
 8002630:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002634:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002638:	ee27 7b06 	vmul.f64	d7, d7, d6
 800263c:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8002640:	ed97 7b02 	vldr	d7, [r7, #8]
 8002644:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002648:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	db0c      	blt.n	800266c <mg_dtoa+0x104>
 8002652:	ed97 5b02 	vldr	d5, [r7, #8]
 8002656:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800265a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800265e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002662:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	dae1      	bge.n	8002630 <mg_dtoa+0xc8>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 800266c:	e007      	b.n	800267e <mg_dtoa+0x116>
 800266e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002672:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002676:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800267a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800267e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002682:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002686:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d80c      	bhi.n	80026aa <mg_dtoa+0x142>
 8002690:	ed97 5b02 	vldr	d5, [r7, #8]
 8002694:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002698:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800269c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80026a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	d9e1      	bls.n	800266e <mg_dtoa+0x106>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026ae:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80026b2:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 80026b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80026ba:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80026be:	e00a      	b.n	80026d6 <mg_dtoa+0x16e>
 80026c0:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80026c4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80026c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026cc:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80026d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026d2:	3301      	adds	r3, #1
 80026d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	429a      	cmp	r2, r3
 80026dc:	dbf0      	blt.n	80026c0 <mg_dtoa+0x158>
  d += t;
 80026de:	ed97 6b02 	vldr	d6, [r7, #8]
 80026e2:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80026e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026ea:	ed87 7b02 	vstr	d7, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002870 <mg_dtoa+0x308>)
 80026f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 80026f8:	e00a      	b.n	8002710 <mg_dtoa+0x1a8>
 80026fa:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80026fe:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002702:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002706:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800270a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800270c:	3301      	adds	r3, #1
 800270e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002710:	ed97 7b02 	vldr	d7, [r7, #8]
 8002714:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002718:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002720:	db0c      	blt.n	800273c <mg_dtoa+0x1d4>
 8002722:	ed97 5b02 	vldr	d5, [r7, #8]
 8002726:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800272a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800272e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8002732:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	dade      	bge.n	80026fa <mg_dtoa+0x192>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 800273c:	e00a      	b.n	8002754 <mg_dtoa+0x1ec>
 800273e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002742:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002746:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800274a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800274e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002750:	3b01      	subs	r3, #1
 8002752:	663b      	str	r3, [r7, #96]	@ 0x60
 8002754:	ed97 7b02 	vldr	d7, [r7, #8]
 8002758:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800275c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	d50c      	bpl.n	8002780 <mg_dtoa+0x218>
 8002766:	ed97 5b02 	vldr	d5, [r7, #8]
 800276a:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800276e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002772:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002776:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	d4de      	bmi.n	800273e <mg_dtoa+0x1d6>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8002780:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	429a      	cmp	r2, r3
 8002786:	db2d      	blt.n	80027e4 <mg_dtoa+0x27c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	dd2a      	ble.n	80027e4 <mg_dtoa+0x27c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800278e:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8002792:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002796:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f107 0018 	add.w	r0, r7, #24
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	eeb0 0b45 	vmov.f64	d0, d5
 80027a6:	2128      	movs	r1, #40	@ 0x28
 80027a8:	f7ff fede 	bl	8002568 <mg_dtoa>
 80027ac:	4603      	mov	r3, r0
 80027ae:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 80027b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80027b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027b4:	4413      	add	r3, r2
 80027b6:	f107 0218 	add.w	r2, r7, #24
 80027ba:	4413      	add	r3, r2
 80027bc:	222b      	movs	r2, #43	@ 0x2b
 80027be:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fdfb 	bl	80023bc <addexp>
 80027c6:	4602      	mov	r2, r0
 80027c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027ca:	4413      	add	r3, r2
 80027cc:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80027ce:	f107 0318 	add.w	r3, r7, #24
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027d6:	4a27      	ldr	r2, [pc, #156]	@ (8002874 <mg_dtoa+0x30c>)
 80027d8:	6939      	ldr	r1, [r7, #16]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f009 fd2c 	bl	800c238 <mg_snprintf>
 80027e0:	4603      	mov	r3, r0
 80027e2:	e146      	b.n	8002a72 <mg_dtoa+0x50a>
  } else if (e <= -width && width > 1) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	425b      	negs	r3, r3
 80027e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027ea:	429a      	cmp	r2, r3
 80027ec:	dc2e      	bgt.n	800284c <mg_dtoa+0x2e4>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	dd2b      	ble.n	800284c <mg_dtoa+0x2e4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80027f4:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80027f8:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80027fc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	f107 0018 	add.w	r0, r7, #24
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	eeb0 0b45 	vmov.f64	d0, d5
 800280c:	2128      	movs	r1, #40	@ 0x28
 800280e:	f7ff feab 	bl	8002568 <mg_dtoa>
 8002812:	4603      	mov	r3, r0
 8002814:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8002816:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800281a:	4413      	add	r3, r2
 800281c:	f107 0218 	add.w	r2, r7, #24
 8002820:	18d0      	adds	r0, r2, r3
 8002822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002824:	425b      	negs	r3, r3
 8002826:	222d      	movs	r2, #45	@ 0x2d
 8002828:	4619      	mov	r1, r3
 800282a:	f7ff fdc7 	bl	80023bc <addexp>
 800282e:	4602      	mov	r2, r0
 8002830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002832:	4413      	add	r3, r2
 8002834:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002836:	f107 0318 	add.w	r3, r7, #24
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800283e:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <mg_dtoa+0x30c>)
 8002840:	6939      	ldr	r1, [r7, #16]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f009 fcf8 	bl	800c238 <mg_snprintf>
 8002848:	4603      	mov	r3, r0
 800284a:	e112      	b.n	8002a72 <mg_dtoa+0x50a>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800284c:	2300      	movs	r3, #0
 800284e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002850:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002854:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002858:	e046      	b.n	80028e8 <mg_dtoa+0x380>
 800285a:	bf00      	nop
 800285c:	08023cc8 	.word	0x08023cc8
 8002860:	08023ccc 	.word	0x08023ccc
 8002864:	08023cd0 	.word	0x08023cd0
 8002868:	08023cd4 	.word	0x08023cd4
 800286c:	08023cdc 	.word	0x08023cdc
 8002870:	3ff00000 	.word	0x3ff00000
 8002874:	08023ce0 	.word	0x08023ce0
      int ch = (int) (d / t);
 8002878:	ed97 5b02 	vldr	d5, [r7, #8]
 800287c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002880:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002884:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002888:	ee17 3a90 	vmov	r3, s15
 800288c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 800288e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002890:	2b00      	cmp	r3, #0
 8002892:	dc02      	bgt.n	800289a <mg_dtoa+0x332>
 8002894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002896:	2b00      	cmp	r3, #0
 8002898:	dd0c      	ble.n	80028b4 <mg_dtoa+0x34c>
 800289a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800289c:	b2da      	uxtb	r2, r3
 800289e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028a0:	1c59      	adds	r1, r3, #1
 80028a2:	6679      	str	r1, [r7, #100]	@ 0x64
 80028a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028a6:	440b      	add	r3, r1
 80028a8:	3230      	adds	r2, #48	@ 0x30
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	3370      	adds	r3, #112	@ 0x70
 80028ae:	443b      	add	r3, r7
 80028b0:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80028b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028be:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80028c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80028c6:	ed97 6b02 	vldr	d6, [r7, #8]
 80028ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80028ce:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 80028d2:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80028d6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80028da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028de:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80028e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028e4:	3301      	adds	r3, #1
 80028e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028e8:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80028ec:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80028f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	db04      	blt.n	8002904 <mg_dtoa+0x39c>
 80028fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80028fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028fe:	4413      	add	r3, r2
 8002900:	2b27      	cmp	r3, #39	@ 0x27
 8002902:	ddb9      	ble.n	8002878 <mg_dtoa+0x310>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8002904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002906:	2b00      	cmp	r3, #0
 8002908:	d118      	bne.n	800293c <mg_dtoa+0x3d4>
 800290a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002910:	3370      	adds	r3, #112	@ 0x70
 8002912:	443b      	add	r3, r7
 8002914:	2230      	movs	r2, #48	@ 0x30
 8002916:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 800291a:	e00f      	b.n	800293c <mg_dtoa+0x3d4>
 800291c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	667a      	str	r2, [r7, #100]	@ 0x64
 8002922:	3370      	adds	r3, #112	@ 0x70
 8002924:	443b      	add	r3, r7
 8002926:	2230      	movs	r2, #48	@ 0x30
 8002928:	f803 2c58 	strb.w	r2, [r3, #-88]
 800292c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8002930:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8002934:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002938:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800293c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002940:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002944:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	db04      	blt.n	8002958 <mg_dtoa+0x3f0>
 800294e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002952:	4413      	add	r3, r2
 8002954:	2b27      	cmp	r3, #39	@ 0x27
 8002956:	dde1      	ble.n	800291c <mg_dtoa+0x3b4>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8002958:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800295a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800295c:	4413      	add	r3, r2
 800295e:	2b27      	cmp	r3, #39	@ 0x27
 8002960:	dc09      	bgt.n	8002976 <mg_dtoa+0x40e>
 8002962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002968:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800296a:	4413      	add	r3, r2
 800296c:	3370      	adds	r3, #112	@ 0x70
 800296e:	443b      	add	r3, r7
 8002970:	222e      	movs	r2, #46	@ 0x2e
 8002972:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8002976:	2300      	movs	r3, #0
 8002978:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800297a:	a342      	add	r3, pc, #264	@ (adr r3, 8002a84 <mg_dtoa+0x51c>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002984:	e031      	b.n	80029ea <mg_dtoa+0x482>
      int ch = (int) (d / t);
 8002986:	ed97 5b02 	vldr	d5, [r7, #8]
 800298a:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800298e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002992:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002996:	ee17 3a90 	vmov	r3, s15
 800299a:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 800299c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029a2:	1c59      	adds	r1, r3, #1
 80029a4:	6679      	str	r1, [r7, #100]	@ 0x64
 80029a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029a8:	440b      	add	r3, r1
 80029aa:	3230      	adds	r2, #48	@ 0x30
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	3370      	adds	r3, #112	@ 0x70
 80029b0:	443b      	add	r3, r7
 80029b2:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80029b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80029c0:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80029c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80029c8:	ed97 6b02 	vldr	d6, [r7, #8]
 80029cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029d0:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 80029d4:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80029d8:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80029dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029e0:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80029e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029e6:	3301      	adds	r3, #1
 80029e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80029ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029ee:	4413      	add	r3, r2
 80029f0:	2b27      	cmp	r3, #39	@ 0x27
 80029f2:	dc07      	bgt.n	8002a04 <mg_dtoa+0x49c>
 80029f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbc4      	blt.n	8002986 <mg_dtoa+0x41e>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80029fc:	e002      	b.n	8002a04 <mg_dtoa+0x49c>
 80029fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a00:	3b01      	subs	r3, #1
 8002a02:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00c      	beq.n	8002a24 <mg_dtoa+0x4bc>
 8002a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	dd09      	ble.n	8002a24 <mg_dtoa+0x4bc>
 8002a10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a14:	4413      	add	r3, r2
 8002a16:	3b01      	subs	r3, #1
 8002a18:	3370      	adds	r3, #112	@ 0x70
 8002a1a:	443b      	add	r3, r7
 8002a1c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002a20:	2b30      	cmp	r3, #48	@ 0x30
 8002a22:	d0ec      	beq.n	80029fe <mg_dtoa+0x496>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8002a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	dd0c      	ble.n	8002a44 <mg_dtoa+0x4dc>
 8002a2a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b01      	subs	r3, #1
 8002a32:	3370      	adds	r3, #112	@ 0x70
 8002a34:	443b      	add	r3, r7
 8002a36:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a3c:	d102      	bne.n	8002a44 <mg_dtoa+0x4dc>
 8002a3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a40:	3b01      	subs	r3, #1
 8002a42:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 8002a44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a48:	4413      	add	r3, r2
 8002a4a:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a4e:	2b27      	cmp	r3, #39	@ 0x27
 8002a50:	dd01      	ble.n	8002a56 <mg_dtoa+0x4ee>
 8002a52:	2327      	movs	r3, #39	@ 0x27
 8002a54:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 8002a56:	f107 0218 	add.w	r2, r7, #24
 8002a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a5c:	4413      	add	r3, r2
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8002a62:	f107 0318 	add.w	r3, r7, #24
 8002a66:	4a06      	ldr	r2, [pc, #24]	@ (8002a80 <mg_dtoa+0x518>)
 8002a68:	6939      	ldr	r1, [r7, #16]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f009 fbe4 	bl	800c238 <mg_snprintf>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3770      	adds	r7, #112	@ 0x70
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	f3af 8000 	nop.w
 8002a80:	08023ccc 	.word	0x08023ccc
 8002a84:	9999999a 	.word	0x9999999a
 8002a88:	3fb99999 	.word	0x3fb99999

08002a8c <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002a8c:	b5b0      	push	{r4, r5, r7, lr}
 8002a8e:	b08c      	sub	sp, #48	@ 0x30
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002a98:	4b53      	ldr	r3, [pc, #332]	@ (8002be8 <mg_lld+0x15c>)
 8002a9a:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8002a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002aa8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <mg_lld+0x4a>
 8002ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da0e      	bge.n	8002ad6 <mg_lld+0x4a>
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	222d      	movs	r2, #45	@ 0x2d
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aca:	2100      	movs	r1, #0
 8002acc:	4254      	negs	r4, r2
 8002ace:	eb61 0503 	sbc.w	r5, r1, r3
 8002ad2:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8002ad6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d021      	beq.n	8002b22 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	e019      	b.n	8002b18 <mg_lld+0x8c>
 8002ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	441a      	add	r2, r3
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	1c59      	adds	r1, r3, #1
 8002af2:	6239      	str	r1, [r7, #32]
 8002af4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002af6:	440b      	add	r3, r1
 8002af8:	68f9      	ldr	r1, [r7, #12]
 8002afa:	440b      	add	r3, r1
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	0902      	lsrs	r2, r0, #4
 8002b0e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002b12:	090b      	lsrs	r3, r1, #4
 8002b14:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	d1e1      	bne.n	8002ae4 <mg_lld+0x58>
 8002b20:	e025      	b.n	8002b6e <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	e01e      	b.n	8002b66 <mg_lld+0xda>
 8002b28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b2c:	f04f 020a 	mov.w	r2, #10
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f7fd fe48 	bl	80007c8 <__aeabi_uldivmod>
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	441a      	add	r2, r3
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	1c59      	adds	r1, r3, #1
 8002b40:	6239      	str	r1, [r7, #32]
 8002b42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b44:	440b      	add	r3, r1
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	440b      	add	r3, r1
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b52:	f04f 020a 	mov.w	r2, #10
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	f7fd fe35 	bl	80007c8 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	d1dc      	bne.n	8002b28 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e022      	b.n	8002bba <mg_lld+0x12e>
    char t = buf[s + i];
 8002b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8002b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	441a      	add	r2, r3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	441a      	add	r2, r3
 8002b92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	440b      	add	r3, r1
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	440b      	add	r3, r1
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	441a      	add	r2, r3
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	7dfa      	ldrb	r2, [r7, #23]
 8002bb2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3d7      	bcc.n	8002b74 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8002bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	d106      	bne.n	8002bda <mg_lld+0x14e>
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	623a      	str	r2, [r7, #32]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	2230      	movs	r2, #48	@ 0x30
 8002bd8:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002bda:	6a3a      	ldr	r2, [r7, #32]
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	4413      	add	r3, r2
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3730      	adds	r7, #48	@ 0x30
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdb0      	pop	{r4, r5, r7, pc}
 8002be8:	08023ce8 	.word	0x08023ce8

08002bec <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8002bfe:	e009      	b.n	8002c14 <scpy+0x28>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	617a      	str	r2, [r7, #20]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	4610      	mov	r0, r2
 8002c12:	4798      	blx	r3
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d205      	bcs.n	8002c28 <scpy+0x3c>
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	4413      	add	r3, r2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1eb      	bne.n	8002c00 <scpy+0x14>
  return i;
 8002c28:	697b      	ldr	r3, [r7, #20]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8002c32:	b40c      	push	{r2, r3}
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8002c42:	f107 031c 	add.w	r3, r7, #28
 8002c46:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	6839      	ldr	r1, [r7, #0]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f809 	bl	8002c68 <mg_vxprintf>
 8002c56:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8002c58:	68fb      	ldr	r3, [r7, #12]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c64:	b002      	add	sp, #8
 8002c66:	4770      	bx	lr

08002c68 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8002c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c6c:	b0a6      	sub	sp, #152	@ 0x98
 8002c6e:	af02      	add	r7, sp, #8
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8002c84:	e383      	b.n	800338e <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c8c:	4413      	add	r3, r2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b25      	cmp	r3, #37	@ 0x25
 8002c92:	f040 8369 	bne.w	8003368 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8002c96:	2300      	movs	r3, #0
 8002c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002ca8:	2320      	movs	r3, #32
 8002caa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cc4:	4413      	add	r3, r2
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8002ccc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002cd0:	2b23      	cmp	r3, #35	@ 0x23
 8002cd2:	d10e      	bne.n	8002cf2 <mg_vxprintf+0x8a>
 8002cd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8002cf2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002cf6:	2b2d      	cmp	r3, #45	@ 0x2d
 8002cf8:	d110      	bne.n	8002d1c <mg_vxprintf+0xb4>
 8002cfa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d14:	4413      	add	r3, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8002d1c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002d20:	2b30      	cmp	r3, #48	@ 0x30
 8002d22:	d127      	bne.n	8002d74 <mg_vxprintf+0x10c>
 8002d24:	2330      	movs	r3, #48	@ 0x30
 8002d26:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8002d42:	e017      	b.n	8002d74 <mg_vxprintf+0x10c>
 8002d44:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d50:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8002d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d56:	4413      	add	r3, r2
 8002d58:	3b30      	subs	r3, #48	@ 0x30
 8002d5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d60:	3301      	adds	r3, #1
 8002d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002d74:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fb08 	bl	800238e <is_digit>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1df      	bne.n	8002d44 <mg_vxprintf+0xdc>
      if (c == '.') {
 8002d84:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d8a:	d153      	bne.n	8002e34 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d90:	3301      	adds	r3, #1
 8002d92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d9c:	4413      	add	r3, r2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8002da4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002daa:	d113      	bne.n	8002dd4 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	1d19      	adds	r1, r3, #4
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	6011      	str	r1, [r2, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8002dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002dd2:	e02f      	b.n	8002e34 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8002dd8:	e017      	b.n	8002e0a <mg_vxprintf+0x1a2>
 8002dda:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002de6:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8002dea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dec:	4413      	add	r3, r2
 8002dee:	3b30      	subs	r3, #48	@ 0x30
 8002df0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002df6:	3301      	adds	r3, #1
 8002df8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002e0a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fabd 	bl	800238e <is_digit>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1df      	bne.n	8002dda <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8002e1a:	e00b      	b.n	8002e34 <mg_vxprintf+0x1cc>
 8002e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e20:	3301      	adds	r3, #1
 8002e22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e2c:	4413      	add	r3, r2
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002e34:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e38:	2b68      	cmp	r3, #104	@ 0x68
 8002e3a:	d0ef      	beq.n	8002e1c <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8002e3c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e40:	2b6c      	cmp	r3, #108	@ 0x6c
 8002e42:	d121      	bne.n	8002e88 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8002e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e46:	3301      	adds	r3, #1
 8002e48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8002e62:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e66:	2b6c      	cmp	r3, #108	@ 0x6c
 8002e68:	d10e      	bne.n	8002e88 <mg_vxprintf+0x220>
 8002e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e74:	3301      	adds	r3, #1
 8002e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e80:	4413      	add	r3, r2
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8002e88:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e8c:	2b70      	cmp	r3, #112	@ 0x70
 8002e8e:	d103      	bne.n	8002e98 <mg_vxprintf+0x230>
 8002e90:	2301      	movs	r3, #1
 8002e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e94:	2301      	movs	r3, #1
 8002e96:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8002e98:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e9c:	2b64      	cmp	r3, #100	@ 0x64
 8002e9e:	d018      	beq.n	8002ed2 <mg_vxprintf+0x26a>
 8002ea0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ea4:	2b75      	cmp	r3, #117	@ 0x75
 8002ea6:	d014      	beq.n	8002ed2 <mg_vxprintf+0x26a>
 8002ea8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002eac:	2b78      	cmp	r3, #120	@ 0x78
 8002eae:	d010      	beq.n	8002ed2 <mg_vxprintf+0x26a>
 8002eb0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002eb4:	2b58      	cmp	r3, #88	@ 0x58
 8002eb6:	d00c      	beq.n	8002ed2 <mg_vxprintf+0x26a>
 8002eb8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ebc:	2b70      	cmp	r3, #112	@ 0x70
 8002ebe:	d008      	beq.n	8002ed2 <mg_vxprintf+0x26a>
 8002ec0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ec4:	2b67      	cmp	r3, #103	@ 0x67
 8002ec6:	d004      	beq.n	8002ed2 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8002ec8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ecc:	2b66      	cmp	r3, #102	@ 0x66
 8002ece:	f040 816c 	bne.w	80031aa <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8002ed2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002ee2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ee6:	2b78      	cmp	r3, #120	@ 0x78
 8002ee8:	d007      	beq.n	8002efa <mg_vxprintf+0x292>
 8002eea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002eee:	2b58      	cmp	r3, #88	@ 0x58
 8002ef0:	d003      	beq.n	8002efa <mg_vxprintf+0x292>
 8002ef2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ef6:	2b70      	cmp	r3, #112	@ 0x70
 8002ef8:	d101      	bne.n	8002efe <mg_vxprintf+0x296>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <mg_vxprintf+0x298>
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8002f04:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8002f10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <mg_vxprintf+0x2b2>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e000      	b.n	8002f1c <mg_vxprintf+0x2b4>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 8002f1e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f22:	2b67      	cmp	r3, #103	@ 0x67
 8002f24:	d003      	beq.n	8002f2e <mg_vxprintf+0x2c6>
 8002f26:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f2a:	2b66      	cmp	r3, #102	@ 0x66
 8002f2c:	d124      	bne.n	8002f78 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3307      	adds	r3, #7
 8002f34:	f023 0307 	bic.w	r3, r3, #7
 8002f38:	f103 0108 	add.w	r1, r3, #8
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	6011      	str	r1, [r2, #0]
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8002f48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d101      	bne.n	8002f54 <mg_vxprintf+0x2ec>
 8002f50:	2306      	movs	r3, #6
 8002f52:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002f54:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002f56:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f5a:	2b67      	cmp	r3, #103	@ 0x67
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f107 0014 	add.w	r0, r7, #20
 8002f68:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8002f6c:	2128      	movs	r1, #40	@ 0x28
 8002f6e:	f7ff fafb 	bl	8002568 <mg_dtoa>
 8002f72:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8002f76:	e069      	b.n	800304c <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d11c      	bne.n	8002fb8 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3307      	adds	r3, #7
 8002f84:	f023 0307 	bic.w	r3, r3, #7
 8002f88:	f103 0108 	add.w	r1, r3, #8
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	6011      	str	r1, [r2, #0]
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8002f98:	f107 0114 	add.w	r1, r7, #20
 8002f9c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fac:	4608      	mov	r0, r1
 8002fae:	f7ff fd6d 	bl	8002a8c <mg_lld>
 8002fb2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8002fb6:	e049      	b.n	800304c <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d123      	bne.n	8003006 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1d19      	adds	r1, r3, #4
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	6011      	str	r1, [r2, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <mg_vxprintf+0x376>
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd6:	17da      	asrs	r2, r3, #31
 8002fd8:	461c      	mov	r4, r3
 8002fda:	4615      	mov	r5, r2
 8002fdc:	e003      	b.n	8002fe6 <mg_vxprintf+0x37e>
 8002fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	461c      	mov	r4, r3
 8002fe4:	4615      	mov	r5, r2
 8002fe6:	f107 0114 	add.w	r1, r7, #20
 8002fea:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	4608      	mov	r0, r1
 8002ffc:	f7ff fd46 	bl	8002a8c <mg_lld>
 8003000:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8003004:	e022      	b.n	800304c <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1d19      	adds	r1, r3, #4
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	6011      	str	r1, [r2, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8003014:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <mg_vxprintf+0x3be>
 800301c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301e:	17da      	asrs	r2, r3, #31
 8003020:	4698      	mov	r8, r3
 8003022:	4691      	mov	r9, r2
 8003024:	e003      	b.n	800302e <mg_vxprintf+0x3c6>
 8003026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003028:	2200      	movs	r2, #0
 800302a:	4698      	mov	r8, r3
 800302c:	4691      	mov	r9, r2
 800302e:	f107 0114 	add.w	r1, r7, #20
 8003032:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4642      	mov	r2, r8
 8003040:	464b      	mov	r3, r9
 8003042:	4608      	mov	r0, r1
 8003044:	f7ff fd22 	bl	8002a8c <mg_lld>
 8003048:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003052:	e007      	b.n	8003064 <mg_vxprintf+0x3fc>
 8003054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003056:	3b01      	subs	r3, #1
 8003058:	677b      	str	r3, [r7, #116]	@ 0x74
 800305a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800305e:	3301      	adds	r3, #1
 8003060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003064:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800306a:	429a      	cmp	r2, r3
 800306c:	d202      	bcs.n	8003074 <mg_vxprintf+0x40c>
 800306e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ef      	bne.n	8003054 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800307a:	e011      	b.n	80030a0 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 800307c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8003080:	2301      	movs	r3, #1
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f7ff fdb1 	bl	8002bec <scpy>
 800308a:	4602      	mov	r2, r0
 800308c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003090:	4413      	add	r3, r2
 8003092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8003096:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800309a:	3301      	adds	r3, #1
 800309c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d110      	bne.n	80030ca <mg_vxprintf+0x462>
 80030a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10c      	bne.n	80030ca <mg_vxprintf+0x462>
 80030b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d207      	bcs.n	80030ca <mg_vxprintf+0x462>
 80030ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80030be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030c2:	4413      	add	r3, r2
 80030c4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d8d8      	bhi.n	800307c <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 80030ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030cc:	4ab7      	ldr	r2, [pc, #732]	@ (80033ac <mg_vxprintf+0x744>)
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff fd8b 	bl	8002bec <scpy>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030dc:	4413      	add	r3, r2
 80030de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030e8:	e011      	b.n	800310e <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 80030ea:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80030ee:	2301      	movs	r3, #1
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff fd7a 	bl	8002bec <scpy>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030fe:	4413      	add	r3, r2
 8003100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003108:	3301      	adds	r3, #1
 800310a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800310e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003112:	2b30      	cmp	r3, #48	@ 0x30
 8003114:	d10c      	bne.n	8003130 <mg_vxprintf+0x4c8>
 8003116:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800311a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800311c:	429a      	cmp	r2, r3
 800311e:	d207      	bcs.n	8003130 <mg_vxprintf+0x4c8>
 8003120:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003128:	4413      	add	r3, r2
 800312a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800312c:	429a      	cmp	r2, r3
 800312e:	d8dc      	bhi.n	80030ea <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8003130:	f107 0214 	add.w	r2, r7, #20
 8003134:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff fd56 	bl	8002bec <scpy>
 8003140:	4602      	mov	r2, r0
 8003142:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003146:	4413      	add	r3, r2
 8003148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003152:	e011      	b.n	8003178 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8003154:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8003158:	2301      	movs	r3, #1
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fd45 	bl	8002bec <scpy>
 8003162:	4602      	mov	r2, r0
 8003164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003168:	4413      	add	r3, r2
 800316a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800316e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003172:	3301      	adds	r3, #1
 8003174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003178:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800317c:	2b20      	cmp	r3, #32
 800317e:	f040 80ea 	bne.w	8003356 <mg_vxprintf+0x6ee>
 8003182:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80e5 	beq.w	8003356 <mg_vxprintf+0x6ee>
 800318c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003190:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003192:	429a      	cmp	r2, r3
 8003194:	f080 80df 	bcs.w	8003356 <mg_vxprintf+0x6ee>
 8003198:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800319c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031a0:	4413      	add	r3, r2
 80031a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d8d5      	bhi.n	8003154 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 80031a8:	e0d5      	b.n	8003356 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 80031aa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031ae:	2b6d      	cmp	r3, #109	@ 0x6d
 80031b0:	d003      	beq.n	80031ba <mg_vxprintf+0x552>
 80031b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031b6:	2b4d      	cmp	r3, #77	@ 0x4d
 80031b8:	d128      	bne.n	800320c <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	1d19      	adds	r1, r3, #4
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	6011      	str	r1, [r2, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 80031c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031cc:	2b6d      	cmp	r3, #109	@ 0x6d
 80031ce:	d103      	bne.n	80031d8 <mg_vxprintf+0x570>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	2022      	movs	r0, #34	@ 0x22
 80031d6:	4798      	blx	r3
        n += f(out, param, ap);
 80031d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	4798      	blx	r3
 80031e2:	4602      	mov	r2, r0
 80031e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031e8:	4413      	add	r3, r2
 80031ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 80031ee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031f2:	2b6d      	cmp	r3, #109	@ 0x6d
 80031f4:	f040 80b1 	bne.w	800335a <mg_vxprintf+0x6f2>
 80031f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031fc:	3302      	adds	r3, #2
 80031fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	2022      	movs	r0, #34	@ 0x22
 8003208:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 800320a:	e0a6      	b.n	800335a <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 800320c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003210:	2b63      	cmp	r3, #99	@ 0x63
 8003212:	d112      	bne.n	800323a <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1d19      	adds	r1, r3, #4
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6011      	str	r1, [r2, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8003222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4610      	mov	r0, r2
 800322c:	4798      	blx	r3
        n++;
 800322e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003232:	3301      	adds	r3, #1
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003238:	e090      	b.n	800335c <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 800323a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800323e:	2b73      	cmp	r3, #115	@ 0x73
 8003240:	d16b      	bne.n	800331a <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1d19      	adds	r1, r3, #4
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	6011      	str	r1, [r2, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8003250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d109      	bne.n	800326c <mg_vxprintf+0x604>
 8003258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <mg_vxprintf+0x600>
 800325e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003260:	f7fd f89e 	bl	80003a0 <strlen>
 8003264:	4603      	mov	r3, r0
 8003266:	e000      	b.n	800326a <mg_vxprintf+0x602>
 8003268:	2300      	movs	r3, #0
 800326a:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003272:	e011      	b.n	8003298 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8003274:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8003278:	2301      	movs	r3, #1
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff fcb5 	bl	8002bec <scpy>
 8003282:	4602      	mov	r2, r0
 8003284:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003288:	4413      	add	r3, r2
 800328a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800328e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003292:	3301      	adds	r3, #1
 8003294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003298:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <mg_vxprintf+0x64e>
 80032a0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80032a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d206      	bcs.n	80032b6 <mg_vxprintf+0x64e>
 80032a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80032ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ae:	4413      	add	r3, r2
 80032b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d8de      	bhi.n	8003274 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 80032b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff fc95 	bl	8002bec <scpy>
 80032c2:	4602      	mov	r2, r0
 80032c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032c8:	4413      	add	r3, r2
 80032ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032d4:	e011      	b.n	80032fa <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 80032d6:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80032da:	2301      	movs	r3, #1
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff fc84 	bl	8002bec <scpy>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ea:	4413      	add	r3, r2
 80032ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80032f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032f4:	3301      	adds	r3, #1
 80032f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032fa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02c      	beq.n	800335c <mg_vxprintf+0x6f4>
 8003302:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003306:	429a      	cmp	r2, r3
 8003308:	d228      	bcs.n	800335c <mg_vxprintf+0x6f4>
 800330a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800330e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003310:	4413      	add	r3, r2
 8003312:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003314:	429a      	cmp	r2, r3
 8003316:	d8de      	bhi.n	80032d6 <mg_vxprintf+0x66e>
 8003318:	e020      	b.n	800335c <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 800331a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800331e:	2b25      	cmp	r3, #37	@ 0x25
 8003320:	d109      	bne.n	8003336 <mg_vxprintf+0x6ce>
        out('%', param);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	2025      	movs	r0, #37	@ 0x25
 8003328:	4798      	blx	r3
        n++;
 800332a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800332e:	3301      	adds	r3, #1
 8003330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003334:	e012      	b.n	800335c <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	2025      	movs	r0, #37	@ 0x25
 800333c:	4798      	blx	r3
        out(c, param);
 800333e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	4610      	mov	r0, r2
 8003348:	4798      	blx	r3
        n += 2;
 800334a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800334e:	3302      	adds	r3, #2
 8003350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003354:	e002      	b.n	800335c <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 800335a:	bf00      	nop
      }
      i++;
 800335c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003360:	3301      	adds	r3, #1
 8003362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003366:	e012      	b.n	800338e <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800336e:	4413      	add	r3, r2
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4610      	mov	r0, r2
 8003378:	4798      	blx	r3
 800337a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800337e:	3301      	adds	r3, #1
 8003380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003388:	3301      	adds	r3, #1
 800338a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003394:	4413      	add	r3, r2
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f ac74 	bne.w	8002c86 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800339e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3790      	adds	r7, #144	@ 0x90
 80033a6:	46bd      	mov	sp, r7
 80033a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ac:	08023cfc 	.word	0x08023cfc

080033b0 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 80033bc:	2108      	movs	r1, #8
 80033be:	2001      	movs	r0, #1
 80033c0:	f01e fdac 	bl	8021f1c <calloc>
 80033c4:	4603      	mov	r3, r0
 80033c6:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d013      	beq.n	80033f6 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	68b8      	ldr	r0, [r7, #8]
 80033d6:	4798      	blx	r3
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <mg_fs_open+0x46>
      free(fd);
 80033ec:	6978      	ldr	r0, [r7, #20]
 80033ee:	f01e fdb9 	bl	8021f64 <free>
      fd = NULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 80033f6:	697b      	ldr	r3, [r7, #20]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	4610      	mov	r0, r2
 800341a:	4798      	blx	r3
    free(fd);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f01e fda1 	bl	8021f64 <free>
  }
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fc ffb2 	bl	80003a0 <strlen>
 800343c:	4602      	mov	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4293      	cmp	r3, r2
 8003442:	d219      	bcs.n	8003478 <is_dir_prefix+0x4e>
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f01f f885 	bl	8022558 <strncmp>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <is_dir_prefix+0x4e>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4413      	add	r3, r2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b2f      	cmp	r3, #47	@ 0x2f
 8003464:	d006      	beq.n	8003474 <is_dir_prefix+0x4a>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b2f      	cmp	r3, #47	@ 0x2f
 8003472:	d101      	bne.n	8003478 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <is_dir_prefix+0x50>
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8003482:	b580      	push	{r7, lr}
 8003484:	b088      	sub	sp, #32
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7fc ff86 	bl	80003a0 <strlen>
 8003494:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f013 fb0c 	bl	8016ab8 <mg_unpack>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <packed_stat+0x28>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e017      	b.n	80034da <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e00c      	b.n	80034ca <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff ffb8 	bl	800342a <is_dir_prefix>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <packed_stat+0x42>
 80034c0:	2304      	movs	r3, #4
 80034c2:	e00a      	b.n	80034da <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	69f8      	ldr	r0, [r7, #28]
 80034cc:	f013 fae0 	bl	8016a90 <mg_unlist>
 80034d0:	6178      	str	r0, [r7, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1eb      	bne.n	80034b0 <packed_stat+0x2e>
  }
  return 0;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b0be      	sub	sp, #248	@ 0xf8
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7fc ff55 	bl	80003a0 <strlen>
 80034f6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 80034fa:	2300      	movs	r3, #0
 80034fc:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003504:	e05a      	b.n	80035bc <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003506:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800350a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff ff8b 	bl	800342a <is_dir_prefix>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d048      	beq.n	80035ac <packed_list+0xc8>
    begin = &path[n + 1];
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351e:	3301      	adds	r3, #1
 8003520:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003524:	4413      	add	r3, r2
 8003526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 800352a:	212f      	movs	r1, #47	@ 0x2f
 800352c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003530:	f01f f805 	bl	802253e <strchr>
 8003534:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 8003538:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <packed_list+0x70>
 8003540:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003544:	f7fc ff2c 	bl	80003a0 <strlen>
 8003548:	4602      	mov	r2, r0
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800354e:	4413      	add	r3, r2
 8003550:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8003554:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800355c:	1ad2      	subs	r2, r2, r3
 800355e:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8003562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <packed_list+0xf8>)
 800356c:	2164      	movs	r1, #100	@ 0x64
 800356e:	f008 fe63 	bl	800c238 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8003572:	2300      	movs	r3, #0
 8003574:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8003578:	f107 0214 	add.w	r2, r7, #20
 800357c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f7fc feac 	bl	80002e0 <strcmp>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d010      	beq.n	80035b0 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 800358e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4610      	mov	r0, r2
 8003598:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 800359a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f01f f95e 	bl	8022866 <strcpy>
 80035aa:	e002      	b.n	80035b2 <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 80035b0:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 80035b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80035b6:	3301      	adds	r3, #1
 80035b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035bc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80035c0:	f013 fa66 	bl	8016a90 <mg_unlist>
 80035c4:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 80035c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d19a      	bne.n	8003506 <packed_list+0x22>
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	37f0      	adds	r7, #240	@ 0xf0
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	08023ce0 	.word	0x08023ce0

080035e0 <packed_open>:

static void *packed_open(const char *path, int flags) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 80035ee:	f107 030c 	add.w	r3, r7, #12
 80035f2:	2200      	movs	r2, #0
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f013 fa5e 	bl	8016ab8 <mg_unpack>
 80035fc:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <packed_open+0x2c>
 8003608:	2300      	movs	r3, #0
 800360a:	e016      	b.n	800363a <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <packed_open+0x3a>
 8003616:	2300      	movs	r3, #0
 8003618:	e00f      	b.n	800363a <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 800361a:	210c      	movs	r1, #12
 800361c:	2001      	movs	r0, #1
 800361e:	f01e fc7d 	bl	8021f1c <calloc>
 8003622:	4603      	mov	r3, r0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <packed_open+0x58>
    fp->size = size;
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8003638:	693b      	ldr	r3, [r7, #16]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <packed_close>:

static void packed_close(void *fp) {
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <packed_close+0x14>
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f01e fc87 	bl	8021f64 <free>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	441a      	add	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d905      	bls.n	800368a <packed_read+0x2c>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4413      	add	r3, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4619      	mov	r1, r3
 8003698:	68b8      	ldr	r0, [r7, #8]
 800369a:	f01f f8ec 	bl	8022876 <memcpy>
  fp->pos += len;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	441a      	add	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	609a      	str	r2, [r3, #8]
  return len;
 80036aa:	687b      	ldr	r3, [r7, #4]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d903      	bls.n	80036f6 <packed_seek+0x28>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	609a      	str	r2, [r3, #8]
  return fp->pos;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <packed_remove>:

static bool packed_remove(const char *path) {
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <p_open>:
static void *p_open(const char *path, int flags) {
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <p_close>:
static void p_close(void *fp) {
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 80037c2:	b480      	push	{r7}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <p_remove>:
static bool p_remove(const char *path) {
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 800383a:	b480      	push	{r7}
 800383c:	b089      	sub	sp, #36	@ 0x24
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d02d      	beq.n	80038ac <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	60fa      	str	r2, [r7, #12]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	60ba      	str	r2, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b40      	cmp	r3, #64	@ 0x40
 8003868:	dd05      	ble.n	8003876 <mg_ncasecmp+0x3c>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b5a      	cmp	r3, #90	@ 0x5a
 800386e:	dc02      	bgt.n	8003876 <mg_ncasecmp+0x3c>
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	3320      	adds	r3, #32
 8003874:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	dd05      	ble.n	8003888 <mg_ncasecmp+0x4e>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b5a      	cmp	r3, #90	@ 0x5a
 8003880:	dc02      	bgt.n	8003888 <mg_ncasecmp+0x4e>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	3320      	adds	r3, #32
 8003886:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <mg_ncasecmp+0x72>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b01      	subs	r3, #1
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <mg_ncasecmp+0x72>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1d1      	bne.n	8003850 <mg_ncasecmp+0x16>
  return diff;
 80038ac:	69fb      	ldr	r3, [r7, #28]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	@ 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80038bc:	b480      	push	{r7}
 80038be:	b08b      	sub	sp, #44	@ 0x2c
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	f107 0308 	add.w	r3, r7, #8
 80038c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80038ca:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4a42      	ldr	r2, [pc, #264]	@ (80039e4 <mg_to_size_t+0x128>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	08db      	lsrs	r3, r3, #3
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	2300      	movs	r3, #0
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80038ea:	e002      	b.n	80038f2 <mg_to_size_t+0x36>
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	3301      	adds	r3, #1
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d20b      	bcs.n	8003912 <mg_to_size_t+0x56>
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	4413      	add	r3, r2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b20      	cmp	r3, #32
 8003904:	d0f2      	beq.n	80038ec <mg_to_size_t+0x30>
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	4413      	add	r3, r2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b09      	cmp	r3, #9
 8003910:	d0ec      	beq.n	80038ec <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003916:	429a      	cmp	r2, r3
 8003918:	d22b      	bcs.n	8003972 <mg_to_size_t+0xb6>
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	4413      	add	r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b2d      	cmp	r3, #45	@ 0x2d
 8003924:	d125      	bne.n	8003972 <mg_to_size_t+0xb6>
 8003926:	2300      	movs	r3, #0
 8003928:	e056      	b.n	80039d8 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	4413      	add	r3, r2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	3b30      	subs	r3, #48	@ 0x30
 8003934:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	429a      	cmp	r2, r3
 800393c:	d901      	bls.n	8003942 <mg_to_size_t+0x86>
 800393e:	2300      	movs	r3, #0
 8003940:	e04a      	b.n	80039d8 <mg_to_size_t+0x11c>
    result *= 10;
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	429a      	cmp	r2, r3
 8003958:	d901      	bls.n	800395e <mg_to_size_t+0xa2>
 800395a:	2300      	movs	r3, #0
 800395c:	e03c      	b.n	80039d8 <mg_to_size_t+0x11c>
    result += digit;
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	3301      	adds	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003976:	429a      	cmp	r2, r3
 8003978:	d20f      	bcs.n	800399a <mg_to_size_t+0xde>
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b2f      	cmp	r3, #47	@ 0x2f
 8003984:	d909      	bls.n	800399a <mg_to_size_t+0xde>
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	4413      	add	r3, r2
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b39      	cmp	r3, #57	@ 0x39
 8003990:	d9cb      	bls.n	800392a <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8003992:	e002      	b.n	800399a <mg_to_size_t+0xde>
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	3301      	adds	r3, #1
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399e:	429a      	cmp	r2, r3
 80039a0:	d20b      	bcs.n	80039ba <mg_to_size_t+0xfe>
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d0f2      	beq.n	8003994 <mg_to_size_t+0xd8>
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	4413      	add	r3, r2
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b09      	cmp	r3, #9
 80039b8:	d0ec      	beq.n	8003994 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <mg_to_size_t+0x108>
 80039c0:	2300      	movs	r3, #0
 80039c2:	e009      	b.n	80039d8 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <mg_to_size_t+0x114>
 80039cc:	2300      	movs	r3, #0
 80039ce:	e003      	b.n	80039d8 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a3a      	ldr	r2, [r7, #32]
 80039d4:	601a      	str	r2, [r3, #0]
  return true;
 80039d6:	2301      	movs	r3, #1
}
 80039d8:	4618      	mov	r0, r3
 80039da:	372c      	adds	r7, #44	@ 0x2c
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	cccccccd 	.word	0xcccccccd

080039e8 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80039e8:	b082      	sub	sp, #8
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b08e      	sub	sp, #56	@ 0x38
 80039ee:	af02      	add	r7, sp, #8
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	1d38      	adds	r0, r7, #4
 80039f4:	e880 0006 	stmia.w	r0, {r1, r2}
 80039f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 80039fa:	f107 0310 	add.w	r3, r7, #16
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f009 fd65 	bl	800d4d2 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8003a08:	e023      	b.n	8003a52 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8003a0a:	f107 0318 	add.w	r3, r7, #24
 8003a0e:	f107 0220 	add.w	r2, r7, #32
 8003a12:	213d      	movs	r1, #61	@ 0x3d
 8003a14:	9100      	str	r1, [sp, #0]
 8003a16:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003a1a:	c903      	ldmia	r1, {r0, r1}
 8003a1c:	f009 ff3a 	bl	800d894 <mg_span>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d015      	beq.n	8003a52 <mg_http_var+0x6a>
 8003a26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d111      	bne.n	8003a52 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff00 	bl	800383a <mg_ncasecmp>
 8003a3a:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <mg_http_var+0x6a>
      result = v;
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	f107 0218 	add.w	r2, r7, #24
 8003a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a4c:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8003a50:	e00b      	b.n	8003a6a <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003a58:	2126      	movs	r1, #38	@ 0x26
 8003a5a:	9100      	str	r1, [sp, #0]
 8003a5c:	1d39      	adds	r1, r7, #4
 8003a5e:	c903      	ldmia	r1, {r0, r1}
 8003a60:	f009 ff18 	bl	800d894 <mg_span>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1cf      	bne.n	8003a0a <mg_http_var+0x22>
    }
  }
  return result;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f107 0310 	add.w	r3, r7, #16
 8003a72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a76:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	3730      	adds	r7, #48	@ 0x30
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a84:	b002      	add	sp, #8
 8003a86:	4770      	bx	lr

08003a88 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	@ 0x30
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <mg_http_get_var+0x20>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <mg_http_get_var+0x2c>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d103      	bne.n	8003abc <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8003ab4:	f06f 0301 	mvn.w	r3, #1
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	e033      	b.n	8003b24 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <mg_http_get_var+0x4a>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <mg_http_get_var+0x4a>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad8:	e024      	b.n	8003b24 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8003ada:	f107 031c 	add.w	r3, r7, #28
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f009 fcd9 	bl	800d498 <mg_str_s>
 8003ae6:	f107 0014 	add.w	r0, r7, #20
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	ca06      	ldmia	r2, {r1, r2}
 8003af4:	f7ff ff78 	bl	80039e8 <mg_http_var>
    if (v.buf == NULL) {
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d103      	bne.n	8003b06 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8003afe:	f06f 0303 	mvn.w	r3, #3
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b04:	e00e      	b.n	8003b24 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	f000 f82e 	bl	8003b72 <mg_url_decode>
 8003b16:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	da02      	bge.n	8003b24 <mg_http_get_var+0x9c>
 8003b1e:	f06f 0302 	mvn.w	r3, #2
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3728      	adds	r7, #40	@ 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <isx>:

static bool isx(int c) {
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b2f      	cmp	r3, #47	@ 0x2f
 8003b3a:	dd02      	ble.n	8003b42 <isx+0x14>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b39      	cmp	r3, #57	@ 0x39
 8003b40:	dd0b      	ble.n	8003b5a <isx+0x2c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b60      	cmp	r3, #96	@ 0x60
 8003b46:	dd02      	ble.n	8003b4e <isx+0x20>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b66      	cmp	r3, #102	@ 0x66
 8003b4c:	dd05      	ble.n	8003b5a <isx+0x2c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b40      	cmp	r3, #64	@ 0x40
 8003b52:	dd04      	ble.n	8003b5e <isx+0x30>
         (c >= 'A' && c <= 'F');
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b46      	cmp	r3, #70	@ 0x46
 8003b58:	dc01      	bgt.n	8003b5e <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <isx+0x32>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b08a      	sub	sp, #40	@ 0x28
 8003b76:	af02      	add	r7, sp, #8
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	e059      	b.n	8003c3e <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b25      	cmp	r3, #37	@ 0x25
 8003b94:	d136      	bne.n	8003c04 <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3302      	adds	r3, #2
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d92e      	bls.n	8003bfe <mg_url_decode+0x8c>
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ffbf 	bl	8003b2e <isx>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d023      	beq.n	8003bfe <mg_url_decode+0x8c>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ffb4 	bl	8003b2e <isx>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d018      	beq.n	8003bfe <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	18d1      	adds	r1, r2, r3
 8003bd4:	f107 0310 	add.w	r3, r7, #16
 8003bd8:	2202      	movs	r2, #2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f009 fc79 	bl	800d4d2 <mg_str_n>
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4413      	add	r3, r2
 8003be6:	2201      	movs	r2, #1
 8003be8:	9200      	str	r2, [sp, #0]
 8003bea:	2210      	movs	r2, #16
 8003bec:	f107 0110 	add.w	r1, r7, #16
 8003bf0:	c903      	ldmia	r1, {r0, r1}
 8003bf2:	f009 feac 	bl	800d94e <mg_str_to_num>
        i += 2;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	e019      	b.n	8003c32 <mg_url_decode+0xc0>
      } else {
        return -1;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	e03a      	b.n	8003c7a <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8003c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <mg_url_decode+0xb0>
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b2b      	cmp	r3, #43	@ 0x2b
 8003c14:	d105      	bne.n	8003c22 <mg_url_decode+0xb0>
      dst[j] = ' ';
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e007      	b.n	8003c32 <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	441a      	add	r2, r3
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	440b      	add	r3, r1
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3301      	adds	r3, #1
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d204      	bcs.n	8003c50 <mg_url_decode+0xde>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d89c      	bhi.n	8003b8a <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d204      	bcs.n	8003c62 <mg_url_decode+0xf0>
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d305      	bcc.n	8003c76 <mg_url_decode+0x104>
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d201      	bcs.n	8003c76 <mg_url_decode+0x104>
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	e001      	b.n	8003c7a <mg_url_decode+0x108>
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <isok>:

static bool isok(uint8_t c) {
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	4603      	mov	r3, r0
 8003c8a:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b0a      	cmp	r3, #10
 8003c90:	d008      	beq.n	8003ca4 <isok+0x22>
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	2b0d      	cmp	r3, #13
 8003c96:	d005      	beq.n	8003ca4 <isok+0x22>
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	2b09      	cmp	r3, #9
 8003c9c:	d002      	beq.n	8003ca4 <isok+0x22>
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	2b1f      	cmp	r3, #31
 8003ca2:	d901      	bls.n	8003ca8 <isok+0x26>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <isok+0x28>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e03c      	b.n	8003d46 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ffd4 	bl	8003c82 <isok>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f083 0301 	eor.w	r3, r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <mg_http_get_request_len+0x30>
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	e031      	b.n	8003d50 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00c      	beq.n	8003d0c <mg_http_get_request_len+0x50>
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b0a      	cmp	r3, #10
 8003cfc:	d106      	bne.n	8003d0c <mg_http_get_request_len+0x50>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b0a      	cmp	r3, #10
 8003d0a:	d016      	beq.n	8003d3a <mg_http_get_request_len+0x7e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d916      	bls.n	8003d40 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b0a      	cmp	r3, #10
 8003d1c:	d110      	bne.n	8003d40 <mg_http_get_request_len+0x84>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b0d      	cmp	r3, #13
 8003d2a:	d109      	bne.n	8003d40 <mg_http_get_request_len+0x84>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3b02      	subs	r3, #2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b0a      	cmp	r3, #10
 8003d38:	d102      	bne.n	8003d40 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	e007      	b.n	8003d50 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d3be      	bcc.n	8003ccc <mg_http_get_request_len+0x10>
  }
  return 0;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8003d62:	6838      	ldr	r0, [r7, #0]
 8003d64:	f7fc fb1c 	bl	80003a0 <strlen>
 8003d68:	61b8      	str	r0, [r7, #24]
 8003d6a:	231e      	movs	r3, #30
 8003d6c:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	e01f      	b.n	8003db4 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3302      	adds	r3, #2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	3328      	adds	r3, #40	@ 0x28
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d10b      	bne.n	8003dae <mg_http_get_header+0x56>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fd4b 	bl	800383a <mg_ncasecmp>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <mg_http_get_header+0x56>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	e010      	b.n	8003dd0 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d208      	bcs.n	8003dce <mg_http_get_header+0x76>
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1d2      	bne.n	8003d74 <mg_http_get_header+0x1c>
  }
  return NULL;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003de8:	2b80      	cmp	r3, #128	@ 0x80
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d904      	bls.n	8003e2a <clen+0x2c>
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	2b7d      	cmp	r3, #125	@ 0x7d
 8003e24:	d801      	bhi.n	8003e2a <clen+0x2c>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e054      	b.n	8003ed4 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003e30:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e32:	d10d      	bne.n	8003e50 <clen+0x52>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	dd0a      	ble.n	8003e50 <clen+0x52>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ffc9 	bl	8003dd8 <vcb>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <clen+0x52>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e041      	b.n	8003ed4 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e56:	2be0      	cmp	r3, #224	@ 0xe0
 8003e58:	d116      	bne.n	8003e88 <clen+0x8a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	dd13      	ble.n	8003e88 <clen+0x8a>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3301      	adds	r3, #1
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ffb6 	bl	8003dd8 <vcb>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <clen+0x8a>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	3302      	adds	r3, #2
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ffad 	bl	8003dd8 <vcb>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <clen+0x8a>
 8003e84:	2303      	movs	r3, #3
 8003e86:	e025      	b.n	8003ed4 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8003e8e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003e90:	d11f      	bne.n	8003ed2 <clen+0xd4>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	dd1c      	ble.n	8003ed2 <clen+0xd4>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff ff9a 	bl	8003dd8 <vcb>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d013      	beq.n	8003ed2 <clen+0xd4>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3302      	adds	r3, #2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff91 	bl	8003dd8 <vcb>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <clen+0xd4>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3303      	adds	r3, #3
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ff88 	bl	8003dd8 <vcb>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <clen+0xd4>
    return 4;
 8003ece:	2304      	movs	r3, #4
 8003ed0:	e000      	b.n	8003ed4 <clen+0xd6>
  return 0;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8003eee:	e007      	b.n	8003f00 <skiptorn+0x24>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d207      	bcs.n	8003f18 <skiptorn+0x3c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b0a      	cmp	r3, #10
 8003f0e:	d003      	beq.n	8003f18 <skiptorn+0x3c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b0d      	cmp	r3, #13
 8003f16:	d1eb      	bne.n	8003ef0 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d208      	bcs.n	8003f32 <skiptorn+0x56>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b0d      	cmp	r3, #13
 8003f26:	d106      	bne.n	8003f36 <skiptorn+0x5a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b0a      	cmp	r3, #10
 8003f30:	d001      	beq.n	8003f36 <skiptorn+0x5a>
 8003f32:	2300      	movs	r3, #0
 8003f34:	e017      	b.n	8003f66 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d206      	bcs.n	8003f4c <skiptorn+0x70>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b0d      	cmp	r3, #13
 8003f44:	d102      	bne.n	8003f4c <skiptorn+0x70>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d205      	bcs.n	8003f60 <skiptorn+0x84>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	60fa      	str	r2, [r7, #12]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b0a      	cmp	r3, #10
 8003f5e:	d001      	beq.n	8003f64 <skiptorn+0x88>
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <skiptorn+0x8a>
  return s;
 8003f64:	68fb      	ldr	r3, [r7, #12]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b08a      	sub	sp, #40	@ 0x28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f84:	e09a      	b.n	80040bc <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d301      	bcc.n	8003fa2 <mg_http_parse_headers+0x30>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e092      	b.n	80040c8 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b0a      	cmp	r3, #10
 8003fa8:	f000 808d 	beq.w	80040c6 <mg_http_parse_headers+0x154>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b0d      	cmp	r3, #13
 8003fb2:	d105      	bne.n	8003fc0 <mg_http_parse_headers+0x4e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b0a      	cmp	r3, #10
 8003fbc:	f000 8083 	beq.w	80040c6 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8003fc4:	e007      	b.n	8003fd6 <mg_http_parse_headers+0x64>
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	4413      	add	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d20b      	bcs.n	8003ff6 <mg_http_parse_headers+0x84>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b3a      	cmp	r3, #58	@ 0x3a
 8003fe4:	d007      	beq.n	8003ff6 <mg_http_parse_headers+0x84>
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff ff08 	bl	8003dfe <clen>
 8003fee:	6238      	str	r0, [r7, #32]
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e7      	bne.n	8003fc6 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <mg_http_parse_headers+0x8e>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e063      	b.n	80040c8 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	429a      	cmp	r2, r3
 8004006:	d206      	bcs.n	8004016 <mg_http_parse_headers+0xa4>
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fef7 	bl	8003dfe <clen>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <mg_http_parse_headers+0xa8>
 8004016:	2300      	movs	r3, #0
 8004018:	e056      	b.n	80040c8 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	60fa      	str	r2, [r7, #12]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b3a      	cmp	r3, #58	@ 0x3a
 8004024:	d004      	beq.n	8004030 <mg_http_parse_headers+0xbe>
 8004026:	2300      	movs	r3, #0
 8004028:	e04e      	b.n	80040c8 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3301      	adds	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	d207      	bcs.n	8004048 <mg_http_parse_headers+0xd6>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b20      	cmp	r3, #32
 800403e:	d0f4      	beq.n	800402a <mg_http_parse_headers+0xb8>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b09      	cmp	r3, #9
 8004046:	d0f0      	beq.n	800402a <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8004048:	f107 0310 	add.w	r3, r7, #16
 800404c:	461a      	mov	r2, r3
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff ff43 	bl	8003edc <skiptorn>
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <mg_http_parse_headers+0xf6>
 800405e:	2300      	movs	r3, #0
 8004060:	e032      	b.n	80040c8 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	3b01      	subs	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <mg_http_parse_headers+0x118>
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3b01      	subs	r3, #1
 8004074:	4413      	add	r3, r2
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b20      	cmp	r3, #32
 800407a:	d0f2      	beq.n	8004062 <mg_http_parse_headers+0xf0>
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	3b01      	subs	r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b09      	cmp	r3, #9
 8004088:	d0eb      	beq.n	8004062 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	461a      	mov	r2, r3
 8004094:	f107 0318 	add.w	r3, r7, #24
 8004098:	e893 0003 	ldmia.w	r3, {r0, r1}
 800409c:	e882 0003 	stmia.w	r2, {r0, r1}
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	3308      	adds	r3, #8
 80040aa:	f107 0210 	add.w	r2, r7, #16
 80040ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040b2:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	3301      	adds	r3, #1
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	f4ff af60 	bcc.w	8003f86 <mg_http_parse_headers+0x14>
  }
  return true;
 80040c6:	2301      	movs	r3, #1
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3728      	adds	r7, #40	@ 0x28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b090      	sub	sp, #64	@ 0x40
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff fdec 	bl	8003cbc <mg_http_get_request_len>
 80040e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <mg_http_parse+0x24>
 80040ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	e000      	b.n	80040f6 <mg_http_parse+0x26>
 80040f4:	2300      	movs	r3, #0
 80040f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 80040f8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80040fc:	2100      	movs	r1, #0
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f01e fa15 	bl	802252e <memset>
  if (req_len <= 0) return req_len;
 8004104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004106:	2b00      	cmp	r3, #0
 8004108:	dc01      	bgt.n	800410e <mg_http_parse+0x3e>
 800410a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410c:	e13f      	b.n	800438e <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004126:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 800412a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f04f 32ff 	mov.w	r2, #4294967295
 8004138:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 800414e:	e009      	b.n	8004164 <mg_http_parse+0x94>
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004154:	4413      	add	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415e:	441a      	add	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	429a      	cmp	r2, r3
 800416a:	d20b      	bcs.n	8004184 <mg_http_parse+0xb4>
 800416c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff fe45 	bl	8003dfe <clen>
 8004174:	6378      	str	r0, [r7, #52]	@ 0x34
 8004176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e9      	bne.n	8004150 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800417c:	e002      	b.n	8004184 <mg_http_parse+0xb4>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	429a      	cmp	r2, r3
 800418a:	d203      	bcs.n	8004194 <mg_http_parse+0xc4>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b20      	cmp	r3, #32
 8004192:	d0f4      	beq.n	800417e <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 800419a:	e009      	b.n	80041b0 <mg_http_parse+0xe0>
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a0:	4413      	add	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041aa:	441a      	add	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d20b      	bcs.n	80041d0 <mg_http_parse+0x100>
 80041b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff fe1f 	bl	8003dfe <clen>
 80041c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80041c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e9      	bne.n	800419c <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80041c8:	e002      	b.n	80041d0 <mg_http_parse+0x100>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3301      	adds	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d203      	bcs.n	80041e0 <mg_http_parse+0x110>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d0f4      	beq.n	80041ca <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3318      	adds	r3, #24
 80041e4:	461a      	mov	r2, r3
 80041e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fe77 	bl	8003edc <skiptorn>
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <mg_http_parse+0x12a>
 80041f6:	2300      	movs	r3, #0
 80041f8:	e0c9      	b.n	800438e <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6898      	ldr	r0, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	461a      	mov	r2, r3
 8004204:	213f      	movs	r1, #63	@ 0x3f
 8004206:	f7fc f87b 	bl	8000300 <memchr>
 800420a:	6338      	str	r0, [r7, #48]	@ 0x30
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	2b00      	cmp	r3, #0
 8004210:	d015      	beq.n	800423e <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	441a      	add	r2, r3
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	3301      	adds	r3, #1
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	461a      	mov	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <mg_http_parse+0x17e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <mg_http_parse+0x184>
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	e09c      	b.n	800438e <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f103 0220 	add.w	r2, r3, #32
 800425a:	231e      	movs	r3, #30
 800425c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff fe87 	bl	8003f72 <mg_http_parse_headers>
 8004264:	4603      	mov	r3, r0
 8004266:	f083 0301 	eor.w	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8004270:	f04f 33ff 	mov.w	r3, #4294967295
 8004274:	e08b      	b.n	800438e <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8004276:	4948      	ldr	r1, [pc, #288]	@ (8004398 <mg_http_parse+0x2c8>)
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff fd6d 	bl	8003d58 <mg_http_get_header>
 800427e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d018      	beq.n	80042b8 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004292:	f7ff fb13 	bl	80038bc <mg_to_size_t>
 8004296:	4603      	mov	r3, r0
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <mg_http_parse+0x1d8>
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	e072      	b.n	800438e <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80042ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2205      	movs	r2, #5
 80042be:	4937      	ldr	r1, [pc, #220]	@ (800439c <mg_http_parse+0x2cc>)
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff faba 	bl	800383a <mg_ncasecmp>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d12a      	bne.n	8004336 <mg_http_parse+0x266>
 80042e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d127      	bne.n	8004336 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 80042e6:	f107 0310 	add.w	r3, r7, #16
 80042ea:	492d      	ldr	r1, [pc, #180]	@ (80043a0 <mg_http_parse+0x2d0>)
 80042ec:	4618      	mov	r0, r3
 80042ee:	f009 f8d3 	bl	800d498 <mg_str_s>
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	f107 0310 	add.w	r3, r7, #16
 80042f8:	cb0c      	ldmia	r3, {r2, r3}
 80042fa:	c903      	ldmia	r1, {r0, r1}
 80042fc:	f009 f98f 	bl	800d61e <mg_strcasecmp>
 8004300:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8004306:	f107 0318 	add.w	r3, r7, #24
 800430a:	4926      	ldr	r1, [pc, #152]	@ (80043a4 <mg_http_parse+0x2d4>)
 800430c:	4618      	mov	r0, r3
 800430e:	f009 f8c3 	bl	800d498 <mg_str_s>
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	f107 0318 	add.w	r3, r7, #24
 8004318:	cb0c      	ldmia	r3, {r2, r3}
 800431a:	c903      	ldmia	r1, {r0, r1}
 800431c:	f009 f97f 	bl	800d61e <mg_strcasecmp>
 8004320:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <mg_http_parse+0x266>
    hm->body.len = 0;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800432e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d11b      	bne.n	800437a <mg_http_parse+0x2aa>
 8004342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d018      	beq.n	800437a <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8004348:	f107 0320 	add.w	r3, r7, #32
 800434c:	4916      	ldr	r1, [pc, #88]	@ (80043a8 <mg_http_parse+0x2d8>)
 800434e:	4618      	mov	r0, r3
 8004350:	f009 f8a2 	bl	800d498 <mg_str_s>
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	f107 0320 	add.w	r3, r7, #32
 800435a:	cb0c      	ldmia	r3, {r2, r3}
 800435c:	3108      	adds	r1, #8
 800435e:	c903      	ldmia	r1, {r0, r1}
 8004360:	f009 f95d 	bl	800d61e <mg_strcasecmp>
 8004364:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <mg_http_parse+0x2aa>
    hm->body.len = 0;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8004372:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004382:	429a      	cmp	r2, r3
 8004384:	d202      	bcs.n	800438c <mg_http_parse+0x2bc>
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	e000      	b.n	800438e <mg_http_parse+0x2be>

  return req_len;
 800438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800438e:	4618      	mov	r0, r3
 8004390:	3740      	adds	r7, #64	@ 0x40
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	08023d4c 	.word	0x08023d4c
 800439c:	08023d5c 	.word	0x08023d5c
 80043a0:	08023d64 	.word	0x08023d64
 80043a4:	08023d68 	.word	0x08023d68
 80043a8:	08023d70 	.word	0x08023d70

080043ac <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b64      	subs	r3, #100	@ 0x64
 80043b8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80043bc:	4293      	cmp	r3, r2
 80043be:	f200 8469 	bhi.w	8004c94 <mg_http_status_code_str+0x8e8>
 80043c2:	a101      	add	r1, pc, #4	@ (adr r1, 80043c8 <mg_http_status_code_str+0x1c>)
 80043c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043c8:	08004b99 	.word	0x08004b99
 80043cc:	08004b9d 	.word	0x08004b9d
 80043d0:	08004ba1 	.word	0x08004ba1
 80043d4:	08004c95 	.word	0x08004c95
 80043d8:	08004c95 	.word	0x08004c95
 80043dc:	08004c95 	.word	0x08004c95
 80043e0:	08004c95 	.word	0x08004c95
 80043e4:	08004c95 	.word	0x08004c95
 80043e8:	08004c95 	.word	0x08004c95
 80043ec:	08004c95 	.word	0x08004c95
 80043f0:	08004c95 	.word	0x08004c95
 80043f4:	08004c95 	.word	0x08004c95
 80043f8:	08004c95 	.word	0x08004c95
 80043fc:	08004c95 	.word	0x08004c95
 8004400:	08004c95 	.word	0x08004c95
 8004404:	08004c95 	.word	0x08004c95
 8004408:	08004c95 	.word	0x08004c95
 800440c:	08004c95 	.word	0x08004c95
 8004410:	08004c95 	.word	0x08004c95
 8004414:	08004c95 	.word	0x08004c95
 8004418:	08004c95 	.word	0x08004c95
 800441c:	08004c95 	.word	0x08004c95
 8004420:	08004c95 	.word	0x08004c95
 8004424:	08004c95 	.word	0x08004c95
 8004428:	08004c95 	.word	0x08004c95
 800442c:	08004c95 	.word	0x08004c95
 8004430:	08004c95 	.word	0x08004c95
 8004434:	08004c95 	.word	0x08004c95
 8004438:	08004c95 	.word	0x08004c95
 800443c:	08004c95 	.word	0x08004c95
 8004440:	08004c95 	.word	0x08004c95
 8004444:	08004c95 	.word	0x08004c95
 8004448:	08004c95 	.word	0x08004c95
 800444c:	08004c95 	.word	0x08004c95
 8004450:	08004c95 	.word	0x08004c95
 8004454:	08004c95 	.word	0x08004c95
 8004458:	08004c95 	.word	0x08004c95
 800445c:	08004c95 	.word	0x08004c95
 8004460:	08004c95 	.word	0x08004c95
 8004464:	08004c95 	.word	0x08004c95
 8004468:	08004c95 	.word	0x08004c95
 800446c:	08004c95 	.word	0x08004c95
 8004470:	08004c95 	.word	0x08004c95
 8004474:	08004c95 	.word	0x08004c95
 8004478:	08004c95 	.word	0x08004c95
 800447c:	08004c95 	.word	0x08004c95
 8004480:	08004c95 	.word	0x08004c95
 8004484:	08004c95 	.word	0x08004c95
 8004488:	08004c95 	.word	0x08004c95
 800448c:	08004c95 	.word	0x08004c95
 8004490:	08004c95 	.word	0x08004c95
 8004494:	08004c95 	.word	0x08004c95
 8004498:	08004c95 	.word	0x08004c95
 800449c:	08004c95 	.word	0x08004c95
 80044a0:	08004c95 	.word	0x08004c95
 80044a4:	08004c95 	.word	0x08004c95
 80044a8:	08004c95 	.word	0x08004c95
 80044ac:	08004c95 	.word	0x08004c95
 80044b0:	08004c95 	.word	0x08004c95
 80044b4:	08004c95 	.word	0x08004c95
 80044b8:	08004c95 	.word	0x08004c95
 80044bc:	08004c95 	.word	0x08004c95
 80044c0:	08004c95 	.word	0x08004c95
 80044c4:	08004c95 	.word	0x08004c95
 80044c8:	08004c95 	.word	0x08004c95
 80044cc:	08004c95 	.word	0x08004c95
 80044d0:	08004c95 	.word	0x08004c95
 80044d4:	08004c95 	.word	0x08004c95
 80044d8:	08004c95 	.word	0x08004c95
 80044dc:	08004c95 	.word	0x08004c95
 80044e0:	08004c95 	.word	0x08004c95
 80044e4:	08004c95 	.word	0x08004c95
 80044e8:	08004c95 	.word	0x08004c95
 80044ec:	08004c95 	.word	0x08004c95
 80044f0:	08004c95 	.word	0x08004c95
 80044f4:	08004c95 	.word	0x08004c95
 80044f8:	08004c95 	.word	0x08004c95
 80044fc:	08004c95 	.word	0x08004c95
 8004500:	08004c95 	.word	0x08004c95
 8004504:	08004c95 	.word	0x08004c95
 8004508:	08004c95 	.word	0x08004c95
 800450c:	08004c95 	.word	0x08004c95
 8004510:	08004c95 	.word	0x08004c95
 8004514:	08004c95 	.word	0x08004c95
 8004518:	08004c95 	.word	0x08004c95
 800451c:	08004c95 	.word	0x08004c95
 8004520:	08004c95 	.word	0x08004c95
 8004524:	08004c95 	.word	0x08004c95
 8004528:	08004c95 	.word	0x08004c95
 800452c:	08004c95 	.word	0x08004c95
 8004530:	08004c95 	.word	0x08004c95
 8004534:	08004c95 	.word	0x08004c95
 8004538:	08004c95 	.word	0x08004c95
 800453c:	08004c95 	.word	0x08004c95
 8004540:	08004c95 	.word	0x08004c95
 8004544:	08004c95 	.word	0x08004c95
 8004548:	08004c95 	.word	0x08004c95
 800454c:	08004c95 	.word	0x08004c95
 8004550:	08004c95 	.word	0x08004c95
 8004554:	08004c95 	.word	0x08004c95
 8004558:	08004ba5 	.word	0x08004ba5
 800455c:	08004ba9 	.word	0x08004ba9
 8004560:	08004bad 	.word	0x08004bad
 8004564:	08004bb1 	.word	0x08004bb1
 8004568:	08004bb5 	.word	0x08004bb5
 800456c:	08004bb9 	.word	0x08004bb9
 8004570:	08004bbd 	.word	0x08004bbd
 8004574:	08004bc1 	.word	0x08004bc1
 8004578:	08004bc5 	.word	0x08004bc5
 800457c:	08004c95 	.word	0x08004c95
 8004580:	08004c95 	.word	0x08004c95
 8004584:	08004c95 	.word	0x08004c95
 8004588:	08004c95 	.word	0x08004c95
 800458c:	08004c95 	.word	0x08004c95
 8004590:	08004c95 	.word	0x08004c95
 8004594:	08004c95 	.word	0x08004c95
 8004598:	08004c95 	.word	0x08004c95
 800459c:	08004c95 	.word	0x08004c95
 80045a0:	08004c95 	.word	0x08004c95
 80045a4:	08004c95 	.word	0x08004c95
 80045a8:	08004c95 	.word	0x08004c95
 80045ac:	08004c95 	.word	0x08004c95
 80045b0:	08004c95 	.word	0x08004c95
 80045b4:	08004c95 	.word	0x08004c95
 80045b8:	08004c95 	.word	0x08004c95
 80045bc:	08004c95 	.word	0x08004c95
 80045c0:	08004bc9 	.word	0x08004bc9
 80045c4:	08004c95 	.word	0x08004c95
 80045c8:	08004c95 	.word	0x08004c95
 80045cc:	08004c95 	.word	0x08004c95
 80045d0:	08004c95 	.word	0x08004c95
 80045d4:	08004c95 	.word	0x08004c95
 80045d8:	08004c95 	.word	0x08004c95
 80045dc:	08004c95 	.word	0x08004c95
 80045e0:	08004c95 	.word	0x08004c95
 80045e4:	08004c95 	.word	0x08004c95
 80045e8:	08004c95 	.word	0x08004c95
 80045ec:	08004c95 	.word	0x08004c95
 80045f0:	08004c95 	.word	0x08004c95
 80045f4:	08004c95 	.word	0x08004c95
 80045f8:	08004c95 	.word	0x08004c95
 80045fc:	08004c95 	.word	0x08004c95
 8004600:	08004c95 	.word	0x08004c95
 8004604:	08004c95 	.word	0x08004c95
 8004608:	08004c95 	.word	0x08004c95
 800460c:	08004c95 	.word	0x08004c95
 8004610:	08004c95 	.word	0x08004c95
 8004614:	08004c95 	.word	0x08004c95
 8004618:	08004c95 	.word	0x08004c95
 800461c:	08004c95 	.word	0x08004c95
 8004620:	08004c95 	.word	0x08004c95
 8004624:	08004c95 	.word	0x08004c95
 8004628:	08004c95 	.word	0x08004c95
 800462c:	08004c95 	.word	0x08004c95
 8004630:	08004c95 	.word	0x08004c95
 8004634:	08004c95 	.word	0x08004c95
 8004638:	08004c95 	.word	0x08004c95
 800463c:	08004c95 	.word	0x08004c95
 8004640:	08004c95 	.word	0x08004c95
 8004644:	08004c95 	.word	0x08004c95
 8004648:	08004c95 	.word	0x08004c95
 800464c:	08004c95 	.word	0x08004c95
 8004650:	08004c95 	.word	0x08004c95
 8004654:	08004c95 	.word	0x08004c95
 8004658:	08004c95 	.word	0x08004c95
 800465c:	08004c95 	.word	0x08004c95
 8004660:	08004c95 	.word	0x08004c95
 8004664:	08004c95 	.word	0x08004c95
 8004668:	08004c95 	.word	0x08004c95
 800466c:	08004c95 	.word	0x08004c95
 8004670:	08004c95 	.word	0x08004c95
 8004674:	08004c95 	.word	0x08004c95
 8004678:	08004c95 	.word	0x08004c95
 800467c:	08004c95 	.word	0x08004c95
 8004680:	08004c95 	.word	0x08004c95
 8004684:	08004c95 	.word	0x08004c95
 8004688:	08004c95 	.word	0x08004c95
 800468c:	08004c95 	.word	0x08004c95
 8004690:	08004c95 	.word	0x08004c95
 8004694:	08004c95 	.word	0x08004c95
 8004698:	08004c95 	.word	0x08004c95
 800469c:	08004c95 	.word	0x08004c95
 80046a0:	08004c95 	.word	0x08004c95
 80046a4:	08004c95 	.word	0x08004c95
 80046a8:	08004c95 	.word	0x08004c95
 80046ac:	08004c95 	.word	0x08004c95
 80046b0:	08004c95 	.word	0x08004c95
 80046b4:	08004c95 	.word	0x08004c95
 80046b8:	08004c95 	.word	0x08004c95
 80046bc:	08004c95 	.word	0x08004c95
 80046c0:	08004c95 	.word	0x08004c95
 80046c4:	08004c95 	.word	0x08004c95
 80046c8:	08004c95 	.word	0x08004c95
 80046cc:	08004c95 	.word	0x08004c95
 80046d0:	08004c95 	.word	0x08004c95
 80046d4:	08004c95 	.word	0x08004c95
 80046d8:	08004c95 	.word	0x08004c95
 80046dc:	08004c95 	.word	0x08004c95
 80046e0:	08004c95 	.word	0x08004c95
 80046e4:	08004c95 	.word	0x08004c95
 80046e8:	08004bcd 	.word	0x08004bcd
 80046ec:	08004bd1 	.word	0x08004bd1
 80046f0:	08004bd5 	.word	0x08004bd5
 80046f4:	08004bd9 	.word	0x08004bd9
 80046f8:	08004bdd 	.word	0x08004bdd
 80046fc:	08004be1 	.word	0x08004be1
 8004700:	08004c95 	.word	0x08004c95
 8004704:	08004be5 	.word	0x08004be5
 8004708:	08004be9 	.word	0x08004be9
 800470c:	08004c95 	.word	0x08004c95
 8004710:	08004c95 	.word	0x08004c95
 8004714:	08004c95 	.word	0x08004c95
 8004718:	08004c95 	.word	0x08004c95
 800471c:	08004c95 	.word	0x08004c95
 8004720:	08004c95 	.word	0x08004c95
 8004724:	08004c95 	.word	0x08004c95
 8004728:	08004c95 	.word	0x08004c95
 800472c:	08004c95 	.word	0x08004c95
 8004730:	08004c95 	.word	0x08004c95
 8004734:	08004c95 	.word	0x08004c95
 8004738:	08004c95 	.word	0x08004c95
 800473c:	08004c95 	.word	0x08004c95
 8004740:	08004c95 	.word	0x08004c95
 8004744:	08004c95 	.word	0x08004c95
 8004748:	08004c95 	.word	0x08004c95
 800474c:	08004c95 	.word	0x08004c95
 8004750:	08004c95 	.word	0x08004c95
 8004754:	08004c95 	.word	0x08004c95
 8004758:	08004c95 	.word	0x08004c95
 800475c:	08004c95 	.word	0x08004c95
 8004760:	08004c95 	.word	0x08004c95
 8004764:	08004c95 	.word	0x08004c95
 8004768:	08004c95 	.word	0x08004c95
 800476c:	08004c95 	.word	0x08004c95
 8004770:	08004c95 	.word	0x08004c95
 8004774:	08004c95 	.word	0x08004c95
 8004778:	08004c95 	.word	0x08004c95
 800477c:	08004c95 	.word	0x08004c95
 8004780:	08004c95 	.word	0x08004c95
 8004784:	08004c95 	.word	0x08004c95
 8004788:	08004c95 	.word	0x08004c95
 800478c:	08004c95 	.word	0x08004c95
 8004790:	08004c95 	.word	0x08004c95
 8004794:	08004c95 	.word	0x08004c95
 8004798:	08004c95 	.word	0x08004c95
 800479c:	08004c95 	.word	0x08004c95
 80047a0:	08004c95 	.word	0x08004c95
 80047a4:	08004c95 	.word	0x08004c95
 80047a8:	08004c95 	.word	0x08004c95
 80047ac:	08004c95 	.word	0x08004c95
 80047b0:	08004c95 	.word	0x08004c95
 80047b4:	08004c95 	.word	0x08004c95
 80047b8:	08004c95 	.word	0x08004c95
 80047bc:	08004c95 	.word	0x08004c95
 80047c0:	08004c95 	.word	0x08004c95
 80047c4:	08004c95 	.word	0x08004c95
 80047c8:	08004c95 	.word	0x08004c95
 80047cc:	08004c95 	.word	0x08004c95
 80047d0:	08004c95 	.word	0x08004c95
 80047d4:	08004c95 	.word	0x08004c95
 80047d8:	08004c95 	.word	0x08004c95
 80047dc:	08004c95 	.word	0x08004c95
 80047e0:	08004c95 	.word	0x08004c95
 80047e4:	08004c95 	.word	0x08004c95
 80047e8:	08004c95 	.word	0x08004c95
 80047ec:	08004c95 	.word	0x08004c95
 80047f0:	08004c95 	.word	0x08004c95
 80047f4:	08004c95 	.word	0x08004c95
 80047f8:	08004c95 	.word	0x08004c95
 80047fc:	08004c95 	.word	0x08004c95
 8004800:	08004c95 	.word	0x08004c95
 8004804:	08004c95 	.word	0x08004c95
 8004808:	08004c95 	.word	0x08004c95
 800480c:	08004c95 	.word	0x08004c95
 8004810:	08004c95 	.word	0x08004c95
 8004814:	08004c95 	.word	0x08004c95
 8004818:	08004c95 	.word	0x08004c95
 800481c:	08004c95 	.word	0x08004c95
 8004820:	08004c95 	.word	0x08004c95
 8004824:	08004c95 	.word	0x08004c95
 8004828:	08004c95 	.word	0x08004c95
 800482c:	08004c95 	.word	0x08004c95
 8004830:	08004c95 	.word	0x08004c95
 8004834:	08004c95 	.word	0x08004c95
 8004838:	08004c95 	.word	0x08004c95
 800483c:	08004c95 	.word	0x08004c95
 8004840:	08004c95 	.word	0x08004c95
 8004844:	08004c95 	.word	0x08004c95
 8004848:	08004c95 	.word	0x08004c95
 800484c:	08004c95 	.word	0x08004c95
 8004850:	08004c95 	.word	0x08004c95
 8004854:	08004c95 	.word	0x08004c95
 8004858:	08004c95 	.word	0x08004c95
 800485c:	08004c95 	.word	0x08004c95
 8004860:	08004c95 	.word	0x08004c95
 8004864:	08004c95 	.word	0x08004c95
 8004868:	08004c95 	.word	0x08004c95
 800486c:	08004c95 	.word	0x08004c95
 8004870:	08004c95 	.word	0x08004c95
 8004874:	08004c95 	.word	0x08004c95
 8004878:	08004bed 	.word	0x08004bed
 800487c:	08004bf1 	.word	0x08004bf1
 8004880:	08004bf5 	.word	0x08004bf5
 8004884:	08004bf9 	.word	0x08004bf9
 8004888:	08004bfd 	.word	0x08004bfd
 800488c:	08004c01 	.word	0x08004c01
 8004890:	08004c05 	.word	0x08004c05
 8004894:	08004c09 	.word	0x08004c09
 8004898:	08004c0d 	.word	0x08004c0d
 800489c:	08004c11 	.word	0x08004c11
 80048a0:	08004c15 	.word	0x08004c15
 80048a4:	08004c19 	.word	0x08004c19
 80048a8:	08004c1d 	.word	0x08004c1d
 80048ac:	08004c21 	.word	0x08004c21
 80048b0:	08004c25 	.word	0x08004c25
 80048b4:	08004c29 	.word	0x08004c29
 80048b8:	08004c2d 	.word	0x08004c2d
 80048bc:	08004c31 	.word	0x08004c31
 80048c0:	08004c35 	.word	0x08004c35
 80048c4:	08004c95 	.word	0x08004c95
 80048c8:	08004c95 	.word	0x08004c95
 80048cc:	08004c39 	.word	0x08004c39
 80048d0:	08004c3d 	.word	0x08004c3d
 80048d4:	08004c41 	.word	0x08004c41
 80048d8:	08004c45 	.word	0x08004c45
 80048dc:	08004c95 	.word	0x08004c95
 80048e0:	08004c49 	.word	0x08004c49
 80048e4:	08004c95 	.word	0x08004c95
 80048e8:	08004c4d 	.word	0x08004c4d
 80048ec:	08004c51 	.word	0x08004c51
 80048f0:	08004c95 	.word	0x08004c95
 80048f4:	08004c55 	.word	0x08004c55
 80048f8:	08004c95 	.word	0x08004c95
 80048fc:	08004c95 	.word	0x08004c95
 8004900:	08004c95 	.word	0x08004c95
 8004904:	08004c95 	.word	0x08004c95
 8004908:	08004c95 	.word	0x08004c95
 800490c:	08004c95 	.word	0x08004c95
 8004910:	08004c95 	.word	0x08004c95
 8004914:	08004c95 	.word	0x08004c95
 8004918:	08004c95 	.word	0x08004c95
 800491c:	08004c95 	.word	0x08004c95
 8004920:	08004c95 	.word	0x08004c95
 8004924:	08004c95 	.word	0x08004c95
 8004928:	08004c59 	.word	0x08004c59
 800492c:	08004c95 	.word	0x08004c95
 8004930:	08004c95 	.word	0x08004c95
 8004934:	08004c95 	.word	0x08004c95
 8004938:	08004c95 	.word	0x08004c95
 800493c:	08004c95 	.word	0x08004c95
 8004940:	08004c95 	.word	0x08004c95
 8004944:	08004c5d 	.word	0x08004c5d
 8004948:	08004c95 	.word	0x08004c95
 800494c:	08004c95 	.word	0x08004c95
 8004950:	08004c95 	.word	0x08004c95
 8004954:	08004c95 	.word	0x08004c95
 8004958:	08004c95 	.word	0x08004c95
 800495c:	08004c95 	.word	0x08004c95
 8004960:	08004c95 	.word	0x08004c95
 8004964:	08004c95 	.word	0x08004c95
 8004968:	08004c95 	.word	0x08004c95
 800496c:	08004c95 	.word	0x08004c95
 8004970:	08004c95 	.word	0x08004c95
 8004974:	08004c95 	.word	0x08004c95
 8004978:	08004c95 	.word	0x08004c95
 800497c:	08004c95 	.word	0x08004c95
 8004980:	08004c95 	.word	0x08004c95
 8004984:	08004c95 	.word	0x08004c95
 8004988:	08004c95 	.word	0x08004c95
 800498c:	08004c95 	.word	0x08004c95
 8004990:	08004c95 	.word	0x08004c95
 8004994:	08004c95 	.word	0x08004c95
 8004998:	08004c95 	.word	0x08004c95
 800499c:	08004c95 	.word	0x08004c95
 80049a0:	08004c95 	.word	0x08004c95
 80049a4:	08004c95 	.word	0x08004c95
 80049a8:	08004c95 	.word	0x08004c95
 80049ac:	08004c95 	.word	0x08004c95
 80049b0:	08004c95 	.word	0x08004c95
 80049b4:	08004c95 	.word	0x08004c95
 80049b8:	08004c95 	.word	0x08004c95
 80049bc:	08004c95 	.word	0x08004c95
 80049c0:	08004c95 	.word	0x08004c95
 80049c4:	08004c95 	.word	0x08004c95
 80049c8:	08004c95 	.word	0x08004c95
 80049cc:	08004c95 	.word	0x08004c95
 80049d0:	08004c95 	.word	0x08004c95
 80049d4:	08004c95 	.word	0x08004c95
 80049d8:	08004c95 	.word	0x08004c95
 80049dc:	08004c95 	.word	0x08004c95
 80049e0:	08004c95 	.word	0x08004c95
 80049e4:	08004c95 	.word	0x08004c95
 80049e8:	08004c95 	.word	0x08004c95
 80049ec:	08004c95 	.word	0x08004c95
 80049f0:	08004c95 	.word	0x08004c95
 80049f4:	08004c95 	.word	0x08004c95
 80049f8:	08004c95 	.word	0x08004c95
 80049fc:	08004c95 	.word	0x08004c95
 8004a00:	08004c95 	.word	0x08004c95
 8004a04:	08004c61 	.word	0x08004c61
 8004a08:	08004c65 	.word	0x08004c65
 8004a0c:	08004c69 	.word	0x08004c69
 8004a10:	08004c6d 	.word	0x08004c6d
 8004a14:	08004c71 	.word	0x08004c71
 8004a18:	08004c75 	.word	0x08004c75
 8004a1c:	08004c79 	.word	0x08004c79
 8004a20:	08004c7d 	.word	0x08004c7d
 8004a24:	08004c81 	.word	0x08004c81
 8004a28:	08004c85 	.word	0x08004c85
 8004a2c:	08004c95 	.word	0x08004c95
 8004a30:	08004c89 	.word	0x08004c89
 8004a34:	08004c8d 	.word	0x08004c8d
 8004a38:	08004c95 	.word	0x08004c95
 8004a3c:	08004c95 	.word	0x08004c95
 8004a40:	08004c95 	.word	0x08004c95
 8004a44:	08004c95 	.word	0x08004c95
 8004a48:	08004c95 	.word	0x08004c95
 8004a4c:	08004c95 	.word	0x08004c95
 8004a50:	08004c95 	.word	0x08004c95
 8004a54:	08004c95 	.word	0x08004c95
 8004a58:	08004c95 	.word	0x08004c95
 8004a5c:	08004c95 	.word	0x08004c95
 8004a60:	08004c95 	.word	0x08004c95
 8004a64:	08004c95 	.word	0x08004c95
 8004a68:	08004c95 	.word	0x08004c95
 8004a6c:	08004c95 	.word	0x08004c95
 8004a70:	08004c95 	.word	0x08004c95
 8004a74:	08004c95 	.word	0x08004c95
 8004a78:	08004c95 	.word	0x08004c95
 8004a7c:	08004c95 	.word	0x08004c95
 8004a80:	08004c95 	.word	0x08004c95
 8004a84:	08004c95 	.word	0x08004c95
 8004a88:	08004c95 	.word	0x08004c95
 8004a8c:	08004c95 	.word	0x08004c95
 8004a90:	08004c95 	.word	0x08004c95
 8004a94:	08004c95 	.word	0x08004c95
 8004a98:	08004c95 	.word	0x08004c95
 8004a9c:	08004c95 	.word	0x08004c95
 8004aa0:	08004c95 	.word	0x08004c95
 8004aa4:	08004c95 	.word	0x08004c95
 8004aa8:	08004c95 	.word	0x08004c95
 8004aac:	08004c95 	.word	0x08004c95
 8004ab0:	08004c95 	.word	0x08004c95
 8004ab4:	08004c95 	.word	0x08004c95
 8004ab8:	08004c95 	.word	0x08004c95
 8004abc:	08004c95 	.word	0x08004c95
 8004ac0:	08004c95 	.word	0x08004c95
 8004ac4:	08004c95 	.word	0x08004c95
 8004ac8:	08004c95 	.word	0x08004c95
 8004acc:	08004c95 	.word	0x08004c95
 8004ad0:	08004c95 	.word	0x08004c95
 8004ad4:	08004c95 	.word	0x08004c95
 8004ad8:	08004c95 	.word	0x08004c95
 8004adc:	08004c95 	.word	0x08004c95
 8004ae0:	08004c95 	.word	0x08004c95
 8004ae4:	08004c95 	.word	0x08004c95
 8004ae8:	08004c95 	.word	0x08004c95
 8004aec:	08004c95 	.word	0x08004c95
 8004af0:	08004c95 	.word	0x08004c95
 8004af4:	08004c95 	.word	0x08004c95
 8004af8:	08004c95 	.word	0x08004c95
 8004afc:	08004c95 	.word	0x08004c95
 8004b00:	08004c95 	.word	0x08004c95
 8004b04:	08004c95 	.word	0x08004c95
 8004b08:	08004c95 	.word	0x08004c95
 8004b0c:	08004c95 	.word	0x08004c95
 8004b10:	08004c95 	.word	0x08004c95
 8004b14:	08004c95 	.word	0x08004c95
 8004b18:	08004c95 	.word	0x08004c95
 8004b1c:	08004c95 	.word	0x08004c95
 8004b20:	08004c95 	.word	0x08004c95
 8004b24:	08004c95 	.word	0x08004c95
 8004b28:	08004c95 	.word	0x08004c95
 8004b2c:	08004c95 	.word	0x08004c95
 8004b30:	08004c95 	.word	0x08004c95
 8004b34:	08004c95 	.word	0x08004c95
 8004b38:	08004c95 	.word	0x08004c95
 8004b3c:	08004c95 	.word	0x08004c95
 8004b40:	08004c95 	.word	0x08004c95
 8004b44:	08004c95 	.word	0x08004c95
 8004b48:	08004c95 	.word	0x08004c95
 8004b4c:	08004c95 	.word	0x08004c95
 8004b50:	08004c95 	.word	0x08004c95
 8004b54:	08004c95 	.word	0x08004c95
 8004b58:	08004c95 	.word	0x08004c95
 8004b5c:	08004c95 	.word	0x08004c95
 8004b60:	08004c95 	.word	0x08004c95
 8004b64:	08004c95 	.word	0x08004c95
 8004b68:	08004c95 	.word	0x08004c95
 8004b6c:	08004c95 	.word	0x08004c95
 8004b70:	08004c95 	.word	0x08004c95
 8004b74:	08004c95 	.word	0x08004c95
 8004b78:	08004c95 	.word	0x08004c95
 8004b7c:	08004c95 	.word	0x08004c95
 8004b80:	08004c95 	.word	0x08004c95
 8004b84:	08004c95 	.word	0x08004c95
 8004b88:	08004c95 	.word	0x08004c95
 8004b8c:	08004c95 	.word	0x08004c95
 8004b90:	08004c95 	.word	0x08004c95
 8004b94:	08004c91 	.word	0x08004c91
    case 100: return "Continue";
 8004b98:	4b42      	ldr	r3, [pc, #264]	@ (8004ca4 <mg_http_status_code_str+0x8f8>)
 8004b9a:	e07c      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8004b9c:	4b42      	ldr	r3, [pc, #264]	@ (8004ca8 <mg_http_status_code_str+0x8fc>)
 8004b9e:	e07a      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8004ba0:	4b42      	ldr	r3, [pc, #264]	@ (8004cac <mg_http_status_code_str+0x900>)
 8004ba2:	e078      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8004ba4:	4b42      	ldr	r3, [pc, #264]	@ (8004cb0 <mg_http_status_code_str+0x904>)
 8004ba6:	e076      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8004ba8:	4b42      	ldr	r3, [pc, #264]	@ (8004cb4 <mg_http_status_code_str+0x908>)
 8004baa:	e074      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8004bac:	4b42      	ldr	r3, [pc, #264]	@ (8004cb8 <mg_http_status_code_str+0x90c>)
 8004bae:	e072      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8004bb0:	4b42      	ldr	r3, [pc, #264]	@ (8004cbc <mg_http_status_code_str+0x910>)
 8004bb2:	e070      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8004bb4:	4b42      	ldr	r3, [pc, #264]	@ (8004cc0 <mg_http_status_code_str+0x914>)
 8004bb6:	e06e      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8004bb8:	4b42      	ldr	r3, [pc, #264]	@ (8004cc4 <mg_http_status_code_str+0x918>)
 8004bba:	e06c      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8004bbc:	4b42      	ldr	r3, [pc, #264]	@ (8004cc8 <mg_http_status_code_str+0x91c>)
 8004bbe:	e06a      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8004bc0:	4b42      	ldr	r3, [pc, #264]	@ (8004ccc <mg_http_status_code_str+0x920>)
 8004bc2:	e068      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8004bc4:	4b42      	ldr	r3, [pc, #264]	@ (8004cd0 <mg_http_status_code_str+0x924>)
 8004bc6:	e066      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8004bc8:	4b42      	ldr	r3, [pc, #264]	@ (8004cd4 <mg_http_status_code_str+0x928>)
 8004bca:	e064      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8004bcc:	4b42      	ldr	r3, [pc, #264]	@ (8004cd8 <mg_http_status_code_str+0x92c>)
 8004bce:	e062      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8004bd0:	4b42      	ldr	r3, [pc, #264]	@ (8004cdc <mg_http_status_code_str+0x930>)
 8004bd2:	e060      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8004bd4:	4b42      	ldr	r3, [pc, #264]	@ (8004ce0 <mg_http_status_code_str+0x934>)
 8004bd6:	e05e      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8004bd8:	4b42      	ldr	r3, [pc, #264]	@ (8004ce4 <mg_http_status_code_str+0x938>)
 8004bda:	e05c      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8004bdc:	4b42      	ldr	r3, [pc, #264]	@ (8004ce8 <mg_http_status_code_str+0x93c>)
 8004bde:	e05a      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8004be0:	4b42      	ldr	r3, [pc, #264]	@ (8004cec <mg_http_status_code_str+0x940>)
 8004be2:	e058      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8004be4:	4b42      	ldr	r3, [pc, #264]	@ (8004cf0 <mg_http_status_code_str+0x944>)
 8004be6:	e056      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8004be8:	4b42      	ldr	r3, [pc, #264]	@ (8004cf4 <mg_http_status_code_str+0x948>)
 8004bea:	e054      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8004bec:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <mg_http_status_code_str+0x94c>)
 8004bee:	e052      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8004bf0:	4b42      	ldr	r3, [pc, #264]	@ (8004cfc <mg_http_status_code_str+0x950>)
 8004bf2:	e050      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8004bf4:	4b42      	ldr	r3, [pc, #264]	@ (8004d00 <mg_http_status_code_str+0x954>)
 8004bf6:	e04e      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8004bf8:	4b42      	ldr	r3, [pc, #264]	@ (8004d04 <mg_http_status_code_str+0x958>)
 8004bfa:	e04c      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8004bfc:	4b42      	ldr	r3, [pc, #264]	@ (8004d08 <mg_http_status_code_str+0x95c>)
 8004bfe:	e04a      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8004c00:	4b42      	ldr	r3, [pc, #264]	@ (8004d0c <mg_http_status_code_str+0x960>)
 8004c02:	e048      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8004c04:	4b42      	ldr	r3, [pc, #264]	@ (8004d10 <mg_http_status_code_str+0x964>)
 8004c06:	e046      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8004c08:	4b42      	ldr	r3, [pc, #264]	@ (8004d14 <mg_http_status_code_str+0x968>)
 8004c0a:	e044      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8004c0c:	4b42      	ldr	r3, [pc, #264]	@ (8004d18 <mg_http_status_code_str+0x96c>)
 8004c0e:	e042      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8004c10:	4b42      	ldr	r3, [pc, #264]	@ (8004d1c <mg_http_status_code_str+0x970>)
 8004c12:	e040      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8004c14:	4b42      	ldr	r3, [pc, #264]	@ (8004d20 <mg_http_status_code_str+0x974>)
 8004c16:	e03e      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8004c18:	4b42      	ldr	r3, [pc, #264]	@ (8004d24 <mg_http_status_code_str+0x978>)
 8004c1a:	e03c      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8004c1c:	4b42      	ldr	r3, [pc, #264]	@ (8004d28 <mg_http_status_code_str+0x97c>)
 8004c1e:	e03a      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8004c20:	4b42      	ldr	r3, [pc, #264]	@ (8004d2c <mg_http_status_code_str+0x980>)
 8004c22:	e038      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8004c24:	4b42      	ldr	r3, [pc, #264]	@ (8004d30 <mg_http_status_code_str+0x984>)
 8004c26:	e036      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8004c28:	4b42      	ldr	r3, [pc, #264]	@ (8004d34 <mg_http_status_code_str+0x988>)
 8004c2a:	e034      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8004c2c:	4b42      	ldr	r3, [pc, #264]	@ (8004d38 <mg_http_status_code_str+0x98c>)
 8004c2e:	e032      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8004c30:	4b42      	ldr	r3, [pc, #264]	@ (8004d3c <mg_http_status_code_str+0x990>)
 8004c32:	e030      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8004c34:	4b42      	ldr	r3, [pc, #264]	@ (8004d40 <mg_http_status_code_str+0x994>)
 8004c36:	e02e      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8004c38:	4b42      	ldr	r3, [pc, #264]	@ (8004d44 <mg_http_status_code_str+0x998>)
 8004c3a:	e02c      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8004c3c:	4b42      	ldr	r3, [pc, #264]	@ (8004d48 <mg_http_status_code_str+0x99c>)
 8004c3e:	e02a      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8004c40:	4b42      	ldr	r3, [pc, #264]	@ (8004d4c <mg_http_status_code_str+0x9a0>)
 8004c42:	e028      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8004c44:	4b42      	ldr	r3, [pc, #264]	@ (8004d50 <mg_http_status_code_str+0x9a4>)
 8004c46:	e026      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8004c48:	4b42      	ldr	r3, [pc, #264]	@ (8004d54 <mg_http_status_code_str+0x9a8>)
 8004c4a:	e024      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8004c4c:	4b42      	ldr	r3, [pc, #264]	@ (8004d58 <mg_http_status_code_str+0x9ac>)
 8004c4e:	e022      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8004c50:	4b42      	ldr	r3, [pc, #264]	@ (8004d5c <mg_http_status_code_str+0x9b0>)
 8004c52:	e020      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8004c54:	4b42      	ldr	r3, [pc, #264]	@ (8004d60 <mg_http_status_code_str+0x9b4>)
 8004c56:	e01e      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8004c58:	4b42      	ldr	r3, [pc, #264]	@ (8004d64 <mg_http_status_code_str+0x9b8>)
 8004c5a:	e01c      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8004c5c:	4b42      	ldr	r3, [pc, #264]	@ (8004d68 <mg_http_status_code_str+0x9bc>)
 8004c5e:	e01a      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8004c60:	4b42      	ldr	r3, [pc, #264]	@ (8004d6c <mg_http_status_code_str+0x9c0>)
 8004c62:	e018      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8004c64:	4b42      	ldr	r3, [pc, #264]	@ (8004d70 <mg_http_status_code_str+0x9c4>)
 8004c66:	e016      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8004c68:	4b42      	ldr	r3, [pc, #264]	@ (8004d74 <mg_http_status_code_str+0x9c8>)
 8004c6a:	e014      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8004c6c:	4b42      	ldr	r3, [pc, #264]	@ (8004d78 <mg_http_status_code_str+0x9cc>)
 8004c6e:	e012      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8004c70:	4b42      	ldr	r3, [pc, #264]	@ (8004d7c <mg_http_status_code_str+0x9d0>)
 8004c72:	e010      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8004c74:	4b42      	ldr	r3, [pc, #264]	@ (8004d80 <mg_http_status_code_str+0x9d4>)
 8004c76:	e00e      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8004c78:	4b42      	ldr	r3, [pc, #264]	@ (8004d84 <mg_http_status_code_str+0x9d8>)
 8004c7a:	e00c      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8004c7c:	4b42      	ldr	r3, [pc, #264]	@ (8004d88 <mg_http_status_code_str+0x9dc>)
 8004c7e:	e00a      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8004c80:	4b42      	ldr	r3, [pc, #264]	@ (8004d8c <mg_http_status_code_str+0x9e0>)
 8004c82:	e008      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8004c84:	4b42      	ldr	r3, [pc, #264]	@ (8004d90 <mg_http_status_code_str+0x9e4>)
 8004c86:	e006      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8004c88:	4b42      	ldr	r3, [pc, #264]	@ (8004d94 <mg_http_status_code_str+0x9e8>)
 8004c8a:	e004      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8004c8c:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <mg_http_status_code_str+0x9ec>)
 8004c8e:	e002      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8004c90:	4b42      	ldr	r3, [pc, #264]	@ (8004d9c <mg_http_status_code_str+0x9f0>)
 8004c92:	e000      	b.n	8004c96 <mg_http_status_code_str+0x8ea>
    default: return "";
 8004c94:	4b42      	ldr	r3, [pc, #264]	@ (8004da0 <mg_http_status_code_str+0x9f4>)
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	08023d90 	.word	0x08023d90
 8004ca8:	08023d9c 	.word	0x08023d9c
 8004cac:	08023db0 	.word	0x08023db0
 8004cb0:	08023dbc 	.word	0x08023dbc
 8004cb4:	08023dc0 	.word	0x08023dc0
 8004cb8:	08023dc8 	.word	0x08023dc8
 8004cbc:	08023dd4 	.word	0x08023dd4
 8004cc0:	08023df4 	.word	0x08023df4
 8004cc4:	08023e00 	.word	0x08023e00
 8004cc8:	08023e10 	.word	0x08023e10
 8004ccc:	08023e20 	.word	0x08023e20
 8004cd0:	08023e30 	.word	0x08023e30
 8004cd4:	08023e44 	.word	0x08023e44
 8004cd8:	08023e4c 	.word	0x08023e4c
 8004cdc:	08023e60 	.word	0x08023e60
 8004ce0:	08023e74 	.word	0x08023e74
 8004ce4:	08023e7c 	.word	0x08023e7c
 8004ce8:	08023e88 	.word	0x08023e88
 8004cec:	08023e98 	.word	0x08023e98
 8004cf0:	08023ea4 	.word	0x08023ea4
 8004cf4:	08023eb8 	.word	0x08023eb8
 8004cf8:	08023ecc 	.word	0x08023ecc
 8004cfc:	08023ed8 	.word	0x08023ed8
 8004d00:	08023ee8 	.word	0x08023ee8
 8004d04:	08023efc 	.word	0x08023efc
 8004d08:	08023f08 	.word	0x08023f08
 8004d0c:	08023f14 	.word	0x08023f14
 8004d10:	08023f28 	.word	0x08023f28
 8004d14:	08023f38 	.word	0x08023f38
 8004d18:	08023f58 	.word	0x08023f58
 8004d1c:	08023f68 	.word	0x08023f68
 8004d20:	08023f74 	.word	0x08023f74
 8004d24:	08023f7c 	.word	0x08023f7c
 8004d28:	08023f8c 	.word	0x08023f8c
 8004d2c:	08023fa0 	.word	0x08023fa0
 8004d30:	08023fb4 	.word	0x08023fb4
 8004d34:	08023fcc 	.word	0x08023fcc
 8004d38:	08023fe4 	.word	0x08023fe4
 8004d3c:	08024004 	.word	0x08024004
 8004d40:	08024018 	.word	0x08024018
 8004d44:	08024028 	.word	0x08024028
 8004d48:	0802403c 	.word	0x0802403c
 8004d4c:	08024054 	.word	0x08024054
 8004d50:	0802405c 	.word	0x0802405c
 8004d54:	08024070 	.word	0x08024070
 8004d58:	08024084 	.word	0x08024084
 8004d5c:	0802409c 	.word	0x0802409c
 8004d60:	080240b0 	.word	0x080240b0
 8004d64:	080240d0 	.word	0x080240d0
 8004d68:	080240f4 	.word	0x080240f4
 8004d6c:	08024114 	.word	0x08024114
 8004d70:	0802412c 	.word	0x0802412c
 8004d74:	08024144 	.word	0x08024144
 8004d78:	08024154 	.word	0x08024154
 8004d7c:	08024160 	.word	0x08024160
 8004d80:	08024174 	.word	0x08024174
 8004d84:	08024184 	.word	0x08024184
 8004d88:	080241a0 	.word	0x080241a0
 8004d8c:	080241b8 	.word	0x080241b8
 8004d90:	080241d0 	.word	0x080241d0
 8004d94:	080241e0 	.word	0x080241e0
 8004d98:	080241f0 	.word	0x080241f0
 8004d9c:	08024210 	.word	0x08024210
 8004da0:	08024230 	.word	0x08024230

08004da4 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8004da4:	b408      	push	{r3}
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b08b      	sub	sp, #44	@ 0x2c
 8004daa:	af02      	add	r7, sp, #8
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8004db2:	68b8      	ldr	r0, [r7, #8]
 8004db4:	f7ff fafa 	bl	80043ac <mg_http_status_code_str>
 8004db8:	4602      	mov	r2, r0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <mg_http_reply+0x20>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	e000      	b.n	8004dc6 <mg_http_reply+0x22>
 8004dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e44 <mg_http_reply+0xa0>)
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	491e      	ldr	r1, [pc, #120]	@ (8004e48 <mg_http_reply+0xa4>)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f003 fd7c 	bl	80088cc <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd8:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8004dda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004dde:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8004de6:	f107 0314 	add.w	r3, r7, #20
 8004dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dec:	4817      	ldr	r0, [pc, #92]	@ (8004e4c <mg_http_reply+0xa8>)
 8004dee:	f7fd ff3b 	bl	8002c68 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d916      	bls.n	8004e28 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3b0f      	subs	r3, #15
 8004e02:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004e0c:	4a10      	ldr	r2, [pc, #64]	@ (8004e50 <mg_http_reply+0xac>)
 8004e0e:	210b      	movs	r1, #11
 8004e10:	f007 fa12 	bl	800c238 <mg_snprintf>
 8004e14:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e1a:	69f9      	ldr	r1, [r7, #28]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	440b      	add	r3, r1
 8004e20:	3b0f      	subs	r3, #15
 8004e22:	4413      	add	r3, r2
 8004e24:	2220      	movs	r2, #32
 8004e26:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8004e2e:	f36f 13c7 	bfc	r3, #7, #1
 8004e32:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8004e36:	bf00      	nop
 8004e38:	3724      	adds	r7, #36	@ 0x24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e40:	b001      	add	sp, #4
 8004e42:	4770      	bx	lr
 8004e44:	08024230 	.word	0x08024230
 8004e48:	08024234 	.word	0x08024234
 8004e4c:	0800c1c7 	.word	0x0800c1c7
 8004e50:	08024268 	.word	0x08024268

08004e54 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe facc 	bl	8003400 <mg_fs_close>
  c->pfn_data = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a07      	ldr	r2, [pc, #28]	@ (8004e90 <restore_http_cb+0x3c>)
 8004e74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8004e7e:	f36f 13c7 	bfc	r3, #7, #1
 8004e82:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	0800617d 	.word	0x0800617d

08004e94 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8004e94:	b5b0      	push	{r4, r5, r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af04      	add	r7, sp, #16
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	461c      	mov	r4, r3
 8004ea6:	4615      	mov	r5, r2
 8004ea8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004eac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8004eb4:	4a04      	ldr	r2, [pc, #16]	@ (8004ec8 <mg_http_etag+0x34>)
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f007 f9bd 	bl	800c238 <mg_snprintf>
  return buf;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec8:	08024270 	.word	0x08024270

08004ecc <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d002      	beq.n	8004ee4 <static_cb+0x18>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d148      	bne.n	8004f76 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eea:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8004eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ef0:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	33a4      	adds	r3, #164	@ 0xa4
 8004ef6:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d905      	bls.n	8004f0e <static_cb+0x42>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3348      	adds	r3, #72	@ 0x48
 8004f06:	69f9      	ldr	r1, [r7, #28]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 fcaf 	bl	800686c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d234      	bcs.n	8004f84 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d902      	bls.n	8004f36 <static_cb+0x6a>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	6810      	ldr	r0, [r2, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f48:	4411      	add	r1, r2
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4c:	4798      	blx	r3
 8004f4e:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	441a      	add	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10c      	bne.n	8004f88 <static_cb+0xbc>
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff ff70 	bl	8004e54 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004f74:	e008      	b.n	8004f88 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	d106      	bne.n	8004f8a <static_cb+0xbe>
    restore_http_cb(c);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff ff69 	bl	8004e54 <restore_http_cb>
 8004f82:	e002      	b.n	8004f8a <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004f88:	bf00      	nop
  }
  (void) ev_data;
}
 8004f8a:	3728      	adds	r7, #40	@ 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b093      	sub	sp, #76	@ 0x4c
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	1d38      	adds	r0, r7, #4
 8004f9a:	e880 0006 	stmia.w	r0, {r1, r2}
 8004f9e:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 8004fa0:	f107 031c 	add.w	r3, r7, #28
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f008 fa76 	bl	800d498 <mg_str_s>
 8004fac:	f107 0314 	add.w	r3, r7, #20
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	4943      	ldr	r1, [pc, #268]	@ (80050c0 <guess_content_type+0x130>)
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f008 fa8c 	bl	800d4d2 <mg_str_n>
  size_t i = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8004fbe:	e002      	b.n	8004fc6 <guess_content_type+0x36>
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d208      	bcs.n	8004fe0 <guess_content_type+0x50>
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd4:	1acb      	subs	r3, r1, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	4413      	add	r3, r2
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fde:	d1ef      	bne.n	8004fc0 <guess_content_type+0x30>
  path.buf += path.len - i;
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe6:	1acb      	subs	r3, r1, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	607b      	str	r3, [r7, #4]
  path.len = i;
 8004fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fee:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8004ff0:	e02b      	b.n	800504a <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 8004ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ff6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004ffa:	213d      	movs	r1, #61	@ 0x3d
 8004ffc:	9100      	str	r1, [sp, #0]
 8004ffe:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8005002:	c903      	ldmia	r1, {r0, r1}
 8005004:	f008 fc46 	bl	800d894 <mg_span>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01d      	beq.n	800504a <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800500e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005012:	cb0c      	ldmia	r3, {r2, r3}
 8005014:	f107 0114 	add.w	r1, r7, #20
 8005018:	c903      	ldmia	r1, {r0, r1}
 800501a:	f008 fabe 	bl	800d59a <mg_strcmp>
 800501e:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8005024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005028:	cb0c      	ldmia	r3, {r2, r3}
 800502a:	1d39      	adds	r1, r7, #4
 800502c:	c903      	ldmia	r1, {r0, r1}
 800502e:	f008 fab4 	bl	800d59a <mg_strcmp>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <guess_content_type+0xba>
      return v;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005040:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005044:	e882 0003 	stmia.w	r2, {r0, r1}
 8005048:	e036      	b.n	80050b8 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 800504a:	f107 031c 	add.w	r3, r7, #28
 800504e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005052:	212c      	movs	r1, #44	@ 0x2c
 8005054:	9100      	str	r1, [sp, #0]
 8005056:	f107 011c 	add.w	r1, r7, #28
 800505a:	c903      	ldmia	r1, {r0, r1}
 800505c:	f008 fc1a 	bl	800d894 <mg_span>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1c5      	bne.n	8004ff2 <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8005066:	2300      	movs	r3, #0
 8005068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800506a:	e01a      	b.n	80050a2 <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 800506c:	4a15      	ldr	r2, [pc, #84]	@ (80050c4 <guess_content_type+0x134>)
 800506e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	cb0c      	ldmia	r3, {r2, r3}
 8005076:	1d39      	adds	r1, r7, #4
 8005078:	c903      	ldmia	r1, {r0, r1}
 800507a:	f008 fa8e 	bl	800d59a <mg_strcmp>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <guess_content_type+0x10c>
 8005084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005086:	3301      	adds	r3, #1
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	4a0e      	ldr	r2, [pc, #56]	@ (80050c4 <guess_content_type+0x134>)
 800508c:	460c      	mov	r4, r1
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005096:	e884 0003 	stmia.w	r4, {r0, r1}
 800509a:	e00d      	b.n	80050b8 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800509c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509e:	3302      	adds	r3, #2
 80050a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050a2:	4a08      	ldr	r2, [pc, #32]	@ (80050c4 <guess_content_type+0x134>)
 80050a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1de      	bne.n	800506c <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4905      	ldr	r1, [pc, #20]	@ (80050c8 <guess_content_type+0x138>)
 80050b2:	4618      	mov	r0, r3
 80050b4:	f008 f9f0 	bl	800d498 <mg_str_s>
}
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	3744      	adds	r7, #68	@ 0x44
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}
 80050c0:	080244dc 	.word	0x080244dc
 80050c4:	24000058 	.word	0x24000058
 80050c8:	08024358 	.word	0x08024358

080050cc <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	@ 0x30
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 80050dc:	2300      	movs	r3, #0
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e0:	e058      	b.n	8005194 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	3306      	adds	r3, #6
 80050ea:	18d1      	adds	r1, r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	1f9a      	subs	r2, r3, #6
 80050f6:	f107 0310 	add.w	r3, r7, #16
 80050fa:	4618      	mov	r0, r3
 80050fc:	f008 f9e9 	bl	800d4d2 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	4413      	add	r3, r2
 8005108:	2206      	movs	r2, #6
 800510a:	4929      	ldr	r1, [pc, #164]	@ (80051b0 <getrange+0xe4>)
 800510c:	4618      	mov	r0, r3
 800510e:	f01d f9e4 	bl	80224da <memcmp>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	3301      	adds	r3, #1
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
 800511e:	e039      	b.n	8005194 <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 8005120:	f107 0310 	add.w	r3, r7, #16
 8005124:	f107 0218 	add.w	r2, r7, #24
 8005128:	212d      	movs	r1, #45	@ 0x2d
 800512a:	9100      	str	r1, [sp, #0]
 800512c:	f107 0110 	add.w	r1, r7, #16
 8005130:	c903      	ldmia	r1, {r0, r1}
 8005132:	f008 fbaf 	bl	800d894 <mg_span>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01d      	beq.n	8005178 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	f107 0318 	add.w	r3, r7, #24
 8005142:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005146:	f7fe fbb9 	bl	80038bc <mg_to_size_t>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <getrange+0x8a>
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	3301      	adds	r3, #1
 8005154:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d022      	beq.n	80051a2 <getrange+0xd6>
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	f107 0310 	add.w	r3, r7, #16
 8005162:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005166:	f7fe fba9 	bl	80038bc <mg_to_size_t>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d018      	beq.n	80051a2 <getrange+0xd6>
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	3301      	adds	r3, #1
 8005174:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8005176:	e014      	b.n	80051a2 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	f107 0310 	add.w	r3, r7, #16
 800517e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005182:	f7fe fb9b 	bl	80038bc <mg_to_size_t>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <getrange+0xd6>
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	3301      	adds	r3, #1
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	e007      	b.n	80051a4 <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	1d9a      	adds	r2, r3, #6
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d3a0      	bcc.n	80050e2 <getrange+0x16>
 80051a0:	e000      	b.n	80051a4 <getrange+0xd8>
    break;
 80051a2:	bf00      	nop
  }
  return (int) numparsed;
 80051a4:	6a3b      	ldr	r3, [r7, #32]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3728      	adds	r7, #40	@ 0x28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	080244e0 	.word	0x080244e0

080051b4 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 80051b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b8:	b0f3      	sub	sp, #460	@ 0x1cc
 80051ba:	af0a      	add	r7, sp, #40	@ 0x28
 80051bc:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 80051c0:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 80051c4:	6020      	str	r0, [r4, #0]
 80051c6:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80051ca:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 80051ce:	6001      	str	r1, [r0, #0]
 80051d0:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80051d4:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 80051d8:	600a      	str	r2, [r1, #0]
 80051da:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80051de:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80051e2:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80051e4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80051e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d006      	beq.n	8005202 <mg_http_serve_file+0x4e>
 80051f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80051f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	e000      	b.n	8005204 <mg_http_serve_file+0x50>
 8005202:	4ba4      	ldr	r3, [pc, #656]	@ (8005494 <mg_http_serve_file+0x2e0>)
 8005204:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8005226:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800522a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800522e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	4610      	mov	r0, r2
 8005236:	f008 f92f 	bl	800d498 <mg_str_s>
 800523a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800523e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800524a:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 800524e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8005252:	ca06      	ldmia	r2, {r1, r2}
 8005254:	f7ff fe9c 	bl	8004f90 <guess_content_type>
  bool gzip = false;
 8005258:	2300      	movs	r3, #0
 800525a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 800525e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005262:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d05c      	beq.n	8005326 <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800526c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005270:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005274:	4988      	ldr	r1, [pc, #544]	@ (8005498 <mg_http_serve_file+0x2e4>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	f7fe fd6e 	bl	8003d58 <mg_http_get_header>
 800527c:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 8005280:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005284:	2b00      	cmp	r3, #0
 8005286:	d03e      	beq.n	8005306 <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8005288:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800528c:	6859      	ldr	r1, [r3, #4]
 800528e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	4881      	ldr	r0, [pc, #516]	@ (800549c <mg_http_serve_file+0x2e8>)
 8005298:	f007 f804 	bl	800c2a4 <mg_mprintf>
 800529c:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80052a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02a      	beq.n	80052fe <mg_http_serve_file+0x14a>
 80052a8:	497d      	ldr	r1, [pc, #500]	@ (80054a0 <mg_http_serve_file+0x2ec>)
 80052aa:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 80052ae:	f01d f9eb 	bl	8022688 <strstr>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d022      	beq.n	80052fe <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80052b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80052bc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80052c0:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a77      	ldr	r2, [pc, #476]	@ (80054a4 <mg_http_serve_file+0x2f0>)
 80052c8:	2164      	movs	r1, #100	@ 0x64
 80052ca:	f006 ffb5 	bl	800c238 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80052ce:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80052d2:	2201      	movs	r2, #1
 80052d4:	4619      	mov	r1, r3
 80052d6:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 80052da:	f7fe f869 	bl	80033b0 <mg_fs_open>
 80052de:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 80052e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <mg_http_serve_file+0x14a>
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 80052f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80052f4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80052f8:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 80052fc:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 80052fe:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8005302:	f01c fe2f 	bl	8021f64 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8005306:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10b      	bne.n	8005326 <mg_http_serve_file+0x172>
 800530e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005312:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005316:	2201      	movs	r2, #1
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800531e:	f7fe f847 	bl	80033b0 <mg_fs_open>
 8005322:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8005326:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d144      	bne.n	80053b8 <mg_http_serve_file+0x204>
 800532e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005332:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d03c      	beq.n	80053b8 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 800533e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005342:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2201      	movs	r2, #1
 800534c:	4619      	mov	r1, r3
 800534e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8005352:	f7fe f82d 	bl	80033b0 <mg_fs_open>
 8005356:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 800535a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800535e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005362:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005366:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	6912      	ldr	r2, [r2, #16]
 800536e:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8005370:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8005374:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005378:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800537c:	6819      	ldr	r1, [r3, #0]
 800537e:	4610      	mov	r0, r2
 8005380:	f008 f88a 	bl	800d498 <mg_str_s>
 8005384:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005388:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005394:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 8005398:	f107 0010 	add.w	r0, r7, #16
 800539c:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 80053a0:	ca06      	ldmia	r2, {r1, r2}
 80053a2:	f7ff fdf5 	bl	8004f90 <guess_content_type>
 80053a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053aa:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 80053ae:	4623      	mov	r3, r4
 80053b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053b4:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80053b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <mg_http_serve_file+0x22c>
 80053c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80053c4:	681c      	ldr	r4, [r3, #0]
 80053c6:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80053ca:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80053ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053d2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	47a0      	blx	r4
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d114      	bne.n	800540a <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 80053e0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053e4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053f0:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 80053f4:	4b2c      	ldr	r3, [pc, #176]	@ (80054a8 <mg_http_serve_file+0x2f4>)
 80053f6:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	f7ff fcd2 	bl	8004da4 <mg_http_reply>
    mg_fs_close(fd);
 8005400:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8005404:	f7fd fffc 	bl	8003400 <mg_fs_close>
 8005408:	e190      	b.n	800572c <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800540a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800540e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8005412:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8005416:	e9cd 2300 	strd	r2, r3, [sp]
 800541a:	460a      	mov	r2, r1
 800541c:	2140      	movs	r1, #64	@ 0x40
 800541e:	f7ff fd39 	bl	8004e94 <mg_http_etag>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d045      	beq.n	80054b4 <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8005428:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800542c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005430:	491e      	ldr	r1, [pc, #120]	@ (80054ac <mg_http_serve_file+0x2f8>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	f7fe fc90 	bl	8003d58 <mg_http_get_header>
 8005438:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800543c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005440:	2b00      	cmp	r3, #0
 8005442:	d037      	beq.n	80054b4 <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8005444:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8005448:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f008 f822 	bl	800d498 <mg_str_s>
 8005454:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8005458:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800545c:	cb0c      	ldmia	r3, {r2, r3}
 800545e:	c903      	ldmia	r1, {r0, r1}
 8005460:	f008 f8dd 	bl	800d61e <mg_strcasecmp>
 8005464:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8005466:	2b00      	cmp	r3, #0
 8005468:	d124      	bne.n	80054b4 <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 800546a:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800546e:	f7fd ffc7 	bl	8003400 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8005472:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005476:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005482:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8005486:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <mg_http_serve_file+0x2fc>)
 8005488:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800548c:	6800      	ldr	r0, [r0, #0]
 800548e:	f7ff fc89 	bl	8004da4 <mg_http_reply>
 8005492:	e14b      	b.n	800572c <mg_http_serve_file+0x578>
 8005494:	24000030 	.word	0x24000030
 8005498:	080244e8 	.word	0x080244e8
 800549c:	08023ce0 	.word	0x08023ce0
 80054a0:	080244f8 	.word	0x080244f8
 80054a4:	08024500 	.word	0x08024500
 80054a8:	08024508 	.word	0x08024508
 80054ac:	08024514 	.word	0x08024514
 80054b0:	08024230 	.word	0x08024230
  } else {
    int n, status = 200;
 80054b4:	23c8      	movs	r3, #200	@ 0xc8
 80054b6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 80054ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80054be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80054ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054d6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80054da:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80054de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80054e2:	4995      	ldr	r1, [pc, #596]	@ (8005738 <mg_http_serve_file+0x584>)
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	f7fe fc37 	bl	8003d58 <mg_http_get_header>
 80054ea:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 80054ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80054f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80054fa:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 808e 	beq.w	8005620 <mg_http_serve_file+0x46c>
 8005504:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8005508:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800550c:	4619      	mov	r1, r3
 800550e:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 8005512:	f7ff fddb 	bl	80050cc <getrange>
 8005516:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 800551a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800551e:	2b00      	cmp	r3, #0
 8005520:	dd7e      	ble.n	8005620 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8005522:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <mg_http_serve_file+0x386>
 800552a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800552e:	1e5a      	subs	r2, r3, #1
 8005530:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005534:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005538:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800553a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800553e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005548:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d808      	bhi.n	8005564 <mg_http_serve_file+0x3b0>
 8005552:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005556:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005560:	429a      	cmp	r2, r3
 8005562:	d817      	bhi.n	8005594 <mg_http_serve_file+0x3e0>
        status = 416;
 8005564:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8005568:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8005572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005576:	2200      	movs	r2, #0
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	60fa      	str	r2, [r7, #12]
 800557c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005580:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005584:	e9cd 1200 	strd	r1, r2, [sp]
 8005588:	4a6c      	ldr	r2, [pc, #432]	@ (800573c <mg_http_serve_file+0x588>)
 800558a:	2164      	movs	r1, #100	@ 0x64
 800558c:	4618      	mov	r0, r3
 800558e:	f006 fe53 	bl	800c238 <mg_snprintf>
 8005592:	e045      	b.n	8005620 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 8005594:	23ce      	movs	r3, #206	@ 0xce
 8005596:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 800559a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800559e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	3301      	adds	r3, #1
 80055b2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 80055b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	469a      	mov	sl, r3
 80055c4:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 80055c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80055d4:	4413      	add	r3, r2
 80055d6:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 80055d8:	2200      	movs	r2, #0
 80055da:	461d      	mov	r5, r3
 80055dc:	4616      	mov	r6, r2
 80055de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055e2:	2200      	movs	r2, #0
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80055ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055f0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80055f4:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80055f8:	e9cd ab00 	strd	sl, fp, [sp]
 80055fc:	4a50      	ldr	r2, [pc, #320]	@ (8005740 <mg_http_serve_file+0x58c>)
 80055fe:	2164      	movs	r1, #100	@ 0x64
 8005600:	4618      	mov	r0, r3
 8005602:	f006 fe19 	bl	800c238 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8005606:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005610:	6810      	ldr	r0, [r2, #0]
 8005612:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8005616:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	4611      	mov	r1, r2
 800561e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8005620:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8005624:	f7fe fec2 	bl	80043ac <mg_http_status_code_str>
 8005628:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 800562a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800562e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005632:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8005634:	461d      	mov	r5, r3
 8005636:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800563a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005644:	2100      	movs	r1, #0
 8005646:	4698      	mov	r8, r3
 8005648:	4689      	mov	r9, r1
 800564a:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <mg_http_serve_file+0x4a2>
 8005652:	493c      	ldr	r1, [pc, #240]	@ (8005744 <mg_http_serve_file+0x590>)
 8005654:	e000      	b.n	8005658 <mg_http_serve_file+0x4a4>
 8005656:	493c      	ldr	r1, [pc, #240]	@ (8005748 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8005658:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800565c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8005664:	2b00      	cmp	r3, #0
 8005666:	d006      	beq.n	8005676 <mg_http_serve_file+0x4c2>
 8005668:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800566c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	e000      	b.n	8005678 <mg_http_serve_file+0x4c4>
 8005676:	4b34      	ldr	r3, [pc, #208]	@ (8005748 <mg_http_serve_file+0x594>)
 8005678:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800567c:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 8005680:	9308      	str	r3, [sp, #32]
 8005682:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005686:	9307      	str	r3, [sp, #28]
 8005688:	9106      	str	r1, [sp, #24]
 800568a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800568e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005692:	9302      	str	r3, [sp, #8]
 8005694:	9201      	str	r2, [sp, #4]
 8005696:	9500      	str	r5, [sp, #0]
 8005698:	4623      	mov	r3, r4
 800569a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800569e:	492b      	ldr	r1, [pc, #172]	@ (800574c <mg_http_serve_file+0x598>)
 80056a0:	6800      	ldr	r0, [r0, #0]
 80056a2:	f003 f913 	bl	80088cc <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 80056a6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80056aa:	4929      	ldr	r1, [pc, #164]	@ (8005750 <mg_http_serve_file+0x59c>)
 80056ac:	4618      	mov	r0, r3
 80056ae:	f007 fef3 	bl	800d498 <mg_str_s>
 80056b2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80056b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80056ba:	6819      	ldr	r1, [r3, #0]
 80056bc:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80056c0:	cb0c      	ldmia	r3, {r2, r3}
 80056c2:	c903      	ldmia	r1, {r0, r1}
 80056c4:	f007 ffab 	bl	800d61e <mg_strcasecmp>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10f      	bne.n	80056ee <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 80056ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80056d2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80056dc:	f36f 13c7 	bfc	r3, #7, #1
 80056e0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 80056e4:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80056e8:	f7fd fe8a 	bl	8003400 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 80056ec:	e01e      	b.n	800572c <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80056ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80056f2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	33a4      	adds	r3, #164	@ 0xa4
 80056fa:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 80056fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005702:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a12      	ldr	r2, [pc, #72]	@ (8005754 <mg_http_serve_file+0x5a0>)
 800570a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 800570e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005712:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800571c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8005720:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8005724:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8005728:	601a      	str	r2, [r3, #0]
}
 800572a:	e7ff      	b.n	800572c <mg_http_serve_file+0x578>
 800572c:	bf00      	nop
 800572e:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8005732:	46bd      	mov	sp, r7
 8005734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005738:	08024524 	.word	0x08024524
 800573c:	0802452c 	.word	0x0802452c
 8005740:	0802454c 	.word	0x0802454c
 8005744:	08024574 	.word	0x08024574
 8005748:	08024230 	.word	0x08024230
 800574c:	08024590 	.word	0x08024590
 8005750:	080245e0 	.word	0x080245e0
 8005754:	08004ecd 	.word	0x08004ecd

08005758 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8005758:	b082      	sub	sp, #8
 800575a:	b590      	push	{r4, r7, lr}
 800575c:	b08f      	sub	sp, #60	@ 0x3c
 800575e:	af02      	add	r7, sp, #8
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8005768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576a:	461a      	mov	r2, r3
 800576c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	4a95      	ldr	r2, [pc, #596]	@ (80059c8 <uri_to_path2+0x270>)
 8005774:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005776:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005778:	f006 fd5e 	bl	800c238 <mg_snprintf>
 800577c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	3302      	adds	r3, #2
 8005782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005784:	429a      	cmp	r2, r3
 8005786:	d809      	bhi.n	800579c <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8005788:	4b90      	ldr	r3, [pc, #576]	@ (80059cc <uri_to_path2+0x274>)
 800578a:	4a91      	ldr	r2, [pc, #580]	@ (80059d0 <uri_to_path2+0x278>)
 800578c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff fb07 	bl	8004da4 <mg_http_reply>
    return -1;
 8005796:	f04f 33ff 	mov.w	r3, #4294967295
 800579a:	e10e      	b.n	80059ba <uri_to_path2+0x262>
  }
  path[path_size - 1] = '\0';
 800579c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800579e:	3b01      	subs	r3, #1
 80057a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057a2:	4413      	add	r3, r2
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d012      	beq.n	80057d4 <uri_to_path2+0x7c>
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	3b01      	subs	r3, #1
 80057b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057b4:	4413      	add	r3, r2
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80057ba:	d00b      	beq.n	80057d4 <uri_to_path2+0x7c>
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80057c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057c4:	4413      	add	r3, r2
 80057c6:	222f      	movs	r2, #47	@ 0x2f
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	4413      	add	r3, r2
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 80057d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d212      	bcs.n	8005804 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057e4:	18d0      	adds	r0, r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ec:	1ad1      	subs	r1, r2, r3
 80057ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	18d4      	adds	r4, r2, r3
 80057f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2200      	movs	r2, #0
 80057fc:	9200      	str	r2, [sp, #0]
 80057fe:	4622      	mov	r2, r4
 8005800:	f7fe f9b7 	bl	8003b72 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8005804:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005806:	3b01      	subs	r3, #1
 8005808:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800580a:	4413      	add	r3, r2
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005816:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005818:	4618      	mov	r0, r3
 800581a:	f007 fe5a 	bl	800d4d2 <mg_str_n>
 800581e:	f107 0314 	add.w	r3, r7, #20
 8005822:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005826:	f010 fc33 	bl	8016090 <mg_path_is_sane>
 800582a:	4603      	mov	r3, r0
 800582c:	f083 0301 	eor.w	r3, r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8005836:	4b67      	ldr	r3, [pc, #412]	@ (80059d4 <uri_to_path2+0x27c>)
 8005838:	4a65      	ldr	r2, [pc, #404]	@ (80059d0 <uri_to_path2+0x278>)
 800583a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fab0 	bl	8004da4 <mg_http_reply>
    return -1;
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
 8005848:	e0b7      	b.n	80059ba <uri_to_path2+0x262>
  }
  n = strlen(path);
 800584a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800584c:	f7fa fda8 	bl	80003a0 <strlen>
 8005850:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8005852:	e007      	b.n	8005864 <uri_to_path2+0x10c>
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	3b01      	subs	r3, #1
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	4413      	add	r3, r2
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	2b01      	cmp	r3, #1
 8005868:	d906      	bls.n	8005878 <uri_to_path2+0x120>
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	3b01      	subs	r3, #1
 800586e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005870:	4413      	add	r3, r2
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b2f      	cmp	r3, #47	@ 0x2f
 8005876:	d0ed      	beq.n	8005854 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8005878:	f107 031c 	add.w	r3, r7, #28
 800587c:	4956      	ldr	r1, [pc, #344]	@ (80059d8 <uri_to_path2+0x280>)
 800587e:	4618      	mov	r0, r3
 8005880:	f007 fe0a 	bl	800d498 <mg_str_s>
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	f107 031c 	add.w	r3, r7, #28
 800588a:	cb0c      	ldmia	r3, {r2, r3}
 800588c:	3108      	adds	r1, #8
 800588e:	c903      	ldmia	r1, {r0, r1}
 8005890:	f007 fe83 	bl	800d59a <mg_strcmp>
 8005894:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <uri_to_path2+0x152>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	2100      	movs	r1, #0
 80058a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80058a4:	4798      	blx	r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	e000      	b.n	80058ac <uri_to_path2+0x154>
 80058aa:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
              flags));
  if (flags == 0) {
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8081 	beq.w	80059b8 <uri_to_path2+0x260>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80058b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d020      	beq.n	8005902 <uri_to_path2+0x1aa>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01c      	beq.n	8005902 <uri_to_path2+0x1aa>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80058d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80058d8:	d013      	beq.n	8005902 <uri_to_path2+0x1aa>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 80058de:	461a      	mov	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	493d      	ldr	r1, [pc, #244]	@ (80059dc <uri_to_path2+0x284>)
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f002 fff0 	bl	80088cc <mg_printf>
    c->is_resp = 0;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80058f2:	f36f 13c7 	bfc	r3, #7, #1
 80058f6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005900:	e05a      	b.n	80059b8 <uri_to_path2+0x260>
  } else if (flags & MG_FS_DIR) {
 8005902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d055      	beq.n	80059b8 <uri_to_path2+0x260>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800590c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	18d0      	adds	r0, r2, r3
 8005912:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	4a31      	ldr	r2, [pc, #196]	@ (80059e0 <uri_to_path2+0x288>)
 800591a:	4619      	mov	r1, r3
 800591c:	f006 fc8c 	bl	800c238 <mg_snprintf>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <uri_to_path2+0x1e2>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	2100      	movs	r1, #0
 800592e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005930:	4798      	blx	r3
 8005932:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8005934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <uri_to_path2+0x210>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800593a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	18d0      	adds	r0, r2, r3
 8005940:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	4a27      	ldr	r2, [pc, #156]	@ (80059e4 <uri_to_path2+0x28c>)
 8005948:	4619      	mov	r1, r3
 800594a:	f006 fc75 	bl	800c238 <mg_snprintf>
 800594e:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <uri_to_path2+0x216>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2200      	movs	r2, #0
 800595a:	2100      	movs	r1, #0
 800595c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800595e:	4798      	blx	r3
 8005960:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <uri_to_path2+0x216>
      flags = tmp;
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800596c:	e024      	b.n	80059b8 <uri_to_path2+0x260>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800596e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	18d0      	adds	r0, r2, r3
 8005974:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	4a1b      	ldr	r2, [pc, #108]	@ (80059e8 <uri_to_path2+0x290>)
 800597c:	4619      	mov	r1, r3
 800597e:	f006 fc5b 	bl	800c238 <mg_snprintf>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <uri_to_path2+0x256>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2200      	movs	r2, #0
 800598e:	2100      	movs	r1, #0
 8005990:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005992:	4798      	blx	r3
 8005994:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <uri_to_path2+0x256>
                    0)) {  // check for gzipped index
      flags = tmp;
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	330b      	adds	r3, #11
 80059a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059a6:	4413      	add	r3, r2
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e004      	b.n	80059b8 <uri_to_path2+0x260>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 80059ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	4413      	add	r3, r2
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 80059b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3734      	adds	r7, #52	@ 0x34
 80059be:	46bd      	mov	sp, r7
 80059c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80059c4:	b002      	add	sp, #8
 80059c6:	4770      	bx	lr
 80059c8:	08023ce0 	.word	0x08023ce0
 80059cc:	080245e8 	.word	0x080245e8
 80059d0:	08024230 	.word	0x08024230
 80059d4:	080245fc 	.word	0x080245fc
 80059d8:	0802460c 	.word	0x0802460c
 80059dc:	08024610 	.word	0x08024610
 80059e0:	0802464c 	.word	0x0802464c
 80059e4:	08024658 	.word	0x08024658
 80059e8:	08024668 	.word	0x08024668

080059ec <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b09c      	sub	sp, #112	@ 0x70
 80059f0:	af06      	add	r7, sp, #24
 80059f2:	6178      	str	r0, [r7, #20]
 80059f4:	6139      	str	r1, [r7, #16]
 80059f6:	60fa      	str	r2, [r7, #12]
 80059f8:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <uri_to_path+0x1c>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	e000      	b.n	8005a0a <uri_to_path+0x1e>
 8005a08:	4b5b      	ldr	r3, [pc, #364]	@ (8005b78 <uri_to_path+0x18c>)
 8005a0a:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f007 fd3e 	bl	800d498 <mg_str_s>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a20:	2300      	movs	r3, #0
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a24:	f107 031c 	add.w	r3, r7, #28
 8005a28:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a30:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8005a34:	e078      	b.n	8005b28 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8005a36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005a3a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005a3e:	213d      	movs	r1, #61	@ 0x3d
 8005a40:	9100      	str	r1, [sp, #0]
 8005a42:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8005a46:	c903      	ldmia	r1, {r0, r1}
 8005a48:	f007 ff24 	bl	800d894 <mg_span>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f083 0301 	eor.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d014      	beq.n	8005a82 <uri_to_path+0x96>
 8005a58:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005a5c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a64:	e883 0003 	stmia.w	r3, {r0, r1}
 8005a68:	463b      	mov	r3, r7
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f007 fd2f 	bl	800d4d2 <mg_str_n>
 8005a74:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005a78:	463a      	mov	r2, r7
 8005a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a7e:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8005a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d123      	bne.n	8005ad0 <uri_to_path+0xe4>
 8005a88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005a8c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a94:	e883 0003 	stmia.w	r3, {r0, r1}
 8005a98:	463b      	mov	r3, r7
 8005a9a:	4938      	ldr	r1, [pc, #224]	@ (8005b7c <uri_to_path+0x190>)
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f007 fcfb 	bl	800d498 <mg_str_s>
 8005aa2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005aa6:	463a      	mov	r2, r7
 8005aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ab4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005abc:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ac0:	f107 031c 	add.w	r3, r7, #28
 8005ac4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8005ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005acc:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d323      	bcc.n	8005b22 <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6899      	ldr	r1, [r3, #8]
 8005ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f007 fcf4 	bl	800d4d2 <mg_str_n>
 8005aea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005aee:	cb0c      	ldmia	r3, {r2, r3}
 8005af0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8005af4:	c903      	ldmia	r1, {r0, r1}
 8005af6:	f007 fd50 	bl	800d59a <mg_strcmp>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d112      	bne.n	8005b26 <uri_to_path+0x13a>
    u = k, p = v;
 8005b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b04:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b10:	f107 031c 	add.w	r3, r7, #28
 8005b14:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8005b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b20:	e002      	b.n	8005b28 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 8005b22:	bf00      	nop
 8005b24:	e000      	b.n	8005b28 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8005b26:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 8005b28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005b2c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005b30:	212c      	movs	r1, #44	@ 0x2c
 8005b32:	9100      	str	r1, [sp, #0]
 8005b34:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8005b38:	c903      	ldmia	r1, {r0, r1}
 8005b3a:	f007 feab 	bl	800d894 <mg_span>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f47f af78 	bne.w	8005a36 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8005b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b48:	9304      	str	r3, [sp, #16]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	9303      	str	r3, [sp, #12]
 8005b4e:	aa01      	add	r2, sp, #4
 8005b50:	f107 031c 	add.w	r3, r7, #28
 8005b54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b58:	e882 0003 	stmia.w	r2, {r0, r1}
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b64:	6939      	ldr	r1, [r7, #16]
 8005b66:	6978      	ldr	r0, [r7, #20]
 8005b68:	f7ff fdf6 	bl	8005758 <uri_to_path2>
 8005b6c:	4603      	mov	r3, r0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3758      	adds	r7, #88	@ 0x58
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	24000030 	.word	0x24000030
 8005b7c:	0802460c 	.word	0x0802460c

08005b80 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b0a6      	sub	sp, #152	@ 0x98
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8005b94:	f107 0314 	add.w	r3, r7, #20
 8005b98:	2264      	movs	r2, #100	@ 0x64
 8005b9a:	9200      	str	r2, [sp, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff ff23 	bl	80059ec <uri_to_path>
 8005ba6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 8005baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	db41      	blt.n	8005c36 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8005bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 8005bbe:	4b20      	ldr	r3, [pc, #128]	@ (8005c40 <mg_http_serve_dir+0xc0>)
 8005bc0:	4a20      	ldr	r2, [pc, #128]	@ (8005c44 <mg_http_serve_dir+0xc4>)
 8005bc2:	f240 1193 	movw	r1, #403	@ 0x193
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff f8ec 	bl	8004da4 <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8005bcc:	e033      	b.n	8005c36 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8005bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d028      	beq.n	8005c28 <mg_http_serve_dir+0xa8>
 8005bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d024      	beq.n	8005c28 <mg_http_serve_dir+0xa8>
 8005bde:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8005be2:	f107 0214 	add.w	r2, r7, #20
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f007 fc55 	bl	800d498 <mg_str_s>
 8005bee:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8005bf2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f007 fc4e 	bl	800d498 <mg_str_s>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8005c04:	cb0c      	ldmia	r3, {r2, r3}
 8005c06:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8005c0a:	c903      	ldmia	r1, {r0, r1}
 8005c0c:	f007 fd4e 	bl	800d6ac <mg_match>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d008      	beq.n	8005c28 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f107 0214 	add.w	r2, r7, #20
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f007 fc25 	bl	800d470 <mg_http_serve_ssi>
}
 8005c26:	e006      	b.n	8005c36 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 8005c28:	f107 0214 	add.w	r2, r7, #20
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff fabf 	bl	80051b4 <mg_http_serve_file>
}
 8005c36:	bf00      	nop
 8005c38:	3790      	adds	r7, #144	@ 0x90
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	08024678 	.word	0x08024678
 8005c44:	08024230 	.word	0x08024230

08005c48 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 8005c48:	b590      	push	{r4, r7, lr}
 8005c4a:	b0cf      	sub	sp, #316	@ 0x13c
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 8005c52:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 8005c56:	6020      	str	r0, [r4, #0]
 8005c58:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8005c5c:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 8005c60:	6001      	str	r1, [r0, #0]
 8005c62:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8005c66:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8005c6a:	600a      	str	r2, [r1, #0]
 8005c6c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c70:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005c74:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 8005c76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c7a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005c7e:	497a      	ldr	r1, [pc, #488]	@ (8005e68 <mg_http_creds+0x220>)
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	f7fe f869 	bl	8003d58 <mg_http_get_header>
 8005c86:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 8005c8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c9c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	781a      	ldrb	r2, [r3, #0]
 8005ca4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ca8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8005cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05e      	beq.n	8005d76 <mg_http_creds+0x12e>
 8005cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d959      	bls.n	8005d76 <mg_http_creds+0x12e>
 8005cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2206      	movs	r2, #6
 8005cca:	4968      	ldr	r1, [pc, #416]	@ (8005e6c <mg_http_creds+0x224>)
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f01c fc04 	bl	80224da <memcmp>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d14e      	bne.n	8005d76 <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8005cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	1d98      	adds	r0, r3, #6
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	1f99      	subs	r1, r3, #6
 8005ce8:	f107 0214 	add.w	r2, r7, #20
 8005cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005cf0:	f7fb fa82 	bl	80011f8 <mg_base64_decode>
 8005cf4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8005cf8:	f107 0314 	add.w	r3, r7, #20
 8005cfc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005d00:	213a      	movs	r1, #58	@ 0x3a
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fa fafc 	bl	8000300 <memchr>
 8005d08:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 8005d0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80a2 	beq.w	8005e5a <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8005d16:	f107 0314 	add.w	r3, r7, #20
 8005d1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d24:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8005d28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d2c:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 8005d30:	f107 0314 	add.w	r3, r7, #20
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	4a4d      	ldr	r2, [pc, #308]	@ (8005e70 <mg_http_creds+0x228>)
 8005d3a:	6809      	ldr	r1, [r1, #0]
 8005d3c:	6800      	ldr	r0, [r0, #0]
 8005d3e:	f006 fa7b 	bl	800c238 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 8005d42:	f107 0314 	add.w	r3, r7, #20
 8005d46:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	1e5a      	subs	r2, r3, #1
 8005d56:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8005d60:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	4a41      	ldr	r2, [pc, #260]	@ (8005e70 <mg_http_creds+0x228>)
 8005d6a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005d6e:	6800      	ldr	r0, [r0, #0]
 8005d70:	f006 fa62 	bl	800c238 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8005d74:	e071      	b.n	8005e5a <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8005d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d024      	beq.n	8005dc8 <mg_http_creds+0x180>
 8005d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b07      	cmp	r3, #7
 8005d86:	d91f      	bls.n	8005dc8 <mg_http_creds+0x180>
 8005d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2207      	movs	r2, #7
 8005d90:	4938      	ldr	r1, [pc, #224]	@ (8005e74 <mg_http_creds+0x22c>)
 8005d92:	4618      	mov	r0, r3
 8005d94:	f01c fba1 	bl	80224da <memcmp>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d114      	bne.n	8005dc8 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 8005d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	1fda      	subs	r2, r3, #7
 8005da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3307      	adds	r3, #7
 8005dae:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8005db2:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	4a2d      	ldr	r2, [pc, #180]	@ (8005e70 <mg_http_creds+0x228>)
 8005dbc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005dc0:	6800      	ldr	r0, [r0, #0]
 8005dc2:	f006 fa39 	bl	800c238 <mg_snprintf>
 8005dc6:	e049      	b.n	8005e5c <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8005dc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dcc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005dd0:	4929      	ldr	r1, [pc, #164]	@ (8005e78 <mg_http_creds+0x230>)
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	f7fd ffc0 	bl	8003d58 <mg_http_get_header>
 8005dd8:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8005ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d028      	beq.n	8005e36 <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 8005de4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005de8:	220c      	movs	r2, #12
 8005dea:	4924      	ldr	r1, [pc, #144]	@ (8005e7c <mg_http_creds+0x234>)
 8005dec:	4618      	mov	r0, r3
 8005dee:	f007 fb70 	bl	800d4d2 <mg_str_n>
 8005df2:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8005df6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005dfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e04:	ca06      	ldmia	r2, {r1, r2}
 8005e06:	f000 f864 	bl	8005ed2 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8005e0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d024      	beq.n	8005e5c <mg_http_creds+0x214>
 8005e12:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005e16:	4619      	mov	r1, r3
 8005e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e20:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	460b      	mov	r3, r1
 8005e28:	4a11      	ldr	r2, [pc, #68]	@ (8005e70 <mg_http_creds+0x228>)
 8005e2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005e2e:	6800      	ldr	r0, [r0, #0]
 8005e30:	f006 fa02 	bl	800c238 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 8005e34:	e012      	b.n	8005e5c <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 8005e36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e3a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f103 0010 	add.w	r0, r3, #16
 8005e44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e48:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 8005e4c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	490a      	ldr	r1, [pc, #40]	@ (8005e7c <mg_http_creds+0x234>)
 8005e54:	f7fd fe18 	bl	8003a88 <mg_http_get_var>
}
 8005e58:	e000      	b.n	8005e5c <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 8005e5a:	bf00      	nop
}
 8005e5c:	bf00      	nop
 8005e5e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}
 8005e66:	bf00      	nop
 8005e68:	0802468c 	.word	0x0802468c
 8005e6c:	0802469c 	.word	0x0802469c
 8005e70:	08023ce0 	.word	0x08023ce0
 8005e74:	080246a4 	.word	0x080246a4
 8005e78:	080246ac 	.word	0x080246ac
 8005e7c:	080246b4 	.word	0x080246b4

08005e80 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8005e8e:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d913      	bls.n	8005ebc <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b22      	cmp	r3, #34	@ 0x22
 8005e9a:	d10f      	bne.n	8005ebc <stripquotes+0x3c>
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b22      	cmp	r3, #34	@ 0x22
 8005ea8:	d108      	bne.n	8005ebc <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	1e9a      	subs	r2, r3, #2
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f007 fb0c 	bl	800d4d2 <mg_str_n>
             : s;
 8005eba:	e006      	b.n	8005eca <stripquotes+0x4a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	1d3b      	adds	r3, r7, #4
 8005ec2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ec6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08c      	sub	sp, #48	@ 0x30
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	1d38      	adds	r0, r7, #4
 8005ede:	e880 0006 	stmia.w	r0, {r1, r2}
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ee8:	e072      	b.n	8005fd0 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef0:	440b      	add	r3, r1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b3d      	cmp	r3, #61	@ 0x3d
 8005ef8:	d167      	bne.n	8005fca <mg_http_get_header_var+0xf8>
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efe:	4413      	add	r3, r2
 8005f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f04:	4618      	mov	r0, r3
 8005f06:	f01c fae8 	bl	80224da <memcmp>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d15c      	bne.n	8005fca <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	440b      	add	r3, r1
 8005f18:	3301      	adds	r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4413      	add	r3, r2
 8005f28:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 8005f2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d205      	bcs.n	8005f3e <mg_http_get_header_var+0x6c>
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b22      	cmp	r3, #34	@ 0x22
 8005f38:	d101      	bne.n	8005f3e <mg_http_get_header_var+0x6c>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <mg_http_get_header_var+0x6e>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 8005f42:	e002      	b.n	8005f4a <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 8005f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f46:	3301      	adds	r3, #1
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 8005f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d227      	bcs.n	8005fa2 <mg_http_get_header_var+0xd0>
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8005f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d003      	beq.n	8005f68 <mg_http_get_header_var+0x96>
 8005f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b22      	cmp	r3, #34	@ 0x22
 8005f66:	d001      	beq.n	8005f6c <mg_http_get_header_var+0x9a>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <mg_http_get_header_var+0x9c>
 8005f6c:	2300      	movs	r3, #0
      while (p < x &&
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e5      	bne.n	8005f44 <mg_http_get_header_var+0x72>
 8005f78:	e013      	b.n	8005fa2 <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8005f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b3b      	cmp	r3, #59	@ 0x3b
 8005f80:	d009      	beq.n	8005f96 <mg_http_get_header_var+0xc4>
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d005      	beq.n	8005f96 <mg_http_get_header_var+0xc4>
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b2c      	cmp	r3, #44	@ 0x2c
 8005f90:	d001      	beq.n	8005f96 <mg_http_get_header_var+0xc4>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <mg_http_get_header_var+0xc6>
 8005f96:	2300      	movs	r3, #0
      while (p < x &&
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1d0      	bne.n	8005f44 <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8005fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	461a      	mov	r2, r3
 8005fae:	f107 0314 	add.w	r3, r7, #20
 8005fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f007 fa8c 	bl	800d4d2 <mg_str_n>
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f107 0314 	add.w	r3, r7, #20
 8005fc0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005fc4:	f7ff ff5c 	bl	8005e80 <stripquotes>
 8005fc8:	e012      	b.n	8005ff0 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8005fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fcc:	3301      	adds	r3, #1
 8005fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <mg_http_get_header_var+0x112>
 8005fd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fda:	4413      	add	r3, r2
 8005fdc:	1c9a      	adds	r2, r3, #2
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d382      	bcc.n	8005eea <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f007 fa71 	bl	800d4d2 <mg_str_n>
}
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	3730      	adds	r7, #48	@ 0x30
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ffa:	b002      	add	sp, #8
 8005ffc:	4770      	bx	lr

08005ffe <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f01b ff82 	bl	8021f14 <atoi>
 8006010:	4603      	mov	r3, r0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <is_hex_digit>:

static bool is_hex_digit(int c) {
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b2f      	cmp	r3, #47	@ 0x2f
 8006026:	dd02      	ble.n	800602e <is_hex_digit+0x14>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b39      	cmp	r3, #57	@ 0x39
 800602c:	dd0b      	ble.n	8006046 <is_hex_digit+0x2c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b60      	cmp	r3, #96	@ 0x60
 8006032:	dd02      	ble.n	800603a <is_hex_digit+0x20>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b66      	cmp	r3, #102	@ 0x66
 8006038:	dd05      	ble.n	8006046 <is_hex_digit+0x2c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b40      	cmp	r3, #64	@ 0x40
 800603e:	dd04      	ble.n	800604a <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b46      	cmp	r3, #70	@ 0x46
 8006044:	dc01      	bgt.n	800604a <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <is_hex_digit+0x32>
 800604a:	2300      	movs	r3, #0
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	b2db      	uxtb	r3, r3
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800605e:	b580      	push	{r7, lr}
 8006060:	b08a      	sub	sp, #40	@ 0x28
 8006062:	af02      	add	r7, sp, #8
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b02      	cmp	r3, #2
 8006078:	dc04      	bgt.n	8006084 <skip_chunk+0x26>
 800607a:	2300      	movs	r3, #0
 800607c:	e07a      	b.n	8006174 <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3301      	adds	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	da09      	bge.n	80060a0 <skip_chunk+0x42>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff ffc0 	bl	800601a <is_hex_digit>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1ee      	bne.n	800607e <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <skip_chunk+0x4e>
 80060a6:	f04f 33ff 	mov.w	r3, #4294967295
 80060aa:	e063      	b.n	8006174 <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	dd02      	ble.n	80060b8 <skip_chunk+0x5a>
 80060b2:	f04f 33ff 	mov.w	r3, #4294967295
 80060b6:	e05d      	b.n	8006174 <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	429a      	cmp	r2, r3
 80060be:	da0c      	bge.n	80060da <skip_chunk+0x7c>
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b0d      	cmp	r3, #13
 80060ca:	d106      	bne.n	80060da <skip_chunk+0x7c>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	3301      	adds	r3, #1
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b0a      	cmp	r3, #10
 80060d8:	d002      	beq.n	80060e0 <skip_chunk+0x82>
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	e049      	b.n	8006174 <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	f107 0314 	add.w	r3, r7, #20
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f007 f9f2 	bl	800d4d2 <mg_str_n>
 80060ee:	f107 0310 	add.w	r3, r7, #16
 80060f2:	2204      	movs	r2, #4
 80060f4:	9200      	str	r2, [sp, #0]
 80060f6:	2210      	movs	r2, #16
 80060f8:	f107 0114 	add.w	r1, r7, #20
 80060fc:	c903      	ldmia	r1, {r0, r1}
 80060fe:	f007 fc26 	bl	800d94e <mg_str_to_num>
 8006102:	4603      	mov	r3, r0
 8006104:	f083 0301 	eor.w	r3, r3, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800610e:	f04f 33ff 	mov.w	r3, #4294967295
 8006112:	e02f      	b.n	8006174 <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	da02      	bge.n	8006120 <skip_chunk+0xc2>
 800611a:	f04f 33ff 	mov.w	r3, #4294967295
 800611e:	e029      	b.n	8006174 <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	1eda      	subs	r2, r3, #3
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	dc01      	bgt.n	8006132 <skip_chunk+0xd4>
 800612e:	2300      	movs	r3, #0
 8006130:	e020      	b.n	8006174 <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	3302      	adds	r3, #2
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b0d      	cmp	r3, #13
 8006142:	d108      	bne.n	8006156 <skip_chunk+0xf8>
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	3303      	adds	r3, #3
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b0a      	cmp	r3, #10
 8006154:	d002      	beq.n	800615c <skip_chunk+0xfe>
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
 800615a:	e00b      	b.n	8006174 <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	1c9a      	adds	r2, r3, #2
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	1c9a      	adds	r2, r3, #2
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	3302      	adds	r3, #2
}
 8006174:	4618      	mov	r0, r3
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800617c:	b580      	push	{r7, lr}
 800617e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006182:	af00      	add	r7, sp, #0
 8006184:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006188:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800618c:	6018      	str	r0, [r3, #0]
 800618e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006192:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006196:	6019      	str	r1, [r3, #0]
 8006198:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800619c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80061a0:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 80061a2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80061a6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b07      	cmp	r3, #7
 80061ae:	d031      	beq.n	8006214 <http_cb+0x98>
 80061b0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80061b4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b09      	cmp	r3, #9
 80061bc:	d02a      	beq.n	8006214 <http_cb+0x98>
 80061be:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80061c2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	f040 8311 	bne.w	80067f0 <http_cb+0x674>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80061ce:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80061d2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 8304 	beq.w	80067f0 <http_cb+0x674>
 80061e8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80061ec:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 82f7 	bne.w	80067f0 <http_cb+0x674>
       c->recv.len > 0)) {  // see #2796
 8006202:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006206:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 82ee 	beq.w	80067f0 <http_cb+0x674>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 8006214:	2300      	movs	r3, #0
 8006216:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800621a:	e2bc      	b.n	8006796 <http_cb+0x61a>
      const char *buf = (char *) c->recv.buf + ofs;
 800621c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006220:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006228:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800622c:	4413      	add	r3, r2
 800622e:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8006232:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006236:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800623e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	f107 0210 	add.w	r2, r7, #16
 8006248:	4619      	mov	r1, r3
 800624a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800624e:	f7fd ff3f 	bl	80040d0 <mg_http_parse>
 8006252:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8006256:	2300      	movs	r3, #0
 8006258:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 800625c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006260:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006268:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 800626c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006270:	2b00      	cmp	r3, #0
 8006272:	da23      	bge.n	80062bc <http_cb+0x140>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
        c->is_draining = 1;
 8006274:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006278:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006282:	f043 0310 	orr.w	r3, r3, #16
 8006286:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800628a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800628e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006296:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b10      	cmp	r3, #16
 800629e:	bf28      	it	cs
 80062a0:	2310      	movcs	r3, #16
 80062a2:	4619      	mov	r1, r3
 80062a4:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 80062a8:	f001 fa9c 	bl	80077e4 <mg_hexdump>
        c->recv.len = 0;
 80062ac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80062b0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 80062ba:	e299      	b.n	80067f0 <http_cb+0x674>
      }
      if (n == 0) break;                 // Request is not buffered yet
 80062bc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8280 	beq.w	80067c6 <http_cb+0x64a>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 80062c6:	f107 0210 	add.w	r2, r7, #16
 80062ca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80062ce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80062d2:	210a      	movs	r1, #10
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f7fc f815 	bl	8002304 <mg_call>
      if (c->recv.len != old_len) {
 80062da:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80062de:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d008      	beq.n	8006300 <http_cb+0x184>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
        c->pfn = NULL;
 80062ee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80062f2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 80062fe:	e277      	b.n	80067f0 <http_cb+0x674>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8006300:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006304:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b09      	cmp	r3, #9
 800630c:	d128      	bne.n	8006360 <http_cb+0x1e4>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800630e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006312:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800631a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006324:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006328:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800632c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006330:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006334:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006338:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800633c:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8006340:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8006344:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8006348:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800634c:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8006350:	1a8a      	subs	r2, r1, r2
 8006352:	1a9a      	subs	r2, r3, r2
 8006354:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006358:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800635c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8006360:	f107 0310 	add.w	r3, r7, #16
 8006364:	49be      	ldr	r1, [pc, #760]	@ (8006660 <http_cb+0x4e4>)
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd fcf6 	bl	8003d58 <mg_http_get_header>
 800636c:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 8006370:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01d      	beq.n	80063b4 <http_cb+0x238>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8006378:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800637c:	49b9      	ldr	r1, [pc, #740]	@ (8006664 <http_cb+0x4e8>)
 800637e:	4618      	mov	r0, r3
 8006380:	f007 f88a 	bl	800d498 <mg_str_s>
 8006384:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8006388:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800638c:	cb0c      	ldmia	r3, {r2, r3}
 800638e:	c903      	ldmia	r1, {r0, r1}
 8006390:	f007 f945 	bl	800d61e <mg_strcasecmp>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <http_cb+0x226>
          is_chunked = true;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 80063a0:	e08f      	b.n	80064c2 <http_cb+0x346>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 80063a2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80063a6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80063aa:	49af      	ldr	r1, [pc, #700]	@ (8006668 <http_cb+0x4ec>)
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f7fb ffc9 	bl	8002344 <mg_error>
          return;
 80063b2:	e21d      	b.n	80067f0 <http_cb+0x674>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 80063b4:	f107 0310 	add.w	r3, r7, #16
 80063b8:	49ac      	ldr	r1, [pc, #688]	@ (800666c <http_cb+0x4f0>)
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd fccc 	bl	8003d58 <mg_http_get_header>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d17d      	bne.n	80064c2 <http_cb+0x346>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 80063c6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80063ca:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2205      	movs	r2, #5
 80063d2:	49a7      	ldr	r1, [pc, #668]	@ (8006670 <http_cb+0x4f4>)
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fd fa30 	bl	800383a <mg_ncasecmp>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 80063e8:	2300      	movs	r3, #0
 80063ea:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80063ee:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 80063f2:	f083 0301 	eor.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d030      	beq.n	800645e <http_cb+0x2e2>
 80063fc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006400:	499c      	ldr	r1, [pc, #624]	@ (8006674 <http_cb+0x4f8>)
 8006402:	4618      	mov	r0, r3
 8006404:	f007 f848 	bl	800d498 <mg_str_s>
 8006408:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800640c:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8006410:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006414:	cb0c      	ldmia	r3, {r2, r3}
 8006416:	c903      	ldmia	r1, {r0, r1}
 8006418:	f007 f901 	bl	800d61e <mg_strcasecmp>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d012      	beq.n	8006448 <http_cb+0x2cc>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8006422:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8006426:	4994      	ldr	r1, [pc, #592]	@ (8006678 <http_cb+0x4fc>)
 8006428:	4618      	mov	r0, r3
 800642a:	f007 f835 	bl	800d498 <mg_str_s>
 800642e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006432:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8006436:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800643a:	cb0c      	ldmia	r3, {r2, r3}
 800643c:	c903      	ldmia	r1, {r0, r1}
 800643e:	f007 f8ee 	bl	800d61e <mg_strcasecmp>
 8006442:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <http_cb+0x2e2>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800644e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006452:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8006456:	4413      	add	r3, r2
 8006458:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800645c:	e022      	b.n	80064a4 <http_cb+0x328>
        } else if (is_response) {
 800645e:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01e      	beq.n	80064a4 <http_cb+0x328>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8006466:	f107 0310 	add.w	r3, r7, #16
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff fdc7 	bl	8005ffe <mg_http_status>
 8006470:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 8006474:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006478:	2bc7      	cmp	r3, #199	@ 0xc7
 800647a:	dd0a      	ble.n	8006492 <http_cb+0x316>
 800647c:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006480:	2bcc      	cmp	r3, #204	@ 0xcc
 8006482:	d006      	beq.n	8006492 <http_cb+0x316>
 8006484:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8006488:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800648c:	d001      	beq.n	8006492 <http_cb+0x316>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <http_cb+0x318>
 8006492:	2300      	movs	r3, #0
 8006494:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8006498:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 80064a4:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <http_cb+0x346>
          mg_http_reply(c, 411, "", "");
 80064ac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80064b0:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 80064b4:	4b71      	ldr	r3, [pc, #452]	@ (800667c <http_cb+0x500>)
 80064b6:	4a71      	ldr	r2, [pc, #452]	@ (800667c <http_cb+0x500>)
 80064b8:	f240 119b 	movw	r1, #411	@ 0x19b
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f7fe fc71 	bl	8004da4 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
        }
      }

      if (is_chunked) {
 80064c2:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80dc 	beq.w	8006684 <http_cb+0x508>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 80064cc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80064d0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064d8:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 80064dc:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80064e0:	440b      	add	r3, r1
 80064e2:	4413      	add	r3, r2
 80064e4:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80064ee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80064f2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064fa:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800650a:	e006      	b.n	800651a <http_cb+0x39e>
 800650c:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8006510:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006514:	4413      	add	r3, r2
 8006516:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800651a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800651e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8006522:	18d0      	adds	r0, r2, r3
 8006524:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8006528:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800652c:	1ad1      	subs	r1, r2, r3
 800652e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8006532:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8006536:	f7ff fd92 	bl	800605e <skip_chunk>
 800653a:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800653e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006542:	2b00      	cmp	r3, #0
 8006544:	dd03      	ble.n	800654e <http_cb+0x3d2>
 8006546:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1de      	bne.n	800650c <http_cb+0x390>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800654e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8139 	beq.w	80067ca <http_cb+0x64e>
        if (cl < 0) {
 8006558:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800655c:	2b00      	cmp	r3, #0
 800655e:	da08      	bge.n	8006572 <http_cb+0x3f6>
          mg_error(c, "Invalid chunk");
 8006560:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006564:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006568:	4945      	ldr	r1, [pc, #276]	@ (8006680 <http_cb+0x504>)
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	f7fb feea 	bl	8002344 <mg_error>
          break;
 8006570:	e12e      	b.n	80067d0 <http_cb+0x654>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8006572:	2300      	movs	r3, #0
 8006574:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006578:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800657c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006580:	2200      	movs	r2, #0
 8006582:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006586:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800658a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800658e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8006592:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8006596:	e03e      	b.n	8006616 <http_cb+0x49a>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8006598:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800659c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80065a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80065a4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80065a8:	18d0      	adds	r0, r2, r3
 80065aa:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80065ae:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80065b2:	4413      	add	r3, r2
 80065b4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80065b8:	4413      	add	r3, r2
 80065ba:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 80065be:	4619      	mov	r1, r3
 80065c0:	f01b ff9b 	bl	80224fa <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 80065c4:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 80065c8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80065cc:	4413      	add	r3, r2
 80065ce:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80065d2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80065d6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80065da:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80065de:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 80065e2:	441a      	add	r2, r3
 80065e4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80065e8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80065ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80065f0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80065f4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80065f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80065fc:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8006600:	441a      	add	r2, r3
 8006602:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006606:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800660a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800660e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8006612:	2b00      	cmp	r3, #0
 8006614:	d016      	beq.n	8006644 <http_cb+0x4c8>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8006616:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800661a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800661e:	18d0      	adds	r0, r2, r3
 8006620:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8006624:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8006628:	1ad1      	subs	r1, r2, r3
 800662a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800662e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8006632:	f7ff fd14 	bl	800605e <skip_chunk>
 8006636:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800663a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800663e:	2b00      	cmp	r3, #0
 8006640:	dcaa      	bgt.n	8006598 <http_cb+0x41c>
 8006642:	e000      	b.n	8006646 <http_cb+0x4ca>
          if (dl == 0) break;
 8006644:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8006646:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800664a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800664e:	4413      	add	r3, r2
 8006650:	461a      	mov	r2, r3
 8006652:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006656:	4413      	add	r3, r2
 8006658:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800665c:	e039      	b.n	80066d2 <http_cb+0x556>
 800665e:	bf00      	nop
 8006660:	08024754 	.word	0x08024754
 8006664:	08024768 	.word	0x08024768
 8006668:	08024770 	.word	0x08024770
 800666c:	0802478c 	.word	0x0802478c
 8006670:	08023d5c 	.word	0x08023d5c
 8006674:	08023d68 	.word	0x08023d68
 8006678:	08023d64 	.word	0x08023d64
 800667c:	08024230 	.word	0x08024230
 8006680:	0802479c 	.word	0x0802479c
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 8006684:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006688:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006690:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8006694:	1ad2      	subs	r2, r2, r3
 8006696:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 80066a0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80066a4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80066a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80066ac:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80066b0:	429a      	cmp	r2, r3
 80066b2:	f0c0 808c 	bcc.w	80067ce <http_cb+0x652>
        ofs += (size_t) n + hm.body.len;
 80066b6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80066ba:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80066be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066c2:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80066c6:	4413      	add	r3, r2
 80066c8:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80066cc:	4413      	add	r3, r2
 80066ce:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80066d2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80066d6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <http_cb+0x584>
 80066ea:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80066ee:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80066f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fc:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8006700:	f107 0210 	add.w	r2, r7, #16
 8006704:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006708:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800670c:	210b      	movs	r1, #11
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	f7fb fdf8 	bl	8002304 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 8006714:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006718:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d034      	beq.n	8006796 <http_cb+0x61a>
 800672c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006730:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800673a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d128      	bne.n	8006796 <http_cb+0x61a>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8006744:	f107 0310 	add.w	r3, r7, #16
 8006748:	492b      	ldr	r1, [pc, #172]	@ (80067f8 <http_cb+0x67c>)
 800674a:	4618      	mov	r0, r3
 800674c:	f7fd fb04 	bl	8003d58 <mg_http_get_header>
 8006750:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8006754:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01c      	beq.n	8006796 <http_cb+0x61a>
 800675c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8006760:	4926      	ldr	r1, [pc, #152]	@ (80067fc <http_cb+0x680>)
 8006762:	4618      	mov	r0, r3
 8006764:	f006 fe98 	bl	800d498 <mg_str_s>
 8006768:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800676c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8006770:	cb0c      	ldmia	r3, {r2, r3}
 8006772:	c903      	ldmia	r1, {r0, r1}
 8006774:	f006 ff53 	bl	800d61e <mg_strcasecmp>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <http_cb+0x61a>
          c->is_draining = 1;  // honor "Connection: close"
 800677e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8006782:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800678c:	f043 0310 	orr.w	r3, r3, #16
 8006790:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8006794:	e01c      	b.n	80067d0 <http_cb+0x654>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8006796:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800679a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80067a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d110      	bne.n	80067d0 <http_cb+0x654>
 80067ae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80067b2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ba:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80067be:	429a      	cmp	r2, r3
 80067c0:	f4ff ad2c 	bcc.w	800621c <http_cb+0xa0>
 80067c4:	e004      	b.n	80067d0 <http_cb+0x654>
      if (n == 0) break;                 // Request is not buffered yet
 80067c6:	bf00      	nop
 80067c8:	e002      	b.n	80067d0 <http_cb+0x654>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <http_cb+0x654>
        if (hm.body.len > len) break;  // Buffer more data
 80067ce:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80067d0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <http_cb+0x674>
 80067d8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80067dc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3338      	adds	r3, #56	@ 0x38
 80067e4:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 f8f7 	bl	80069de <mg_iobuf_del>
  }
  (void) ev_data;
}
 80067f0:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	080247ac 	.word	0x080247ac
 80067fc:	080247b8 	.word	0x080247b8

08006800 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f002 fbb5 	bl	8008f84 <mg_listen>
 800681a:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <mg_http_listen+0x2a>
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4a03      	ldr	r2, [pc, #12]	@ (8006834 <mg_http_listen+0x34>)
 8006826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800682a:	697b      	ldr	r3, [r7, #20]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	0800617d 	.word	0x0800617d

08006838 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00a      	beq.n	800685e <roundup+0x26>
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	4413      	add	r3, r2
 800684e:	1e5a      	subs	r2, r3, #1
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	fbb2 f3f3 	udiv	r3, r2, r3
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	fb02 f303 	mul.w	r3, r2, r3
 800685c:	e000      	b.n	8006860 <roundup+0x28>
 800685e:	687b      	ldr	r3, [r7, #4]
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8006876:	2301      	movs	r3, #1
 8006878:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	4619      	mov	r1, r3
 8006880:	6838      	ldr	r0, [r7, #0]
 8006882:	f7ff ffd9 	bl	8006838 <roundup>
 8006886:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d117      	bne.n	80068be <mg_iobuf_resize+0x52>
    mg_bzero(io->buf, io->size);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f00f fb2f 	bl	8015efc <mg_bzero>
    free(io->buf);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f01b fb5e 	bl	8021f64 <free>
    io->buf = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	605a      	str	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	e038      	b.n	8006930 <mg_iobuf_resize+0xc4>
  } else if (new_size != io->size) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d033      	beq.n	8006930 <mg_iobuf_resize+0xc4>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	2001      	movs	r0, #1
 80068cc:	f01b fb26 	bl	8021f1c <calloc>
 80068d0:	4603      	mov	r3, r0
 80068d2:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d028      	beq.n	800692c <mg_iobuf_resize+0xc0>
      size_t len = new_size < io->len ? new_size : io->len;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	bf28      	it	cs
 80068e4:	4613      	movcs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <mg_iobuf_resize+0x98>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <mg_iobuf_resize+0x98>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4619      	mov	r1, r3
 80068fe:	6938      	ldr	r0, [r7, #16]
 8006900:	f01b fdfb 	bl	80224fa <memmove>
      mg_bzero(io->buf, io->size);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f00f faf4 	bl	8015efc <mg_bzero>
      free(io->buf);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f01b fb23 	bl	8021f64 <free>
      io->buf = (unsigned char *) p;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	e001      	b.n	8006930 <mg_iobuf_resize+0xc4>
    } else {
      ok = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
    }
  }
  return ok;
 8006930:	697b      	ldr	r3, [r7, #20]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	441a      	add	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f7ff ff6e 	bl	8006838 <roundup>
 800695c:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800695e:	6979      	ldr	r1, [r7, #20]
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff ff83 	bl	800686c <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	429a      	cmp	r2, r3
 800696e:	d001      	beq.n	8006974 <mg_iobuf_add+0x3a>
 8006970:	2300      	movs	r3, #0
 8006972:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	429a      	cmp	r2, r3
 800697c:	d210      	bcs.n	80069a0 <mg_iobuf_add+0x66>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	440b      	add	r3, r1
 8006988:	18d0      	adds	r0, r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	18d1      	adds	r1, r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	461a      	mov	r2, r3
 800699c:	f01b fdad 	bl	80224fa <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d008      	beq.n	80069b8 <mg_iobuf_add+0x7e>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4413      	add	r3, r2
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f01b fda1 	bl	80224fa <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d902      	bls.n	80069c8 <mg_iobuf_add+0x8e>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	609a      	str	r2, [r3, #8]
  io->len += len;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	441a      	add	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	609a      	str	r2, [r3, #8]
  return len;
 80069d4:	683b      	ldr	r3, [r7, #0]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d902      	bls.n	80069fa <mg_iobuf_del+0x1c>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	441a      	add	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d904      	bls.n	8006a12 <mg_iobuf_del+0x34>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d012      	beq.n	8006a40 <mg_iobuf_del+0x62>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	18d0      	adds	r0, r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	440b      	add	r3, r1
 8006a2c:	18d1      	adds	r1, r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	1ad2      	subs	r2, r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f01b fd5d 	bl	80224fa <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <mg_iobuf_del+0x80>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6899      	ldr	r1, [r3, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	1acb      	subs	r3, r1, r3
 8006a54:	4413      	add	r3, r2
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f00f fa4f 	bl	8015efc <mg_bzero>
  io->len -= len;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	1ad2      	subs	r2, r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	609a      	str	r2, [r3, #8]
  return len;
 8006a6a:	687b      	ldr	r3, [r7, #4]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff fef4 	bl	800686c <mg_iobuf_resize>
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <escapeseq+0x12>
 8006a9a:	4b04      	ldr	r3, [pc, #16]	@ (8006aac <escapeseq+0x20>)
 8006a9c:	e000      	b.n	8006aa0 <escapeseq+0x14>
 8006a9e:	4b04      	ldr	r3, [pc, #16]	@ (8006ab0 <escapeseq+0x24>)
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	080247f8 	.word	0x080247f8
 8006ab0:	08024800 	.word	0x08024800

08006ab4 <json_esc>:

static char json_esc(int c, int esc) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8006abe:	6838      	ldr	r0, [r7, #0]
 8006ac0:	f7ff ffe4 	bl	8006a8c <escapeseq>
 8006ac4:	6138      	str	r0, [r7, #16]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bf0c      	ite	eq
 8006acc:	2301      	moveq	r3, #1
 8006ace:	2300      	movne	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff ffda 	bl	8006a8c <escapeseq>
 8006ad8:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	e010      	b.n	8006b02 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d107      	bne.n	8006afc <json_esc+0x48>
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	e007      	b.n	8006b0c <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3301      	adds	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1ea      	bne.n	8006ae0 <json_esc+0x2c>
  }
  return 0;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	e02e      	b.n	8006b82 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	4413      	add	r3, r2
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b2e:	d114      	bne.n	8006b5a <mg_pass_string+0x46>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	dd0f      	ble.n	8006b5a <mg_pass_string+0x46>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	4413      	add	r3, r2
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2101      	movs	r1, #1
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff ffb4 	bl	8006ab4 <json_esc>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <mg_pass_string+0x46>
      i++;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3301      	adds	r3, #1
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	e010      	b.n	8006b7c <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4413      	add	r3, r2
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 8006b66:	f06f 0301 	mvn.w	r3, #1
 8006b6a:	e010      	b.n	8006b8e <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4413      	add	r3, r2
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b22      	cmp	r3, #34	@ 0x22
 8006b76:	d101      	bne.n	8006b7c <mg_pass_string+0x68>
      return i;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	e008      	b.n	8006b8e <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	dbcc      	blt.n	8006b24 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 8006b8a:	f06f 0301 	mvn.w	r3, #1
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8006b98:	b480      	push	{r7}
 8006b9a:	b091      	sub	sp, #68	@ 0x44
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 8006bb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	da0a      	bge.n	8006bd6 <mg_atod+0x3e>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b2d      	cmp	r3, #45	@ 0x2d
 8006bc6:	d106      	bne.n	8006bd6 <mg_atod+0x3e>
    sign = -1, i++;
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd4:	e00a      	b.n	8006bec <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 8006bd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	da21      	bge.n	8006c22 <mg_atod+0x8a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006be4:	d11d      	bne.n	8006c22 <mg_atod+0x8a>
    i++;
 8006be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be8:	3301      	adds	r3, #1
 8006bea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006bec:	e019      	b.n	8006c22 <mg_atod+0x8a>
    d *= 10.0;
 8006bee:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8006bf2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006bf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006bfa:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	3b30      	subs	r3, #48	@ 0x30
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c10:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8006c14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c18:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1e:	3301      	adds	r3, #1
 8006c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	da0b      	bge.n	8006c42 <mg_atod+0xaa>
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c34:	d905      	bls.n	8006c42 <mg_atod+0xaa>
 8006c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b39      	cmp	r3, #57	@ 0x39
 8006c40:	d9d5      	bls.n	8006bee <mg_atod+0x56>
  }
  d *= sign;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c4c:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8006c50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c54:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8006c58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	da51      	bge.n	8006d04 <mg_atod+0x16c>
 8006c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c6a:	d14b      	bne.n	8006d04 <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006c78:	a36d      	add	r3, pc, #436	@ (adr r3, 8006e30 <mg_atod+0x298>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 8006c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c84:	3301      	adds	r3, #1
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006c88:	e01d      	b.n	8006cc6 <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	3b30      	subs	r3, #48	@ 0x30
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006c9c:	ed97 7b08 	vldr	d7, [r7, #32]
 8006ca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006ca4:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8006ca8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006cac:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 8006cb0:	ed97 6b08 	vldr	d6, [r7, #32]
 8006cb4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8006cb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006cbc:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	da0b      	bge.n	8006ce6 <mg_atod+0x14e>
 8006cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b2f      	cmp	r3, #47	@ 0x2f
 8006cd8:	d905      	bls.n	8006ce6 <mg_atod+0x14e>
 8006cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b39      	cmp	r3, #57	@ 0x39
 8006ce4:	d9d1      	bls.n	8006c8a <mg_atod+0xf2>
    }
    d += frac * sign;
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	ee07 3a90 	vmov	s15, r3
 8006cec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006cf0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8006cf4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006cf8:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8006cfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d00:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8006d04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	da7e      	bge.n	8006e0a <mg_atod+0x272>
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b65      	cmp	r3, #101	@ 0x65
 8006d16:	d005      	beq.n	8006d24 <mg_atod+0x18c>
 8006d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b45      	cmp	r3, #69	@ 0x45
 8006d22:	d172      	bne.n	8006e0a <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
    i++;
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2e:	3301      	adds	r3, #1
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 8006d32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	da0a      	bge.n	8006d50 <mg_atod+0x1b8>
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b2d      	cmp	r3, #45	@ 0x2d
 8006d44:	d104      	bne.n	8006d50 <mg_atod+0x1b8>
 8006d46:	2301      	movs	r3, #1
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 8006d50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	da19      	bge.n	8006d8c <mg_atod+0x1f4>
 8006d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b2b      	cmp	r3, #43	@ 0x2b
 8006d62:	d113      	bne.n	8006d8c <mg_atod+0x1f4>
 8006d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d66:	3301      	adds	r3, #1
 8006d68:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8006d6a:	e00f      	b.n	8006d8c <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	4619      	mov	r1, r3
 8006d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	3b30      	subs	r3, #48	@ 0x30
 8006d88:	440b      	add	r3, r1
 8006d8a:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8006d8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	da0f      	bge.n	8006db4 <mg_atod+0x21c>
 8006d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d9e:	d909      	bls.n	8006db4 <mg_atod+0x21c>
 8006da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b39      	cmp	r3, #57	@ 0x39
 8006daa:	d803      	bhi.n	8006db4 <mg_atod+0x21c>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8006db2:	dbdb      	blt.n	8006d6c <mg_atod+0x1d4>
    if (minus) exp = -exp;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <mg_atod+0x228>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	e00a      	b.n	8006ddc <mg_atod+0x244>
 8006dc6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8006dca:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006dce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006dd2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	dbf0      	blt.n	8006dc6 <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e00a      	b.n	8006e00 <mg_atod+0x268>
 8006dea:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8006dee:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8006df2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006df6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	61fb      	str	r3, [r7, #28]
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	425b      	negs	r3, r3
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	dbef      	blt.n	8006dea <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <mg_atod+0x27e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e14:	601a      	str	r2, [r3, #0]
  return d;
 8006e16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e1a:	ec43 2b17 	vmov	d7, r2, r3
}
 8006e1e:	eeb0 0b47 	vmov.f64	d0, d7
 8006e22:	3744      	adds	r7, #68	@ 0x44
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	f3af 8000 	nop.w
 8006e30:	9999999a 	.word	0x9999999a
 8006e34:	3fb99999 	.word	0x3fb99999

08006e38 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b09b      	sub	sp, #108	@ 0x6c
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	f107 0408 	add.w	r4, r7, #8
 8006e42:	e884 0003 	stmia.w	r4, {r0, r1}
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8006e58:	2300      	movs	r3, #0
 8006e5a:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 8006e60:	2300      	movs	r3, #0
 8006e62:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 8006e64:	2300      	movs	r3, #0
 8006e66:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 8006e68:	2301      	movs	r3, #1
 8006e6a:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8006e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295
 8006e76:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <mg_json_get+0x4c>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b24      	cmp	r3, #36	@ 0x24
 8006e8a:	d002      	beq.n	8006e92 <mg_json_get+0x5a>
 8006e8c:	f06f 0301 	mvn.w	r3, #1
 8006e90:	e308      	b.n	80074a4 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8006e92:	2300      	movs	r3, #0
 8006e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e96:	e2fe      	b.n	8007496 <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 8006e98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e9c:	4413      	add	r3, r2
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8006ea4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	f000 82ee 	beq.w	800748a <mg_json_get+0x652>
 8006eae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	f000 82e9 	beq.w	800748a <mg_json_get+0x652>
 8006eb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006ebc:	2b0a      	cmp	r3, #10
 8006ebe:	f000 82e4 	beq.w	800748a <mg_json_get+0x652>
 8006ec2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006ec6:	2b0d      	cmp	r3, #13
 8006ec8:	f000 82df 	beq.w	800748a <mg_json_get+0x652>
    switch (expecting) {
 8006ecc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	f200 82dd 	bhi.w	8007490 <mg_json_get+0x658>
 8006ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <mg_json_get+0xa4>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	080071d5 	.word	0x080071d5
 8006ee4:	08007363 	.word	0x08007363
 8006ee8:	08007379 	.word	0x08007379
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8006eec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d101      	bne.n	8006ef8 <mg_json_get+0xc0>
 8006ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 8006ef8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006efc:	2b7b      	cmp	r3, #123	@ 0x7b
 8006efe:	d12b      	bne.n	8006f58 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8006f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f02:	2b1d      	cmp	r3, #29
 8006f04:	dd02      	ble.n	8006f0c <mg_json_get+0xd4>
 8006f06:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0a:	e2cb      	b.n	80074a4 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8006f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d114      	bne.n	8006f3e <mg_json_get+0x106>
 8006f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4413      	add	r3, r2
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f1e:	d10e      	bne.n	8006f3e <mg_json_get+0x106>
 8006f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d10a      	bne.n	8006f3e <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8006f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f30:	3301      	adds	r3, #1
 8006f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f34:	f04f 33ff 	mov.w	r3, #4294967295
 8006f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 8006f3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f44:	3368      	adds	r3, #104	@ 0x68
 8006f46:	443b      	add	r3, r7
 8006f48:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8006f4c:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 8006f56:	e29b      	b.n	8007490 <mg_json_get+0x658>
        } else if (c == '[') {
 8006f58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006f5c:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f5e:	d14e      	bne.n	8006ffe <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8006f60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f62:	2b1d      	cmp	r3, #29
 8006f64:	dd02      	ble.n	8006f6c <mg_json_get+0x134>
 8006f66:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6a:	e29b      	b.n	80074a4 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8006f6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d13a      	bne.n	8006fea <mg_json_get+0x1b2>
 8006f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f7e:	d134      	bne.n	8006fea <mg_json_get+0x1b2>
 8006f80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d130      	bne.n	8006fea <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8006f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f90:	3301      	adds	r3, #1
 8006f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f94:	2300      	movs	r3, #0
 8006f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006f98:	2300      	movs	r3, #0
 8006f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9c:	e010      	b.n	8006fc0 <mg_json_get+0x188>
              ei *= 10;
 8006f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 8006faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4413      	add	r3, r2
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	3b30      	subs	r3, #48	@ 0x30
 8006fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fb6:	4413      	add	r3, r2
 8006fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b5d      	cmp	r3, #93	@ 0x5d
 8006fca:	d005      	beq.n	8006fd8 <mg_json_get+0x1a0>
 8006fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e2      	bne.n	8006f9e <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8006fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <mg_json_get+0x1b2>
 8006fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 8006fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ff0:	3368      	adds	r3, #104	@ 0x68
 8006ff2:	443b      	add	r3, r7
 8006ff4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8006ff8:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8006ffc:	e248      	b.n	8007490 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 8006ffe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007002:	2b5d      	cmp	r3, #93	@ 0x5d
 8007004:	d13a      	bne.n	800707c <mg_json_get+0x244>
 8007006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007008:	2b00      	cmp	r3, #0
 800700a:	dd37      	ble.n	800707c <mg_json_get+0x244>
          MG_EOO(']');
 800700c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800700e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007010:	429a      	cmp	r2, r3
 8007012:	d106      	bne.n	8007022 <mg_json_get+0x1ea>
 8007014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007018:	429a      	cmp	r2, r3
 800701a:	d002      	beq.n	8007022 <mg_json_get+0x1ea>
 800701c:	f06f 0302 	mvn.w	r3, #2
 8007020:	e240      	b.n	80074a4 <mg_json_get+0x66c>
 8007022:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007028:	3b01      	subs	r3, #1
 800702a:	3368      	adds	r3, #104	@ 0x68
 800702c:	443b      	add	r3, r7
 800702e:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007032:	3302      	adds	r3, #2
 8007034:	429a      	cmp	r2, r3
 8007036:	d002      	beq.n	800703e <mg_json_get+0x206>
 8007038:	f06f 0301 	mvn.w	r3, #1
 800703c:	e232      	b.n	80074a4 <mg_json_get+0x66c>
 800703e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007040:	3b01      	subs	r3, #1
 8007042:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007048:	429a      	cmp	r2, r3
 800704a:	f040 809c 	bne.w	8007186 <mg_json_get+0x34e>
 800704e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f040 8095 	bne.w	8007186 <mg_json_get+0x34e>
 800705c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800705e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007060:	429a      	cmp	r2, r3
 8007062:	f040 8090 	bne.w	8007186 <mg_json_get+0x34e>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <mg_json_get+0x240>
 800706c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800706e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800707a:	e213      	b.n	80074a4 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800707c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007080:	2b74      	cmp	r3, #116	@ 0x74
 8007082:	d113      	bne.n	80070ac <mg_json_get+0x274>
 8007084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007086:	3303      	adds	r3, #3
 8007088:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800708a:	429a      	cmp	r2, r3
 800708c:	dd0e      	ble.n	80070ac <mg_json_get+0x274>
 800708e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007092:	4413      	add	r3, r2
 8007094:	2204      	movs	r2, #4
 8007096:	4998      	ldr	r1, [pc, #608]	@ (80072f8 <mg_json_get+0x4c0>)
 8007098:	4618      	mov	r0, r3
 800709a:	f01b fa1e 	bl	80224da <memcmp>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <mg_json_get+0x274>
          i += 3;
 80070a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070a6:	3303      	adds	r3, #3
 80070a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80070aa:	e06c      	b.n	8007186 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80070ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80070b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80070b2:	d113      	bne.n	80070dc <mg_json_get+0x2a4>
 80070b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070b6:	3303      	adds	r3, #3
 80070b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ba:	429a      	cmp	r2, r3
 80070bc:	dd0e      	ble.n	80070dc <mg_json_get+0x2a4>
 80070be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070c2:	4413      	add	r3, r2
 80070c4:	2204      	movs	r2, #4
 80070c6:	498d      	ldr	r1, [pc, #564]	@ (80072fc <mg_json_get+0x4c4>)
 80070c8:	4618      	mov	r0, r3
 80070ca:	f01b fa06 	bl	80224da <memcmp>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <mg_json_get+0x2a4>
          i += 3;
 80070d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070d6:	3303      	adds	r3, #3
 80070d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80070da:	e054      	b.n	8007186 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 80070dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80070e0:	2b66      	cmp	r3, #102	@ 0x66
 80070e2:	d113      	bne.n	800710c <mg_json_get+0x2d4>
 80070e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070e6:	3304      	adds	r3, #4
 80070e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ea:	429a      	cmp	r2, r3
 80070ec:	dd0e      	ble.n	800710c <mg_json_get+0x2d4>
 80070ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f2:	4413      	add	r3, r2
 80070f4:	2205      	movs	r2, #5
 80070f6:	4982      	ldr	r1, [pc, #520]	@ (8007300 <mg_json_get+0x4c8>)
 80070f8:	4618      	mov	r0, r3
 80070fa:	f01b f9ee 	bl	80224da <memcmp>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <mg_json_get+0x2d4>
          i += 4;
 8007104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007106:	3304      	adds	r3, #4
 8007108:	663b      	str	r3, [r7, #96]	@ 0x60
 800710a:	e03c      	b.n	8007186 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800710c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007110:	2b2d      	cmp	r3, #45	@ 0x2d
 8007112:	d007      	beq.n	8007124 <mg_json_get+0x2ec>
 8007114:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007118:	2b2f      	cmp	r3, #47	@ 0x2f
 800711a:	d916      	bls.n	800714a <mg_json_get+0x312>
 800711c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007120:	2b39      	cmp	r3, #57	@ 0x39
 8007122:	d812      	bhi.n	800714a <mg_json_get+0x312>
          int numlen = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8007128:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800712a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800712c:	18d0      	adds	r0, r2, r3
 800712e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007130:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	f107 0210 	add.w	r2, r7, #16
 8007138:	4619      	mov	r1, r3
 800713a:	f7ff fd2d 	bl	8006b98 <mg_atod>
          i += numlen - 1;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	3b01      	subs	r3, #1
 8007142:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007144:	4413      	add	r3, r2
 8007146:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8007148:	e01d      	b.n	8007186 <mg_json_get+0x34e>
        } else if (c == '"') {
 800714a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800714e:	2b22      	cmp	r3, #34	@ 0x22
 8007150:	d116      	bne.n	8007180 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8007152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007154:	3301      	adds	r3, #1
 8007156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007158:	18d0      	adds	r0, r2, r3
 800715a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800715c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	4619      	mov	r1, r3
 8007164:	f7ff fcd6 	bl	8006b14 <mg_pass_string>
 8007168:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800716a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	da01      	bge.n	8007174 <mg_json_get+0x33c>
 8007170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007172:	e197      	b.n	80074a4 <mg_json_get+0x66c>
          i += n + 1;
 8007174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007176:	3301      	adds	r3, #1
 8007178:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800717a:	4413      	add	r3, r2
 800717c:	663b      	str	r3, [r7, #96]	@ 0x60
 800717e:	e002      	b.n	8007186 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8007180:	f06f 0301 	mvn.w	r3, #1
 8007184:	e18e      	b.n	80074a4 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 8007186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800718a:	429a      	cmp	r2, r3
 800718c:	d114      	bne.n	80071b8 <mg_json_get+0x380>
 800718e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	4413      	add	r3, r2
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10e      	bne.n	80071b8 <mg_json_get+0x380>
 800719a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800719c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800719e:	429a      	cmp	r2, r3
 80071a0:	d10a      	bne.n	80071b8 <mg_json_get+0x380>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <mg_json_get+0x37c>
 80071a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b6:	e175      	b.n	80074a4 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 80071b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071bc:	429a      	cmp	r2, r3
 80071be:	d105      	bne.n	80071cc <mg_json_get+0x394>
 80071c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	db02      	blt.n	80071cc <mg_json_get+0x394>
 80071c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c8:	3301      	adds	r3, #1
 80071ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 80071cc:	2303      	movs	r3, #3
 80071ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 80071d2:	e15d      	b.n	8007490 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 80071d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80071d8:	2b22      	cmp	r3, #34	@ 0x22
 80071da:	d170      	bne.n	80072be <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80071dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071de:	3301      	adds	r3, #1
 80071e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071e2:	18d0      	adds	r0, r2, r3
 80071e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7ff fc91 	bl	8006b14 <mg_pass_string>
 80071f2:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da01      	bge.n	80071fe <mg_json_get+0x3c6>
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	e152      	b.n	80074a4 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80071fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007204:	4413      	add	r3, r2
 8007206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007208:	429a      	cmp	r2, r3
 800720a:	dc02      	bgt.n	8007212 <mg_json_get+0x3da>
 800720c:	f06f 0302 	mvn.w	r3, #2
 8007210:	e148      	b.n	80074a4 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8007212:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007216:	429a      	cmp	r2, r3
 8007218:	da02      	bge.n	8007220 <mg_json_get+0x3e8>
 800721a:	f06f 0302 	mvn.w	r3, #2
 800721e:	e141      	b.n	80074a4 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8007220:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007224:	429a      	cmp	r2, r3
 8007226:	d109      	bne.n	800723c <mg_json_get+0x404>
 8007228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800722a:	3b01      	subs	r3, #1
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	4413      	add	r3, r2
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b2e      	cmp	r3, #46	@ 0x2e
 8007234:	d002      	beq.n	800723c <mg_json_get+0x404>
 8007236:	f06f 0302 	mvn.w	r3, #2
 800723a:	e133      	b.n	80074a4 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800723c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800723e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007240:	429a      	cmp	r2, r3
 8007242:	d133      	bne.n	80072ac <mg_json_get+0x474>
 8007244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007246:	3b01      	subs	r3, #1
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	4413      	add	r3, r2
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007250:	d12c      	bne.n	80072ac <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8007252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007254:	3301      	adds	r3, #1
 8007256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007258:	18d0      	adds	r0, r2, r3
 800725a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4413      	add	r3, r2
 8007260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007262:	4619      	mov	r1, r3
 8007264:	f01b f978 	bl	8022558 <strncmp>
 8007268:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800726a:	2b00      	cmp	r3, #0
 800726c:	d11e      	bne.n	80072ac <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800726e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007272:	4413      	add	r3, r2
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4413      	add	r3, r2
 800727a:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800727c:	2b00      	cmp	r3, #0
 800727e:	d011      	beq.n	80072a4 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8007280:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	4413      	add	r3, r2
 8007286:	461a      	mov	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4413      	add	r3, r2
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007290:	d008      	beq.n	80072a4 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8007292:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	4413      	add	r3, r2
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80072a0:	2b5b      	cmp	r3, #91	@ 0x5b
 80072a2:	d103      	bne.n	80072ac <mg_json_get+0x474>
            pos += n;
 80072a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a8:	4413      	add	r3, r2
 80072aa:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	3301      	adds	r3, #1
 80072b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80072b2:	4413      	add	r3, r2
 80072b4:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 80072b6:	2302      	movs	r3, #2
 80072b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 80072bc:	e0e7      	b.n	800748e <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 80072be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80072c2:	2b7d      	cmp	r3, #125	@ 0x7d
 80072c4:	d14a      	bne.n	800735c <mg_json_get+0x524>
          MG_EOO('}');
 80072c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d106      	bne.n	80072dc <mg_json_get+0x4a4>
 80072ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d002      	beq.n	80072dc <mg_json_get+0x4a4>
 80072d6:	f06f 0302 	mvn.w	r3, #2
 80072da:	e0e3      	b.n	80074a4 <mg_json_get+0x66c>
 80072dc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80072e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072e2:	3b01      	subs	r3, #1
 80072e4:	3368      	adds	r3, #104	@ 0x68
 80072e6:	443b      	add	r3, r7
 80072e8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80072ec:	3302      	adds	r3, #2
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d008      	beq.n	8007304 <mg_json_get+0x4cc>
 80072f2:	f06f 0301 	mvn.w	r3, #1
 80072f6:	e0d5      	b.n	80074a4 <mg_json_get+0x66c>
 80072f8:	0802480c 	.word	0x0802480c
 80072fc:	08024814 	.word	0x08024814
 8007300:	0802481c 	.word	0x0802481c
 8007304:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007306:	3b01      	subs	r3, #1
 8007308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800730a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800730c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800730e:	429a      	cmp	r2, r3
 8007310:	d114      	bne.n	800733c <mg_json_get+0x504>
 8007312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	4413      	add	r3, r2
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10e      	bne.n	800733c <mg_json_get+0x504>
 800731e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007322:	429a      	cmp	r2, r3
 8007324:	d10a      	bne.n	800733c <mg_json_get+0x504>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <mg_json_get+0x500>
 800732c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800732e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800733a:	e0b3      	b.n	80074a4 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800733c:	2303      	movs	r3, #3
 800733e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 8007342:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007346:	429a      	cmp	r2, r3
 8007348:	f040 80a1 	bne.w	800748e <mg_json_get+0x656>
 800734c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800734e:	2b00      	cmp	r3, #0
 8007350:	f2c0 809d 	blt.w	800748e <mg_json_get+0x656>
 8007354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007356:	3301      	adds	r3, #1
 8007358:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800735a:	e098      	b.n	800748e <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800735c:	f06f 0301 	mvn.w	r3, #1
 8007360:	e0a0      	b.n	80074a4 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 8007362:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007366:	2b3a      	cmp	r3, #58	@ 0x3a
 8007368:	d103      	bne.n	8007372 <mg_json_get+0x53a>
          expecting = S_VALUE;
 800736a:	2300      	movs	r3, #0
 800736c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8007370:	e08e      	b.n	8007490 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 8007372:	f06f 0301 	mvn.w	r3, #1
 8007376:	e095      	b.n	80074a4 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8007378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800737a:	2b00      	cmp	r3, #0
 800737c:	dc02      	bgt.n	8007384 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800737e:	f06f 0301 	mvn.w	r3, #1
 8007382:	e08f      	b.n	80074a4 <mg_json_get+0x66c>
        } else if (c == ',') {
 8007384:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007388:	2b2c      	cmp	r3, #44	@ 0x2c
 800738a:	d10d      	bne.n	80073a8 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800738c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800738e:	3b01      	subs	r3, #1
 8007390:	3368      	adds	r3, #104	@ 0x68
 8007392:	443b      	add	r3, r7
 8007394:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007398:	2b7b      	cmp	r3, #123	@ 0x7b
 800739a:	bf0c      	ite	eq
 800739c:	2301      	moveq	r3, #1
 800739e:	2300      	movne	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 80073a6:	e073      	b.n	8007490 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 80073a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80073ac:	2b5d      	cmp	r3, #93	@ 0x5d
 80073ae:	d003      	beq.n	80073b8 <mg_json_get+0x580>
 80073b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80073b4:	2b7d      	cmp	r3, #125	@ 0x7d
 80073b6:	d163      	bne.n	8007480 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80073b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073bc:	429a      	cmp	r2, r3
 80073be:	d10d      	bne.n	80073dc <mg_json_get+0x5a4>
 80073c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80073c4:	2b7d      	cmp	r3, #125	@ 0x7d
 80073c6:	d109      	bne.n	80073dc <mg_json_get+0x5a4>
 80073c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ca:	3b01      	subs	r3, #1
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	4413      	add	r3, r2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80073d4:	d102      	bne.n	80073dc <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 80073d6:	f06f 0302 	mvn.w	r3, #2
 80073da:	e063      	b.n	80074a4 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80073dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d10d      	bne.n	8007400 <mg_json_get+0x5c8>
 80073e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80073e8:	2b5d      	cmp	r3, #93	@ 0x5d
 80073ea:	d109      	bne.n	8007400 <mg_json_get+0x5c8>
 80073ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ee:	3b01      	subs	r3, #1
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4413      	add	r3, r2
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b2c      	cmp	r3, #44	@ 0x2c
 80073f8:	d102      	bne.n	8007400 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 80073fa:	f06f 0302 	mvn.w	r3, #2
 80073fe:	e051      	b.n	80074a4 <mg_json_get+0x66c>
          MG_EOO('O');
 8007400:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007404:	429a      	cmp	r2, r3
 8007406:	d106      	bne.n	8007416 <mg_json_get+0x5de>
 8007408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800740a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800740c:	429a      	cmp	r2, r3
 800740e:	d002      	beq.n	8007416 <mg_json_get+0x5de>
 8007410:	f06f 0302 	mvn.w	r3, #2
 8007414:	e046      	b.n	80074a4 <mg_json_get+0x66c>
 8007416:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800741a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800741c:	3b01      	subs	r3, #1
 800741e:	3368      	adds	r3, #104	@ 0x68
 8007420:	443b      	add	r3, r7
 8007422:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8007426:	3302      	adds	r3, #2
 8007428:	429a      	cmp	r2, r3
 800742a:	d002      	beq.n	8007432 <mg_json_get+0x5fa>
 800742c:	f06f 0301 	mvn.w	r3, #1
 8007430:	e038      	b.n	80074a4 <mg_json_get+0x66c>
 8007432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007434:	3b01      	subs	r3, #1
 8007436:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800743a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800743c:	429a      	cmp	r2, r3
 800743e:	d114      	bne.n	800746a <mg_json_get+0x632>
 8007440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10e      	bne.n	800746a <mg_json_get+0x632>
 800744c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800744e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007450:	429a      	cmp	r2, r3
 8007452:	d10a      	bne.n	800746a <mg_json_get+0x632>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <mg_json_get+0x62e>
 800745a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800745c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007468:	e01c      	b.n	80074a4 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800746a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800746c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800746e:	429a      	cmp	r2, r3
 8007470:	d109      	bne.n	8007486 <mg_json_get+0x64e>
 8007472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007474:	2b00      	cmp	r3, #0
 8007476:	db06      	blt.n	8007486 <mg_json_get+0x64e>
 8007478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800747a:	3301      	adds	r3, #1
 800747c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800747e:	e002      	b.n	8007486 <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 8007480:	f06f 0301 	mvn.w	r3, #1
 8007484:	e00e      	b.n	80074a4 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 8007486:	bf00      	nop
        break;
 8007488:	e002      	b.n	8007490 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <mg_json_get+0x658>
        break;
 800748e:	bf00      	nop
  for (i = 0; i < len; i++) {
 8007490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007492:	3301      	adds	r3, #1
 8007494:	663b      	str	r3, [r7, #96]	@ 0x60
 8007496:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800749a:	429a      	cmp	r2, r3
 800749c:	f6ff acfc 	blt.w	8006e98 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 80074a0:	f06f 0302 	mvn.w	r3, #2
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	376c      	adds	r7, #108	@ 0x6c
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd90      	pop	{r4, r7, pc}

080074ac <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	1d38      	adds	r0, r7, #4
 80074b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80074ba:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	f107 0310 	add.w	r3, r7, #16
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	1d39      	adds	r1, r7, #4
 80074c8:	c903      	ldmia	r1, {r0, r1}
 80074ca:	f7ff fcb5 	bl	8006e38 <mg_json_get>
 80074ce:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	db03      	blt.n	80074de <mg_json_get_tok+0x32>
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	4413      	add	r3, r2
 80074dc:	e000      	b.n	80074e0 <mg_json_get_tok+0x34>
 80074de:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	4619      	mov	r1, r3
 80074ea:	f005 fff2 	bl	800d4d2 <mg_str_n>
}
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 80074f6:	b590      	push	{r4, r7, lr}
 80074f8:	b089      	sub	sp, #36	@ 0x24
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	f107 0408 	add.w	r4, r7, #8
 8007500:	e884 0003 	stmia.w	r4, {r0, r1}
 8007504:	607a      	str	r2, [r7, #4]
 8007506:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800750c:	f107 0314 	add.w	r3, r7, #20
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	f107 0108 	add.w	r1, r7, #8
 8007516:	c903      	ldmia	r1, {r0, r1}
 8007518:	f7ff fc8e 	bl	8006e38 <mg_json_get>
 800751c:	61b8      	str	r0, [r7, #24]
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	2b00      	cmp	r3, #0
 8007522:	db23      	blt.n	800756c <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800752c:	2b2d      	cmp	r3, #45	@ 0x2d
 800752e:	d00b      	beq.n	8007548 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	4413      	add	r3, r2
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b2f      	cmp	r3, #47	@ 0x2f
 800753a:	d917      	bls.n	800756c <mg_json_get_num+0x76>
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	4413      	add	r3, r2
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b39      	cmp	r3, #57	@ 0x39
 8007546:	d811      	bhi.n	800756c <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <mg_json_get_num+0x72>
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	4413      	add	r3, r2
 8007554:	6979      	ldr	r1, [r7, #20]
 8007556:	2200      	movs	r2, #0
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff fb1d 	bl	8006b98 <mg_atod>
 800755e:	eeb0 7b40 	vmov.f64	d7, d0
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8007568:	2301      	movs	r3, #1
 800756a:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf14      	ite	ne
 8007572:	2301      	movne	r3, #1
 8007574:	2300      	moveq	r3, #0
 8007576:	b2db      	uxtb	r3, r3
}
 8007578:	4618      	mov	r0, r3
 800757a:	3724      	adds	r7, #36	@ 0x24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd90      	pop	{r4, r7, pc}

08007580 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8007580:	b590      	push	{r4, r7, lr}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	f107 0408 	add.w	r4, r7, #8
 800758a:	e884 0003 	stmia.w	r4, {r0, r1}
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	2300      	movs	r3, #0
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	f107 0108 	add.w	r1, r7, #8
 800759e:	c903      	ldmia	r1, {r0, r1}
 80075a0:	f7ff fc4a 	bl	8006e38 <mg_json_get>
 80075a4:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	db1b      	blt.n	80075e4 <mg_json_get_bool+0x64>
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4413      	add	r3, r2
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b74      	cmp	r3, #116	@ 0x74
 80075b6:	d005      	beq.n	80075c4 <mg_json_get_bool+0x44>
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	4413      	add	r3, r2
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b66      	cmp	r3, #102	@ 0x66
 80075c2:	d10f      	bne.n	80075e4 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <mg_json_get_bool+0x60>
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4413      	add	r3, r2
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b74      	cmp	r3, #116	@ 0x74
 80075d4:	bf0c      	ite	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	2300      	movne	r3, #0
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	701a      	strb	r2, [r3, #0]
    found = 1;
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
  }
  return found;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd90      	pop	{r4, r7, pc}

080075f8 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 80075f8:	b590      	push	{r4, r7, lr}
 80075fa:	b08d      	sub	sp, #52	@ 0x34
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	f107 0408 	add.w	r4, r7, #8
 8007602:	e884 0003 	stmia.w	r4, {r0, r1}
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
 800760e:	2300      	movs	r3, #0
 8007610:	623b      	str	r3, [r7, #32]
 8007612:	e064      	b.n	80076de <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	4413      	add	r3, r2
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b5c      	cmp	r3, #92	@ 0x5c
 800761e:	d12c      	bne.n	800767a <mg_json_unescape+0x82>
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	1d5a      	adds	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	429a      	cmp	r2, r3
 8007628:	d227      	bcs.n	800767a <mg_json_unescape+0x82>
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	3301      	adds	r3, #1
 8007630:	4413      	add	r3, r2
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b75      	cmp	r3, #117	@ 0x75
 8007636:	d120      	bne.n	800767a <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	3302      	adds	r3, #2
 800763e:	18d1      	adds	r1, r2, r3
 8007640:	f107 0314 	add.w	r3, r7, #20
 8007644:	2204      	movs	r2, #4
 8007646:	4618      	mov	r0, r3
 8007648:	f005 ff43 	bl	800d4d2 <mg_str_n>
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	4413      	add	r3, r2
 8007652:	2201      	movs	r2, #1
 8007654:	9200      	str	r2, [sp, #0]
 8007656:	2210      	movs	r2, #16
 8007658:	f107 0114 	add.w	r1, r7, #20
 800765c:	c903      	ldmia	r1, {r0, r1}
 800765e:	f006 f976 	bl	800d94e <mg_str_to_num>
 8007662:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 8007664:	f083 0301 	eor.w	r3, r3, #1
 8007668:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <mg_json_unescape+0x7a>
        return false;
 800766e:	2300      	movs	r3, #0
 8007670:	e04c      	b.n	800770c <mg_json_unescape+0x114>
      i += 5;
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	3305      	adds	r3, #5
 8007676:	627b      	str	r3, [r7, #36]	@ 0x24
 8007678:	e02b      	b.n	80076d2 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	4413      	add	r3, r2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b5c      	cmp	r3, #92	@ 0x5c
 8007684:	d11d      	bne.n	80076c2 <mg_json_unescape+0xca>
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	429a      	cmp	r2, r3
 800768e:	d218      	bcs.n	80076c2 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	3301      	adds	r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2100      	movs	r1, #0
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff fa09 	bl	8006ab4 <json_esc>
 80076a2:	4603      	mov	r3, r0
 80076a4:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 80076a6:	7ffb      	ldrb	r3, [r7, #31]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <mg_json_unescape+0xb8>
 80076ac:	2300      	movs	r3, #0
 80076ae:	e02d      	b.n	800770c <mg_json_unescape+0x114>
      to[j] = c;
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	4413      	add	r3, r2
 80076b6:	7ffa      	ldrb	r2, [r7, #31]
 80076b8:	701a      	strb	r2, [r3, #0]
      i++;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	3301      	adds	r3, #1
 80076be:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80076c0:	e007      	b.n	80076d2 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	441a      	add	r2, r3
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	440b      	add	r3, r1
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	3301      	adds	r3, #1
 80076d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	3301      	adds	r3, #1
 80076dc:	623b      	str	r3, [r7, #32]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d203      	bcs.n	80076ee <mg_json_unescape+0xf6>
 80076e6:	6a3a      	ldr	r2, [r7, #32]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d392      	bcc.n	8007614 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 80076ee:	6a3a      	ldr	r2, [r7, #32]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d301      	bcc.n	80076fa <mg_json_unescape+0x102>
 80076f6:	2300      	movs	r3, #0
 80076f8:	e008      	b.n	800770c <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <mg_json_unescape+0x112>
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	4413      	add	r3, r2
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
  return true;
 800770a:	2301      	movs	r3, #1
}
 800770c:	4618      	mov	r0, r3
 800770e:	372c      	adds	r7, #44	@ 0x2c
 8007710:	46bd      	mov	sp, r7
 8007712:	bd90      	pop	{r4, r7, pc}

08007714 <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b089      	sub	sp, #36	@ 0x24
 8007718:	af00      	add	r7, sp, #0
 800771a:	f107 0408 	add.w	r4, r7, #8
 800771e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 800772a:	f107 0310 	add.w	r3, r7, #16
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	f107 0108 	add.w	r1, r7, #8
 8007734:	c903      	ldmia	r1, {r0, r1}
 8007736:	f7ff fede 	bl	80074f6 <mg_json_get_num>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d006      	beq.n	800774e <mg_json_get_long+0x3a>
 8007740:	ed97 7b04 	vldr	d7, [r7, #16]
 8007744:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007748:	ee17 3a90 	vmov	r3, s15
 800774c:	61fb      	str	r3, [r7, #28]
  return result;
 800774e:	69fb      	ldr	r3, [r7, #28]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3724      	adds	r7, #36	@ 0x24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd90      	pop	{r4, r7, pc}

08007758 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8007762:	4b05      	ldr	r3, [pc, #20]	@ (8007778 <logc+0x20>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a05      	ldr	r2, [pc, #20]	@ (800777c <logc+0x24>)
 8007768:	6811      	ldr	r1, [r2, #0]
 800776a:	79fa      	ldrb	r2, [r7, #7]
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	24000244 	.word	0x24000244
 800777c:	24002ba8 	.word	0x24002ba8

08007780 <logs>:

static void logs(const char *buf, size_t len) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e009      	b.n	80077a4 <logs+0x24>
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff ffdd 	bl	8007758 <logc>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3301      	adds	r3, #1
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d3f1      	bcc.n	8007790 <logs+0x10>
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <nibble>:
  va_end(ap);
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b09      	cmp	r3, #9
 80077c2:	d804      	bhi.n	80077ce <nibble+0x18>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	3330      	adds	r3, #48	@ 0x30
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	e003      	b.n	80077d6 <nibble+0x20>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	3357      	adds	r3, #87	@ 0x57
 80077d4:	b2db      	uxtb	r3, r3
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	@ 0x28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 80077f8:	2300      	movs	r3, #0
 80077fa:	623b      	str	r3, [r7, #32]
 80077fc:	e07a      	b.n	80078f4 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	2b00      	cmp	r3, #0
 8007806:	d13a      	bne.n	800787e <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00f      	beq.n	800782e <mg_hexdump+0x4a>
 800780e:	2102      	movs	r1, #2
 8007810:	484c      	ldr	r0, [pc, #304]	@ (8007944 <mg_hexdump+0x160>)
 8007812:	f7ff ffb5 	bl	8007780 <logs>
 8007816:	f107 030c 	add.w	r3, r7, #12
 800781a:	2110      	movs	r1, #16
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff ffaf 	bl	8007780 <logs>
 8007822:	200a      	movs	r0, #10
 8007824:	f7ff ff98 	bl	8007758 <logc>
 8007828:	2300      	movs	r3, #0
 800782a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	0b1b      	lsrs	r3, r3, #12
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff ffbd 	bl	80077b6 <nibble>
 800783c:	4603      	mov	r3, r0
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff ff8a 	bl	8007758 <logc>
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	0a1b      	lsrs	r3, r3, #8
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff ffb2 	bl	80077b6 <nibble>
 8007852:	4603      	mov	r3, r0
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff ff7f 	bl	8007758 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	091b      	lsrs	r3, r3, #4
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff ffa7 	bl	80077b6 <nibble>
 8007868:	4603      	mov	r3, r0
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff ff74 	bl	8007758 <logc>
 8007870:	2030      	movs	r0, #48	@ 0x30
 8007872:	f7ff ff71 	bl	8007758 <logc>
 8007876:	2103      	movs	r1, #3
 8007878:	4833      	ldr	r0, [pc, #204]	@ (8007948 <mg_hexdump+0x164>)
 800787a:	f7ff ff81 	bl	8007780 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	4413      	add	r3, r2
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	091b      	lsrs	r3, r3, #4
 8007888:	b2db      	uxtb	r3, r3
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff ff93 	bl	80077b6 <nibble>
 8007890:	4603      	mov	r3, r0
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff ff60 	bl	8007758 <logc>
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	4413      	add	r3, r2
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff ff86 	bl	80077b6 <nibble>
 80078aa:	4603      	mov	r3, r0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff ff53 	bl	8007758 <logc>
    logc(' ');                                         // Space after hex number
 80078b2:	2020      	movs	r0, #32
 80078b4:	f7ff ff50 	bl	8007758 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	4413      	add	r3, r2
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b1f      	cmp	r3, #31
 80078c2:	d90a      	bls.n	80078da <mg_hexdump+0xf6>
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	4413      	add	r3, r2
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80078ce:	d804      	bhi.n	80078da <mg_hexdump+0xf6>
 80078d0:	69fa      	ldr	r2, [r7, #28]
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	4413      	add	r3, r2
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	e000      	b.n	80078dc <mg_hexdump+0xf8>
 80078da:	222e      	movs	r2, #46	@ 0x2e
 80078dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078e0:	1c59      	adds	r1, r3, #1
 80078e2:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 80078e6:	3328      	adds	r3, #40	@ 0x28
 80078e8:	443b      	add	r3, r7
 80078ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	3301      	adds	r3, #1
 80078f2:	623b      	str	r3, [r7, #32]
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d380      	bcc.n	80077fe <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80078fc:	e00d      	b.n	800791a <mg_hexdump+0x136>
 80078fe:	2103      	movs	r1, #3
 8007900:	4811      	ldr	r0, [pc, #68]	@ (8007948 <mg_hexdump+0x164>)
 8007902:	f7ff ff3d 	bl	8007780 <logs>
 8007906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8007910:	3328      	adds	r3, #40	@ 0x28
 8007912:	443b      	add	r3, r7
 8007914:	2220      	movs	r2, #32
 8007916:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800791a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d9ed      	bls.n	80078fe <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8007922:	2102      	movs	r1, #2
 8007924:	4807      	ldr	r0, [pc, #28]	@ (8007944 <mg_hexdump+0x160>)
 8007926:	f7ff ff2b 	bl	8007780 <logs>
 800792a:	f107 030c 	add.w	r3, r7, #12
 800792e:	2110      	movs	r1, #16
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff ff25 	bl	8007780 <logs>
 8007936:	200a      	movs	r0, #10
 8007938:	f7ff ff0e 	bl	8007758 <logc>
}
 800793c:	bf00      	nop
 800793e:	3728      	adds	r7, #40	@ 0x28
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	08024838 	.word	0x08024838
 8007948:	0802483c 	.word	0x0802483c

0800794c <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	72fb      	strb	r3, [r7, #11]
 800795a:	4613      	mov	r3, r2
 800795c:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 800795e:	f107 0314 	add.w	r3, r7, #20
 8007962:	3301      	adds	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	b25a      	sxtb	r2, r3
 800796c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8007970:	4313      	orrs	r3, r2
 8007972:	b25b      	sxtb	r3, r3
 8007974:	b2db      	uxtb	r3, r3
 8007976:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007980:	b2da      	uxtb	r2, r3
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	09db      	lsrs	r3, r3, #7
 800798a:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d006      	beq.n	80079a0 <mg_mqtt_send_header+0x54>
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800799a:	b2da      	uxtb	r2, r3
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	701a      	strb	r2, [r3, #0]
    vlen++;
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	3301      	adds	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <mg_mqtt_send_header+0x6c>
 80079ac:	f107 0314 	add.w	r3, r7, #20
 80079b0:	3305      	adds	r3, #5
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d3df      	bcc.n	8007978 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	f107 0314 	add.w	r3, r7, #20
 80079c6:	4619      	mov	r1, r3
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f004 f9dd 	bl	800bd88 <mg_send>
}
 80079ce:	bf00      	nop
 80079d0:	3720      	adds	r7, #32
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 80079e2:	1cbb      	adds	r3, r7, #2
 80079e4:	2202      	movs	r2, #2
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f004 f9cd 	bl	800bd88 <mg_send>
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 8007a00:	463b      	mov	r3, r7
 8007a02:	2204      	movs	r2, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f004 f9be 	bl	800bd88 <mg_send>
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <varint_size>:

static uint8_t varint_size(size_t length) {
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	3301      	adds	r3, #1
 8007a24:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	09db      	lsrs	r3, r3, #7
 8007a2a:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f6      	bne.n	8007a20 <varint_size+0xc>
  return bytes_needed;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a56:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	09db      	lsrs	r3, r3, #7
 8007a5c:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <encode_varint+0x2c>
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007a6a:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	60fa      	str	r2, [r7, #12]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	7afa      	ldrb	r2, [r7, #11]
 8007a78:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e6      	bne.n	8007a4e <encode_varint+0xe>

  return len;
 8007a80:	68fb      	ldr	r3, [r7, #12]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8007a8e:	b480      	push	{r7}
 8007a90:	b089      	sub	sp, #36	@ 0x24
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	61fb      	str	r3, [r7, #28]
  *value = 0;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	e01c      	b.n	8007ae4 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	4413      	add	r3, r2
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007abe:	69f9      	ldr	r1, [r7, #28]
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	01db      	lsls	r3, r3, #7
 8007ace:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8007ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	db02      	blt.n	8007ade <decode_varint+0x50>
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	3301      	adds	r3, #1
 8007adc:	e00a      	b.n	8007af4 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d803      	bhi.n	8007af2 <decode_varint+0x64>
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d3db      	bcc.n	8007aaa <decode_varint+0x1c>
  }

  return 0;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3724      	adds	r7, #36	@ 0x24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 8007b0a:	231b      	movs	r3, #27
 8007b0c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e00f      	b.n	8007b34 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8007b14:	4a0d      	ldr	r2, [pc, #52]	@ (8007b4c <mqtt_prop_type_by_id+0x4c>)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007b1c:	79fa      	ldrb	r2, [r7, #7]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d105      	bne.n	8007b2e <mqtt_prop_type_by_id+0x2e>
 8007b22:	4a0a      	ldr	r2, [pc, #40]	@ (8007b4c <mqtt_prop_type_by_id+0x4c>)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	4413      	add	r3, r2
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	e008      	b.n	8007b40 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3301      	adds	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d3eb      	bcc.n	8007b14 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 8007b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	08026114 	.word	0x08026114

08007b50 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	e07a      	b.n	8007c5a <get_properties_length+0x10a>
    size++;  // identifier
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	3301      	adds	r3, #1
 8007b68:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	4413      	add	r3, r2
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	461a      	mov	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4413      	add	r3, r2
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff ffbf 	bl	8007b00 <mqtt_prop_type_by_id>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b06      	cmp	r3, #6
 8007b86:	d863      	bhi.n	8007c50 <get_properties_length+0x100>
 8007b88:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <get_properties_length+0x40>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007c49 	.word	0x08007c49
 8007b94:	08007bdd 	.word	0x08007bdd
 8007b98:	08007bad 	.word	0x08007bad
 8007b9c:	08007bf9 	.word	0x08007bf9
 8007ba0:	08007c15 	.word	0x08007c15
 8007ba4:	08007c39 	.word	0x08007c39
 8007ba8:	08007c41 	.word	0x08007c41
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	4413      	add	r3, r2
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4413      	add	r3, r2
 8007bbc:	6959      	ldr	r1, [r3, #20]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	4413      	add	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	18ca      	adds	r2, r1, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 8007bda:	e03b      	b.n	8007c54 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4613      	mov	r3, r2
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	4413      	add	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	695a      	ldr	r2, [r3, #20]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	60bb      	str	r3, [r7, #8]
        break;
 8007bf6:	e02d      	b.n	8007c54 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	4413      	add	r3, r2
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	461a      	mov	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4413      	add	r3, r2
 8007c08:	695a      	ldr	r2, [r3, #20]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3302      	adds	r3, #2
 8007c10:	60bb      	str	r3, [r7, #8]
        break;
 8007c12:	e01f      	b.n	8007c54 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4613      	mov	r3, r2
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	4413      	add	r3, r2
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4413      	add	r3, r2
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff fef4 	bl	8007a14 <varint_size>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	4413      	add	r3, r2
 8007c34:	60bb      	str	r3, [r7, #8]
        break;
 8007c36:	e00d      	b.n	8007c54 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	60bb      	str	r3, [r7, #8]
        break;
 8007c3e:	e009      	b.n	8007c54 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	3302      	adds	r3, #2
 8007c44:	60bb      	str	r3, [r7, #8]
        break;
 8007c46:	e005      	b.n	8007c54 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60bb      	str	r3, [r7, #8]
        break;
 8007c4e:	e001      	b.n	8007c54 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	e007      	b.n	8007c64 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d380      	bcc.n	8007b64 <get_properties_length+0x14>
    }
  }

  return size;
 8007c62:	68bb      	ldr	r3, [r7, #8]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff ff69 	bl	8007b50 <get_properties_length>
 8007c7e:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff fec7 	bl	8007a14 <varint_size>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  return size;
 8007c90:	68fb      	ldr	r3, [r7, #12]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08a      	sub	sp, #40	@ 0x28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	68b8      	ldr	r0, [r7, #8]
 8007cac:	f7ff ff50 	bl	8007b50 <get_properties_length>
 8007cb0:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 8007cba:	f107 0314 	add.w	r3, r7, #20
 8007cbe:	6a39      	ldr	r1, [r7, #32]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff febd 	bl	8007a40 <encode_varint>
 8007cc6:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 8007cc8:	f107 0314 	add.w	r3, r7, #20
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f004 f859 	bl	800bd88 <mg_send>
  for (i = 0; i < nprops; i++) {
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cda:	e11f      	b.n	8007f1c <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8007cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cde:	4613      	mov	r3, r2
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	4413      	add	r3, r2
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4413      	add	r3, r2
 8007cec:	2201      	movs	r2, #1
 8007cee:	4619      	mov	r1, r3
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f004 f849 	bl	800bd88 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8007cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4413      	add	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	461a      	mov	r2, r3
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	4413      	add	r3, r2
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fef9 	bl	8007b00 <mqtt_prop_type_by_id>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b06      	cmp	r3, #6
 8007d12:	f200 8100 	bhi.w	8007f16 <mg_send_mqtt_properties+0x27a>
 8007d16:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <mg_send_mqtt_properties+0x80>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007ddb 	.word	0x08007ddb
 8007d20:	08007e43 	.word	0x08007e43
 8007d24:	08007d39 	.word	0x08007d39
 8007d28:	08007e95 	.word	0x08007e95
 8007d2c:	08007ee7 	.word	0x08007ee7
 8007d30:	08007e1f 	.word	0x08007e1f
 8007d34:	08007df9 	.word	0x08007df9
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8007d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4413      	add	r3, r2
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	461a      	mov	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4413      	add	r3, r2
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f00e f94e 	bl	8015fee <mg_ntohs>
 8007d52:	4603      	mov	r3, r0
 8007d54:	4619      	mov	r1, r3
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f7ff fe3d 	bl	80079d6 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8007d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d5e:	4613      	mov	r3, r2
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	4413      	add	r3, r2
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	461a      	mov	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	6899      	ldr	r1, [r3, #8]
 8007d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d70:	4613      	mov	r3, r2
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	4413      	add	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	461a      	mov	r2, r3
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f004 f800 	bl	800bd88 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8007d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	4413      	add	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	461a      	mov	r2, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4413      	add	r3, r2
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f00e f926 	bl	8015fee <mg_ntohs>
 8007da2:	4603      	mov	r3, r0
 8007da4:	4619      	mov	r1, r3
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fe15 	bl	80079d6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8007dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dae:	4613      	mov	r3, r2
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	4413      	add	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	461a      	mov	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	4413      	add	r3, r2
 8007dbc:	6919      	ldr	r1, [r3, #16]
 8007dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	4413      	add	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f003 ffd8 	bl	800bd88 <mg_send>
        break;
 8007dd8:	e09d      	b.n	8007f16 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 8007dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ddc:	4613      	mov	r3, r2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	4413      	add	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	461a      	mov	r2, r3
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4413      	add	r3, r2
 8007dea:	3304      	adds	r3, #4
 8007dec:	2201      	movs	r2, #1
 8007dee:	4619      	mov	r1, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f003 ffc9 	bl	800bd88 <mg_send>
        break;
 8007df6:	e08e      	b.n	8007f16 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8007df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	4413      	add	r3, r2
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	461a      	mov	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4413      	add	r3, r2
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f00e f8ee 	bl	8015fee <mg_ntohs>
 8007e12:	4603      	mov	r3, r0
 8007e14:	4619      	mov	r1, r3
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff fddd 	bl	80079d6 <mg_send_u16>
        break;
 8007e1c:	e07b      	b.n	8007f16 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8007e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e20:	4613      	mov	r3, r2
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	4413      	add	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f00e f8c3 	bl	8015fbc <mg_ntohl>
 8007e36:	4603      	mov	r3, r0
 8007e38:	4619      	mov	r1, r3
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7ff fddb 	bl	80079f6 <mg_send_u32>
        break;
 8007e40:	e069      	b.n	8007f16 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8007e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e44:	4613      	mov	r3, r2
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	4413      	add	r3, r2
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	4413      	add	r3, r2
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	4618      	mov	r0, r3
 8007e58:	f00e f8c9 	bl	8015fee <mg_ntohs>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	4619      	mov	r1, r3
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fdb8 	bl	80079d6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8007e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	461a      	mov	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	4413      	add	r3, r2
 8007e76:	6919      	ldr	r1, [r3, #16]
 8007e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	4413      	add	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	461a      	mov	r2, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	4413      	add	r3, r2
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f003 ff7b 	bl	800bd88 <mg_send>
        break;
 8007e92:	e040      	b.n	8007f16 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8007e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e96:	4613      	mov	r3, r2
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	4413      	add	r3, r2
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f00e f8a0 	bl	8015fee <mg_ntohs>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff fd8f 	bl	80079d6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8007eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eba:	4613      	mov	r3, r2
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	4413      	add	r3, r2
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	6919      	ldr	r1, [r3, #16]
 8007eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ecc:	4613      	mov	r3, r2
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	4413      	add	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	4413      	add	r3, r2
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	461a      	mov	r2, r3
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f003 ff52 	bl	800bd88 <mg_send>
        break;
 8007ee4:	e017      	b.n	8007f16 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 8007ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ee8:	4613      	mov	r3, r2
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	4413      	add	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	f107 0318 	add.w	r3, r7, #24
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff fd9e 	bl	8007a40 <encode_varint>
 8007f04:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 8007f06:	f107 0318 	add.w	r3, r7, #24
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f003 ff3a 	bl	800bd88 <mg_send>
        break;
 8007f14:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	3301      	adds	r3, #1
 8007f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	f4ff aedb 	bcc.w	8007cdc <mg_send_mqtt_properties+0x40>
    }
  }
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	3728      	adds	r7, #40	@ 0x28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08e      	sub	sp, #56	@ 0x38
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	3210      	adds	r2, #16
 8007f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f46:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 8007f4a:	230c      	movs	r3, #12
 8007f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 8007f4e:	2300      	movs	r3, #0
 8007f50:	733b      	strb	r3, [r7, #12]
 8007f52:	2304      	movs	r3, #4
 8007f54:	737b      	strb	r3, [r7, #13]
 8007f56:	234d      	movs	r3, #77	@ 0x4d
 8007f58:	73bb      	strb	r3, [r7, #14]
 8007f5a:	2351      	movs	r3, #81	@ 0x51
 8007f5c:	73fb      	strb	r3, [r7, #15]
 8007f5e:	2354      	movs	r3, #84	@ 0x54
 8007f60:	743b      	strb	r3, [r7, #16]
 8007f62:	2354      	movs	r3, #84	@ 0x54
 8007f64:	747b      	strb	r3, [r7, #17]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8007f6c:	74bb      	strb	r3, [r7, #18]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d110      	bne.n	8007f9a <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 8007f78:	f107 031c 	add.w	r3, r7, #28
 8007f7c:	2114      	movs	r1, #20
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f00d ffd6 	bl	8015f30 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8007f84:	2300      	movs	r3, #0
 8007f86:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 8007f8a:	f107 0314 	add.w	r3, r7, #20
 8007f8e:	f107 021c 	add.w	r2, r7, #28
 8007f92:	4611      	mov	r1, r2
 8007f94:	4618      	mov	r0, r3
 8007f96:	f005 fa7f 	bl	800d498 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8007f9a:	7cbb      	ldrb	r3, [r7, #18]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <mg_mqtt_login+0x74>
 8007fa0:	2304      	movs	r3, #4
 8007fa2:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 8007fa4:	7cbb      	ldrb	r3, [r7, #18]
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	bf0c      	ite	eq
 8007faa:	2301      	moveq	r3, #1
 8007fac:	2300      	movne	r3, #0
 8007fae:	b2d9      	uxtb	r1, r3
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8007fb6:	f361 0382 	bfi	r3, r1, #2, #1
 8007fba:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0318 	and.w	r3, r3, #24
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fde:	4413      	add	r3, r2
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 8007fe4:	7cfb      	ldrb	r3, [r7, #19]
 8007fe6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3302      	adds	r3, #2
 8008000:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 8008002:	7cfb      	ldrb	r3, [r7, #19]
 8008004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008008:	b2db      	uxtb	r3, r3
 800800a:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00d      	beq.n	8008030 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	441a      	add	r2, r3
 800801e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008020:	4413      	add	r3, r2
 8008022:	3304      	adds	r3, #4
 8008024:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 8008026:	7cfb      	ldrb	r3, [r7, #19]
 8008028:	f043 0304 	orr.w	r3, r3, #4
 800802c:	b2db      	uxtb	r3, r3
 800802e:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <mg_mqtt_login+0x110>
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <mg_mqtt_login+0x11a>
 8008040:	7cfb      	ldrb	r3, [r7, #19]
 8008042:	f043 0302 	orr.w	r3, r3, #2
 8008046:	b2db      	uxtb	r3, r3
 8008048:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008050:	2b00      	cmp	r3, #0
 8008052:	d004      	beq.n	800805e <mg_mqtt_login+0x12e>
 8008054:	7cfb      	ldrb	r3, [r7, #19]
 8008056:	f043 0320 	orr.w	r3, r3, #32
 800805a:	b2db      	uxtb	r3, r3
 800805c:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008062:	4413      	add	r3, r2
 8008064:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01c      	beq.n	80080b0 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f7ff fdf3 	bl	8007c6c <get_props_size>
 8008086:	4602      	mov	r2, r0
 8008088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808a:	4413      	add	r3, r2
 800808c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 800808e:	7cfb      	ldrb	r3, [r7, #19]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7ff fde2 	bl	8007c6c <get_props_size>
 80080a8:	4602      	mov	r2, r0
 80080aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ac:	4413      	add	r3, r2
 80080ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 80080b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b2:	2200      	movs	r2, #0
 80080b4:	2101      	movs	r1, #1
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fc48 	bl	800794c <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	2208      	movs	r2, #8
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f003 fe5f 	bl	800bd88 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ce:	4618      	mov	r0, r3
 80080d0:	f00d ff8d 	bl	8015fee <mg_ntohs>
 80080d4:	4603      	mov	r3, r0
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff fc7c 	bl	80079d6 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <mg_mqtt_login+0x1ce>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f6:	461a      	mov	r2, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff fdcf 	bl	8007c9c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	b29b      	uxth	r3, r3
 8008102:	4618      	mov	r0, r3
 8008104:	f00d ff73 	bl	8015fee <mg_ntohs>
 8008108:	4603      	mov	r3, r0
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fc62 	bl	80079d6 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f003 fe35 	bl	800bd88 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 800811e:	7cfb      	ldrb	r3, [r7, #19]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d035      	beq.n	8008194 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008140:	461a      	mov	r2, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff fdaa 	bl	8007c9c <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	b29b      	uxth	r3, r3
 800814e:	4618      	mov	r0, r3
 8008150:	f00d ff4d 	bl	8015fee <mg_ntohs>
 8008154:	4603      	mov	r3, r0
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff fc3c 	bl	80079d6 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6999      	ldr	r1, [r3, #24]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	461a      	mov	r2, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f003 fe0d 	bl	800bd88 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008172:	b29b      	uxth	r3, r3
 8008174:	4618      	mov	r0, r3
 8008176:	f00d ff3a 	bl	8015fee <mg_ntohs>
 800817a:	4603      	mov	r3, r0
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff fc29 	bl	80079d6 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	6a19      	ldr	r1, [r3, #32]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818c:	461a      	mov	r2, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f003 fdfa 	bl	800bd88 <mg_send>
  }
  if (opts->user.len > 0) {
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d012      	beq.n	80081c2 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4618      	mov	r0, r3
 80081a4:	f00d ff23 	bl	8015fee <mg_ntohs>
 80081a8:	4603      	mov	r3, r0
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff fc12 	bl	80079d6 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6819      	ldr	r1, [r3, #0]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	461a      	mov	r2, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f003 fde3 	bl	800bd88 <mg_send>
  }
  if (opts->pass.len > 0) {
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d012      	beq.n	80081f0 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4618      	mov	r0, r3
 80081d2:	f00d ff0c 	bl	8015fee <mg_ntohs>
 80081d6:	4603      	mov	r3, r0
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff fbfb 	bl	80079d6 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	6899      	ldr	r1, [r3, #8]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f003 fdcc 	bl	800bd88 <mg_send>
  }
}
 80081f0:	bf00      	nop
 80081f2:	3738      	adds	r7, #56	@ 0x38
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008206:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	b25b      	sxtb	r3, r3
 8008212:	f003 0306 	and.w	r3, r3, #6
 8008216:	b25b      	sxtb	r3, r3
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 800821e:	2a00      	cmp	r2, #0
 8008220:	d001      	beq.n	8008226 <mg_mqtt_pub+0x2e>
 8008222:	2201      	movs	r2, #1
 8008224:	e000      	b.n	8008228 <mg_mqtt_pub+0x30>
 8008226:	2200      	movs	r2, #0
 8008228:	4313      	orrs	r3, r2
 800822a:	b25b      	sxtb	r3, r3
 800822c:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	69da      	ldr	r2, [r3, #28]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008236:	4413      	add	r3, r2
 8008238:	3302      	adds	r3, #2
 800823a:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <mg_mqtt_pub+0x54>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	3302      	adds	r3, #2
 800824a:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <mg_mqtt_pub+0x7c>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f7ff fd00 	bl	8007c6c <get_props_size>
 800826c:	4602      	mov	r2, r0
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800827a:	2b00      	cmp	r3, #0
 800827c:	d006      	beq.n	800828c <mg_mqtt_pub+0x94>
 800827e:	89fb      	ldrh	r3, [r7, #14]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <mg_mqtt_pub+0x94>
 8008284:	7b7b      	ldrb	r3, [r7, #13]
 8008286:	f043 0308 	orr.w	r3, r3, #8
 800828a:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 800828c:	7b7a      	ldrb	r2, [r7, #13]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2103      	movs	r1, #3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff fb5a 	bl	800794c <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	b29b      	uxth	r3, r3
 800829e:	4618      	mov	r0, r3
 80082a0:	f00d fea5 	bl	8015fee <mg_ntohs>
 80082a4:	4603      	mov	r3, r0
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff fb94 	bl	80079d6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6999      	ldr	r1, [r3, #24]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	461a      	mov	r2, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f003 fd65 	bl	800bd88 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01e      	beq.n	8008306 <mg_mqtt_pub+0x10e>
    if (id == 0) {  // generate new one if not resending
 80082c8:	89fb      	ldrh	r3, [r7, #14]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d112      	bne.n	80082f4 <mg_mqtt_pub+0xfc>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80082d4:	3201      	adds	r2, #1
 80082d6:	b292      	uxth	r2, r2
 80082d8:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80082da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d105      	bne.n	80082ec <mg_mqtt_pub+0xf4>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80082e6:	3201      	adds	r2, #1
 80082e8:	b292      	uxth	r2, r2
 80082ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082f2:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 80082f4:	89fb      	ldrh	r3, [r7, #14]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f00d fe79 	bl	8015fee <mg_ntohs>
 80082fc:	4603      	mov	r3, r0
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff fb68 	bl	80079d6 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <mg_mqtt_pub+0x12e>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800831e:	461a      	mov	r2, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff fcbb 	bl	8007c9c <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <mg_mqtt_pub+0x146>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	6a19      	ldr	r1, [r3, #32]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	461a      	mov	r2, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f003 fd25 	bl	800bd88 <mg_send>
  return id;
 800833e:	89fb      	ldrh	r3, [r7, #14]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	b2db      	uxtb	r3, r3
 800835e:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <mg_mqtt_sub+0x3c>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008378:	4619      	mov	r1, r3
 800837a:	4610      	mov	r0, r2
 800837c:	f7ff fc76 	bl	8007c6c <get_props_size>
 8008380:	4603      	mov	r3, r0
 8008382:	e000      	b.n	8008386 <mg_mqtt_sub+0x3e>
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4413      	add	r3, r2
 8008390:	3305      	adds	r3, #5
 8008392:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2202      	movs	r2, #2
 8008398:	2108      	movs	r1, #8
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff fad6 	bl	800794c <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80083a6:	3201      	adds	r2, #1
 80083a8:	b292      	uxth	r2, r2
 80083aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80083ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d105      	bne.n	80083be <mg_mqtt_sub+0x76>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80083b8:	3201      	adds	r2, #1
 80083ba:	b292      	uxth	r2, r2
 80083bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083c4:	4618      	mov	r0, r3
 80083c6:	f00d fe12 	bl	8015fee <mg_ntohs>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff fb01 	bl	80079d6 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d007      	beq.n	80083f4 <mg_mqtt_sub+0xac>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ec:	461a      	mov	r2, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff fc54 	bl	8007c9c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	4618      	mov	r0, r3
 80083fc:	f00d fdf7 	bl	8015fee <mg_ntohs>
 8008400:	4603      	mov	r3, r0
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff fae6 	bl	80079d6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	6999      	ldr	r1, [r3, #24]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	461a      	mov	r2, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f003 fcb7 	bl	800bd88 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 800841a:	f107 030f 	add.w	r3, r7, #15
 800841e:	2201      	movs	r2, #1
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f003 fcb0 	bl	800bd88 <mg_send>
}
 8008428:	bf00      	nop
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b08a      	sub	sp, #40	@ 0x28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	4613      	mov	r3, r2
 800843e:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 8008440:	2300      	movs	r3, #0
 8008442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
 800844a:	2300      	movs	r3, #0
 800844c:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 800844e:	2228      	movs	r2, #40	@ 0x28
 8008450:	2100      	movs	r1, #0
 8008452:	6838      	ldr	r0, [r7, #0]
 8008454:	f01a f86b 	bl	802252e <memset>
  m->dgram.buf = (char *) buf;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d801      	bhi.n	8008468 <mg_mqtt_parse+0x38>
 8008464:	2301      	movs	r3, #1
 8008466:	e104      	b.n	8008672 <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	b2da      	uxtb	r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	b2da      	uxtb	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	61bb      	str	r3, [r7, #24]
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3301      	adds	r3, #1
 8008492:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 8008494:	e01f      	b.n	80084d6 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	623a      	str	r2, [r7, #32]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 80084a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084a6:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	4613      	mov	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	1a9b      	subs	r3, r3, r2
 80084b2:	fa01 f303 	lsl.w	r3, r1, r3
 80084b6:	461a      	mov	r2, r3
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	4413      	add	r3, r2
 80084bc:	61fb      	str	r3, [r7, #28]
    len_len++;
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	3301      	adds	r3, #1
 80084c2:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 80084c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da0c      	bge.n	80084e6 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d901      	bls.n	80084d6 <mg_mqtt_parse+0xa6>
 80084d2:	2302      	movs	r3, #2
 80084d4:	e0cd      	b.n	8008672 <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 80084d6:	6a3a      	ldr	r2, [r7, #32]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d8d8      	bhi.n	8008496 <mg_mqtt_parse+0x66>
 80084e4:	e000      	b.n	80084e8 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 80084e6:	bf00      	nop
  }
  end = p + n;
 80084e8:	6a3a      	ldr	r2, [r7, #32]
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 80084f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	db05      	blt.n	8008504 <mg_mqtt_parse+0xd4>
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4413      	add	r3, r2
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	429a      	cmp	r2, r3
 8008502:	d901      	bls.n	8008508 <mg_mqtt_parse+0xd8>
 8008504:	2301      	movs	r3, #1
 8008506:	e0b4      	b.n	8008672 <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	461a      	mov	r2, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	7e9b      	ldrb	r3, [r3, #26]
 8008518:	2b0b      	cmp	r3, #11
 800851a:	f300 80a8 	bgt.w	800866e <mg_mqtt_parse+0x23e>
 800851e:	2b04      	cmp	r3, #4
 8008520:	da10      	bge.n	8008544 <mg_mqtt_parse+0x114>
 8008522:	2b02      	cmp	r3, #2
 8008524:	d002      	beq.n	800852c <mg_mqtt_parse+0xfc>
 8008526:	2b03      	cmp	r3, #3
 8008528:	d024      	beq.n	8008574 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 800852a:	e0a0      	b.n	800866e <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b01      	cmp	r3, #1
 8008534:	dc01      	bgt.n	800853a <mg_mqtt_parse+0x10a>
 8008536:	2302      	movs	r3, #2
 8008538:	e09b      	b.n	8008672 <mg_mqtt_parse+0x242>
      m->ack = p[1];
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	785a      	ldrb	r2, [r3, #1]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	771a      	strb	r2, [r3, #28]
      break;
 8008542:	e095      	b.n	8008670 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	3302      	adds	r3, #2
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	429a      	cmp	r2, r3
 800854c:	d201      	bcs.n	8008552 <mg_mqtt_parse+0x122>
 800854e:	2302      	movs	r3, #2
 8008550:	e08f      	b.n	8008672 <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	b21a      	sxth	r2, r3
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	3301      	adds	r3, #1
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b21b      	sxth	r3, r3
 8008562:	4313      	orrs	r3, r2
 8008564:	b21b      	sxth	r3, r3
 8008566:	b29a      	uxth	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	831a      	strh	r2, [r3, #24]
      p += 2;
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	3302      	adds	r3, #2
 8008570:	623b      	str	r3, [r7, #32]
      break;
 8008572:	e07d      	b.n	8008670 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	3302      	adds	r3, #2
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	429a      	cmp	r2, r3
 800857c:	d201      	bcs.n	8008582 <mg_mqtt_parse+0x152>
 800857e:	2302      	movs	r3, #2
 8008580:	e077      	b.n	8008672 <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	b21a      	sxth	r2, r3
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	3301      	adds	r3, #1
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	b21b      	sxth	r3, r3
 8008592:	4313      	orrs	r3, r2
 8008594:	b21b      	sxth	r3, r3
 8008596:	b29b      	uxth	r3, r3
 8008598:	461a      	mov	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	1c9a      	adds	r2, r3, #2
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	3302      	adds	r3, #2
 80085ac:	6a3a      	ldr	r2, [r7, #32]
 80085ae:	4413      	add	r3, r2
 80085b0:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 80085b2:	6a3a      	ldr	r2, [r7, #32]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d901      	bls.n	80085be <mg_mqtt_parse+0x18e>
 80085ba:	2302      	movs	r3, #2
 80085bc:	e059      	b.n	8008672 <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	7edb      	ldrb	r3, [r3, #27]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d016      	beq.n	80085f4 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	3302      	adds	r3, #2
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d201      	bcs.n	80085d4 <mg_mqtt_parse+0x1a4>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e04e      	b.n	8008672 <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	b21a      	sxth	r2, r3
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	3301      	adds	r3, #1
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	b21b      	sxth	r3, r3
 80085e4:	4313      	orrs	r3, r2
 80085e6:	b21b      	sxth	r3, r3
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	831a      	strh	r2, [r3, #24]
        p += 2;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	3302      	adds	r3, #2
 80085f2:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 80085f4:	6a3a      	ldr	r2, [r7, #32]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d901      	bls.n	8008600 <mg_mqtt_parse+0x1d0>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e038      	b.n	8008672 <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b05      	cmp	r3, #5
 8008604:	d123      	bne.n	800864e <mg_mqtt_parse+0x21e>
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	3302      	adds	r3, #2
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	429a      	cmp	r2, r3
 800860e:	d91e      	bls.n	800864e <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	4619      	mov	r1, r3
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	3324      	adds	r3, #36	@ 0x24
 800861c:	461a      	mov	r2, r3
 800861e:	6a38      	ldr	r0, [r7, #32]
 8008620:	f7ff fa35 	bl	8007a8e <decode_varint>
 8008624:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <mg_mqtt_parse+0x200>
 800862c:	2302      	movs	r3, #2
 800862e:	e020      	b.n	8008672 <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 8008630:	6a3a      	ldr	r2, [r7, #32]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	441a      	add	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	461a      	mov	r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	4413      	add	r3, r2
 8008648:	6a3a      	ldr	r2, [r7, #32]
 800864a:	4413      	add	r3, r2
 800864c:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 800864e:	6a3a      	ldr	r2, [r7, #32]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	429a      	cmp	r2, r3
 8008654:	d901      	bls.n	800865a <mg_mqtt_parse+0x22a>
 8008656:	2302      	movs	r3, #2
 8008658:	e00b      	b.n	8008672 <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6a3a      	ldr	r2, [r7, #32]
 800865e:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	461a      	mov	r2, r3
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	60da      	str	r2, [r3, #12]
      break;
 800866c:	e000      	b.n	8008670 <mg_mqtt_parse+0x240>
      break;
 800866e:	bf00      	nop
  }
  return MQTT_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3728      	adds	r7, #40	@ 0x28
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b096      	sub	sp, #88	@ 0x58
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b07      	cmp	r3, #7
 800868c:	f040 80d0 	bne.w	8008830 <mqtt_cb+0x1b4>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <mqtt_cb+0x28>
 80086a0:	2305      	movs	r3, #5
 80086a2:	e000      	b.n	80086a6 <mqtt_cb+0x2a>
 80086a4:	2304      	movs	r3, #4
 80086a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80086b2:	f107 0314 	add.w	r3, r7, #20
 80086b6:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80086ba:	f7ff feb9 	bl	8008430 <mg_mqtt_parse>
 80086be:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 80086c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d107      	bne.n	80086d6 <mqtt_cb+0x5a>
        MG_ERROR(("%lu MQTT malformed message", c->id));
        c->is_closing = 1;
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80086cc:	f043 0320 	orr.w	r3, r3, #32
 80086d0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 80086d4:	e0ac      	b.n	8008830 <mqtt_cb+0x1b4>
      } else if (rc == MQTT_OK) {
 80086d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f040 80a8 	bne.w	800882e <mqtt_cb+0x1b2>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 80086de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80086e2:	3b02      	subs	r3, #2
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	f200 8093 	bhi.w	8008810 <mqtt_cb+0x194>
 80086ea:	a201      	add	r2, pc, #4	@ (adr r2, 80086f0 <mqtt_cb+0x74>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	08008705 	.word	0x08008705
 80086f4:	0800872d 	.word	0x0800872d
 80086f8:	08008811 	.word	0x08008811
 80086fc:	080087b7 	.word	0x080087b7
 8008700:	080087e3 	.word	0x080087e3
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	331c      	adds	r3, #28
 800870a:	461a      	mov	r2, r3
 800870c:	2111      	movs	r1, #17
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7f9 fdf8 	bl	8002304 <mg_call>
            if (mm.ack == 0) {
 8008714:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008718:	2b00      	cmp	r3, #0
 800871a:	d078      	beq.n	800880e <mqtt_cb+0x192>
              MG_DEBUG(("%lu Connected", c->id));
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008722:	f043 0320 	orr.w	r3, r3, #32
 8008726:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            }
            break;
 800872a:	e070      	b.n	800880e <mqtt_cb+0x192>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 800872c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008730:	2b00      	cmp	r3, #0
 8008732:	d038      	beq.n	80087a6 <mqtt_cb+0x12a>
              uint16_t id = mg_ntohs(mm.id);
 8008734:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008736:	4618      	mov	r0, r3
 8008738:	f00d fc59 	bl	8015fee <mg_ntohs>
 800873c:	4603      	mov	r3, r0
 800873e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 8008742:	2302      	movs	r3, #2
 8008744:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <mqtt_cb+0xe0>
 8008756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008758:	3302      	adds	r3, #2
 800875a:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 800875c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 8008760:	2b02      	cmp	r3, #2
 8008762:	d101      	bne.n	8008768 <mqtt_cb+0xec>
 8008764:	2105      	movs	r1, #5
 8008766:	e000      	b.n	800876a <mqtt_cb+0xee>
 8008768:	2104      	movs	r1, #4
 800876a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800876c:	2200      	movs	r2, #0
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff f8ec 	bl	800794c <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 8008774:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8008778:	2202      	movs	r2, #2
 800877a:	4619      	mov	r1, r3
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f003 fb03 	bl	800bd88 <mg_send>

              if (c->is_mqtt5) {
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <mqtt_cb+0x12a>
                uint16_t zero = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 8008798:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800879c:	2202      	movs	r2, #2
 800879e:	4619      	mov	r1, r3
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f003 faf1 	bl	800bd88 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 80087a6:	f107 0314 	add.w	r3, r7, #20
 80087aa:	461a      	mov	r2, r3
 80087ac:	2110      	movs	r1, #16
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7f9 fda8 	bl	8002304 <mg_call>
            break;
 80087b4:	e02c      	b.n	8008810 <mqtt_cb+0x194>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 80087b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80087b8:	4618      	mov	r0, r3
 80087ba:	f00d fc18 	bl	8015fee <mg_ntohs>
 80087be:	4603      	mov	r3, r0
 80087c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 80087c2:	2302      	movs	r3, #2
 80087c4:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 80087c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087c8:	2202      	movs	r2, #2
 80087ca:	2106      	movs	r1, #6
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f7ff f8bd 	bl	800794c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 80087d2:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 80087d6:	2202      	movs	r2, #2
 80087d8:	4619      	mov	r1, r3
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f003 fad4 	bl	800bd88 <mg_send>
            break;
 80087e0:	e016      	b.n	8008810 <mqtt_cb+0x194>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 80087e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80087e4:	4618      	mov	r0, r3
 80087e6:	f00d fc02 	bl	8015fee <mg_ntohs>
 80087ea:	4603      	mov	r3, r0
 80087ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 80087ee:	2302      	movs	r3, #2
 80087f0:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 80087f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087f4:	2200      	movs	r2, #0
 80087f6:	2107      	movs	r1, #7
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7ff f8a7 	bl	800794c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 80087fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008802:	2202      	movs	r2, #2
 8008804:	4619      	mov	r1, r3
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f003 fabe 	bl	800bd88 <mg_send>
            break;
 800880c:	e000      	b.n	8008810 <mqtt_cb+0x194>
            break;
 800880e:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8008810:	f107 0314 	add.w	r3, r7, #20
 8008814:	461a      	mov	r2, r3
 8008816:	210f      	movs	r1, #15
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f7f9 fd73 	bl	8002304 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3338      	adds	r3, #56	@ 0x38
 8008822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe f8d9 	bl	80069de <mg_iobuf_del>
    for (;;) {
 800882c:	e730      	b.n	8008690 <mqtt_cb+0x14>
      } else {
        break;
 800882e:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 8008830:	bf00      	nop
 8008832:	3758      	adds	r7, #88	@ 0x58
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b096      	sub	sp, #88	@ 0x58
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8008846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 fb45 	bl	8008edc <mg_connect>
 8008852:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 8008854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008856:	2b00      	cmp	r3, #0
 8008858:	d015      	beq.n	8008886 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 800885a:	f107 0314 	add.w	r3, r7, #20
 800885e:	2240      	movs	r2, #64	@ 0x40
 8008860:	2100      	movs	r1, #0
 8008862:	4618      	mov	r0, r3
 8008864:	f019 fe63 	bl	802252e <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <mg_mqtt_connect+0x3c>
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	e000      	b.n	8008876 <mg_mqtt_connect+0x3e>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4619      	mov	r1, r3
 8008878:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800887a:	f7ff fb59 	bl	8007f30 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 800887e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008880:	4a03      	ldr	r2, [pc, #12]	@ (8008890 <mg_mqtt_connect+0x58>)
 8008882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 8008886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8008888:	4618      	mov	r0, r3
 800888a:	3758      	adds	r7, #88	@ 0x58
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	0800867d 	.word	0x0800867d

08008894 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a4:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4805      	ldr	r0, [pc, #20]	@ (80088c8 <mg_vprintf+0x34>)
 80088b2:	f7fa f9d9 	bl	8002c68 <mg_vxprintf>
  return c->send.len - old;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	1ad3      	subs	r3, r2, r3
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	0800c1c7 	.word	0x0800c1c7

080088cc <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 80088cc:	b40e      	push	{r1, r2, r3}
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b085      	sub	sp, #20
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80088da:	f107 0320 	add.w	r3, r7, #32
 80088de:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 80088e0:	f107 0308 	add.w	r3, r7, #8
 80088e4:	461a      	mov	r2, r3
 80088e6:	69f9      	ldr	r1, [r7, #28]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff ffd3 	bl	8008894 <mg_vprintf>
 80088ee:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80088f0:	68fb      	ldr	r3, [r7, #12]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088fc:	b003      	add	sp, #12
 80088fe:	4770      	bx	lr

08008900 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	f107 0308 	add.w	r3, r7, #8
 800890a:	e883 0003 	stmia.w	r3, {r0, r1}
 800890e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 8008910:	4811      	ldr	r0, [pc, #68]	@ (8008958 <mg_atonl+0x58>)
 8008912:	f00d fb53 	bl	8015fbc <mg_ntohl>
 8008916:	4603      	mov	r3, r0
 8008918:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800891a:	f107 0318 	add.w	r3, r7, #24
 800891e:	490f      	ldr	r1, [pc, #60]	@ (800895c <mg_atonl+0x5c>)
 8008920:	4618      	mov	r0, r3
 8008922:	f004 fdb9 	bl	800d498 <mg_str_s>
 8008926:	f107 0318 	add.w	r3, r7, #24
 800892a:	cb0c      	ldmia	r3, {r2, r3}
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	c903      	ldmia	r1, {r0, r1}
 8008932:	f004 fe74 	bl	800d61e <mg_strcasecmp>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <mg_atonl+0x40>
 800893c:	2300      	movs	r3, #0
 800893e:	e006      	b.n	800894e <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	74da      	strb	r2, [r3, #19]
  return true;
 800894c:	2301      	movs	r3, #1
}
 800894e:	4618      	mov	r0, r3
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	7f000001 	.word	0x7f000001
 800895c:	08024844 	.word	0x08024844

08008960 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	f107 0308 	add.w	r3, r7, #8
 800896a:	e883 0003 	stmia.w	r3, {r0, r1}
 800896e:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <mg_atone+0x1a>
 8008976:	2300      	movs	r3, #0
 8008978:	e009      	b.n	800898e <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2210      	movs	r2, #16
 800897e:	2100      	movs	r1, #0
 8008980:	4618      	mov	r0, r3
 8008982:	f019 fdd4 	bl	802252e <memset>
  addr->is_ip6 = false;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	74da      	strb	r2, [r3, #19]
  return true;
 800898c:	2301      	movs	r3, #1
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8008996:	b480      	push	{r7}
 8008998:	b089      	sub	sp, #36	@ 0x24
 800899a:	af00      	add	r7, sp, #0
 800899c:	f107 0308 	add.w	r3, r7, #8
 80089a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80089a4:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 80089ae:	2300      	movs	r3, #0
 80089b0:	61fb      	str	r3, [r7, #28]
 80089b2:	e049      	b.n	8008a48 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	4413      	add	r3, r2
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80089be:	d925      	bls.n	8008a0c <mg_aton4+0x76>
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4413      	add	r3, r2
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b39      	cmp	r3, #57	@ 0x39
 80089ca:	d81f      	bhi.n	8008a0c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 80089cc:	f107 0210 	add.w	r2, r7, #16
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	4413      	add	r3, r2
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	4619      	mov	r1, r3
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4413      	add	r3, r2
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	3b30      	subs	r3, #48	@ 0x30
 80089ec:	440b      	add	r3, r1
 80089ee:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2bff      	cmp	r3, #255	@ 0xff
 80089f4:	dd01      	ble.n	80089fa <mg_aton4+0x64>
 80089f6:	2300      	movs	r3, #0
 80089f8:	e03d      	b.n	8008a76 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	b2d9      	uxtb	r1, r3
 80089fe:	f107 0210 	add.w	r2, r7, #16
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	4413      	add	r3, r2
 8008a06:	460a      	mov	r2, r1
 8008a08:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 8008a0a:	e01a      	b.n	8008a42 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a16:	d112      	bne.n	8008a3e <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d809      	bhi.n	8008a32 <mg_aton4+0x9c>
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <mg_aton4+0x9c>
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	4413      	add	r3, r2
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a30:	d101      	bne.n	8008a36 <mg_aton4+0xa0>
 8008a32:	2300      	movs	r3, #0
 8008a34:	e01f      	b.n	8008a76 <mg_aton4+0xe0>
      num_dots++;
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	61bb      	str	r3, [r7, #24]
 8008a3c:	e001      	b.n	8008a42 <mg_aton4+0xac>
    } else {
      return false;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e019      	b.n	8008a76 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	3301      	adds	r3, #1
 8008a46:	61fb      	str	r3, [r7, #28]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d3b1      	bcc.n	80089b4 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d106      	bne.n	8008a64 <mg_aton4+0xce>
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	4413      	add	r3, r2
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a62:	d101      	bne.n	8008a68 <mg_aton4+0xd2>
 8008a64:	2300      	movs	r3, #0
 8008a66:	e006      	b.n	8008a76 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	74da      	strb	r2, [r3, #19]
  return true;
 8008a74:	2301      	movs	r3, #1
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3724      	adds	r7, #36	@ 0x24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b088      	sub	sp, #32
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	f107 0308 	add.w	r3, r7, #8
 8008a8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008a90:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b0d      	cmp	r3, #13
 8008a96:	d801      	bhi.n	8008a9c <mg_v4mapped+0x1a>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e056      	b.n	8008b4a <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b3a      	cmp	r3, #58	@ 0x3a
 8008aa2:	d109      	bne.n	8008ab8 <mg_v4mapped+0x36>
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b3a      	cmp	r3, #58	@ 0x3a
 8008aac:	d104      	bne.n	8008ab8 <mg_v4mapped+0x36>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	3306      	adds	r3, #6
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ab6:	d001      	beq.n	8008abc <mg_v4mapped+0x3a>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e046      	b.n	8008b4a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8008abc:	2302      	movs	r3, #2
 8008abe:	61fb      	str	r3, [r7, #28]
 8008ac0:	e010      	b.n	8008ae4 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b66      	cmp	r3, #102	@ 0x66
 8008acc:	d007      	beq.n	8008ade <mg_v4mapped+0x5c>
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b46      	cmp	r3, #70	@ 0x46
 8008ad8:	d001      	beq.n	8008ade <mg_v4mapped+0x5c>
 8008ada:	2300      	movs	r3, #0
 8008adc:	e035      	b.n	8008b4a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	2b05      	cmp	r3, #5
 8008ae8:	ddeb      	ble.n	8008ac2 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	1dd9      	adds	r1, r3, #7
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	1fda      	subs	r2, r3, #7
 8008af2:	f107 0314 	add.w	r3, r7, #20
 8008af6:	4618      	mov	r0, r3
 8008af8:	f004 fceb 	bl	800d4d2 <mg_str_n>
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	f107 0314 	add.w	r3, r7, #20
 8008b02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b06:	f7ff ff46 	bl	8008996 <mg_aton4>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f083 0301 	eor.w	r3, r3, #1
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <mg_v4mapped+0x98>
 8008b16:	2300      	movs	r3, #0
 8008b18:	e017      	b.n	8008b4a <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2210      	movs	r2, #16
 8008b24:	2100      	movs	r1, #0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f019 fd01 	bl	802252e <memset>
  addr->ip[10] = addr->ip[11] = 255;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	22ff      	movs	r2, #255	@ 0xff
 8008b30:	72da      	strb	r2, [r3, #11]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	7ada      	ldrb	r2, [r3, #11]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	330c      	adds	r3, #12
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	74da      	strb	r2, [r3, #19]
  return true;
 8008b48:	2301      	movs	r3, #1
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b090      	sub	sp, #64	@ 0x40
 8008b56:	af02      	add	r7, sp, #8
 8008b58:	f107 0308 	add.w	r3, r7, #8
 8008b5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008b60:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 8008b62:	2300      	movs	r3, #0
 8008b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b66:	2300      	movs	r3, #0
 8008b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b6a:	232a      	movs	r3, #42	@ 0x2a
 8008b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d909      	bls.n	8008b8e <mg_aton6+0x3c>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b5b      	cmp	r3, #91	@ 0x5b
 8008b80:	d105      	bne.n	8008b8e <mg_aton6+0x3c>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	3301      	adds	r3, #1
 8008b86:	60bb      	str	r3, [r7, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3b02      	subs	r3, #2
 8008b8c:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	f107 0308 	add.w	r3, r7, #8
 8008b94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b98:	f7ff ff73 	bl	8008a82 <mg_v4mapped>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <mg_aton6+0x54>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e0e1      	b.n	8008d6a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008baa:	e0b0      	b.n	8008d0e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bb0:	4413      	add	r3, r2
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008bb6:	d905      	bls.n	8008bc4 <mg_aton6+0x72>
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bbc:	4413      	add	r3, r2
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b39      	cmp	r3, #57	@ 0x39
 8008bc2:	d917      	bls.n	8008bf4 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc8:	4413      	add	r3, r2
 8008bca:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8008bcc:	2b60      	cmp	r3, #96	@ 0x60
 8008bce:	d905      	bls.n	8008bdc <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd4:	4413      	add	r3, r2
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b66      	cmp	r3, #102	@ 0x66
 8008bda:	d90b      	bls.n	8008bf4 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be0:	4413      	add	r3, r2
 8008be2:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8008be4:	2b40      	cmp	r3, #64	@ 0x40
 8008be6:	d933      	bls.n	8008c50 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bec:	4413      	add	r3, r2
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b46      	cmp	r3, #70	@ 0x46
 8008bf2:	d82d      	bhi.n	8008c50 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	3303      	adds	r3, #3
 8008bfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d901      	bls.n	8008c06 <mg_aton6+0xb4>
 8008c02:	2300      	movs	r3, #0
 8008c04:	e0b1      	b.n	8008d6a <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0a:	18d1      	adds	r1, r2, r3
 8008c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	f107 0318 	add.w	r3, r7, #24
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f004 fc5a 	bl	800d4d2 <mg_str_n>
 8008c1e:	f107 0314 	add.w	r3, r7, #20
 8008c22:	2204      	movs	r2, #4
 8008c24:	9200      	str	r2, [sp, #0]
 8008c26:	2210      	movs	r2, #16
 8008c28:	f107 0118 	add.w	r1, r7, #24
 8008c2c:	c903      	ldmia	r1, {r0, r1}
 8008c2e:	f004 fe8e 	bl	800d94e <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	0a1b      	lsrs	r3, r3, #8
 8008c36:	b2d9      	uxtb	r1, r3
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3c:	4413      	add	r3, r2
 8008c3e:	460a      	mov	r2, r1
 8008c40:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	3301      	adds	r3, #1
 8008c48:	b2d1      	uxtb	r1, r2
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8008c4e:	e05b      	b.n	8008d08 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c54:	4413      	add	r3, r2
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c5a:	d134      	bne.n	8008cc6 <mg_aton6+0x174>
      j = i + 1;
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5e:	3301      	adds	r3, #1
 8008c60:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 8008c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d014      	beq.n	8008c92 <mg_aton6+0x140>
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c74:	d10d      	bne.n	8008c92 <mg_aton6+0x140>
        dc = n;  // Double colon
 8008c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c78:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d90f      	bls.n	8008ca0 <mg_aton6+0x14e>
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c84:	3b02      	subs	r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c8c:	d108      	bne.n	8008ca0 <mg_aton6+0x14e>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e06b      	b.n	8008d6a <mg_aton6+0x218>
      } else if (i > 0) {
 8008c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <mg_aton6+0x150>
        n += 2;
 8008c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9a:	3302      	adds	r3, #2
 8008c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c9e:	e000      	b.n	8008ca2 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8008ca0:	bf00      	nop
      }
      if (n > 14) return false;
 8008ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca4:	2b0e      	cmp	r3, #14
 8008ca6:	d901      	bls.n	8008cac <mg_aton6+0x15a>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	e05e      	b.n	8008d6a <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	3301      	adds	r3, #1
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	54d1      	strb	r1, [r2, r3]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	5cd1      	ldrb	r1, [r2, r3]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbe:	4413      	add	r3, r2
 8008cc0:	460a      	mov	r2, r1
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	e020      	b.n	8008d08 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cca:	4413      	add	r3, r2
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b25      	cmp	r3, #37	@ 0x25
 8008cd0:	d118      	bne.n	8008d04 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	18d1      	adds	r1, r2, r3
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	1e5a      	subs	r2, r3, #1
 8008ce2:	f107 0320 	add.w	r3, r7, #32
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f004 fbf3 	bl	800d4d2 <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	9200      	str	r2, [sp, #0]
 8008cf4:	220a      	movs	r2, #10
 8008cf6:	f107 0120 	add.w	r1, r7, #32
 8008cfa:	c903      	ldmia	r1, {r0, r1}
 8008cfc:	f004 fe27 	bl	800d94e <mg_str_to_num>
 8008d00:	4603      	mov	r3, r0
 8008d02:	e032      	b.n	8008d6a <mg_aton6+0x218>
    } else {
      return false;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e030      	b.n	8008d6a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 8008d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d12:	429a      	cmp	r2, r3
 8008d14:	f4ff af4a 	bcc.w	8008bac <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 8008d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1a:	2b0d      	cmp	r3, #13
 8008d1c:	d804      	bhi.n	8008d28 <mg_aton6+0x1d6>
 8008d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d22:	d101      	bne.n	8008d28 <mg_aton6+0x1d6>
 8008d24:	2300      	movs	r3, #0
 8008d26:	e020      	b.n	8008d6a <mg_aton6+0x218>
  if (n < 14) {
 8008d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2a:	2b0d      	cmp	r3, #13
 8008d2c:	d819      	bhi.n	8008d62 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8008d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	330e      	adds	r3, #14
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	18d0      	adds	r0, r2, r3
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	18d1      	adds	r1, r2, r3
 8008d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	3302      	adds	r3, #2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	f019 fbd6 	bl	80224fa <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	18d0      	adds	r0, r2, r3
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	f1c3 030e 	rsb	r3, r3, #14
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	f019 fbe6 	bl	802252e <memset>
  }

  addr->is_ip6 = true;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	74da      	strb	r2, [r3, #19]
  return true;
 8008d68:	2301      	movs	r3, #1
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3738      	adds	r7, #56	@ 0x38
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	f107 0308 	add.w	r3, r7, #8
 8008d7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008d80:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	f107 0308 	add.w	r3, r7, #8
 8008d88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d8c:	f7ff fde8 	bl	8008960 <mg_atone>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d11d      	bne.n	8008dd2 <mg_aton+0x60>
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	f107 0308 	add.w	r3, r7, #8
 8008d9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008da0:	f7ff fdae 	bl	8008900 <mg_atonl>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d113      	bne.n	8008dd2 <mg_aton+0x60>
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	f107 0308 	add.w	r3, r7, #8
 8008db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008db4:	f7ff fdef 	bl	8008996 <mg_aton4>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <mg_aton+0x60>
         mg_aton6(str, addr);
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	f107 0308 	add.w	r3, r7, #8
 8008dc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008dc8:	f7ff fec3 	bl	8008b52 <mg_aton6>
 8008dcc:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <mg_aton+0x64>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <mg_aton+0x66>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	b2db      	uxtb	r3, r3
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df2:	33b0      	adds	r3, #176	@ 0xb0
 8008df4:	4619      	mov	r1, r3
 8008df6:	2001      	movs	r0, #1
 8008df8:	f019 f890 	bl	8021f1c <calloc>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d017      	beq.n	8008e36 <mg_alloc_conn+0x50>
    c->mgr = mgr;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e12:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	61da      	str	r2, [r3, #28]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69da      	ldr	r2, [r3, #28]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 8008e36:	68fb      	ldr	r3, [r7, #12]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7f8 fd4f 	bl	80018ec <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e002      	b.n	8008e5c <mg_close_conn+0x1c>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d1f7      	bne.n	8008e56 <mg_close_conn+0x16>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d103      	bne.n	8008e82 <mg_close_conn+0x42>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d103      	bne.n	8008e96 <mg_close_conn+0x56>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 8008e96:	2200      	movs	r2, #0
 8008e98:	2109      	movs	r1, #9
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7f9 fa32 	bl	8002304 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f007 fd35 	bl	8010910 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	3338      	adds	r3, #56	@ 0x38
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fd fde2 	bl	8006a74 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3348      	adds	r3, #72	@ 0x48
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd fddd 	bl	8006a74 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3368      	adds	r3, #104	@ 0x68
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fd fdd8 	bl	8006a74 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 8008ec4:	21b0      	movs	r1, #176	@ 0xb0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f00d f818 	bl	8015efc <mg_bzero>
  free(c);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f019 f849 	bl	8021f64 <free>
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d03e      	beq.n	8008f72 <mg_connect+0x96>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d03a      	beq.n	8008f72 <mg_connect+0x96>
    MG_ERROR(("null url"));
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff ff72 	bl	8008de6 <mg_alloc_conn>
 8008f02:	6178      	str	r0, [r7, #20]
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d034      	beq.n	8008f74 <mg_connect+0x98>
    MG_ERROR(("OOM"));
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8008f18:	2204      	movs	r2, #4
 8008f1a:	4919      	ldr	r1, [pc, #100]	@ (8008f80 <mg_connect+0xa4>)
 8008f1c:	68b8      	ldr	r0, [r7, #8]
 8008f1e:	f019 fb1b 	bl	8022558 <strncmp>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	bf0c      	ite	eq
 8008f28:	2301      	moveq	r3, #1
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	b2d9      	uxtb	r1, r3
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008f34:	f361 0300 	bfi	r3, r1, #0, #1
 8008f38:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8008f50:	f043 0302 	orr.w	r3, r3, #2
 8008f54:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
    mg_call(c, MG_EV_OPEN, (void *) url);
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	2101      	movs	r1, #1
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f7f9 f9ce 	bl	8002304 <mg_call>
    mg_resolve(c, url);
 8008f68:	68b9      	ldr	r1, [r7, #8]
 8008f6a:	6978      	ldr	r0, [r7, #20]
 8008f6c:	f7f9 f986 	bl	800227c <mg_resolve>
 8008f70:	e000      	b.n	8008f74 <mg_connect+0x98>
    MG_ERROR(("null url"));
 8008f72:	bf00      	nop
  }
  return c;
 8008f74:	697b      	ldr	r3, [r7, #20]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	08024850 	.word	0x08024850

08008f84 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff ff25 	bl	8008de6 <mg_alloc_conn>
 8008f9c:	6178      	str	r0, [r7, #20]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d047      	beq.n	8009034 <mg_listen+0xb0>
    MG_ERROR(("OOM %s", url));
  } else if (!mg_open_listener(c, url)) {
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	6978      	ldr	r0, [r7, #20]
 8008fa8:	f002 fd86 	bl	800bab8 <mg_open_listener>
 8008fac:	4603      	mov	r3, r0
 8008fae:	f083 0301 	eor.w	r3, r3, #1
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <mg_listen+0x40>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
    MG_PROF_FREE(c);
    free(c);
 8008fb8:	6978      	ldr	r0, [r7, #20]
 8008fba:	f018 ffd3 	bl	8021f64 <free>
    c = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	e037      	b.n	8009034 <mg_listen+0xb0>
  } else {
    c->is_listening = 1;
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8008fca:	f043 0301 	orr.w	r3, r3, #1
 8008fce:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8008fd2:	2204      	movs	r2, #4
 8008fd4:	491a      	ldr	r1, [pc, #104]	@ (8009040 <mg_listen+0xbc>)
 8008fd6:	68b8      	ldr	r0, [r7, #8]
 8008fd8:	f019 fabe 	bl	8022558 <strncmp>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bf0c      	ite	eq
 8008fe2:	2301      	moveq	r3, #1
 8008fe4:	2300      	movne	r3, #0
 8008fe6:	b2d9      	uxtb	r1, r3
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008fee:	f361 0300 	bfi	r3, r1, #0, #1
 8008ff2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 8009010:	2200      	movs	r2, #0
 8009012:	2101      	movs	r1, #1
 8009014:	6978      	ldr	r0, [r7, #20]
 8009016:	f7f9 f975 	bl	8002304 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 800901a:	68b8      	ldr	r0, [r7, #8]
 800901c:	f00c fe0e 	bl	8015c3c <mg_url_is_ssl>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d006      	beq.n	8009034 <mg_listen+0xb0>
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800902c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009030:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
  }
  return c;
 8009034:	697b      	ldr	r3, [r7, #20]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	08024850 	.word	0x08024850

08009044 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8009044:	b580      	push	{r7, lr}
 8009046:	b08a      	sub	sp, #40	@ 0x28
 8009048:	af04      	add	r7, sp, #16
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8009050:	2128      	movs	r1, #40	@ 0x28
 8009052:	2001      	movs	r0, #1
 8009054:	f018 ff62 	bl	8021f1c <calloc>
 8009058:	4603      	mov	r3, r0
 800905a:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d014      	beq.n	800908c <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906a:	9302      	str	r3, [sp, #8]
 800906c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009078:	6979      	ldr	r1, [r7, #20]
 800907a:	f004 fe9b 	bl	800ddb4 <mg_timer_init>
    t->id = mgr->timerid++;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	1c59      	adds	r1, r3, #1
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	6211      	str	r1, [r2, #32]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	6013      	str	r3, [r2, #0]
  }
  return t;
 800908c:	697b      	ldr	r3, [r7, #20]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 80090a0:	2248      	movs	r2, #72	@ 0x48
 80090a2:	2100      	movs	r1, #0
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f019 fa42 	bl	802252e <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f04f 32ff 	mov.w	r2, #4294967295
 80090b0:	639a      	str	r2, [r3, #56]	@ 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 80090b2:	4b2c      	ldr	r3, [pc, #176]	@ (8009164 <mg_mgr_init+0xcc>)
 80090b4:	2204      	movs	r2, #4
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	4b2a      	ldr	r3, [pc, #168]	@ (8009164 <mg_mgr_init+0xcc>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	711a      	strb	r2, [r3, #4]
 80090be:	4b29      	ldr	r3, [pc, #164]	@ (8009164 <mg_mgr_init+0xcc>)
 80090c0:	2202      	movs	r2, #2
 80090c2:	715a      	strb	r2, [r3, #5]
 80090c4:	2000      	movs	r0, #0
 80090c6:	f00c ff79 	bl	8015fbc <mg_ntohl>
 80090ca:	4603      	mov	r3, r0
 80090cc:	4a26      	ldr	r2, [pc, #152]	@ (8009168 <mg_mgr_init+0xd0>)
 80090ce:	6093      	str	r3, [r2, #8]
 80090d0:	2000      	movs	r0, #0
 80090d2:	f00c ff73 	bl	8015fbc <mg_ntohl>
 80090d6:	4603      	mov	r3, r0
 80090d8:	4a23      	ldr	r2, [pc, #140]	@ (8009168 <mg_mgr_init+0xd0>)
 80090da:	60d3      	str	r3, [r2, #12]
 80090dc:	2000      	movs	r0, #0
 80090de:	f00c ff6d 	bl	8015fbc <mg_ntohl>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4a20      	ldr	r2, [pc, #128]	@ (8009168 <mg_mgr_init+0xd0>)
 80090e6:	6113      	str	r3, [r2, #16]
 80090e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009168 <mg_mgr_init+0xd0>)
 80090ea:	4a20      	ldr	r2, [pc, #128]	@ (800916c <mg_mgr_init+0xd4>)
 80090ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80090ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009168 <mg_mgr_init+0xd0>)
 80090f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009164 <mg_mgr_init+0xcc>)
 80090f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80090f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009168 <mg_mgr_init+0xd0>)
 80090f6:	2202      	movs	r2, #2
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009170 <mg_mgr_init+0xd8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	4b19      	ldr	r3, [pc, #100]	@ (8009168 <mg_mgr_init+0xd0>)
 8009102:	705a      	strb	r2, [r3, #1]
 8009104:	4b1a      	ldr	r3, [pc, #104]	@ (8009170 <mg_mgr_init+0xd8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	0a9b      	lsrs	r3, r3, #10
 800910a:	b2da      	uxtb	r2, r3
 800910c:	4b16      	ldr	r3, [pc, #88]	@ (8009168 <mg_mgr_init+0xd0>)
 800910e:	709a      	strb	r2, [r3, #2]
 8009110:	4b17      	ldr	r3, [pc, #92]	@ (8009170 <mg_mgr_init+0xd8>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	0cdb      	lsrs	r3, r3, #19
 8009116:	b2da      	uxtb	r2, r3
 8009118:	4b13      	ldr	r3, [pc, #76]	@ (8009168 <mg_mgr_init+0xd0>)
 800911a:	70da      	strb	r2, [r3, #3]
 800911c:	4b15      	ldr	r3, [pc, #84]	@ (8009174 <mg_mgr_init+0xdc>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	4b11      	ldr	r3, [pc, #68]	@ (8009168 <mg_mgr_init+0xd0>)
 8009124:	711a      	strb	r2, [r3, #4]
 8009126:	4b14      	ldr	r3, [pc, #80]	@ (8009178 <mg_mgr_init+0xe0>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	b2da      	uxtb	r2, r3
 800912c:	4b0e      	ldr	r3, [pc, #56]	@ (8009168 <mg_mgr_init+0xd0>)
 800912e:	715a      	strb	r2, [r3, #5]
 8009130:	490d      	ldr	r1, [pc, #52]	@ (8009168 <mg_mgr_init+0xd0>)
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f002 fafe 	bl	800b734 <mg_tcpip_init>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8009146:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a0c      	ldr	r2, [pc, #48]	@ (800917c <mg_mgr_init+0xe4>)
 800914c:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a0b      	ldr	r2, [pc, #44]	@ (8009180 <mg_mgr_init+0xe8>)
 8009152:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f007 fc9f 	bl	8010a98 <mg_tls_ctx_init>
}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	24005ca4 	.word	0x24005ca4
 8009168:	24005cb0 	.word	0x24005cb0
 800916c:	24000268 	.word	0x24000268
 8009170:	1ff1e800 	.word	0x1ff1e800
 8009174:	1ff1e804 	.word	0x1ff1e804
 8009178:	1ff1e808 	.word	0x1ff1e808
 800917c:	08024858 	.word	0x08024858
 8009180:	0802486c 	.word	0x0802486c

08009184 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <mg_tcpip_call+0x20>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	4798      	blx	r3
}
 80091a4:	bf00      	nop
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	441a      	add	r2, r3
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	461a      	mov	r2, r3
 80091c6:	68fc      	ldr	r4, [r7, #12]
 80091c8:	463b      	mov	r3, r7
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f004 f980 	bl	800d4d2 <mg_str_n>
 80091d2:	f104 0308 	add.w	r3, r4, #8
 80091d6:	463a      	mov	r2, r7
 80091d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091dc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80091e0:	bf00      	nop
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd90      	pop	{r4, r7, pc}

080091e8 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 80091f8:	2300      	movs	r3, #0
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	e014      	b.n	8009228 <csumup+0x40>
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <csumup+0x2a>
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	4413      	add	r3, r2
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	e004      	b.n	800921c <csumup+0x34>
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	4413      	add	r3, r2
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	3301      	adds	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	429a      	cmp	r2, r3
 800922e:	d3e6      	bcc.n	80091fe <csumup+0x16>
  return sum;
 8009230:	68fb      	ldr	r3, [r7, #12]
}
 8009232:	4618      	mov	r0, r3
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8009246:	e005      	b.n	8009254 <csumfin+0x16>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	b29a      	uxth	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	0c1b      	lsrs	r3, r3, #16
 8009250:	4413      	add	r3, r2
 8009252:	607b      	str	r3, [r7, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	0c1b      	lsrs	r3, r3, #16
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f5      	bne.n	8009248 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	b29b      	uxth	r3, r3
 8009260:	43db      	mvns	r3, r3
 8009262:	b29b      	uxth	r3, r3
 8009264:	4618      	mov	r0, r3
 8009266:	f00c fec2 	bl	8015fee <mg_ntohs>
 800926a:	4603      	mov	r3, r0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	2000      	movs	r0, #0
 8009284:	f7ff ffb0 	bl	80091e8 <csumup>
 8009288:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f7ff ffd7 	bl	800923e <csumfin>
 8009290:	4603      	mov	r3, r0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800929a:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ae:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	33b0      	adds	r3, #176	@ 0xb0
 80092b4:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 80092b6:	78fb      	ldrb	r3, [r7, #3]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d013      	beq.n	80092e4 <settmout+0x4a>
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d00e      	beq.n	80092e0 <settmout+0x46>
 80092c2:	78fb      	ldrb	r3, [r7, #3]
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d008      	beq.n	80092da <settmout+0x40>
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	2b04      	cmp	r3, #4
 80092cc:	d102      	bne.n	80092d4 <settmout+0x3a>
 80092ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092d2:	e008      	b.n	80092e6 <settmout+0x4c>
 80092d4:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 80092d8:	e005      	b.n	80092e6 <settmout+0x4c>
 80092da:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80092de:	e002      	b.n	80092e6 <settmout+0x4c>
 80092e0:	2364      	movs	r3, #100	@ 0x64
 80092e2:	e000      	b.n	80092e6 <settmout+0x4c>
 80092e4:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 80092e6:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	2000      	movs	r0, #0
 80092f2:	460c      	mov	r4, r1
 80092f4:	4605      	mov	r5, r0
 80092f6:	eb12 0804 	adds.w	r8, r2, r4
 80092fa:	eb43 0905 	adc.w	r9, r3, r5
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}
 800930a:	bf00      	nop
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8009314:	4770      	bx	lr

08009316 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6950      	ldr	r0, [r2, #20]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d104      	bne.n	8009344 <ether_output+0x2e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 8009344:	68fb      	ldr	r3, [r7, #12]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 800934e:	b580      	push	{r7, lr}
 8009350:	b086      	sub	sp, #24
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	330e      	adds	r3, #14
 8009364:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2206      	movs	r2, #6
 800936a:	21ff      	movs	r1, #255	@ 0xff
 800936c:	4618      	mov	r0, r3
 800936e:	f019 f8de 	bl	802252e <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	3306      	adds	r3, #6
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	2206      	movs	r2, #6
 800937a:	4618      	mov	r0, r3
 800937c:	f019 fa7b 	bl	8022876 <memcpy>
  eth->type = mg_htons(0x806);
 8009380:	f640 0006 	movw	r0, #2054	@ 0x806
 8009384:	f00c fe33 	bl	8015fee <mg_ntohs>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8009390:	221c      	movs	r2, #28
 8009392:	2100      	movs	r1, #0
 8009394:	6938      	ldr	r0, [r7, #16]
 8009396:	f019 f8ca 	bl	802252e <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800939a:	2001      	movs	r0, #1
 800939c:	f00c fe27 	bl	8015fee <mg_ntohs>
 80093a0:	4603      	mov	r3, r0
 80093a2:	461a      	mov	r2, r3
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	801a      	strh	r2, [r3, #0]
 80093a8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80093ac:	f00c fe1f 	bl	8015fee <mg_ntohs>
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	805a      	strh	r2, [r3, #2]
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2206      	movs	r2, #6
 80093bc:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2204      	movs	r2, #4
 80093c2:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 80093c4:	2001      	movs	r0, #1
 80093c6:	f00c fe12 	bl	8015fee <mg_ntohs>
 80093ca:	4603      	mov	r3, r0
 80093cc:	461a      	mov	r2, r3
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	80da      	strh	r2, [r3, #6]
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	619a      	str	r2, [r3, #24]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3308      	adds	r3, #8
 80093e6:	68f9      	ldr	r1, [r7, #12]
 80093e8:	2206      	movs	r2, #6
 80093ea:	4618      	mov	r0, r3
 80093ec:	f019 fa43 	bl	8022876 <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d006      	beq.n	8009404 <mg_tcpip_arp_request+0xb6>
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	3312      	adds	r3, #18
 80093fa:	2206      	movs	r2, #6
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4618      	mov	r0, r3
 8009400:	f019 fa39 	bl	8022876 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f103 021c 	add.w	r2, r3, #28
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	4619      	mov	r1, r3
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f7ff ff80 	bl	8009316 <ether_output>
}
 8009416:	bf00      	nop
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800942c:	2b04      	cmp	r3, #4
 800942e:	d019      	beq.n	8009464 <onstatechange+0x46>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009436:	2b03      	cmp	r3, #3
 8009438:	d107      	bne.n	800944a <onstatechange+0x2c>
    MG_ERROR(("Got IP"));
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	2200      	movs	r2, #0
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff ff83 	bl	800934e <mg_tcpip_arp_request>
 8009448:	e00c      	b.n	8009464 <onstatechange+0x46>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009450:	2b01      	cmp	r3, #1
 8009452:	d107      	bne.n	8009464 <onstatechange+0x46>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
 8009454:	f7f7 fc2c 	bl	8000cb0 <mg_millis>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4613      	mov	r3, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f018 fe36 	bl	80220d0 <srand>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	337c      	adds	r3, #124	@ 0x7c
 8009468:	461a      	mov	r2, r3
 800946a:	2100      	movs	r1, #0
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff fe89 	bl	8009184 <mg_tcpip_call>
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800947a:	b580      	push	{r7, lr}
 800947c:	b086      	sub	sp, #24
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	330e      	adds	r3, #14
 8009494:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2206      	movs	r2, #6
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f019 f9ea 	bl	8022876 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	3306      	adds	r3, #6
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	2206      	movs	r2, #6
 80094aa:	4618      	mov	r0, r3
 80094ac:	f019 f9e3 	bl	8022876 <memcpy>
  eth->type = mg_htons(0x800);
 80094b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80094b4:	f00c fd9b 	bl	8015fee <mg_ntohs>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 80094c0:	2214      	movs	r2, #20
 80094c2:	2100      	movs	r1, #0
 80094c4:	6938      	ldr	r0, [r7, #16]
 80094c6:	f019 f832 	bl	802252e <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2245      	movs	r2, #69	@ 0x45
 80094ce:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 80094d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80094d4:	f00c fd8b 	bl	8015fee <mg_ntohs>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3314      	adds	r3, #20
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	4618      	mov	r0, r3
 80094ea:	f00c fd80 	bl	8015fee <mg_ntohs>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2240      	movs	r2, #64	@ 0x40
 80094fa:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	79fa      	ldrb	r2, [r7, #7]
 8009500:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	6a3a      	ldr	r2, [r7, #32]
 800950c:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800950e:	2114      	movs	r1, #20
 8009510:	6938      	ldr	r0, [r7, #16]
 8009512:	f7ff feaf 	bl	8009274 <ipcsum>
 8009516:	4603      	mov	r3, r0
 8009518:	461a      	mov	r2, r3
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	815a      	strh	r2, [r3, #10]
  return ip;
 800951e:	693b      	ldr	r3, [r7, #16]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8009528:	b580      	push	{r7, lr}
 800952a:	b08a      	sub	sp, #40	@ 0x28
 800952c:	af02      	add	r7, sp, #8
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8009536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009538:	3308      	adds	r3, #8
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2211      	movs	r2, #17
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f7ff ff97 	bl	800947a <tx_ip>
 800954c:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	3314      	adds	r3, #20
 8009552:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	887a      	ldrh	r2, [r7, #2]
 8009558:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800955e:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	b29b      	uxth	r3, r3
 8009564:	3308      	adds	r3, #8
 8009566:	b29b      	uxth	r3, r3
 8009568:	4618      	mov	r0, r3
 800956a:	f00c fd40 	bl	8015fee <mg_ntohs>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2200      	movs	r2, #0
 800957a:	719a      	strb	r2, [r3, #6]
 800957c:	2200      	movs	r2, #0
 800957e:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8009580:	2208      	movs	r2, #8
 8009582:	69b9      	ldr	r1, [r7, #24]
 8009584:	2000      	movs	r0, #0
 8009586:	f7ff fe2f 	bl	80091e8 <csumup>
 800958a:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800958c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800958e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009590:	6978      	ldr	r0, [r7, #20]
 8009592:	f7ff fe29 	bl	80091e8 <csumup>
 8009596:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	330c      	adds	r3, #12
 800959c:	2204      	movs	r2, #4
 800959e:	4619      	mov	r1, r3
 80095a0:	6978      	ldr	r0, [r7, #20]
 80095a2:	f7ff fe21 	bl	80091e8 <csumup>
 80095a6:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	3310      	adds	r3, #16
 80095ac:	2204      	movs	r2, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	6978      	ldr	r0, [r7, #20]
 80095b2:	f7ff fe19 	bl	80091e8 <csumup>
 80095b6:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	7a5b      	ldrb	r3, [r3, #9]
 80095bc:	461a      	mov	r2, r3
 80095be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c0:	441a      	add	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	4413      	add	r3, r2
 80095c6:	3308      	adds	r3, #8
 80095c8:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f7ff fe37 	bl	800923e <csumfin>
 80095d0:	4603      	mov	r3, r0
 80095d2:	461a      	mov	r2, r3
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	3308      	adds	r3, #8
 80095dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095e0:	4618      	mov	r0, r3
 80095e2:	f018 ff8a 	bl	80224fa <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 80095e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e8:	332a      	adds	r3, #42	@ 0x2a
 80095ea:	4619      	mov	r1, r3
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f7ff fe92 	bl	8009316 <ether_output>
}
 80095f2:	bf00      	nop
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 80095fc:	b5b0      	push	{r4, r5, r7, lr}
 80095fe:	b0cc      	sub	sp, #304	@ 0x130
 8009600:	af04      	add	r7, sp, #16
 8009602:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8009606:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800960a:	6020      	str	r0, [r4, #0]
 800960c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8009610:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8009614:	6001      	str	r1, [r0, #0]
 8009616:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800961a:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800961e:	600a      	str	r2, [r1, #0]
 8009620:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8009624:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8009628:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800962a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800962e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009632:	4a38      	ldr	r2, [pc, #224]	@ (8009714 <tx_dhcp+0x118>)
 8009634:	4618      	mov	r0, r3
 8009636:	4611      	mov	r1, r2
 8009638:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800963c:	461a      	mov	r2, r3
 800963e:	f019 f91a 	bl	8022876 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8009642:	4835      	ldr	r0, [pc, #212]	@ (8009718 <tx_dhcp+0x11c>)
 8009644:	f00c fcba 	bl	8015fbc <mg_ntohl>
 8009648:	4602      	mov	r2, r0
 800964a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800964e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009652:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8009656:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800965a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800965e:	6819      	ldr	r1, [r3, #0]
 8009660:	f107 0310 	add.w	r3, r7, #16
 8009664:	331c      	adds	r3, #28
 8009666:	2206      	movs	r2, #6
 8009668:	4618      	mov	r0, r3
 800966a:	f019 f904 	bl	8022876 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800966e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009672:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3302      	adds	r3, #2
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009682:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009686:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8009688:	f107 0310 	add.w	r3, r7, #16
 800968c:	33f0      	adds	r3, #240	@ 0xf0
 800968e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8009692:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8009696:	4618      	mov	r0, r3
 8009698:	f019 f8ed 	bl	8022876 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800969c:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d009      	beq.n	80096b8 <tx_dhcp+0xbc>
 80096a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80096a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096ac:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80096b0:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 80096b8:	2044      	movs	r0, #68	@ 0x44
 80096ba:	f00c fc98 	bl	8015fee <mg_ntohs>
 80096be:	4603      	mov	r3, r0
 80096c0:	461d      	mov	r5, r3
 80096c2:	2043      	movs	r0, #67	@ 0x43
 80096c4:	f00c fc93 	bl	8015fee <mg_ntohs>
 80096c8:	4603      	mov	r3, r0
 80096ca:	461c      	mov	r4, r3
 80096cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80096d0:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 80096d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80096d8:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 80096dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80096e0:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80096e4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80096e8:	9303      	str	r3, [sp, #12]
 80096ea:	f107 0310 	add.w	r3, r7, #16
 80096ee:	9302      	str	r3, [sp, #8]
 80096f0:	9401      	str	r4, [sp, #4]
 80096f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80096f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	462b      	mov	r3, r5
 8009700:	6812      	ldr	r2, [r2, #0]
 8009702:	6809      	ldr	r1, [r1, #0]
 8009704:	6800      	ldr	r0, [r0, #0]
 8009706:	f7ff ff0f 	bl	8009528 <tx_udp>
         sizeof(dhcp));
}
 800970a:	bf00      	nop
 800970c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009710:	46bd      	mov	sp, r7
 8009712:	bdb0      	pop	{r4, r5, r7, pc}
 8009714:	0802488c 	.word	0x0802488c
 8009718:	63825363 	.word	0x63825363

0800971c <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800971c:	b5b0      	push	{r4, r5, r7, lr}
 800971e:	b090      	sub	sp, #64	@ 0x40
 8009720:	af04      	add	r7, sp, #16
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 8009728:	4b2a      	ldr	r3, [pc, #168]	@ (80097d4 <tx_dhcp_request_sel+0xb8>)
 800972a:	f107 0414 	add.w	r4, r7, #20
 800972e:	461d      	mov	r5, r3
 8009730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009738:	c403      	stmia	r4!, {r0, r1}
 800973a:	8022      	strh	r2, [r4, #0]
 800973c:	3402      	adds	r4, #2
 800973e:	0c13      	lsrs	r3, r2, #16
 8009740:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 8009748:	f107 0314 	add.w	r3, r7, #20
 800974c:	330a      	adds	r3, #10
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8009752:	f107 0314 	add.w	r3, r7, #20
 8009756:	3310      	adds	r3, #16
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7fdb      	ldrb	r3, [r3, #31]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00a      	beq.n	800977a <tx_dhcp_request_sel+0x5e>
 8009764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800976e:	3318      	adds	r3, #24
 8009770:	3330      	adds	r3, #48	@ 0x30
 8009772:	443b      	add	r3, r7
 8009774:	2206      	movs	r2, #6
 8009776:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <tx_dhcp_request_sel+0x7e>
 8009784:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800978e:	3318      	adds	r3, #24
 8009790:	3330      	adds	r3, #48	@ 0x30
 8009792:	443b      	add	r3, r7
 8009794:	222a      	movs	r2, #42	@ 0x2a
 8009796:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 800979a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800979e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097a2:	4413      	add	r3, r2
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 80097aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097ae:	3319      	adds	r3, #25
 80097b0:	2200      	movs	r2, #0
 80097b2:	9202      	str	r2, [sp, #8]
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	f107 0314 	add.w	r3, r7, #20
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	f04f 33ff 	mov.w	r3, #4294967295
 80097c0:	2200      	movs	r2, #0
 80097c2:	4905      	ldr	r1, [pc, #20]	@ (80097d8 <tx_dhcp_request_sel+0xbc>)
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7ff ff19 	bl	80095fc <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
}
 80097ca:	bf00      	nop
 80097cc:	3730      	adds	r7, #48	@ 0x30
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bdb0      	pop	{r4, r5, r7, pc}
 80097d2:	bf00      	nop
 80097d4:	0802499c 	.word	0x0802499c
 80097d8:	0802614c 	.word	0x0802614c

080097dc <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	@ 0x28
 80097e0:	af04      	add	r7, sp, #16
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 80097ea:	4b09      	ldr	r3, [pc, #36]	@ (8009810 <tx_dhcp_request_re+0x34>)
 80097ec:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 80097ee:	2301      	movs	r3, #1
 80097f0:	9302      	str	r3, [sp, #8]
 80097f2:	2304      	movs	r3, #4
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	f107 0314 	add.w	r3, r7, #20
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff fefa 	bl	80095fc <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
}
 8009808:	bf00      	nop
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	ff030135 	.word	0xff030135

08009814 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af04      	add	r7, sp, #16
 800981a:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800981c:	4a0c      	ldr	r2, [pc, #48]	@ (8009850 <tx_dhcp_discover+0x3c>)
 800981e:	f107 0308 	add.w	r3, r7, #8
 8009822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009826:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800982a:	2300      	movs	r3, #0
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	2308      	movs	r3, #8
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	f107 0308 	add.w	r3, r7, #8
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	f04f 33ff 	mov.w	r3, #4294967295
 800983c:	2200      	movs	r2, #0
 800983e:	4905      	ldr	r1, [pc, #20]	@ (8009854 <tx_dhcp_discover+0x40>)
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff fedb 	bl	80095fc <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	080249b8 	.word	0x080249b8
 8009854:	0802614c 	.word	0x0802614c

08009858 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e057      	b.n	8009922 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009878:	f003 0310 	and.w	r3, r3, #16
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d010      	beq.n	80098a4 <getpeer+0x4c>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00c      	beq.n	80098a4 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	f103 000e 	add.w	r0, r3, #14
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	331c      	adds	r3, #28
 8009896:	2204      	movs	r2, #4
 8009898:	4619      	mov	r1, r3
 800989a:	f018 fe1e 	bl	80224da <memcmp>
 800989e:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d042      	beq.n	800992a <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00b      	beq.n	80098cc <getpeer+0x74>
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d007      	beq.n	80098cc <getpeer+0x74>
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	8b1a      	ldrh	r2, [r3, #24]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c4:	885b      	ldrh	r3, [r3, #2]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d030      	beq.n	800992e <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d11f      	bne.n	800991c <getpeer+0xc4>
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01b      	beq.n	800991c <getpeer+0xc4>
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	8b1a      	ldrh	r2, [r3, #24]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ec:	885b      	ldrh	r3, [r3, #2]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d113      	bne.n	800991c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80098fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80098fe:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8009900:	79fa      	ldrb	r2, [r7, #7]
 8009902:	429a      	cmp	r2, r3
 8009904:	d10a      	bne.n	800991c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d111      	bne.n	8009930 <getpeer+0xd8>
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	b29b      	uxth	r3, r3
 8009918:	429a      	cmp	r2, r3
 800991a:	d009      	beq.n	8009930 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1a4      	bne.n	8009872 <getpeer+0x1a>
 8009928:	e002      	b.n	8009930 <getpeer+0xd8>
      break;
 800992a:	bf00      	nop
 800992c:	e000      	b.n	8009930 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800992e:	bf00      	nop
      break;
  }
  return c;
 8009930:	697b      	ldr	r3, [r7, #20]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800993a:	b5b0      	push	{r4, r5, r7, lr}
 800993c:	b086      	sub	sp, #24
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	88db      	ldrh	r3, [r3, #6]
 800994a:	b29c      	uxth	r4, r3
 800994c:	2001      	movs	r0, #1
 800994e:	f00c fb4e 	bl	8015fee <mg_ntohs>
 8009952:	4603      	mov	r3, r0
 8009954:	429c      	cmp	r4, r3
 8009956:	d161      	bne.n	8009a1c <rx_arp+0xe2>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	429a      	cmp	r2, r3
 8009964:	d15a      	bne.n	8009a1c <rx_arp+0xe2>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	330e      	adds	r3, #14
 8009970:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8009972:	6978      	ldr	r0, [r7, #20]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	3306      	adds	r3, #6
 800997a:	2206      	movs	r2, #6
 800997c:	4619      	mov	r1, r3
 800997e:	f018 ff7a 	bl	8022876 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	3306      	adds	r3, #6
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	2206      	movs	r2, #6
 800998a:	4618      	mov	r0, r3
 800998c:	f018 ff73 	bl	8022876 <memcpy>
    eth->type = mg_htons(0x806);
 8009990:	f640 0006 	movw	r0, #2054	@ 0x806
 8009994:	f00c fb2b 	bl	8015fee <mg_ntohs>
 8009998:	4603      	mov	r3, r0
 800999a:	461a      	mov	r2, r3
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	699a      	ldr	r2, [r3, #24]
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6814      	ldr	r4, [r2, #0]
 80099a8:	6850      	ldr	r0, [r2, #4]
 80099aa:	6891      	ldr	r1, [r2, #8]
 80099ac:	68d5      	ldr	r5, [r2, #12]
 80099ae:	601c      	str	r4, [r3, #0]
 80099b0:	6058      	str	r0, [r3, #4]
 80099b2:	6099      	str	r1, [r3, #8]
 80099b4:	60dd      	str	r5, [r3, #12]
 80099b6:	6914      	ldr	r4, [r2, #16]
 80099b8:	6950      	ldr	r0, [r2, #20]
 80099ba:	6991      	ldr	r1, [r2, #24]
 80099bc:	611c      	str	r4, [r3, #16]
 80099be:	6158      	str	r0, [r3, #20]
 80099c0:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 80099c2:	2002      	movs	r0, #2
 80099c4:	f00c fb13 	bl	8015fee <mg_ntohs>
 80099c8:	4603      	mov	r3, r0
 80099ca:	461a      	mov	r2, r3
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f103 0012 	add.w	r0, r3, #18
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	3308      	adds	r3, #8
 80099dc:	2206      	movs	r2, #6
 80099de:	4619      	mov	r1, r3
 80099e0:	f018 ff49 	bl	8022876 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	3308      	adds	r3, #8
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	2206      	movs	r2, #6
 80099ec:	4618      	mov	r0, r3
 80099ee:	f018 ff42 	bl	8022876 <memcpy>
    arp->tpa = pkt->arp->spa;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	f8d3 200e 	ldr.w	r2, [r3, #14]
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f103 021c 	add.w	r2, r3, #28
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff fc7e 	bl	8009316 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8009a1a:	e05f      	b.n	8009adc <rx_arp+0x1a2>
  } else if (pkt->arp->op == mg_htons(2)) {
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	88db      	ldrh	r3, [r3, #6]
 8009a22:	b29c      	uxth	r4, r3
 8009a24:	2002      	movs	r0, #2
 8009a26:	f00c fae2 	bl	8015fee <mg_ntohs>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	429c      	cmp	r4, r3
 8009a2e:	d155      	bne.n	8009adc <rx_arp+0x1a2>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	3312      	adds	r3, #18
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	2206      	movs	r2, #6
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f018 fd4d 	bl	80224da <memcmp>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d149      	bne.n	8009ada <rx_arp+0x1a0>
    if (pkt->arp->spa == ifp->gw) {
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d116      	bne.n	8009a84 <rx_arp+0x14a>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	3308      	adds	r3, #8
 8009a62:	2206      	movs	r2, #6
 8009a64:	4619      	mov	r1, r3
 8009a66:	f018 ff06 	bl	8022876 <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d133      	bne.n	8009adc <rx_arp+0x1a2>
        ifp->state = MG_TCPIP_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2204      	movs	r2, #4
 8009a78:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        onstatechange(ifp);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff fcce 	bl	800941e <onstatechange>
 8009a82:	e02b      	b.n	8009adc <rx_arp+0x1a2>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a88:	2200      	movs	r2, #0
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fee3 	bl	8009858 <getpeer>
 8009a92:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d020      	beq.n	8009adc <rx_arp+0x1a2>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d018      	beq.n	8009adc <rx_arp+0x1a2>
        struct connstate *s = (struct connstate *) (c + 1);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	33b0      	adds	r3, #176	@ 0xb0
 8009aae:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f103 0018 	add.w	r0, r3, #24
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	3308      	adds	r3, #8
 8009abc:	2206      	movs	r2, #6
 8009abe:	4619      	mov	r1, r3
 8009ac0:	f018 fed9 	bl	8022876 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009aca:	f36f 1304 	bfc	r3, #4, #1
 8009ace:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f001 fefd 	bl	800b8d2 <mac_resolved>
 8009ad8:	e000      	b.n	8009adc <rx_arp+0x1a2>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8009ada:	bf00      	nop
      }
    }
  }
}
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bdb0      	pop	{r4, r5, r7, pc}

08009ae2 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b08a      	sub	sp, #40	@ 0x28
 8009ae6:	af02      	add	r7, sp, #8
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	d14d      	bne.n	8009b92 <rx_icmp+0xb0>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d049      	beq.n	8009b92 <rx_icmp+0xb0>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	691a      	ldr	r2, [r3, #16]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d142      	bne.n	8009b92 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 8009b0c:	2326      	movs	r3, #38	@ 0x26
 8009b0e:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699a      	ldr	r2, [r3, #24]
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	617b      	str	r3, [r7, #20]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d901      	bls.n	8009b2c <rx_icmp+0x4a>
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	1d99      	adds	r1, r3, #6
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6898      	ldr	r0, [r3, #8]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	3204      	adds	r2, #4
 8009b40:	9201      	str	r2, [sp, #4]
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	4603      	mov	r3, r0
 8009b46:	2201      	movs	r2, #1
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff fc96 	bl	800947a <tx_ip>
 8009b4e:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3314      	adds	r3, #20
 8009b54:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8009b56:	2204      	movs	r2, #4
 8009b58:	2100      	movs	r1, #0
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f018 fce7 	bl	802252e <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	1d18      	adds	r0, r3, #4
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	f018 fe83 	bl	8022876 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	3304      	adds	r3, #4
 8009b74:	4619      	mov	r1, r3
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff fb7c 	bl	8009274 <ipcsum>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	4413      	add	r3, r2
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fbc2 	bl	8009316 <ether_output>
  }
}
 8009b92:	bf00      	nop
 8009b94:	3720      	adds	r7, #32
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009b9a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b9e:	b090      	sub	sp, #64	@ 0x40
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009baa:	2300      	movs	r3, #0
 8009bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bae:	2300      	movs	r3, #0
 8009bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	623b      	str	r3, [r7, #32]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	61fb      	str	r3, [r7, #28]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009bca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd2:	33f0      	adds	r3, #240	@ 0xf0
 8009bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	4413      	add	r3, r2
 8009be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8009bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bec:	429a      	cmp	r2, r3
 8009bee:	f0c0 8175 	bcc.w	8009edc <rx_dhcp_client+0x342>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	1d18      	adds	r0, r3, #4
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	3302      	adds	r3, #2
 8009bfc:	2204      	movs	r2, #4
 8009bfe:	4619      	mov	r1, r3
 8009c00:	f018 fc6b 	bl	80224da <memcmp>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f040 816a 	bne.w	8009ee0 <rx_dhcp_client+0x346>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8009c0c:	e08a      	b.n	8009d24 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d10e      	bne.n	8009c34 <rx_dhcp_client+0x9a>
 8009c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c18:	3301      	adds	r3, #1
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d109      	bne.n	8009c34 <rx_dhcp_client+0x9a>
 8009c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c22:	3306      	adds	r3, #6
 8009c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d904      	bls.n	8009c34 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	3302      	adds	r3, #2
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c32:	e070      	b.n	8009d16 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d112      	bne.n	8009c62 <rx_dhcp_client+0xc8>
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	3301      	adds	r3, #1
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b04      	cmp	r3, #4
 8009c44:	d10d      	bne.n	8009c62 <rx_dhcp_client+0xc8>
 8009c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c48:	3306      	adds	r3, #6
 8009c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d908      	bls.n	8009c62 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 8009c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c52:	3302      	adds	r3, #2
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c60:	e059      	b.n	8009d16 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	7fdb      	ldrb	r3, [r3, #31]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d012      	beq.n	8009c90 <rx_dhcp_client+0xf6>
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b06      	cmp	r3, #6
 8009c70:	d10e      	bne.n	8009c90 <rx_dhcp_client+0xf6>
 8009c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c74:	3301      	adds	r3, #1
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d109      	bne.n	8009c90 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7e:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8009c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d904      	bls.n	8009c90 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 8009c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c88:	3302      	adds	r3, #2
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	e042      	b.n	8009d16 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d012      	beq.n	8009cc0 <rx_dhcp_client+0x126>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca0:	d10e      	bne.n	8009cc0 <rx_dhcp_client+0x126>
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d109      	bne.n	8009cc0 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 8009cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cae:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8009cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d904      	bls.n	8009cc0 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb8:	3302      	adds	r3, #2
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	e02a      	b.n	8009d16 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b33      	cmp	r3, #51	@ 0x33
 8009cc6:	d114      	bne.n	8009cf2 <rx_dhcp_client+0x158>
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cca:	3301      	adds	r3, #1
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d10f      	bne.n	8009cf2 <rx_dhcp_client+0x158>
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	3306      	adds	r3, #6
 8009cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d90a      	bls.n	8009cf2 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cde:	3302      	adds	r3, #2
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f00c f968 	bl	8015fbc <mg_ntohl>
 8009cec:	4603      	mov	r3, r0
 8009cee:	623b      	str	r3, [r7, #32]
 8009cf0:	e011      	b.n	8009d16 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b35      	cmp	r3, #53	@ 0x35
 8009cf8:	d10d      	bne.n	8009d16 <rx_dhcp_client+0x17c>
 8009cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d108      	bne.n	8009d16 <rx_dhcp_client+0x17c>
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	3306      	adds	r3, #6
 8009d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d903      	bls.n	8009d16 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d10:	789b      	ldrb	r3, [r3, #2]
 8009d12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    p += p[1] + 2;
 8009d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d18:	3301      	adds	r3, #1
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	3302      	adds	r3, #2
 8009d1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d20:	4413      	add	r3, r2
 8009d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	3301      	adds	r3, #1
 8009d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d904      	bls.n	8009d38 <rx_dhcp_client+0x19e>
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2bff      	cmp	r3, #255	@ 0xff
 8009d34:	f47f af6b 	bne.w	8009c0e <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8009d38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d3c:	2b06      	cmp	r3, #6
 8009d3e:	d10c      	bne.n	8009d5a <rx_dhcp_client+0x1c0>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d107      	bne.n	8009d5a <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	609a      	str	r2, [r3, #8]
 8009d58:	e0b5      	b.n	8009ec6 <rx_dhcp_client+0x32c>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8009d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d123      	bne.n	8009daa <rx_dhcp_client+0x210>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d11e      	bne.n	8009daa <rx_dhcp_client+0x210>
 8009d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01b      	beq.n	8009daa <rx_dhcp_client+0x210>
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d018      	beq.n	8009daa <rx_dhcp_client+0x210>
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d015      	beq.n	8009daa <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d82:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	e002      	b.n	8009d96 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	461a      	mov	r2, r3
 8009d98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7ff fcbe 	bl	800971c <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8009da8:	e08d      	b.n	8009ec6 <rx_dhcp_client+0x32c>
  } else if (msgtype == 5) {          // DHCPACK
 8009daa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dae:	2b05      	cmp	r3, #5
 8009db0:	f040 8089 	bne.w	8009ec6 <rx_dhcp_client+0x32c>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d165      	bne.n	8009e8a <rx_dhcp_client+0x2f0>
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d062      	beq.n	8009e8a <rx_dhcp_client+0x2f0>
 8009dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d05f      	beq.n	8009e8a <rx_dhcp_client+0x2f0>
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d05c      	beq.n	8009e8a <rx_dhcp_client+0x2f0>
      ifp->lease_expire = ifp->now + lease * 1000;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8009dd6:	6a39      	ldr	r1, [r7, #32]
 8009dd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009ddc:	fb00 f101 	mul.w	r1, r0, r1
 8009de0:	2000      	movs	r0, #0
 8009de2:	4688      	mov	r8, r1
 8009de4:	4681      	mov	r9, r0
 8009de6:	eb12 0108 	adds.w	r1, r2, r8
 8009dea:	6039      	str	r1, [r7, #0]
 8009dec:	eb43 0309 	adc.w	r3, r3, r9
 8009df0:	607b      	str	r3, [r7, #4]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009df8:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	3306      	adds	r3, #6
 8009e08:	2206      	movs	r2, #6
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	f018 fd33 	bl	8022876 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e14:	609a      	str	r2, [r3, #8]
 8009e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	611a      	str	r2, [r3, #16]
 8009e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2203      	movs	r2, #3
 8009e26:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 8009e2a:	f107 0310 	add.w	r3, r7, #16
 8009e2e:	2108      	movs	r1, #8
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7f6 ff0f 	bl	8000c54 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8009e36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e3a:	4614      	mov	r4, r2
 8009e3c:	f7f6 ff38 	bl	8000cb0 <mg_millis>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4613      	mov	r3, r2
 8009e46:	4423      	add	r3, r4
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f018 f941 	bl	80220d0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	7fdb      	ldrb	r3, [r3, #31]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d009      	beq.n	8009e6a <rx_dhcp_client+0x2d0>
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d006      	beq.n	8009e6a <rx_dhcp_client+0x2d0>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 8009e5c:	f107 031c 	add.w	r3, r7, #28
 8009e60:	461a      	mov	r2, r3
 8009e62:	2101      	movs	r1, #1
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff f98d 	bl	8009184 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d027      	beq.n	8009ec4 <rx_dhcp_client+0x32a>
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d024      	beq.n	8009ec4 <rx_dhcp_client+0x32a>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8009e7a:	f107 0318 	add.w	r3, r7, #24
 8009e7e:	461a      	mov	r2, r3
 8009e80:	2102      	movs	r1, #2
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff f97e 	bl	8009184 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8009e88:	e01c      	b.n	8009ec4 <rx_dhcp_client+0x32a>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d118      	bne.n	8009ec6 <rx_dhcp_client+0x32c>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d113      	bne.n	8009ec6 <rx_dhcp_client+0x32c>
      ifp->lease_expire = ifp->now + lease * 1000;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8009ea4:	6a39      	ldr	r1, [r7, #32]
 8009ea6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009eaa:	fb00 f101 	mul.w	r1, r0, r1
 8009eae:	2000      	movs	r0, #0
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	eb12 0a04 	adds.w	sl, r2, r4
 8009eb8:	eb43 0b05 	adc.w	fp, r3, r5
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
 8009ec2:	e000      	b.n	8009ec6 <rx_dhcp_client+0x32c>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8009ec4:	bf00      	nop
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009ecc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d006      	beq.n	8009ee2 <rx_dhcp_client+0x348>
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff faa2 	bl	800941e <onstatechange>
 8009eda:	e002      	b.n	8009ee2 <rx_dhcp_client+0x348>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009edc:	bf00      	nop
 8009ede:	e000      	b.n	8009ee2 <rx_dhcp_client+0x348>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8009ee0:	bf00      	nop
}
 8009ee2:	3740      	adds	r7, #64	@ 0x40
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009eec <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	b0d6      	sub	sp, #344	@ 0x158
 8009ef2:	af04      	add	r7, sp, #16
 8009ef4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009ef8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8009efc:	6018      	str	r0, [r3, #0]
 8009efe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009f02:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8009f06:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 8009f0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009f12:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f1a:	33f0      	adds	r3, #240	@ 0xf0
 8009f1c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8009f20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009f24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009f30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009f3e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009f42:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8009f4e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8009f52:	429a      	cmp	r2, r3
 8009f54:	f0c0 81b0 	bcc.w	800a2b8 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8009f58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009f5c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009f60:	4ad8      	ldr	r2, [pc, #864]	@ (800a2c4 <rx_dhcp_server+0x3d8>)
 8009f62:	4618      	mov	r0, r3
 8009f64:	4611      	mov	r1, r2
 8009f66:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f018 fc83 	bl	8022876 <memcpy>
  res.yiaddr = ifp->ip;
 8009f70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009f74:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009f80:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009f84:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8009f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009f8a:	3310      	adds	r3, #16
 8009f8c:	3303      	adds	r3, #3
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	3201      	adds	r2, #1
 8009f92:	b2d2      	uxtb	r2, r2
 8009f94:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8009f96:	e020      	b.n	8009fda <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8009f98:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b35      	cmp	r3, #53	@ 0x35
 8009fa0:	d111      	bne.n	8009fc6 <rx_dhcp_server+0xda>
 8009fa2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d10b      	bne.n	8009fc6 <rx_dhcp_server+0xda>
 8009fae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009fb2:	3302      	adds	r3, #2
 8009fb4:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d904      	bls.n	8009fc6 <rx_dhcp_server+0xda>
      op = p[2];
 8009fbc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009fc0:	789b      	ldrb	r3, [r3, #2]
 8009fc2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 8009fc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009fca:	3301      	adds	r3, #1
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	3302      	adds	r3, #2
 8009fd0:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8009fda:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009fde:	3301      	adds	r3, #1
 8009fe0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d904      	bls.n	8009ff2 <rx_dhcp_server+0x106>
 8009fe8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2bff      	cmp	r3, #255	@ 0xff
 8009ff0:	d1d2      	bne.n	8009f98 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8009ff2:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d004      	beq.n	800a004 <rx_dhcp_server+0x118>
 8009ffa:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	f040 815b 	bne.w	800a2ba <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800a004:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d101      	bne.n	800a010 <rx_dhcp_server+0x124>
 800a00c:	2302      	movs	r3, #2
 800a00e:	e000      	b.n	800a012 <rx_dhcp_server+0x126>
 800a010:	2305      	movs	r3, #5
 800a012:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 800a016:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a01a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a01e:	2235      	movs	r2, #53	@ 0x35
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a026:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a02a:	2201      	movs	r2, #1
 800a02c:	705a      	strb	r2, [r3, #1]
 800a02e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a032:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a036:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800a03a:	709a      	strb	r2, [r3, #2]
 800a03c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a040:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a044:	2201      	movs	r2, #1
 800a046:	70da      	strb	r2, [r3, #3]
 800a048:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a04c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a050:	2204      	movs	r2, #4
 800a052:	711a      	strb	r2, [r3, #4]
 800a054:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a058:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a05c:	2200      	movs	r2, #0
 800a05e:	715a      	strb	r2, [r3, #5]
 800a060:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a064:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a068:	2200      	movs	r2, #0
 800a06a:	719a      	strb	r2, [r3, #6]
 800a06c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a070:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a074:	2200      	movs	r2, #0
 800a076:	71da      	strb	r2, [r3, #7]
 800a078:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a07c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a080:	2200      	movs	r2, #0
 800a082:	721a      	strb	r2, [r3, #8]
 800a084:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a088:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a08c:	2236      	movs	r2, #54	@ 0x36
 800a08e:	725a      	strb	r2, [r3, #9]
 800a090:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a094:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a098:	2204      	movs	r2, #4
 800a09a:	729a      	strb	r2, [r3, #10]
 800a09c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a0a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	72da      	strb	r2, [r3, #11]
 800a0a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a0ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	731a      	strb	r2, [r3, #12]
 800a0b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a0b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a0bc:	2200      	movs	r2, #0
 800a0be:	735a      	strb	r2, [r3, #13]
 800a0c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a0c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	739a      	strb	r2, [r3, #14]
 800a0cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a0d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a0d4:	220c      	movs	r2, #12
 800a0d6:	73da      	strb	r2, [r3, #15]
 800a0d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a0dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a0e0:	2203      	movs	r2, #3
 800a0e2:	741a      	strb	r2, [r3, #16]
 800a0e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a0e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a0ec:	226d      	movs	r2, #109	@ 0x6d
 800a0ee:	745a      	strb	r2, [r3, #17]
 800a0f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a0f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a0f8:	2269      	movs	r2, #105	@ 0x69
 800a0fa:	749a      	strb	r2, [r3, #18]
 800a0fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a100:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a104:	2270      	movs	r2, #112	@ 0x70
 800a106:	74da      	strb	r2, [r3, #19]
 800a108:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a10c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a110:	2233      	movs	r2, #51	@ 0x33
 800a112:	751a      	strb	r2, [r3, #20]
 800a114:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a118:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a11c:	2204      	movs	r2, #4
 800a11e:	755a      	strb	r2, [r3, #21]
 800a120:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a124:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a128:	22ff      	movs	r2, #255	@ 0xff
 800a12a:	759a      	strb	r2, [r3, #22]
 800a12c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a130:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a134:	22ff      	movs	r2, #255	@ 0xff
 800a136:	75da      	strb	r2, [r3, #23]
 800a138:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a13c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a140:	22ff      	movs	r2, #255	@ 0xff
 800a142:	761a      	strb	r2, [r3, #24]
 800a144:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a148:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a14c:	22ff      	movs	r2, #255	@ 0xff
 800a14e:	765a      	strb	r2, [r3, #25]
 800a150:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a154:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800a158:	22ff      	movs	r2, #255	@ 0xff
 800a15a:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800a15c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a160:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a168:	f103 011c 	add.w	r1, r3, #28
 800a16c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a170:	331c      	adds	r3, #28
 800a172:	2206      	movs	r2, #6
 800a174:	4618      	mov	r0, r3
 800a176:	f018 fb7e 	bl	8022876 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800a17a:	f107 030c 	add.w	r3, r7, #12
 800a17e:	3305      	adds	r3, #5
 800a180:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800a184:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	320c      	adds	r2, #12
 800a18c:	6812      	ldr	r2, [r2, #0]
 800a18e:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800a190:	f107 030c 	add.w	r3, r7, #12
 800a194:	330b      	adds	r3, #11
 800a196:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800a19a:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800a19e:	6812      	ldr	r2, [r2, #0]
 800a1a0:	3208      	adds	r2, #8
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800a1a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a1aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800a1ae:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800a1b2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800a1b6:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800a1ba:	4615      	mov	r5, r2
 800a1bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a1c4:	c403      	stmia	r4!, {r0, r1}
 800a1c6:	8022      	strh	r2, [r4, #0]
 800a1c8:	3402      	adds	r4, #2
 800a1ca:	0c13      	lsrs	r3, r2, #16
 800a1cc:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800a1ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a1d2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1da:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800a1de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a1e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800a1e6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800a1ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a1ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a1fc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800a200:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800a202:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a206:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	7f9b      	ldrb	r3, [r3, #30]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d01c      	beq.n	800a24c <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800a212:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a216:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a220:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800a228:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a22c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 800a236:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a23a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	3306      	adds	r3, #6
 800a244:	2206      	movs	r2, #6
 800a246:	4619      	mov	r1, r3
 800a248:	f018 fb15 	bl	8022876 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800a24c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a250:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	1d9d      	adds	r5, r3, #6
 800a25a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a25e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689e      	ldr	r6, [r3, #8]
 800a266:	2043      	movs	r0, #67	@ 0x43
 800a268:	f00b fec1 	bl	8015fee <mg_ntohs>
 800a26c:	4603      	mov	r3, r0
 800a26e:	4698      	mov	r8, r3
 800a270:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800a274:	2b01      	cmp	r3, #1
 800a276:	d005      	beq.n	800a284 <rx_dhcp_server+0x398>
 800a278:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a27c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800a280:	691c      	ldr	r4, [r3, #16]
 800a282:	e001      	b.n	800a288 <rx_dhcp_server+0x39c>
 800a284:	f04f 34ff 	mov.w	r4, #4294967295
 800a288:	2044      	movs	r0, #68	@ 0x44
 800a28a:	f00b feb0 	bl	8015fee <mg_ntohs>
 800a28e:	4603      	mov	r3, r0
 800a290:	461a      	mov	r2, r3
 800a292:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a296:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 800a29a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a29e:	9303      	str	r3, [sp, #12]
 800a2a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a2a4:	9302      	str	r3, [sp, #8]
 800a2a6:	9201      	str	r2, [sp, #4]
 800a2a8:	9400      	str	r4, [sp, #0]
 800a2aa:	4643      	mov	r3, r8
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	6800      	ldr	r0, [r0, #0]
 800a2b2:	f7ff f939 	bl	8009528 <tx_udp>
 800a2b6:	e000      	b.n	800a2ba <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a2b8:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800a2ba:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c4:	080249c0 	.word	0x080249c0

0800a2c8 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff fabc 	bl	8009858 <getpeer>
 800a2e0:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d059      	beq.n	800a39c <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	331c      	adds	r3, #28
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	69d2      	ldr	r2, [r2, #28]
 800a2fc:	320c      	adds	r2, #12
 800a2fe:	6812      	ldr	r2, [r2, #0]
 800a300:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	33b0      	adds	r3, #176	@ 0xb0
 800a306:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f103 0018 	add.w	r0, r3, #24
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	3306      	adds	r3, #6
 800a314:	2206      	movs	r2, #6
 800a316:	4619      	mov	r1, r3
 800a318:	f018 faad 	bl	8022876 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a320:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a324:	d304      	bcc.n	800a330 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800a326:	491f      	ldr	r1, [pc, #124]	@ (800a3a4 <rx_udp+0xdc>)
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7f8 f80b 	bl	8002344 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800a32e:	e035      	b.n	800a39c <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a338:	1ad2      	subs	r2, r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d212      	bcs.n	800a368 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	4413      	add	r3, r2
 800a352:	4619      	mov	r1, r3
 800a354:	f7fc fa8a 	bl	800686c <mg_iobuf_resize>
 800a358:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <rx_udp+0xa0>
      mg_error(c, "oom");
 800a35e:	4912      	ldr	r1, [pc, #72]	@ (800a3a8 <rx_udp+0xe0>)
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7f7 ffef 	bl	8002344 <mg_error>
}
 800a366:	e019      	b.n	800a39c <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a370:	18d0      	adds	r0, r2, r3
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6899      	ldr	r1, [r3, #8]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f018 fa7b 	bl	8022876 <memcpy>
      c->recv.len += pkt->pay.len;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	441a      	add	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	330c      	adds	r3, #12
 800a392:	461a      	mov	r2, r3
 800a394:	2107      	movs	r1, #7
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f7f7 ffb4 	bl	8002304 <mg_call>
}
 800a39c:	bf00      	nop
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	08024ad0 	.word	0x08024ad0
 800a3a8:	08024aec 	.word	0x08024aec

0800a3ac <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08c      	sub	sp, #48	@ 0x30
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
 800a3b8:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	689a      	ldr	r2, [r3, #8]
 800a3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3c0:	3314      	adds	r3, #20
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	68b9      	ldr	r1, [r7, #8]
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7ff f853 	bl	800947a <tx_ip>
 800a3d4:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	3314      	adds	r3, #20
 800a3da:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800a3dc:	2214      	movs	r2, #20
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6a38      	ldr	r0, [r7, #32]
 800a3e2:	f018 f8a4 	bl	802252e <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800a3e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d009      	beq.n	800a400 <tx_tcp+0x54>
 800a3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <tx_tcp+0x54>
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f018 f87d 	bl	80224fa <memmove>
  tcp->sport = sport;
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800a404:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a40a:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a410:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a416:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	78fa      	ldrb	r2, [r7, #3]
 800a41c:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800a41e:	f241 7070 	movw	r0, #6000	@ 0x1770
 800a422:	f00b fde4 	bl	8015fee <mg_ntohs>
 800a426:	4603      	mov	r3, r0
 800a428:	461a      	mov	r2, r3
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	2250      	movs	r2, #80	@ 0x50
 800a432:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800a438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3314      	adds	r3, #20
 800a43e:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800a440:	2300      	movs	r3, #0
 800a442:	753b      	strb	r3, [r7, #20]
 800a444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a446:	7a5b      	ldrb	r3, [r3, #9]
 800a448:	757b      	strb	r3, [r7, #21]
 800a44a:	8b7b      	ldrh	r3, [r7, #26]
 800a44c:	0a1b      	lsrs	r3, r3, #8
 800a44e:	b29b      	uxth	r3, r3
 800a450:	b2db      	uxtb	r3, r3
 800a452:	75bb      	strb	r3, [r7, #22]
 800a454:	8b7b      	ldrh	r3, [r7, #26]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800a45a:	8b7b      	ldrh	r3, [r7, #26]
 800a45c:	461a      	mov	r2, r3
 800a45e:	6a39      	ldr	r1, [r7, #32]
 800a460:	69f8      	ldr	r0, [r7, #28]
 800a462:	f7fe fec1 	bl	80091e8 <csumup>
 800a466:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46a:	330c      	adds	r3, #12
 800a46c:	2204      	movs	r2, #4
 800a46e:	4619      	mov	r1, r3
 800a470:	69f8      	ldr	r0, [r7, #28]
 800a472:	f7fe feb9 	bl	80091e8 <csumup>
 800a476:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	3310      	adds	r3, #16
 800a47c:	2204      	movs	r2, #4
 800a47e:	4619      	mov	r1, r3
 800a480:	69f8      	ldr	r0, [r7, #28]
 800a482:	f7fe feb1 	bl	80091e8 <csumup>
 800a486:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800a488:	f107 0314 	add.w	r3, r7, #20
 800a48c:	2204      	movs	r2, #4
 800a48e:	4619      	mov	r1, r3
 800a490:	69f8      	ldr	r0, [r7, #28]
 800a492:	f7fe fea9 	bl	80091e8 <csumup>
 800a496:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800a498:	69f8      	ldr	r0, [r7, #28]
 800a49a:	f7fe fed0 	bl	800923e <csumfin>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	f103 0214 	add.w	r2, r3, #20
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4b6:	4413      	add	r3, r2
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7fe ff2b 	bl	8009316 <ether_output>
 800a4c0:	4603      	mov	r3, r0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3728      	adds	r7, #40	@ 0x28
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800a4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ce:	b08c      	sub	sp, #48	@ 0x30
 800a4d0:	af06      	add	r7, sp, #24
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e0:	7b5b      	ldrb	r3, [r3, #13]
 800a4e2:	f003 0303 	and.w	r3, r3, #3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bf14      	ite	ne
 800a4ea:	2301      	movne	r3, #1
 800a4ec:	2300      	moveq	r3, #0
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	1d9e      	adds	r6, r3, #6
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a504:	885b      	ldrh	r3, [r3, #2]
 800a506:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	4618      	mov	r0, r3
 800a518:	f00b fd50 	bl	8015fbc <mg_ntohl>
 800a51c:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	4413      	add	r3, r2
 800a522:	4618      	mov	r0, r3
 800a524:	f00b fd4a 	bl	8015fbc <mg_ntohl>
 800a528:	4601      	mov	r1, r0
 800a52a:	79fa      	ldrb	r2, [r7, #7]
 800a52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52e:	9305      	str	r3, [sp, #20]
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	9304      	str	r3, [sp, #16]
 800a534:	9103      	str	r1, [sp, #12]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	9302      	str	r3, [sp, #8]
 800a53a:	9501      	str	r5, [sp, #4]
 800a53c:	9400      	str	r4, [sp, #0]
 800a53e:	4613      	mov	r3, r2
 800a540:	4642      	mov	r2, r8
 800a542:	4631      	mov	r1, r6
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff ff31 	bl	800a3ac <tx_tcp>
 800a54a:	4603      	mov	r3, r0
                buf, len);
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a556 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800a556:	b5b0      	push	{r4, r5, r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe fc3e 	bl	8008de6 <mg_alloc_conn>
 800a56a:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <accept_conn+0x20>
    MG_ERROR(("OOM"));
    return NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	e075      	b.n	800a662 <accept_conn+0x10c>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	33b0      	adds	r3, #176	@ 0xb0
 800a57a:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	4618      	mov	r0, r3
 800a584:	f00b fd1a 	bl	8015fbc <mg_ntohl>
 800a588:	4602      	mov	r2, r0
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	4618      	mov	r0, r3
 800a596:	f00b fd11 	bl	8015fbc <mg_ntohl>
 800a59a:	4602      	mov	r2, r0
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	f103 0018 	add.w	r0, r3, #24
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	3306      	adds	r3, #6
 800a5ac:	2206      	movs	r2, #6
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	f018 f961 	bl	8022876 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7fe fe6f 	bl	800929a <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	331c      	adds	r3, #28
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	69d2      	ldr	r2, [r2, #28]
 800a5c4:	320c      	adds	r2, #12
 800a5c6:	6812      	ldr	r2, [r2, #0]
 800a5c8:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800a5ee:	f043 0304 	orr.w	r3, r3, #4
 800a5f2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a5fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a600:	b2d9      	uxtb	r1, r3
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800a608:	f361 03c3 	bfi	r3, r1, #3, #1
 800a60c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f102 0408 	add.w	r4, r2, #8
 800a624:	f103 0508 	add.w	r5, r3, #8
 800a628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a62a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 800a64c:	2200      	movs	r2, #0
 800a64e:	2101      	movs	r1, #1
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f7f7 fe57 	bl	8002304 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800a656:	2200      	movs	r2, #0
 800a658:	2105      	movs	r1, #5
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7f7 fe52 	bl	8002304 <mg_call>
  return c;
 800a660:	68fb      	ldr	r3, [r7, #12]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bdb0      	pop	{r4, r5, r7, pc}

0800a66a <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800a66a:	b480      	push	{r7}
 800a66c:	b08b      	sub	sp, #44	@ 0x2c
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a67a:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800a67c:	230e      	movs	r3, #14
 800a67e:	623b      	str	r3, [r7, #32]
 800a680:	2318      	movs	r3, #24
 800a682:	61fb      	str	r3, [r7, #28]
 800a684:	233c      	movs	r3, #60	@ 0x3c
 800a686:	61bb      	str	r3, [r7, #24]
 800a688:	2308      	movs	r3, #8
 800a68a:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800a68c:	6a3a      	ldr	r2, [r7, #32]
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	441a      	add	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <trim_len+0x3c>
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	e000      	b.n	800a6a8 <trim_len+0x3e>
 800a6a6:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800a6a8:	4413      	add	r3, r2
 800a6aa:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d103      	bne.n	800a6c4 <trim_len+0x5a>
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	e000      	b.n	800a6c6 <trim_len+0x5c>
 800a6c4:	2344      	movs	r3, #68	@ 0x44
 800a6c6:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	441a      	add	r2, r3
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d904      	bls.n	800a6e0 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d8:	699a      	ldr	r2, [r3, #24]
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d904      	bls.n	800a6f8 <trim_len+0x8e>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
    ifp->mtu = (uint16_t) min_mtu;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	441a      	add	r2, r3
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a704:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 800a708:	4293      	cmp	r3, r2
 800a70a:	d908      	bls.n	800a71e <trim_len+0xb4>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800a70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a712:	461a      	mov	r2, r3
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	6a3a      	ldr	r2, [r7, #32]
 800a71a:	4413      	add	r3, r2
 800a71c:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
    }
  }

  return len;
 800a71e:	683b      	ldr	r3, [r7, #0]
}
 800a720:	4618      	mov	r0, r3
 800a722:	372c      	adds	r7, #44	@ 0x2c
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72e:	b08f      	sub	sp, #60	@ 0x3c
 800a730:	af06      	add	r7, sp, #24
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a73e:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	33b0      	adds	r3, #176	@ 0xb0
 800a744:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	331c      	adds	r3, #28
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800a74e:	6879      	ldr	r1, [r7, #4]
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f7ff ff8a 	bl	800a66a <trim_len>
 800a756:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d015      	beq.n	800a794 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	f103 0118 	add.w	r1, r3, #24
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	6898      	ldr	r0, [r3, #8]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8b1c      	ldrh	r4, [r3, #24]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	9203      	str	r2, [sp, #12]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	9202      	str	r2, [sp, #8]
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	4623      	mov	r3, r4
 800a78a:	4602      	mov	r2, r0
 800a78c:	69f8      	ldr	r0, [r7, #28]
 800a78e:	f7fe fecb 	bl	8009528 <tx_udp>
 800a792:	e03d      	b.n	800a810 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	f103 0618 	add.w	r6, r3, #24
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	8b1c      	ldrh	r4, [r3, #24]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f00b fc08 	bl	8015fbc <mg_ntohl>
 800a7ac:	6038      	str	r0, [r7, #0]
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f00b fc02 	bl	8015fbc <mg_ntohl>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	9305      	str	r3, [sp, #20]
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	9203      	str	r2, [sp, #12]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	9302      	str	r3, [sp, #8]
 800a7c8:	9501      	str	r5, [sp, #4]
 800a7ca:	9400      	str	r4, [sp, #0]
 800a7cc:	2318      	movs	r3, #24
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	69f8      	ldr	r0, [r7, #28]
 800a7d4:	f7ff fdea 	bl	800a3ac <tx_tcp>
 800a7d8:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <mg_io_send+0xba>
      return MG_IO_WAIT;
 800a7e0:	f06f 0301 	mvn.w	r3, #1
 800a7e4:	e015      	b.n	800a812 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ec:	d102      	bne.n	800a7f4 <mg_io_send+0xc8>
      return MG_IO_ERR;
 800a7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f2:	e00e      	b.n	800a812 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	441a      	add	r2, r3
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	7f9b      	ldrb	r3, [r3, #30]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d103      	bne.n	800a810 <mg_io_send+0xe4>
 800a808:	2100      	movs	r1, #0
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7fe fd45 	bl	800929a <settmout>
    }
  }
  return (long) len;
 800a810:	687b      	ldr	r3, [r7, #4]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3724      	adds	r7, #36	@ 0x24
 800a816:	46bd      	mov	sp, r7
 800a818:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a81c <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	18d1      	adds	r1, r2, r3
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f006 f8d3 	bl	80109e8 <mg_tls_recv>
 800a842:	4603      	mov	r3, r0
 800a844:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d104      	bne.n	800a858 <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 800a84e:	490c      	ldr	r1, [pc, #48]	@ (800a880 <handle_tls_recv+0x64>)
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7f7 fd77 	bl	8002344 <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 800a856:	e00f      	b.n	800a878 <handle_tls_recv+0x5c>
  } else if (n > 0) {
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	dd0c      	ble.n	800a878 <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	441a      	add	r2, r3
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 800a86a:	f107 030c 	add.w	r3, r7, #12
 800a86e:	461a      	mov	r2, r3
 800a870:	2107      	movs	r1, #7
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7f7 fd46 	bl	8002304 <mg_call>
}
 800a878:	bf00      	nop
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	08024af0 	.word	0x08024af0

0800a884 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800a884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a888:	b090      	sub	sp, #64	@ 0x40
 800a88a:	af06      	add	r7, sp, #24
 800a88c:	60f8      	str	r0, [r7, #12]
 800a88e:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	33b0      	adds	r3, #176	@ 0xb0
 800a894:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d002      	beq.n	800a8ac <read_conn+0x28>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	3368      	adds	r3, #104	@ 0x68
 800a8aa:	e001      	b.n	800a8b0 <read_conn+0x2c>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3338      	adds	r3, #56	@ 0x38
 800a8b0:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f00b fb7f 	bl	8015fbc <mg_ntohl>
 800a8be:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	331c      	adds	r3, #28
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8cc:	7b5b      	ldrb	r3, [r3, #13]
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d070      	beq.n	800a9b8 <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 800a8d6:	2310      	movs	r3, #16
 800a8d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f00b fb6a 	bl	8015fbc <mg_ntohl>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d01e      	beq.n	800a944 <read_conn+0xc0>
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	7f9b      	ldrb	r3, [r3, #30]
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	d11a      	bne.n	800a944 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	681c      	ldr	r4, [r3, #0]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	4618      	mov	r0, r3
 800a91a:	f00b fb4f 	bl	8015fbc <mg_ntohl>
 800a91e:	4603      	mov	r3, r0
 800a920:	429c      	cmp	r4, r3
 800a922:	d105      	bne.n	800a930 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	1c5a      	adds	r2, r3, #1
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800a92e:	e01a      	b.n	800a966 <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	4618      	mov	r0, r3
 800a938:	f00b fb40 	bl	8015fbc <mg_ntohl>
 800a93c:	4602      	mov	r2, r0
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800a942:	e010      	b.n	800a966 <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 800a944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a948:	f043 0301 	orr.w	r3, r3, #1
 800a94c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800a956:	f043 0310 	orr.w	r3, r3, #16
 800a95a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 800a95e:	2104      	movs	r1, #4
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7fe fc9a 	bl	800929a <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	f103 0818 	add.w	r8, r3, #24
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	607b      	str	r3, [r7, #4]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8b1c      	ldrh	r4, [r3, #24]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4618      	mov	r0, r3
 800a984:	f00b fb1a 	bl	8015fbc <mg_ntohl>
 800a988:	6038      	str	r0, [r7, #0]
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	4618      	mov	r0, r3
 800a990:	f00b fb14 	bl	8015fbc <mg_ntohl>
 800a994:	4602      	mov	r2, r0
 800a996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a99a:	2100      	movs	r1, #0
 800a99c:	9105      	str	r1, [sp, #20]
 800a99e:	4993      	ldr	r1, [pc, #588]	@ (800abec <read_conn+0x368>)
 800a9a0:	9104      	str	r1, [sp, #16]
 800a9a2:	9203      	str	r2, [sp, #12]
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	9102      	str	r1, [sp, #8]
 800a9a8:	9501      	str	r5, [sp, #4]
 800a9aa:	9400      	str	r4, [sp, #0]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	4641      	mov	r1, r8
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7ff fcfb 	bl	800a3ac <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800a9b6:	e113      	b.n	800abe0 <read_conn+0x35c>
  } else if (pkt->pay.len == 0) {
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 810f 	beq.w	800abe0 <read_conn+0x35c>
  } else if (seq != s->ack) {
 800a9c2:	6a3b      	ldr	r3, [r7, #32]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d038      	beq.n	800aa3e <read_conn+0x1ba>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f00b faf2 	bl	8015fbc <mg_ntohl>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	f000 80f9 	beq.w	800abe0 <read_conn+0x35c>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	f103 0818 	add.w	r8, r3, #24
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	607b      	str	r3, [r7, #4]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8b1c      	ldrh	r4, [r3, #24]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f00b fad6 	bl	8015fbc <mg_ntohl>
 800aa10:	6038      	str	r0, [r7, #0]
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f00b fad0 	bl	8015fbc <mg_ntohl>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2200      	movs	r2, #0
 800aa20:	9205      	str	r2, [sp, #20]
 800aa22:	4a72      	ldr	r2, [pc, #456]	@ (800abec <read_conn+0x368>)
 800aa24:	9204      	str	r2, [sp, #16]
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	9102      	str	r1, [sp, #8]
 800aa2c:	9501      	str	r5, [sp, #4]
 800aa2e:	9400      	str	r4, [sp, #0]
 800aa30:	2310      	movs	r3, #16
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	4641      	mov	r1, r8
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff fcb8 	bl	800a3ac <tx_tcp>
}
 800aa3c:	e0d0      	b.n	800abe0 <read_conn+0x35c>
  } else if (io->size - io->len < pkt->pay.len &&
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	1ad2      	subs	r2, r2, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d210      	bcs.n	800aa72 <read_conn+0x1ee>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	4413      	add	r3, r2
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	69f8      	ldr	r0, [r7, #28]
 800aa5e:	f7fb ff05 	bl	800686c <mg_iobuf_resize>
 800aa62:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d104      	bne.n	800aa72 <read_conn+0x1ee>
    mg_error(c, "oom");
 800aa68:	4961      	ldr	r1, [pc, #388]	@ (800abf0 <read_conn+0x36c>)
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f7f7 fc6a 	bl	8002344 <mg_error>
 800aa70:	e0b6      	b.n	800abe0 <read_conn+0x35c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	18d0      	adds	r0, r2, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	6899      	ldr	r1, [r3, #8]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	461a      	mov	r2, r3
 800aa86:	f017 fef6 	bl	8022876 <memcpy>
    io->len += pkt->pay.len;
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	689a      	ldr	r2, [r3, #8]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	441a      	add	r2, r3
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	609a      	str	r2, [r3, #8]
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f00b fa8c 	bl	8015fbc <mg_ntohl>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	441a      	add	r2, r3
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	695a      	ldr	r2, [r3, #20]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	441a      	add	r2, r3
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d93c      	bls.n	800ab44 <read_conn+0x2c0>
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	691a      	ldr	r2, [r3, #16]
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d036      	beq.n	800ab44 <read_conn+0x2c0>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	f103 0818 	add.w	r8, r3, #24
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	607b      	str	r3, [r7, #4]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	8b1c      	ldrh	r4, [r3, #24]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f00b fa62 	bl	8015fbc <mg_ntohl>
 800aaf8:	6038      	str	r0, [r7, #0]
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f00b fa5c 	bl	8015fbc <mg_ntohl>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2200      	movs	r2, #0
 800ab08:	9205      	str	r2, [sp, #20]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	9204      	str	r2, [sp, #16]
 800ab0e:	9303      	str	r3, [sp, #12]
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	9102      	str	r1, [sp, #8]
 800ab14:	9501      	str	r5, [sp, #4]
 800ab16:	9400      	str	r4, [sp, #0]
 800ab18:	2310      	movs	r3, #16
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f7ff fc44 	bl	800a3ac <tx_tcp>
      s->unacked = 0;
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	2200      	movs	r2, #0
 800ab28:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	7f9b      	ldrb	r3, [r3, #30]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00c      	beq.n	800ab54 <read_conn+0x2d0>
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f7fe fbac 	bl	800929a <settmout>
 800ab42:	e007      	b.n	800ab54 <read_conn+0x2d0>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	7f9b      	ldrb	r3, [r3, #30]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d003      	beq.n	800ab54 <read_conn+0x2d0>
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7fe fba3 	bl	800929a <settmout>
    if (c->is_tls && c->is_tls_hs) {
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ab5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00b      	beq.n	800ab7c <read_conn+0x2f8>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ab6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <read_conn+0x2f8>
      mg_tls_handshake(c);
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f005 fd21 	bl	80105bc <mg_tls_handshake>
 800ab7a:	e031      	b.n	800abe0 <read_conn+0x35c>
    } else if (c->is_tls) {
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ab82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d021      	beq.n	800abd0 <read_conn+0x34c>
      io = &c->recv;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3338      	adds	r3, #56	@ 0x38
 800ab90:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	1ad2      	subs	r2, r2, r3
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d210      	bcs.n	800abc6 <read_conn+0x342>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	689a      	ldr	r2, [r3, #8]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	4413      	add	r3, r2
 800abae:	4619      	mov	r1, r3
 800abb0:	69f8      	ldr	r0, [r7, #28]
 800abb2:	f7fb fe5b 	bl	800686c <mg_iobuf_resize>
 800abb6:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d104      	bne.n	800abc6 <read_conn+0x342>
        mg_error(c, "oom");
 800abbc:	490c      	ldr	r1, [pc, #48]	@ (800abf0 <read_conn+0x36c>)
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7f7 fbc0 	bl	8002344 <mg_error>
 800abc4:	e00c      	b.n	800abe0 <read_conn+0x35c>
        handle_tls_recv(c, io);
 800abc6:	69f9      	ldr	r1, [r7, #28]
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f7ff fe27 	bl	800a81c <handle_tls_recv>
}
 800abce:	e007      	b.n	800abe0 <read_conn+0x35c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	330c      	adds	r3, #12
 800abd4:	461a      	mov	r2, r3
 800abd6:	2107      	movs	r1, #7
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7f7 fb93 	bl	8002304 <mg_call>
}
 800abde:	e7ff      	b.n	800abe0 <read_conn+0x35c>
 800abe0:	bf00      	nop
 800abe2:	3728      	adds	r7, #40	@ 0x28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abea:	bf00      	nop
 800abec:	08024230 	.word	0x08024230
 800abf0:	08024aec 	.word	0x08024aec

0800abf4 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800abf4:	b590      	push	{r4, r7, lr}
 800abf6:	b089      	sub	sp, #36	@ 0x24
 800abf8:	af02      	add	r7, sp, #8
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac02:	2200      	movs	r2, #0
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fe26 	bl	8009858 <getpeer>
 800ac0c:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <rx_tcp+0x26>
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	33b0      	adds	r3, #176	@ 0xb0
 800ac18:	e000      	b.n	800ac1c <rx_tcp+0x28>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d048      	beq.n	800acb6 <rx_tcp+0xc2>
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ac2a:	f003 0320 	and.w	r3, r3, #32
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d040      	beq.n	800acb6 <rx_tcp+0xc2>
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac38:	7b5b      	ldrb	r3, [r3, #13]
 800ac3a:	2b12      	cmp	r3, #18
 800ac3c:	d13b      	bne.n	800acb6 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f00b f9b9 	bl	8015fbc <mg_ntohl>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f00b f9b0 	bl	8015fbc <mg_ntohl>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	9201      	str	r2, [sp, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	9200      	str	r2, [sp, #0]
 800ac72:	2210      	movs	r2, #16
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7ff fc27 	bl	800a4ca <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800ac82:	f36f 1345 	bfc	r3, #5, #1
 800ac86:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6978      	ldr	r0, [r7, #20]
 800ac8e:	f7fe fb04 	bl	800929a <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800ac92:	2200      	movs	r2, #0
 800ac94:	2104      	movs	r1, #4
 800ac96:	6978      	ldr	r0, [r7, #20]
 800ac98:	f7f7 fb34 	bl	8002304 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800aca2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 80cd 	beq.w	800ae48 <rx_tcp+0x254>
 800acae:	6978      	ldr	r0, [r7, #20]
 800acb0:	f005 fc84 	bl	80105bc <mg_tls_handshake>
 800acb4:	e0c8      	b.n	800ae48 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d019      	beq.n	800acf0 <rx_tcp+0xfc>
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800acc2:	f003 0320 	and.w	r3, r3, #32
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d011      	beq.n	800acf0 <rx_tcp+0xfc>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd0:	7b5b      	ldrb	r3, [r3, #13]
 800acd2:	2b10      	cmp	r3, #16
 800acd4:	d00c      	beq.n	800acf0 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	2200      	movs	r2, #0
 800acde:	9201      	str	r2, [sp, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	9200      	str	r2, [sp, #0]
 800ace4:	2214      	movs	r2, #20
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff fbee 	bl	800a4ca <tx_tcp_pkt>
 800acee:	e0ab      	b.n	800ae48 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00b      	beq.n	800ad0e <rx_tcp+0x11a>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acfa:	7b5b      	ldrb	r3, [r3, #13]
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d004      	beq.n	800ad0e <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800ad04:	4952      	ldr	r1, [pc, #328]	@ (800ae50 <rx_tcp+0x25c>)
 800ad06:	6978      	ldr	r0, [r7, #20]
 800ad08:	f7f7 fb1c 	bl	8002344 <mg_error>
 800ad0c:	e09c      	b.n	800ae48 <rx_tcp+0x254>
  } else if (c != NULL) {
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00f      	beq.n	800ad34 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2200      	movs	r2, #0
 800ad18:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	7f9b      	ldrb	r3, [r3, #30]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d103      	bne.n	800ad2a <rx_tcp+0x136>
      settmout(c,
 800ad22:	2100      	movs	r1, #0
 800ad24:	6978      	ldr	r0, [r7, #20]
 800ad26:	f7fe fab8 	bl	800929a <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6978      	ldr	r0, [r7, #20]
 800ad2e:	f7ff fda9 	bl	800a884 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800ad32:	e089      	b.n	800ae48 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad38:	2201      	movs	r2, #1
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fd8b 	bl	8009858 <getpeer>
 800ad42:	6178      	str	r0, [r7, #20]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10c      	bne.n	800ad64 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	2200      	movs	r2, #0
 800ad52:	9201      	str	r2, [sp, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	9200      	str	r2, [sp, #0]
 800ad58:	2214      	movs	r2, #20
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fbb4 	bl	800a4ca <tx_tcp_pkt>
}
 800ad62:	e071      	b.n	800ae48 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad68:	7b5b      	ldrb	r3, [r3, #13]
 800ad6a:	f003 0304 	and.w	r3, r3, #4
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00c      	beq.n	800ad8c <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d062      	beq.n	800ae48 <rx_tcp+0x254>
 800ad82:	4933      	ldr	r1, [pc, #204]	@ (800ae50 <rx_tcp+0x25c>)
 800ad84:	6978      	ldr	r0, [r7, #20]
 800ad86:	f7f7 fadd 	bl	8002344 <mg_error>
}
 800ad8a:	e05d      	b.n	800ae48 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad90:	7b5b      	ldrb	r3, [r3, #13]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d016      	beq.n	800adc8 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	4618      	mov	r0, r3
 800ada4:	f00b f923 	bl	8015fee <mg_ntohs>
 800ada8:	4603      	mov	r3, r0
 800adaa:	4618      	mov	r0, r3
 800adac:	f00b f906 	bl	8015fbc <mg_ntohl>
 800adb0:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800adb2:	2300      	movs	r3, #0
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	2300      	movs	r3, #0
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2212      	movs	r2, #18
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff fb82 	bl	800a4ca <tx_tcp_pkt>
}
 800adc6:	e03f      	b.n	800ae48 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adcc:	7b5b      	ldrb	r3, [r3, #13]
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00c      	beq.n	800adf0 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	2200      	movs	r2, #0
 800adde:	9201      	str	r2, [sp, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	9200      	str	r2, [sp, #0]
 800ade4:	2211      	movs	r2, #17
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff fb6e 	bl	800a4ca <tx_tcp_pkt>
}
 800adee:	e02b      	b.n	800ae48 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f00b f8e0 	bl	8015fbc <mg_ntohl>
 800adfc:	4604      	mov	r4, r0
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	4618      	mov	r0, r3
 800ae08:	f00b f8f1 	bl	8015fee <mg_ntohs>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	3301      	adds	r3, #1
 800ae10:	429c      	cmp	r4, r3
 800ae12:	d104      	bne.n	800ae1e <rx_tcp+0x22a>
    accept_conn(c, pkt);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6978      	ldr	r0, [r7, #20]
 800ae18:	f7ff fb9d 	bl	800a556 <accept_conn>
}
 800ae1c:	e014      	b.n	800ae48 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10c      	bne.n	800ae48 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	2200      	movs	r2, #0
 800ae36:	9201      	str	r2, [sp, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	9200      	str	r2, [sp, #0]
 800ae3c:	2214      	movs	r2, #20
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff fb42 	bl	800a4ca <tx_tcp_pkt>
}
 800ae46:	e7ff      	b.n	800ae48 <rx_tcp+0x254>
 800ae48:	bf00      	nop
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd90      	pop	{r4, r7, pc}
 800ae50:	08024b00 	.word	0x08024b00

0800ae54 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ae54:	b590      	push	{r4, r7, lr}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	88db      	ldrh	r3, [r3, #6]
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	4618      	mov	r0, r3
 800ae68:	f00b f8c1 	bl	8015fee <mg_ntohs>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	827b      	strh	r3, [r7, #18]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800ae70:	8a7b      	ldrh	r3, [r7, #18]
 800ae72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d104      	bne.n	800ae84 <rx_ip+0x30>
 800ae7a:	8a7b      	ldrh	r3, [r7, #18]
 800ae7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d026      	beq.n	800aed2 <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	7a5b      	ldrb	r3, [r3, #9]
 800ae8a:	2b11      	cmp	r3, #17
 800ae8c:	d105      	bne.n	800ae9a <rx_ip+0x46>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	f103 0214 	add.w	r2, r3, #20
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	7a5b      	ldrb	r3, [r3, #9]
 800aea0:	2b06      	cmp	r3, #6
 800aea2:	d105      	bne.n	800aeb0 <rx_ip+0x5c>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	f103 0214 	add.w	r2, r3, #20
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fccd 	bl	8009858 <getpeer>
 800aebe:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 80b6 	beq.w	800b034 <rx_ip+0x1e0>
 800aec8:	495f      	ldr	r1, [pc, #380]	@ (800b048 <rx_ip+0x1f4>)
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f7f7 fa3a 	bl	8002344 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800aed0:	e0b0      	b.n	800b034 <rx_ip+0x1e0>
  } else if (pkt->ip->proto == 1) {
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	7a5b      	ldrb	r3, [r3, #9]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d116      	bne.n	800af0a <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	f103 0214 	add.w	r2, r3, #20
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	f240 80a3 	bls.w	800b038 <rx_ip+0x1e4>
    mkpay(pkt, pkt->icmp + 1);
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef6:	3304      	adds	r3, #4
 800aef8:	4619      	mov	r1, r3
 800aefa:	6838      	ldr	r0, [r7, #0]
 800aefc:	f7fe f956 	bl	80091ac <mkpay>
    rx_icmp(ifp, pkt);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7fe fded 	bl	8009ae2 <rx_icmp>
 800af08:	e09b      	b.n	800b042 <rx_ip+0x1ee>
  } else if (pkt->ip->proto == 17) {
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	7a5b      	ldrb	r3, [r3, #9]
 800af10:	2b11      	cmp	r3, #17
 800af12:	d158      	bne.n	800afc6 <rx_ip+0x172>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	f103 0214 	add.w	r2, r3, #20
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	2b07      	cmp	r3, #7
 800af26:	f240 8089 	bls.w	800b03c <rx_ip+0x1e8>
    mkpay(pkt, pkt->udp + 1);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2e:	3308      	adds	r3, #8
 800af30:	4619      	mov	r1, r3
 800af32:	6838      	ldr	r0, [r7, #0]
 800af34:	f7fe f93a 	bl	80091ac <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7f1b      	ldrb	r3, [r3, #28]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01c      	beq.n	800af7a <rx_ip+0x126>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af44:	885b      	ldrh	r3, [r3, #2]
 800af46:	b29c      	uxth	r4, r3
 800af48:	2044      	movs	r0, #68	@ 0x44
 800af4a:	f00b f850 	bl	8015fee <mg_ntohs>
 800af4e:	4603      	mov	r3, r0
 800af50:	429c      	cmp	r4, r3
 800af52:	d112      	bne.n	800af7a <rx_ip+0x126>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af58:	f103 0208 	add.w	r2, r3, #8
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af64:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800af68:	4619      	mov	r1, r3
 800af6a:	6838      	ldr	r0, [r7, #0]
 800af6c:	f7fe f91e 	bl	80091ac <mkpay>
      rx_dhcp_client(ifp, pkt);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7fe fe11 	bl	8009b9a <rx_dhcp_client>
 800af78:	e063      	b.n	800b042 <rx_ip+0x1ee>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	7f5b      	ldrb	r3, [r3, #29]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d01c      	beq.n	800afbc <rx_ip+0x168>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af86:	885b      	ldrh	r3, [r3, #2]
 800af88:	b29c      	uxth	r4, r3
 800af8a:	2043      	movs	r0, #67	@ 0x43
 800af8c:	f00b f82f 	bl	8015fee <mg_ntohs>
 800af90:	4603      	mov	r3, r0
 800af92:	429c      	cmp	r4, r3
 800af94:	d112      	bne.n	800afbc <rx_ip+0x168>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9a:	f103 0208 	add.w	r2, r3, #8
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800afaa:	4619      	mov	r1, r3
 800afac:	6838      	ldr	r0, [r7, #0]
 800afae:	f7fe f8fd 	bl	80091ac <mkpay>
      rx_dhcp_server(ifp, pkt);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7fe ff99 	bl	8009eec <rx_dhcp_server>
 800afba:	e042      	b.n	800b042 <rx_ip+0x1ee>
    } else {
      rx_udp(ifp, pkt);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff f982 	bl	800a2c8 <rx_udp>
 800afc4:	e03d      	b.n	800b042 <rx_ip+0x1ee>
    }
  } else if (pkt->ip->proto == 6) {
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	7a5b      	ldrb	r3, [r3, #9]
 800afcc:	2b06      	cmp	r3, #6
 800afce:	d138      	bne.n	800b042 <rx_ip+0x1ee>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	f103 0214 	add.w	r2, r3, #20
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	2b13      	cmp	r3, #19
 800afe2:	d92d      	bls.n	800b040 <rx_ip+0x1ec>
    mkpay(pkt, pkt->tcp + 1);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe8:	3314      	adds	r3, #20
 800afea:	4619      	mov	r1, r3
 800afec:	6838      	ldr	r0, [r7, #0]
 800afee:	f7fe f8dd 	bl	80091ac <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	885b      	ldrh	r3, [r3, #2]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	4618      	mov	r0, r3
 800affc:	f00a fff7 	bl	8015fee <mg_ntohs>
 800b000:	4603      	mov	r3, r0
 800b002:	82fb      	strh	r3, [r7, #22]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b008:	7b1b      	ldrb	r3, [r3, #12]
 800b00a:	091b      	lsrs	r3, r3, #4
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	3305      	adds	r3, #5
 800b010:	b29b      	uxth	r3, r3
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	82bb      	strh	r3, [r7, #20]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800b016:	8afa      	ldrh	r2, [r7, #22]
 800b018:	8abb      	ldrh	r3, [r7, #20]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d305      	bcc.n	800b02a <rx_ip+0x1d6>
 800b01e:	8afa      	ldrh	r2, [r7, #22]
 800b020:	8abb      	ldrh	r3, [r7, #20]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	461a      	mov	r2, r3
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7ff fde1 	bl	800abf4 <rx_tcp>
 800b032:	e006      	b.n	800b042 <rx_ip+0x1ee>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800b034:	bf00      	nop
 800b036:	e004      	b.n	800b042 <rx_ip+0x1ee>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800b038:	bf00      	nop
 800b03a:	e002      	b.n	800b042 <rx_ip+0x1ee>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800b03c:	bf00      	nop
 800b03e:	e000      	b.n	800b042 <rx_ip+0x1ee>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800b040:	bf00      	nop
  }
}
 800b042:	371c      	adds	r7, #28
 800b044:	46bd      	mov	sp, r7
 800b046:	bd90      	pop	{r4, r7, pc}
 800b048:	08024b0c 	.word	0x08024b0c

0800b04c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	799b      	ldrb	r3, [r3, #6]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d004      	beq.n	800b06a <rx_ip6+0x1e>
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	6a1b      	ldr	r3, [r3, #32]
 800b064:	799b      	ldrb	r3, [r3, #6]
 800b066:	2b3a      	cmp	r3, #58	@ 0x3a
 800b068:	d115      	bne.n	800b096 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d922      	bls.n	800b0c4 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	6838      	ldr	r0, [r7, #0]
 800b088:	f7fe f890 	bl	80091ac <mkpay>
    rx_icmp(ifp, pkt);
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7fe fd27 	bl	8009ae2 <rx_icmp>
 800b094:	e019      	b.n	800b0ca <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	799b      	ldrb	r3, [r3, #6]
 800b09c:	2b11      	cmp	r3, #17
 800b09e:	d114      	bne.n	800b0ca <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	2b07      	cmp	r3, #7
 800b0b2:	d909      	bls.n	800b0c8 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6838      	ldr	r0, [r7, #0]
 800b0be:	f7fe f875 	bl	80091ac <mkpay>
 800b0c2:	e002      	b.n	800b0ca <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800b0c4:	bf00      	nop
 800b0c6:	e000      	b.n	800b0ca <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800b0c8:	bf00      	nop
  }
}
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b093      	sub	sp, #76	@ 0x4c
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800b0dc:	f107 0314 	add.w	r3, r7, #20
 800b0e0:	2234      	movs	r2, #52	@ 0x34
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f017 fa22 	bl	802252e <memset>
  pkt.raw.buf = (char *) buf;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	2b0d      	cmp	r3, #13
 800b0fa:	f240 80c9 	bls.w	800b290 <mg_tcpip_rx+0x1c0>
  if (ifp->enable_mac_check &&
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b104:	2b00      	cmp	r3, #0
 800b106:	d013      	beq.n	800b130 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800b108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10a:	4618      	mov	r0, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2206      	movs	r2, #6
 800b110:	4619      	mov	r1, r3
 800b112:	f017 f9e2 	bl	80224da <memcmp>
 800b116:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d009      	beq.n	800b130 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800b11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11e:	2206      	movs	r2, #6
 800b120:	4965      	ldr	r1, [pc, #404]	@ (800b2b8 <mg_tcpip_rx+0x1e8>)
 800b122:	4618      	mov	r0, r3
 800b124:	f017 f9d9 	bl	80224da <memcmp>
 800b128:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f040 80b2 	bne.w	800b294 <mg_tcpip_rx+0x1c4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b136:	2b00      	cmp	r3, #0
 800b138:	d01a      	beq.n	800b170 <mg_tcpip_rx+0xa0>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	d917      	bls.n	800b170 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3b04      	subs	r3, #4
 800b144:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	2000      	movs	r0, #0
 800b14c:	f00a ff66 	bl	801601c <mg_crc32>
 800b150:	4603      	mov	r3, r0
 800b152:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4413      	add	r3, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f107 0310 	add.w	r3, r7, #16
 800b160:	2204      	movs	r2, #4
 800b162:	4619      	mov	r1, r3
 800b164:	f017 f9b9 	bl	80224da <memcmp>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f040 8094 	bne.w	800b298 <mg_tcpip_rx+0x1c8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	899b      	ldrh	r3, [r3, #12]
 800b174:	b29c      	uxth	r4, r3
 800b176:	f640 0006 	movw	r0, #2054	@ 0x806
 800b17a:	f00a ff38 	bl	8015fee <mg_ntohs>
 800b17e:	4603      	mov	r3, r0
 800b180:	429c      	cmp	r4, r3
 800b182:	d114      	bne.n	800b1ae <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800b184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b186:	330e      	adds	r3, #14
 800b188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	2b29      	cmp	r3, #41	@ 0x29
 800b18e:	f240 8085 	bls.w	800b29c <mg_tcpip_rx+0x1cc>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 800b192:	f107 0314 	add.w	r3, r7, #20
 800b196:	461a      	mov	r2, r3
 800b198:	2103      	movs	r1, #3
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f7fd fff2 	bl	8009184 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 800b1a0:	f107 0314 	add.w	r3, r7, #20
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f7fe fbc7 	bl	800993a <rx_arp>
 800b1ac:	e081      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b0:	899b      	ldrh	r3, [r3, #12]
 800b1b2:	b29c      	uxth	r4, r3
 800b1b4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 800b1b8:	f00a ff19 	bl	8015fee <mg_ntohs>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	429c      	cmp	r4, r3
 800b1c0:	d11b      	bne.n	800b1fa <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	330e      	adds	r3, #14
 800b1c6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	2b35      	cmp	r3, #53	@ 0x35
 800b1cc:	d968      	bls.n	800b2a0 <mg_tcpip_rx+0x1d0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	091b      	lsrs	r3, r3, #4
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b06      	cmp	r3, #6
 800b1d8:	d164      	bne.n	800b2a4 <mg_tcpip_rx+0x1d4>
    mkpay(&pkt, pkt.ip6 + 1);
 800b1da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1dc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800b1e0:	f107 0314 	add.w	r3, r7, #20
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd ffe0 	bl	80091ac <mkpay>
    rx_ip6(ifp, &pkt);
 800b1ec:	f107 0314 	add.w	r3, r7, #20
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff ff2a 	bl	800b04c <rx_ip6>
 800b1f8:	e05b      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fc:	899b      	ldrh	r3, [r3, #12]
 800b1fe:	b29c      	uxth	r4, r3
 800b200:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b204:	f00a fef3 	bl	8015fee <mg_ntohs>
 800b208:	4603      	mov	r3, r0
 800b20a:	429c      	cmp	r4, r3
 800b20c:	d133      	bne.n	800b276 <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	330e      	adds	r3, #14
 800b212:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	2b21      	cmp	r3, #33	@ 0x21
 800b218:	d946      	bls.n	800b2a8 <mg_tcpip_rx+0x1d8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	885b      	ldrh	r3, [r3, #2]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4618      	mov	r0, r3
 800b222:	f00a fee4 	bl	8015fee <mg_ntohs>
 800b226:	4603      	mov	r3, r0
 800b228:	f103 020e 	add.w	r2, r3, #14
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d208      	bcs.n	800b244 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800b232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b234:	885b      	ldrh	r3, [r3, #2]
 800b236:	b29b      	uxth	r3, r3
 800b238:	4618      	mov	r0, r3
 800b23a:	f00a fed8 	bl	8015fee <mg_ntohs>
 800b23e:	4603      	mov	r3, r0
 800b240:	330e      	adds	r3, #14
 800b242:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	2b21      	cmp	r3, #33	@ 0x21
 800b248:	d930      	bls.n	800b2ac <mg_tcpip_rx+0x1dc>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800b24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	091b      	lsrs	r3, r3, #4
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b04      	cmp	r3, #4
 800b254:	d12c      	bne.n	800b2b0 <mg_tcpip_rx+0x1e0>
    mkpay(&pkt, pkt.ip + 1);
 800b256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b258:	f103 0214 	add.w	r2, r3, #20
 800b25c:	f107 0314 	add.w	r3, r7, #20
 800b260:	4611      	mov	r1, r2
 800b262:	4618      	mov	r0, r3
 800b264:	f7fd ffa2 	bl	80091ac <mkpay>
    rx_ip(ifp, &pkt);
 800b268:	f107 0314 	add.w	r3, r7, #20
 800b26c:	4619      	mov	r1, r3
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7ff fdf0 	bl	800ae54 <rx_ip>
 800b274:	e01d      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 800b276:	4b11      	ldr	r3, [pc, #68]	@ (800b2bc <mg_tcpip_rx+0x1ec>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	dd19      	ble.n	800b2b2 <mg_tcpip_rx+0x1e2>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b20      	cmp	r3, #32
 800b282:	bf28      	it	cs
 800b284:	2320      	movcs	r3, #32
 800b286:	4619      	mov	r1, r3
 800b288:	68b8      	ldr	r0, [r7, #8]
 800b28a:	f7fc faab 	bl	80077e4 <mg_hexdump>
 800b28e:	e010      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800b290:	bf00      	nop
 800b292:	e00e      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
    return;
 800b294:	bf00      	nop
 800b296:	e00c      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800b298:	bf00      	nop
 800b29a:	e00a      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800b29c:	bf00      	nop
 800b29e:	e008      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800b2a0:	bf00      	nop
 800b2a2:	e006      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800b2a4:	bf00      	nop
 800b2a6:	e004      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800b2a8:	bf00      	nop
 800b2aa:	e002      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800b2ac:	bf00      	nop
 800b2ae:	e000      	b.n	800b2b2 <mg_tcpip_rx+0x1e2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800b2b0:	bf00      	nop
  }
}
 800b2b2:	374c      	adds	r7, #76	@ 0x4c
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd90      	pop	{r4, r7, pc}
 800b2b8:	0802614c 	.word	0x0802614c
 800b2bc:	24000240 	.word	0x24000240

0800b2c0 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 800b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c2:	b095      	sub	sp, #84	@ 0x54
 800b2c4:	af06      	add	r7, sp, #24
 800b2c6:	6178      	str	r0, [r7, #20]
 800b2c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800b2d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2d6:	e9cd 2300 	strd	r2, r3, [sp]
 800b2da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b2de:	f04f 0300 	mov.w	r3, #0
 800b2e2:	4608      	mov	r0, r1
 800b2e4:	f002 fd92 	bl	800de0c <mg_timer_expired>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 800b2ee:	6979      	ldr	r1, [r7, #20]
 800b2f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 800b2f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <mg_tcpip_poll+0x58>
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800b306:	2b03      	cmp	r3, #3
 800b308:	d106      	bne.n	800b318 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY; // keep best-effort MAC
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2204      	movs	r2, #4
 800b30e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    onstatechange(ifp);
 800b312:	6978      	ldr	r0, [r7, #20]
 800b314:	f7fe f883 	bl	800941e <onstatechange>
  }
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800b318:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d060      	beq.n	800b3e2 <mg_tcpip_poll+0x122>
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d05b      	beq.n	800b3e2 <mg_tcpip_poll+0x122>
    bool up = ifp->driver->up(ifp);
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	6978      	ldr	r0, [r7, #20]
 800b332:	4798      	blx	r3
 800b334:	4603      	mov	r3, r0
 800b336:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800b340:	2b00      	cmp	r3, #0
 800b342:	bf14      	ite	ne
 800b344:	2301      	movne	r3, #1
 800b346:	2300      	moveq	r3, #0
 800b348:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800b34c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b350:	f083 0301 	eor.w	r3, r3, #1
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d006      	beq.n	800b368 <mg_tcpip_poll+0xa8>
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	7f1b      	ldrb	r3, [r3, #28]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <mg_tcpip_poll+0xa8>
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2200      	movs	r2, #0
 800b366:	609a      	str	r2, [r3, #8]
    if (up != current) {  // link state has changed
 800b368:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800b36c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800b370:	429a      	cmp	r2, r3
 800b372:	d01a      	beq.n	800b3aa <mg_tcpip_poll+0xea>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800b374:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b378:	f083 0301 	eor.w	r3, r3, #1
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <mg_tcpip_poll+0xc6>
 800b382:	2300      	movs	r3, #0
 800b384:	e00a      	b.n	800b39c <mg_tcpip_poll+0xdc>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d103      	bne.n	800b396 <mg_tcpip_poll+0xd6>
                   : ifp->enable_dhcp_client || ifp->ip == 0
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <mg_tcpip_poll+0xda>
      ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800b396:	2301      	movs	r3, #1
 800b398:	e000      	b.n	800b39c <mg_tcpip_poll+0xdc>
 800b39a:	2303      	movs	r3, #3
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                       ? MG_TCPIP_STATE_UP
                       : MG_TCPIP_STATE_IP;
      onstatechange(ifp);
 800b3a2:	6978      	ldr	r0, [r7, #20]
 800b3a4:	f7fe f83b 	bl	800941e <onstatechange>
 800b3a8:	e016      	b.n	800b3d8 <mg_tcpip_poll+0x118>
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	7f1b      	ldrb	r3, [r3, #28]
 800b3ae:	f083 0301 	eor.w	r3, r3, #1
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00f      	beq.n	800b3d8 <mg_tcpip_poll+0x118>
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d10a      	bne.n	800b3d8 <mg_tcpip_poll+0x118>
               ifp->ip) {
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	689b      	ldr	r3, [r3, #8]
    } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d006      	beq.n	800b3d8 <mg_tcpip_poll+0x118>
      ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2203      	movs	r2, #3
 800b3ce:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      onstatechange(ifp);
 800b3d2:	6978      	ldr	r0, [r7, #20]
 800b3d4:	f7fe f823 	bl	800941e <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
    mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2104      	movs	r1, #4
 800b3dc:	6978      	ldr	r0, [r7, #20]
 800b3de:	f7fd fed1 	bl	8009184 <mg_tcpip_call>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 8166 	beq.w	800b6ba <mg_tcpip_poll+0x3fa>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	7f1b      	ldrb	r3, [r3, #28]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d055      	beq.n	800b4a2 <mg_tcpip_poll+0x1e2>
 800b3f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d051      	beq.n	800b4a2 <mg_tcpip_poll+0x1e2>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800b404:	2b01      	cmp	r3, #1
 800b406:	d103      	bne.n	800b410 <mg_tcpip_poll+0x150>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800b408:	6978      	ldr	r0, [r7, #20]
 800b40a:	f7fe fa03 	bl	8009814 <tx_dhcp_discover>
 800b40e:	e048      	b.n	800b4a2 <mg_tcpip_poll+0x1e2>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800b416:	2b04      	cmp	r3, #4
 800b418:	d143      	bne.n	800b4a2 <mg_tcpip_poll+0x1e2>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800b420:	4313      	orrs	r3, r2
 800b422:	d03e      	beq.n	800b4a2 <mg_tcpip_poll+0x1e2>
      if (ifp->now >= ifp->lease_expire) {
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b430:	4290      	cmp	r0, r2
 800b432:	eb71 0303 	sbcs.w	r3, r1, r3
 800b436:	d30a      	bcc.n	800b44e <mg_tcpip_poll+0x18e>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2200      	movs	r2, #0
 800b444:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 800b446:	6978      	ldr	r0, [r7, #20]
 800b448:	f7fd ffe9 	bl	800941e <onstatechange>
 800b44c:	e029      	b.n	800b4a2 <mg_tcpip_poll+0x1e2>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800b454:	499b      	ldr	r1, [pc, #620]	@ (800b6c4 <mg_tcpip_poll+0x404>)
 800b456:	1854      	adds	r4, r2, r1
 800b458:	f143 0500 	adc.w	r5, r3, #0
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b462:	42a2      	cmp	r2, r4
 800b464:	41ab      	sbcs	r3, r5
 800b466:	d21c      	bcs.n	800b4a2 <mg_tcpip_poll+0x1e2>
                 ((ifp->now / 1000) % 60) == 0) {
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800b46e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b472:	f04f 0300 	mov.w	r3, #0
 800b476:	f7f5 f9a7 	bl	80007c8 <__aeabi_uldivmod>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	4610      	mov	r0, r2
 800b480:	4619      	mov	r1, r3
 800b482:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800b486:	f04f 0300 	mov.w	r3, #0
 800b48a:	f7f5 f99d 	bl	80007c8 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800b48e:	4313      	orrs	r3, r2
 800b490:	d107      	bne.n	800b4a2 <mg_tcpip_poll+0x1e2>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	689a      	ldr	r2, [r3, #8]
 800b496:	f04f 33ff 	mov.w	r3, #4294967295
 800b49a:	498b      	ldr	r1, [pc, #556]	@ (800b6c8 <mg_tcpip_poll+0x408>)
 800b49c:	6978      	ldr	r0, [r7, #20]
 800b49e:	f7fe f99d 	bl	80097dc <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d019      	beq.n	800b4e0 <mg_tcpip_poll+0x220>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800b4ba:	697a      	ldr	r2, [r7, #20]
 800b4bc:	4798      	blx	r3
 800b4be:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d024      	beq.n	800b510 <mg_tcpip_poll+0x250>
      ifp->nrecv++;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6978      	ldr	r0, [r7, #20]
 800b4da:	f7ff fdf9 	bl	800b0d0 <mg_tcpip_rx>
 800b4de:	e017      	b.n	800b510 <mg_tcpip_poll+0x250>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	3334      	adds	r3, #52	@ 0x34
 800b4e4:	f107 0220 	add.w	r2, r7, #32
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f001 f850 	bl	800c590 <mg_queue_next>
 800b4f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 800b4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <mg_tcpip_poll+0x250>
      mg_tcpip_rx(ifp, buf, len);
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6978      	ldr	r0, [r7, #20]
 800b500:	f7ff fde6 	bl	800b0d0 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	3334      	adds	r3, #52	@ 0x34
 800b508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 f8be 	bl	800c68c <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	637b      	str	r3, [r7, #52]	@ 0x34
 800b518:	e0ca      	b.n	800b6b0 <mg_tcpip_poll+0x3f0>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 800b51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b520:	f003 0301 	and.w	r3, r3, #1
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d008      	beq.n	800b53c <mg_tcpip_poll+0x27c>
 800b52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b52c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	f000 80b4 	beq.w	800b6a4 <mg_tcpip_poll+0x3e4>
 800b53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	b2db      	uxtb	r3, r3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f040 80ab 	bne.w	800b6a4 <mg_tcpip_poll+0x3e4>
 800b54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b550:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b554:	f003 0308 	and.w	r3, r3, #8
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 80a2 	bne.w	800b6a4 <mg_tcpip_poll+0x3e4>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 800b560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b562:	33b0      	adds	r3, #176	@ 0xb0
 800b564:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b568:	331c      	adds	r3, #28
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 800b56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b570:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b578:	4290      	cmp	r0, r2
 800b57a:	eb71 0303 	sbcs.w	r3, r1, r3
 800b57e:	f080 8094 	bcs.w	800b6aa <mg_tcpip_poll+0x3ea>
      if (s->ttype == MIP_TTYPE_ARP) {
 800b582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b584:	7f9b      	ldrb	r3, [r3, #30]
 800b586:	2b02      	cmp	r3, #2
 800b588:	d104      	bne.n	800b594 <mg_tcpip_poll+0x2d4>
        mg_error(c, "ARP timeout");
 800b58a:	4950      	ldr	r1, [pc, #320]	@ (800b6cc <mg_tcpip_poll+0x40c>)
 800b58c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b58e:	f7f6 fed9 	bl	8002344 <mg_error>
 800b592:	e082      	b.n	800b69a <mg_tcpip_poll+0x3da>
      } else if (c->is_udp) {
 800b594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b596:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b59a:	f003 0301 	and.w	r3, r3, #1
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f040 8081 	bne.w	800b6a8 <mg_tcpip_poll+0x3e8>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a8:	7f9b      	ldrb	r3, [r3, #30]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d12e      	bne.n	800b60c <mg_tcpip_poll+0x34c>
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b0:	691a      	ldr	r2, [r3, #16]
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d028      	beq.n	800b60c <mg_tcpip_poll+0x34c>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5bc:	f103 0618 	add.w	r6, r3, #24
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	613b      	str	r3, [r7, #16]
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c6:	8b1c      	ldrh	r4, [r3, #24]
 800b5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ca:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f00a fcf3 	bl	8015fbc <mg_ntohl>
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f00a fced 	bl	8015fbc <mg_ntohl>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	9205      	str	r2, [sp, #20]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	9204      	str	r2, [sp, #16]
 800b5ec:	9303      	str	r3, [sp, #12]
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	9102      	str	r1, [sp, #8]
 800b5f2:	9501      	str	r5, [sp, #4]
 800b5f4:	9400      	str	r4, [sp, #0]
 800b5f6:	2310      	movs	r3, #16
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	4631      	mov	r1, r6
 800b5fc:	6978      	ldr	r0, [r7, #20]
 800b5fe:	f7fe fed5 	bl	800a3ac <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 800b602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b608:	611a      	str	r2, [r3, #16]
 800b60a:	e046      	b.n	800b69a <mg_tcpip_poll+0x3da>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	7f9b      	ldrb	r3, [r3, #30]
 800b610:	2b03      	cmp	r3, #3
 800b612:	d104      	bne.n	800b61e <mg_tcpip_poll+0x35e>
        mg_error(c, "Connection timeout");
 800b614:	492e      	ldr	r1, [pc, #184]	@ (800b6d0 <mg_tcpip_poll+0x410>)
 800b616:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b618:	f7f6 fe94 	bl	8002344 <mg_error>
 800b61c:	e03d      	b.n	800b69a <mg_tcpip_poll+0x3da>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	7f9b      	ldrb	r3, [r3, #30]
 800b622:	2b04      	cmp	r3, #4
 800b624:	d107      	bne.n	800b636 <mg_tcpip_poll+0x376>
        c->is_closing = 1;
 800b626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b628:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b62c:	f043 0320 	orr.w	r3, r3, #32
 800b630:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 800b634:	e039      	b.n	800b6aa <mg_tcpip_poll+0x3ea>
      } else {
        if (s->tmiss++ > 2) {
 800b636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b638:	7fdb      	ldrb	r3, [r3, #31]
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	b2d1      	uxtb	r1, r2
 800b63e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b640:	77d1      	strb	r1, [r2, #31]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d904      	bls.n	800b650 <mg_tcpip_poll+0x390>
          mg_error(c, "keepalive");
 800b646:	4923      	ldr	r1, [pc, #140]	@ (800b6d4 <mg_tcpip_poll+0x414>)
 800b648:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b64a:	f7f6 fe7b 	bl	8002344 <mg_error>
 800b64e:	e024      	b.n	800b69a <mg_tcpip_poll+0x3da>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b652:	f103 0618 	add.w	r6, r3, #24
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b65c:	8b1c      	ldrh	r4, [r3, #24]
 800b65e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b660:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 800b662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b664:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800b666:	3b01      	subs	r3, #1
 800b668:	4618      	mov	r0, r3
 800b66a:	f00a fca7 	bl	8015fbc <mg_ntohl>
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	4618      	mov	r0, r3
 800b676:	f00a fca1 	bl	8015fbc <mg_ntohl>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2200      	movs	r2, #0
 800b67e:	9205      	str	r2, [sp, #20]
 800b680:	2200      	movs	r2, #0
 800b682:	9204      	str	r2, [sp, #16]
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	9102      	str	r1, [sp, #8]
 800b68a:	9501      	str	r5, [sp, #4]
 800b68c:	9400      	str	r4, [sp, #0]
 800b68e:	2310      	movs	r3, #16
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	4631      	mov	r1, r6
 800b694:	6978      	ldr	r0, [r7, #20]
 800b696:	f7fe fe89 	bl	800a3ac <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 800b69a:	2100      	movs	r1, #0
 800b69c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b69e:	f7fd fdfc 	bl	800929a <settmout>
 800b6a2:	e002      	b.n	800b6aa <mg_tcpip_poll+0x3ea>
      continue;
 800b6a4:	bf00      	nop
 800b6a6:	e000      	b.n	800b6aa <mg_tcpip_poll+0x3ea>
        continue;
 800b6a8:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800b6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f47f af31 	bne.w	800b51a <mg_tcpip_poll+0x25a>
 800b6b8:	e000      	b.n	800b6bc <mg_tcpip_poll+0x3fc>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800b6ba:	bf00      	nop
    }
  }
}
 800b6bc:	373c      	adds	r7, #60	@ 0x3c
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	001b7740 	.word	0x001b7740
 800b6c8:	0802614c 	.word	0x0802614c
 800b6cc:	08024b28 	.word	0x08024b28
 800b6d0:	08024b34 	.word	0x08024b34
 800b6d4:	08024b48 	.word	0x08024b48

0800b6d8 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3334      	adds	r3, #52	@ 0x34
 800b6e8:	f107 0114 	add.w	r1, r7, #20
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fef6 	bl	800c4e0 <mg_queue_book>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d811      	bhi.n	800b720 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	68f9      	ldr	r1, [r7, #12]
 800b702:	4618      	mov	r0, r3
 800b704:	f017 f8b7 	bl	8022876 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3334      	adds	r3, #52	@ 0x34
 800b70c:	68b9      	ldr	r1, [r7, #8]
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 ff84 	bl	800c61c <mg_queue_add>
    ifp->nrecv++;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	671a      	str	r2, [r3, #112]	@ 0x70
  } else {
    ifp->ndrop++;
  }
}
 800b71e:	e004      	b.n	800b72a <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800b72a:	bf00      	nop
 800b72c:	3718      	adds	r7, #24
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d11c      	bne.n	800b780 <mg_tcpip_init+0x4c>
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	785b      	ldrb	r3, [r3, #1]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d118      	bne.n	800b780 <mg_tcpip_init+0x4c>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	789b      	ldrb	r3, [r3, #2]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d114      	bne.n	800b780 <mg_tcpip_init+0x4c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d110      	bne.n	800b780 <mg_tcpip_init+0x4c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	791b      	ldrb	r3, [r3, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10c      	bne.n	800b780 <mg_tcpip_init+0x4c>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	795b      	ldrb	r3, [r3, #5]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d108      	bne.n	800b780 <mg_tcpip_init+0x4c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2202      	movs	r2, #2
 800b772:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	3301      	adds	r3, #1
 800b778:	2105      	movs	r1, #5
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7f5 fa6a 	bl	8000c54 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00a      	beq.n	800b7a0 <mg_tcpip_init+0x6c>
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6838      	ldr	r0, [r7, #0]
 800b792:	4798      	blx	r3
 800b794:	4603      	mov	r3, r0
 800b796:	f083 0301 	eor.w	r3, r3, #1
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d15c      	bne.n	800b85a <mg_tcpip_init+0x126>
    MG_ERROR(("driver init failed"));
  } else {
    size_t framesize = 1540;
 800b7a0:	f240 6304 	movw	r3, #1540	@ 0x604
 800b7a4:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800b7a6:	68f9      	ldr	r1, [r7, #12]
 800b7a8:	2001      	movs	r0, #1
 800b7aa:	f016 fbb7 	bl	8021f1c <calloc>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	615a      	str	r2, [r3, #20]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <mg_tcpip_init+0xa6>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <mg_tcpip_init+0x9e>
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	e001      	b.n	800b7d6 <mg_tcpip_init+0xa2>
 800b7d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7de:	4619      	mov	r1, r3
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	f016 fb9b 	bl	8021f1c <calloc>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 800b7ee:	f7f5 fa5f 	bl	8000cb0 <mg_millis>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b80e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2230      	movs	r2, #48	@ 0x30
 800b816:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <mg_tcpip_init+0xf2>
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2201      	movs	r2, #1
 800b824:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	3346      	adds	r3, #70	@ 0x46
 800b82a:	2206      	movs	r2, #6
 800b82c:	21ff      	movs	r1, #255	@ 0xff
 800b82e:	4618      	mov	r0, r3
 800b830:	f016 fe7d 	bl	802252e <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	3368      	adds	r3, #104	@ 0x68
 800b838:	2102      	movs	r1, #2
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f5 fa0a 	bl	8000c54 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800b846:	4b07      	ldr	r3, [pc, #28]	@ (800b864 <mg_tcpip_init+0x130>)
 800b848:	4313      	orrs	r3, r2
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	2b00      	cmp	r3, #0
  }
}
 800b858:	e000      	b.n	800b85c <mg_tcpip_init+0x128>
    MG_ERROR(("driver init failed"));
 800b85a:	bf00      	nop
}
 800b85c:	bf00      	nop
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	ffff8000 	.word	0xffff8000

0800b868 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b08d      	sub	sp, #52	@ 0x34
 800b86c:	af06      	add	r7, sp, #24
 800b86e:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	33b0      	adds	r3, #176	@ 0xb0
 800b874:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	8b1b      	ldrh	r3, [r3, #24]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f00a fbb7 	bl	8015fee <mg_ntohs>
 800b880:	4603      	mov	r3, r0
 800b882:	4618      	mov	r0, r3
 800b884:	f00a fb9a 	bl	8015fbc <mg_ntohl>
 800b888:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b890:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	331c      	adds	r3, #28
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f103 0018 	add.w	r0, r3, #24
 800b8a0:	68bc      	ldr	r4, [r7, #8]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8b1b      	ldrh	r3, [r3, #24]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	9105      	str	r1, [sp, #20]
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	9104      	str	r1, [sp, #16]
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	9103      	str	r1, [sp, #12]
 800b8b6:	6939      	ldr	r1, [r7, #16]
 800b8b8:	9102      	str	r1, [sp, #8]
 800b8ba:	9201      	str	r2, [sp, #4]
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	2302      	movs	r3, #2
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	4601      	mov	r1, r0
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7fe fd71 	bl	800a3ac <tx_tcp>
         0);
}
 800b8ca:	bf00      	nop
 800b8cc:	371c      	adds	r7, #28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd90      	pop	{r4, r7, pc}

0800b8d2 <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00c      	beq.n	800b904 <mac_resolved+0x32>
    c->is_connecting = 0;
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b8f0:	f36f 1345 	bfc	r3, #5, #1
 800b8f4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2104      	movs	r1, #4
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7f6 fd01 	bl	8002304 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 800b902:	e006      	b.n	800b912 <mac_resolved+0x40>
    send_syn(c);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff ffaf 	bl	800b868 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 800b90a:	2103      	movs	r1, #3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7fd fcc4 	bl	800929a <settmout>
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b088      	sub	sp, #32
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b92a:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	331c      	adds	r3, #28
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b93a:	f36f 03c3 	bfc	r3, #3, #1
 800b93e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b948:	b21b      	sxth	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	db04      	blt.n	800b958 <mg_connect_resolved+0x3c>
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3308      	adds	r3, #8
 800b95c:	69fa      	ldr	r2, [r7, #28]
 800b95e:	3208      	adds	r2, #8
 800b960:	6812      	ldr	r2, [r2, #0]
 800b962:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	b291      	uxth	r1, r2
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 800b974:	4618      	mov	r0, r3
 800b976:	f00a fb3a 	bl	8015fee <mg_ntohs>
 800b97a:	4603      	mov	r3, r0
 800b97c:	461a      	mov	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 800b982:	2200      	movs	r2, #0
 800b984:	2103      	movs	r1, #3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7f6 fcbc 	bl	8002304 <mg_call>
  c->is_connecting = 1;
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b992:	f043 0320 	orr.w	r3, r3, #32
 800b996:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b9a0:	f003 0301 	and.w	r3, r3, #1
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d01a      	beq.n	800b9e0 <mg_connect_resolved+0xc4>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b0:	d008      	beq.n	800b9c4 <mg_connect_resolved+0xa8>
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	689a      	ldr	r2, [r3, #8]
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	43db      	mvns	r3, r3
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d10d      	bne.n	800b9e0 <mg_connect_resolved+0xc4>
    struct connstate *s = (struct connstate *) (c + 1);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	33b0      	adds	r3, #176	@ 0xb0
 800b9c8:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	3318      	adds	r3, #24
 800b9ce:	2206      	movs	r2, #6
 800b9d0:	21ff      	movs	r1, #255	@ 0xff
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f016 fdab 	bl	802252e <memset>
    mac_resolved(c);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff ff7a 	bl	800b8d2 <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 800b9de:	e064      	b.n	800baaa <mg_connect_resolved+0x18e>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d01f      	beq.n	800ba28 <mg_connect_resolved+0x10c>
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	689a      	ldr	r2, [r3, #8]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	405a      	eors	r2, r3
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d116      	bne.n	800ba28 <mg_connect_resolved+0x10c>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	691a      	ldr	r2, [r3, #16]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d011      	beq.n	800ba28 <mg_connect_resolved+0x10c>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	4619      	mov	r1, r3
 800ba0a:	69f8      	ldr	r0, [r7, #28]
 800ba0c:	f7fd fc9f 	bl	800934e <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 800ba10:	2102      	movs	r1, #2
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7fd fc41 	bl	800929a <settmout>
    c->is_arplooking = 1;
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800ba1e:	f043 0310 	orr.w	r3, r3, #16
 800ba22:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800ba26:	e040      	b.n	800baaa <mg_connect_resolved+0x18e>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 800ba28:	f107 030c 	add.w	r3, r7, #12
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ba32:	2be0      	cmp	r3, #224	@ 0xe0
 800ba34:	d129      	bne.n	800ba8a <mg_connect_resolved+0x16e>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	33b0      	adds	r3, #176	@ 0xb0
 800ba3a:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 800ba3c:	4a1d      	ldr	r2, [pc, #116]	@ (800bab4 <mg_connect_resolved+0x198>)
 800ba3e:	f107 0308 	add.w	r3, r7, #8
 800ba42:	6812      	ldr	r2, [r2, #0]
 800ba44:	4611      	mov	r1, r2
 800ba46:	8019      	strh	r1, [r3, #0]
 800ba48:	3302      	adds	r3, #2
 800ba4a:	0c12      	lsrs	r2, r2, #16
 800ba4c:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	3318      	adds	r3, #24
 800ba52:	461a      	mov	r2, r3
 800ba54:	f107 0308 	add.w	r3, r7, #8
 800ba58:	8819      	ldrh	r1, [r3, #0]
 800ba5a:	789b      	ldrb	r3, [r3, #2]
 800ba5c:	8011      	strh	r1, [r2, #0]
 800ba5e:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	3318      	adds	r3, #24
 800ba64:	1cd8      	adds	r0, r3, #3
 800ba66:	f107 030c 	add.w	r3, r7, #12
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	2203      	movs	r2, #3
 800ba6e:	4619      	mov	r1, r3
 800ba70:	f016 ff01 	bl	8022876 <memcpy>
    s->mac[3] &= 0x7F;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	7edb      	ldrb	r3, [r3, #27]
 800ba78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba7c:	b2da      	uxtb	r2, r3
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	76da      	strb	r2, [r3, #27]
    mac_resolved(c);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff ff25 	bl	800b8d2 <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 800ba88:	e00f      	b.n	800baaa <mg_connect_resolved+0x18e>
    struct connstate *s = (struct connstate *) (c + 1);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	33b0      	adds	r3, #176	@ 0xb0
 800ba8e:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f103 0018 	add.w	r0, r3, #24
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	3346      	adds	r3, #70	@ 0x46
 800ba9a:	2206      	movs	r2, #6
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	f016 feea 	bl	8022876 <memcpy>
    mac_resolved(c);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff ff15 	bl	800b8d2 <mac_resolved>
}
 800baa8:	e7ff      	b.n	800baaa <mg_connect_resolved+0x18e>
 800baaa:	bf00      	nop
 800baac:	3720      	adds	r7, #32
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	08024b54 	.word	0x08024b54

0800bab8 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800bac2:	6838      	ldr	r0, [r7, #0]
 800bac4:	f00a f9b6 	bl	8015e34 <mg_url_port>
 800bac8:	4603      	mov	r3, r0
 800baca:	4618      	mov	r0, r3
 800bacc:	f00a fa8f 	bl	8015fee <mg_ntohs>
 800bad0:	4603      	mov	r3, r0
 800bad2:	461a      	mov	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	831a      	strh	r2, [r3, #24]
  return true;
 800bad8:	2301      	movs	r3, #1
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
	...

0800bae4 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800baf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baf6:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d009      	beq.n	800bb10 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb04:	461a      	mov	r2, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f004 ff26 	bl	8010958 <mg_tls_send>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	e008      	b.n	800bb22 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7fe fe06 	bl	800a72c <mg_io_send>
 800bb20:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800bb22:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2a:	d104      	bne.n	800bb36 <write_conn+0x52>
    mg_error(c, "tx err");
 800bb2c:	490c      	ldr	r1, [pc, #48]	@ (800bb60 <write_conn+0x7c>)
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7f6 fc08 	bl	8002344 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 800bb34:	e010      	b.n	800bb58 <write_conn+0x74>
  } else if (len > 0) {
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	dd0d      	ble.n	800bb58 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3348      	adds	r3, #72	@ 0x48
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	2100      	movs	r1, #0
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fa ff4a 	bl	80069de <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800bb4a:	f107 030c 	add.w	r3, r7, #12
 800bb4e:	461a      	mov	r2, r3
 800bb50:	2108      	movs	r1, #8
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7f6 fbd6 	bl	8002304 <mg_call>
}
 800bb58:	bf00      	nop
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	08024b58 	.word	0x08024b58

0800bb64 <init_closure>:

static void init_closure(struct mg_connection *c) {
 800bb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb66:	b08f      	sub	sp, #60	@ 0x3c
 800bb68:	af06      	add	r7, sp, #24
 800bb6a:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	33b0      	adds	r3, #176	@ 0xb0
 800bb70:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d13f      	bne.n	800bc02 <init_closure+0x9e>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bb88:	f003 0301 	and.w	r3, r3, #1
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d137      	bne.n	800bc02 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d12f      	bne.n	800bc02 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800bba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bba8:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	331c      	adds	r3, #28
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	f103 0618 	add.w	r6, r3, #24
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	60bb      	str	r3, [r7, #8]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	8b1c      	ldrh	r4, [r3, #24]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f00a f9f7 	bl	8015fbc <mg_ntohl>
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f00a f9f1 	bl	8015fbc <mg_ntohl>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2200      	movs	r2, #0
 800bbde:	9205      	str	r2, [sp, #20]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	9204      	str	r2, [sp, #16]
 800bbe4:	9303      	str	r3, [sp, #12]
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	9102      	str	r1, [sp, #8]
 800bbea:	9501      	str	r5, [sp, #4]
 800bbec:	9400      	str	r4, [sp, #0]
 800bbee:	2311      	movs	r3, #17
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	69b8      	ldr	r0, [r7, #24]
 800bbf6:	f7fe fbd9 	bl	800a3ac <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 800bbfa:	2104      	movs	r1, #4
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f7fd fb4c 	bl	800929a <settmout>
  }
}
 800bc02:	bf00      	nop
 800bc04:	3724      	adds	r7, #36	@ 0x24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc0a <close_conn>:

static void close_conn(struct mg_connection *c) {
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	33b0      	adds	r3, #176	@ 0xb0
 800bc16:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3320      	adds	r3, #32
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fa ff29 	bl	8006a74 <mg_iobuf_free>
  mg_close_conn(c);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7fd f90c 	bl	8008e40 <mg_close_conn>
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <can_write>:

static bool can_write(struct mg_connection *c) {
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc3e:	f003 0320 	and.w	r3, r3, #32
 800bc42:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d11d      	bne.n	800bc84 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc4e:	f003 0308 	and.w	r3, r3, #8
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d115      	bne.n	800bc84 <can_write+0x54>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d011      	beq.n	800bc84 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bc6a:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d109      	bne.n	800bc84 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bc76:	f003 0310 	and.w	r3, r3, #16
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d101      	bne.n	800bc84 <can_write+0x54>
 800bc80:	2301      	movs	r3, #1
 800bc82:	e000      	b.n	800bc86 <can_write+0x56>
 800bc84:	2300      	movs	r3, #0
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	b2db      	uxtb	r3, r3
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca6:	61fb      	str	r3, [r7, #28]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800bca8:	f7f5 f802 	bl	8000cb0 <mg_millis>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bcba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	f002 f908 	bl	800ded4 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d05a      	beq.n	800bd80 <mg_mgr_poll+0xe8>
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d056      	beq.n	800bd80 <mg_mgr_poll+0xe8>
  mg_tcpip_poll(ifp, now);
 800bcd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcd6:	69f8      	ldr	r0, [r7, #28]
 800bcd8:	f7ff faf2 	bl	800b2c0 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	61bb      	str	r3, [r7, #24]
 800bce2:	e049      	b.n	800bd78 <mg_mgr_poll+0xe0>
    tmp = c->next;
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	33b0      	adds	r3, #176	@ 0xb0
 800bcee:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800bcf0:	f107 0308 	add.w	r3, r7, #8
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	2102      	movs	r1, #2
 800bcf8:	69b8      	ldr	r0, [r7, #24]
 800bcfa:	f7f6 fb03 	bl	8002304 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bd04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00b      	beq.n	800bd26 <mg_mgr_poll+0x8e>
 800bd0e:	69b8      	ldr	r0, [r7, #24]
 800bd10:	f004 feb6 	bl	8010a80 <mg_tls_pending>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d005      	beq.n	800bd26 <mg_mgr_poll+0x8e>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	3368      	adds	r3, #104	@ 0x68
 800bd1e:	4619      	mov	r1, r3
 800bd20:	69b8      	ldr	r0, [r7, #24]
 800bd22:	f7fe fd7b 	bl	800a81c <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 800bd26:	69b8      	ldr	r0, [r7, #24]
 800bd28:	f7ff ff82 	bl	800bc30 <can_write>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <mg_mgr_poll+0xa0>
 800bd32:	69b8      	ldr	r0, [r7, #24]
 800bd34:	f7ff fed6 	bl	800bae4 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800bd3e:	f003 0310 	and.w	r3, r3, #16
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00a      	beq.n	800bd5e <mg_mgr_poll+0xc6>
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d106      	bne.n	800bd5e <mg_mgr_poll+0xc6>
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	7f9b      	ldrb	r3, [r3, #30]
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	d002      	beq.n	800bd5e <mg_mgr_poll+0xc6>
      init_closure(c);
 800bd58:	69b8      	ldr	r0, [r7, #24]
 800bd5a:	f7ff ff03 	bl	800bb64 <init_closure>
    if (c->is_closing) close_conn(c);
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800bd64:	f003 0320 	and.w	r3, r3, #32
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <mg_mgr_poll+0xdc>
 800bd6e:	69b8      	ldr	r0, [r7, #24]
 800bd70:	f7ff ff4b 	bl	800bc0a <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	61bb      	str	r3, [r7, #24]
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1b2      	bne.n	800bce4 <mg_mgr_poll+0x4c>
 800bd7e:	e000      	b.n	800bd82 <mg_mgr_poll+0xea>
  if (ifp == NULL || ifp->driver == NULL) return;
 800bd80:	bf00      	nop
  }
  (void) ms;
}
 800bd82:	3720      	adds	r7, #32
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800bd88:	b5b0      	push	{r4, r5, r7, lr}
 800bd8a:	b08c      	sub	sp, #48	@ 0x30
 800bd8c:	af04      	add	r7, sp, #16
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd9a:	61bb      	str	r3, [r7, #24]
  bool res = false;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	331c      	adds	r3, #28
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d004      	beq.n	800bdba <mg_send+0x32>
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800bdb6:	2b04      	cmp	r3, #4
 800bdb8:	d004      	beq.n	800bdc4 <mg_send+0x3c>
    mg_error(c, "net down");
 800bdba:	492e      	ldr	r1, [pc, #184]	@ (800be74 <mg_send+0xec>)
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f7f6 fac1 	bl	8002344 <mg_error>
 800bdc2:	e051      	b.n	800be68 <mg_send+0xe0>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00f      	beq.n	800bdf4 <mg_send+0x6c>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bdda:	f003 0310 	and.w	r3, r3, #16
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d140      	bne.n	800be66 <mg_send+0xde>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bdea:	f003 0308 	and.w	r3, r3, #8
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d138      	bne.n	800be66 <mg_send+0xde>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
  } else if (c->is_udp) {
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800bdfa:	f003 0301 	and.w	r3, r3, #1
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d020      	beq.n	800be46 <mg_send+0xbe>
    struct connstate *s = (struct connstate *) (c + 1);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	33b0      	adds	r3, #176	@ 0xb0
 800be08:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f7fe fc2c 	bl	800a66a <trim_len>
 800be12:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f103 0018 	add.w	r0, r3, #24
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	689c      	ldr	r4, [r3, #8]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	8b1d      	ldrh	r5, [r3, #24]
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800be28:	6879      	ldr	r1, [r7, #4]
 800be2a:	9103      	str	r1, [sp, #12]
 800be2c:	68b9      	ldr	r1, [r7, #8]
 800be2e:	9102      	str	r1, [sp, #8]
 800be30:	9201      	str	r2, [sp, #4]
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	462b      	mov	r3, r5
 800be36:	4622      	mov	r2, r4
 800be38:	4601      	mov	r1, r0
 800be3a:	69b8      	ldr	r0, [r7, #24]
 800be3c:	f7fd fb74 	bl	8009528 <tx_udp>
    res = true;
 800be40:	2301      	movs	r3, #1
 800be42:	77fb      	strb	r3, [r7, #31]
 800be44:	e010      	b.n	800be68 <mg_send+0xe0>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	f7fa fd71 	bl	800693a <mg_iobuf_add>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	bf14      	ite	ne
 800be5e:	2301      	movne	r3, #1
 800be60:	2300      	moveq	r3, #0
 800be62:	77fb      	strb	r3, [r7, #31]
 800be64:	e000      	b.n	800be68 <mg_send+0xe0>
    MG_VERBOSE(("still resolving..."));
 800be66:	bf00      	nop
  }
  return res;
 800be68:	7ffb      	ldrb	r3, [r7, #31]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3720      	adds	r7, #32
 800be6e:	46bd      	mov	sp, r7
 800be70:	bdb0      	pop	{r4, r5, r7, pc}
 800be72:	bf00      	nop
 800be74:	08024b60 	.word	0x08024b60

0800be78 <mg_ota_begin>:

struct mg_otadata {
  uint32_t crc32, size, timestamp, status;
};

bool mg_ota_begin(size_t new_firmware_size) {
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  bool ok = false;
 800be80:	2300      	movs	r3, #0
 800be82:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 800be84:	4b13      	ldr	r3, [pc, #76]	@ (800bed4 <mg_ota_begin+0x5c>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d11d      	bne.n	800bec8 <mg_ota_begin+0x50>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
  } else {
    size_t half = mg_flash_size() / 2, max = half - mg_flash_sector_size();
 800be8c:	f017 fc30 	bl	80236f0 <mg_flash_size>
 800be90:	4603      	mov	r3, r0
 800be92:	085b      	lsrs	r3, r3, #1
 800be94:	613b      	str	r3, [r7, #16]
 800be96:	f017 fc37 	bl	8023708 <mg_flash_sector_size>
 800be9a:	4602      	mov	r2, r0
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	1a9b      	subs	r3, r3, r2
 800bea0:	60fb      	str	r3, [r7, #12]
    s_crc32 = 0;
 800bea2:	4b0d      	ldr	r3, [pc, #52]	@ (800bed8 <mg_ota_begin+0x60>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]
    s_addr = (char *) mg_flash_start() + half;
 800bea8:	f017 fc19 	bl	80236de <mg_flash_start>
 800beac:	4602      	mov	r2, r0
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	4413      	add	r3, r2
 800beb2:	4a0a      	ldr	r2, [pc, #40]	@ (800bedc <mg_ota_begin+0x64>)
 800beb4:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Firmware %lu bytes, max %lu", new_firmware_size, max));
    if (new_firmware_size < max) {
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d204      	bcs.n	800bec8 <mg_ota_begin+0x50>
      ok = true;
 800bebe:	2301      	movs	r3, #1
 800bec0:	75fb      	strb	r3, [r7, #23]
      s_size = new_firmware_size;
 800bec2:	4a04      	ldr	r2, [pc, #16]	@ (800bed4 <mg_ota_begin+0x5c>)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, max));
    }
  }
  return ok;
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	24002bb0 	.word	0x24002bb0
 800bed8:	24002bb4 	.word	0x24002bb4
 800bedc:	24002bac 	.word	0x24002bac

0800bee0 <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 800bee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee4:	b088      	sub	sp, #32
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	6039      	str	r1, [r7, #0]
  bool ok = false;
 800beec:	2300      	movs	r3, #0
 800beee:	77fb      	strb	r3, [r7, #31]
  if (s_size == 0) {
 800bef0:	4b3e      	ldr	r3, [pc, #248]	@ (800bfec <mg_ota_write+0x10c>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d072      	beq.n	800bfde <mg_ota_write+0xfe>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
  } else {
    size_t align = mg_flash_write_align();
 800bef8:	f017 fc0f 	bl	802371a <mg_flash_write_align>
 800befc:	61b8      	str	r0, [r7, #24]
    size_t len_aligned_down = MG_ROUND_DOWN(len, align);
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d007      	beq.n	800bf14 <mg_ota_write+0x34>
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf0c:	69ba      	ldr	r2, [r7, #24]
 800bf0e:	fb02 f303 	mul.w	r3, r2, r3
 800bf12:	e000      	b.n	800bf16 <mg_ota_write+0x36>
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	617b      	str	r3, [r7, #20]
    if (len_aligned_down) ok = mg_flash_write(s_addr, buf, len_aligned_down);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d008      	beq.n	800bf30 <mg_ota_write+0x50>
 800bf1e:	4b34      	ldr	r3, [pc, #208]	@ (800bff0 <mg_ota_write+0x110>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f017 fd98 	bl	8023a5c <mg_flash_write>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	77fb      	strb	r3, [r7, #31]
    if (len_aligned_down < len) {
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d242      	bcs.n	800bfbe <mg_ota_write+0xde>
 800bf38:	466b      	mov	r3, sp
 800bf3a:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	613b      	str	r3, [r7, #16]
      char tmp[align];
 800bf44:	69be      	ldr	r6, [r7, #24]
 800bf46:	4633      	mov	r3, r6
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	46b0      	mov	r8, r6
 800bf50:	4699      	mov	r9, r3
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	f04f 0300 	mov.w	r3, #0
 800bf5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf66:	2300      	movs	r3, #0
 800bf68:	4634      	mov	r4, r6
 800bf6a:	461d      	mov	r5, r3
 800bf6c:	f04f 0200 	mov.w	r2, #0
 800bf70:	f04f 0300 	mov.w	r3, #0
 800bf74:	00eb      	lsls	r3, r5, #3
 800bf76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf7a:	00e2      	lsls	r2, r4, #3
 800bf7c:	1df3      	adds	r3, r6, #7
 800bf7e:	08db      	lsrs	r3, r3, #3
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	ebad 0d03 	sub.w	sp, sp, r3
 800bf86:	466b      	mov	r3, sp
 800bf88:	3300      	adds	r3, #0
 800bf8a:	60bb      	str	r3, [r7, #8]
      memset(tmp, 0xff, sizeof(tmp));
 800bf8c:	4632      	mov	r2, r6
 800bf8e:	21ff      	movs	r1, #255	@ 0xff
 800bf90:	68b8      	ldr	r0, [r7, #8]
 800bf92:	f016 facc 	bl	802252e <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	68b8      	ldr	r0, [r7, #8]
 800bfa2:	f016 fc68 	bl	8022876 <memcpy>
      ok = mg_flash_write(s_addr + len_aligned_down, tmp, sizeof(tmp));
 800bfa6:	4b12      	ldr	r3, [pc, #72]	@ (800bff0 <mg_ota_write+0x110>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	4413      	add	r3, r2
 800bfae:	4632      	mov	r2, r6
 800bfb0:	68b9      	ldr	r1, [r7, #8]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f017 fd52 	bl	8023a5c <mg_flash_write>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	77fb      	strb	r3, [r7, #31]
 800bfbc:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 800bfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bff4 <mg_ota_write+0x114>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f00a f828 	bl	801601c <mg_crc32>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	4a09      	ldr	r2, [pc, #36]	@ (800bff4 <mg_ota_write+0x114>)
 800bfd0:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
    s_addr += len;
 800bfd2:	4b07      	ldr	r3, [pc, #28]	@ (800bff0 <mg_ota_write+0x110>)
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	4413      	add	r3, r2
 800bfda:	4a05      	ldr	r2, [pc, #20]	@ (800bff0 <mg_ota_write+0x110>)
 800bfdc:	6013      	str	r3, [r2, #0]
  }
  return ok;
 800bfde:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3720      	adds	r7, #32
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfea:	bf00      	nop
 800bfec:	24002bb0 	.word	0x24002bb0
 800bff0:	24002bac 	.word	0x24002bac
 800bff4:	24002bb4 	.word	0x24002bb4

0800bff8 <mg_ota_end>:
  return key;
}

static size_t swap_size(void);

bool mg_ota_end(void) {
 800bff8:	b590      	push	{r4, r7, lr}
 800bffa:	b08d      	sub	sp, #52	@ 0x34
 800bffc:	af00      	add	r7, sp, #0
  char *base = (char *) mg_flash_start() + mg_flash_size() / 2;
 800bffe:	f017 fb6e 	bl	80236de <mg_flash_start>
 800c002:	4604      	mov	r4, r0
 800c004:	f017 fb74 	bl	80236f0 <mg_flash_size>
 800c008:	4603      	mov	r3, r0
 800c00a:	085b      	lsrs	r3, r3, #1
 800c00c:	4423      	add	r3, r4
 800c00e:	627b      	str	r3, [r7, #36]	@ 0x24
  bool ok = false;
 800c010:	2300      	movs	r3, #0
 800c012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (s_size) {
 800c016:	4b2c      	ldr	r3, [pc, #176]	@ (800c0c8 <mg_ota_end+0xd0>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d04e      	beq.n	800c0bc <mg_ota_end+0xc4>
    size_t size = s_addr - base;
 800c01e:	4b2b      	ldr	r3, [pc, #172]	@ (800c0cc <mg_ota_end+0xd4>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	623b      	str	r3, [r7, #32]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 800c028:	4b27      	ldr	r3, [pc, #156]	@ (800c0c8 <mg_ota_end+0xd0>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	461a      	mov	r2, r3
 800c02e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c030:	2000      	movs	r0, #0
 800c032:	f009 fff3 	bl	801601c <mg_crc32>
 800c036:	61f8      	str	r0, [r7, #28]
    if (size == s_size && crc32 == s_crc32) {
 800c038:	4b23      	ldr	r3, [pc, #140]	@ (800c0c8 <mg_ota_end+0xd0>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6a3a      	ldr	r2, [r7, #32]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d125      	bne.n	800c08e <mg_ota_end+0x96>
 800c042:	4b23      	ldr	r3, [pc, #140]	@ (800c0d0 <mg_ota_end+0xd8>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	69fa      	ldr	r2, [r7, #28]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d120      	bne.n	800c08e <mg_ota_end+0x96>
      uint32_t now = (uint32_t) (mg_now() / 1000);
 800c04c:	f000 ffe2 	bl	800d014 <mg_now>
 800c050:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c054:	f04f 0300 	mov.w	r3, #0
 800c058:	f7f4 fbb6 	bl	80007c8 <__aeabi_uldivmod>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4613      	mov	r3, r2
 800c062:	61bb      	str	r3, [r7, #24]
      struct mg_otadata od = {crc32, size, now, MG_OTA_FIRST_BOOT};
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	607b      	str	r3, [r7, #4]
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	60bb      	str	r3, [r7, #8]
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	2301      	movs	r3, #1
 800c072:	613b      	str	r3, [r7, #16]
      uint32_t key = mg_fwkey(MG_FIRMWARE_PREVIOUS);
 800c074:	2001      	movs	r0, #1
 800c076:	f017 fd6f 	bl	8023b58 <mg_fwkey>
 800c07a:	6178      	str	r0, [r7, #20]
      ok = mg_flash_save(NULL, key, &od, sizeof(od));
 800c07c:	1d3a      	adds	r2, r7, #4
 800c07e:	2310      	movs	r3, #16
 800c080:	6979      	ldr	r1, [r7, #20]
 800c082:	2000      	movs	r0, #0
 800c084:	f7f5 fac8 	bl	8001618 <mg_flash_save>
 800c088:	4603      	mov	r3, r0
 800c08a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
              size, ok ? "ok" : "fail"));
    s_size = 0;
 800c08e:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c8 <mg_ota_end+0xd0>)
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
    if (ok) {
 800c094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00f      	beq.n	800c0bc <mg_ota_end+0xc4>
      size_t sz = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (mg_flash_bank() == 0) {
 800c0a0:	f017 fb43 	bl	802372a <mg_flash_bank>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d102      	bne.n	800c0b0 <mg_ota_end+0xb8>
        // No dual bank support.
        sz = swap_size();
 800c0aa:	f000 f813 	bl	800c0d4 <swap_size>
 800c0ae:	62b8      	str	r0, [r7, #40]	@ 0x28
      }
      ok = mg_flash_swap_bank(sz);
 800c0b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0b2:	f017 fc93 	bl	80239dc <mg_flash_swap_bank>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
  return ok;
 800c0bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3734      	adds	r7, #52	@ 0x34
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd90      	pop	{r4, r7, pc}
 800c0c8:	24002bb0 	.word	0x24002bb0
 800c0cc:	24002bac 	.word	0x24002bac
 800c0d0:	24002bb4 	.word	0x24002bb4

0800c0d4 <swap_size>:
  // MG_DEBUG(("Loaded OTA data. fw %d, bank %d, key %p", fw, bank, key));
  // mg_hexdump(&od, sizeof(od));
  return od;
}

static size_t swap_size(void) {
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08a      	sub	sp, #40	@ 0x28
 800c0d8:	af00      	add	r7, sp, #0
  struct mg_otadata curr = mg_otadata(MG_FIRMWARE_CURRENT);
 800c0da:	f107 0314 	add.w	r3, r7, #20
 800c0de:	2100      	movs	r1, #0
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f017 fd5d 	bl	8023ba0 <mg_otadata>
  struct mg_otadata prev = mg_otadata(MG_FIRMWARE_PREVIOUS);
 800c0e6:	1d3b      	adds	r3, r7, #4
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f017 fd58 	bl	8023ba0 <mg_otadata>
  size_t sz = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (curr.status != MG_OTA_UNAVAILABLE && prev.status != MG_OTA_UNAVAILABLE) {
 800c0f4:	6a3b      	ldr	r3, [r7, #32]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d008      	beq.n	800c10c <swap_size+0x38>
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <swap_size+0x38>
    // We know exact sizes of both firmwares, use MAX(firmware1, firmware2)
    sz = (size_t) (curr.size > prev.size ? curr.size : prev.size);
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	4293      	cmp	r3, r2
 800c106:	bf38      	it	cc
 800c108:	4613      	movcc	r3, r2
 800c10a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return sz;
 800c10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3728      	adds	r7, #40	@ 0x28
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 800c116:	b580      	push	{r7, lr}
 800c118:	b084      	sub	sp, #16
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	4603      	mov	r3, r0
 800c11e:	6039      	str	r1, [r7, #0]
 800c120:	71fb      	strb	r3, [r7, #7]
 800c122:	4613      	mov	r3, r2
 800c124:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 800c12a:	79bb      	ldrb	r3, [r7, #6]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00d      	beq.n	800c14c <mg_pfn_iobuf_private+0x36>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	1c9a      	adds	r2, r3, #2
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d906      	bls.n	800c14c <mg_pfn_iobuf_private+0x36>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	3302      	adds	r3, #2
 800c144:	4619      	mov	r1, r3
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7fa fb90 	bl	800686c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	1c9a      	adds	r2, r3, #2
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d811      	bhi.n	800c17e <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	1c58      	adds	r0, r3, #1
 800c164:	68f9      	ldr	r1, [r7, #12]
 800c166:	6088      	str	r0, [r1, #8]
 800c168:	4413      	add	r3, r2
 800c16a:	79fa      	ldrb	r2, [r7, #7]
 800c16c:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	4413      	add	r3, r2
 800c178:	2200      	movs	r2, #0
 800c17a:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 800c17c:	e00f      	b.n	800c19e <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	689a      	ldr	r2, [r3, #8]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d209      	bcs.n	800c19e <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	1c58      	adds	r0, r3, #1
 800c194:	68f9      	ldr	r1, [r7, #12]
 800c196:	6088      	str	r0, [r1, #8]
 800c198:	4413      	add	r3, r2
 800c19a:	2200      	movs	r2, #0
 800c19c:	701a      	strb	r2, [r3, #0]
}
 800c19e:	bf00      	nop
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	6039      	str	r1, [r7, #0]
 800c1b0:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff ffac 	bl	800c116 <mg_pfn_iobuf_private>
}
 800c1be:	bf00      	nop
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b082      	sub	sp, #8
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	6039      	str	r1, [r7, #0]
 800c1d0:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff ff9c 	bl	800c116 <mg_pfn_iobuf_private>
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b08a      	sub	sp, #40	@ 0x28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	617b      	str	r3, [r7, #20]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	61bb      	str	r3, [r7, #24]
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]
 800c202:	2300      	movs	r3, #0
 800c204:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800c206:	f107 0114 	add.w	r1, r7, #20
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	4809      	ldr	r0, [pc, #36]	@ (800c234 <mg_vsnprintf+0x4c>)
 800c210:	f7f6 fd2a 	bl	8002c68 <mg_vxprintf>
 800c214:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 800c216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d204      	bcs.n	800c228 <mg_vsnprintf+0x40>
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	4413      	add	r3, r2
 800c224:	2200      	movs	r2, #0
 800c226:	701a      	strb	r2, [r3, #0]
  return n;
 800c228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3728      	adds	r7, #40	@ 0x28
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	0800c1a7 	.word	0x0800c1a7

0800c238 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 800c238:	b40c      	push	{r2, r3}
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 800c244:	f107 031c 	add.w	r3, r7, #28
 800c248:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 800c24a:	f107 0308 	add.w	r3, r7, #8
 800c24e:	69ba      	ldr	r2, [r7, #24]
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff ffc8 	bl	800c1e8 <mg_vsnprintf>
 800c258:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 800c25a:	68fb      	ldr	r3, [r7, #12]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c266:	b002      	add	sp, #8
 800c268:	4770      	bx	lr
	...

0800c26c <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 800c276:	2300      	movs	r3, #0
 800c278:	60bb      	str	r3, [r7, #8]
 800c27a:	2300      	movs	r3, #0
 800c27c:	60fb      	str	r3, [r7, #12]
 800c27e:	2300      	movs	r3, #0
 800c280:	613b      	str	r3, [r7, #16]
 800c282:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c286:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 800c288:	f107 0108 	add.w	r1, r7, #8
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	4803      	ldr	r0, [pc, #12]	@ (800c2a0 <mg_vmprintf+0x34>)
 800c292:	f7f6 fce9 	bl	8002c68 <mg_vxprintf>
  return (char *) io.buf;
 800c296:	68bb      	ldr	r3, [r7, #8]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	0800c1c7 	.word	0x0800c1c7

0800c2a4 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 800c2a4:	b40f      	push	{r0, r1, r2, r3}
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b082      	sub	sp, #8
 800c2aa:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 800c2ac:	f107 0314 	add.w	r3, r7, #20
 800c2b0:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 800c2b2:	463b      	mov	r3, r7
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6938      	ldr	r0, [r7, #16]
 800c2b8:	f7ff ffd8 	bl	800c26c <mg_vmprintf>
 800c2bc:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 800c2be:	687b      	ldr	r3, [r7, #4]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2ca:	b004      	add	sp, #16
 800c2cc:	4770      	bx	lr

0800c2ce <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	6039      	str	r1, [r7, #0]
 800c2d8:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 800c2da:	79fb      	ldrb	r3, [r7, #7]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f016 f87d 	bl	80223dc <putchar>
  (void) param;
}
 800c2e2:	bf00      	nop
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
	...

0800c2ec <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 800c2ec:	b480      	push	{r7}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 800c2f8:	4b19      	ldr	r3, [pc, #100]	@ (800c360 <mg_esc+0x74>)
 800c2fa:	613b      	str	r3, [r7, #16]
 800c2fc:	4b19      	ldr	r3, [pc, #100]	@ (800c364 <mg_esc+0x78>)
 800c2fe:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800c300:	78fb      	ldrb	r3, [r7, #3]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d001      	beq.n	800c30a <mg_esc+0x1e>
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	e000      	b.n	800c30c <mg_esc+0x20>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	e01b      	b.n	800c348 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	461a      	mov	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4293      	cmp	r3, r2
 800c31a:	d112      	bne.n	800c342 <mg_esc+0x56>
 800c31c:	78fb      	ldrb	r3, [r7, #3]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d007      	beq.n	800c332 <mg_esc+0x46>
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	461a      	mov	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4413      	add	r3, r2
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	e00f      	b.n	800c352 <mg_esc+0x66>
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	461a      	mov	r2, r3
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	4413      	add	r3, r2
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	e007      	b.n	800c352 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	3301      	adds	r3, #1
 800c346:	617b      	str	r3, [r7, #20]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1df      	bne.n	800c310 <mg_esc+0x24>
  }
  return 0;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	371c      	adds	r7, #28
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	080247f8 	.word	0x080247f8
 800c364:	08024800 	.word	0x08024800

0800c368 <mg_escape>:

static char mg_escape(int c) {
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 800c370:	2101      	movs	r1, #1
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff ffba 	bl	800c2ec <mg_esc>
 800c378:	4603      	mov	r3, r0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 800c382:	b580      	push	{r7, lr}
 800c384:	b088      	sub	sp, #32
 800c386:	af00      	add	r7, sp, #0
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	60b9      	str	r1, [r7, #8]
 800c38c:	607a      	str	r2, [r7, #4]
 800c38e:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 800c390:	2300      	movs	r3, #0
 800c392:	61fb      	str	r3, [r7, #28]
 800c394:	2300      	movs	r3, #0
 800c396:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800c398:	2300      	movs	r3, #0
 800c39a:	61fb      	str	r3, [r7, #28]
 800c39c:	e023      	b.n	800c3e6 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff ffde 	bl	800c368 <mg_escape>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	75fb      	strb	r3, [r7, #23]
    if (c) {
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00c      	beq.n	800c3d0 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	68b9      	ldr	r1, [r7, #8]
 800c3ba:	205c      	movs	r0, #92	@ 0x5c
 800c3bc:	4798      	blx	r3
 800c3be:	7dfa      	ldrb	r2, [r7, #23]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	4798      	blx	r3
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	61bb      	str	r3, [r7, #24]
 800c3ce:	e007      	b.n	800c3e0 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	781a      	ldrb	r2, [r3, #0]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	68b9      	ldr	r1, [r7, #8]
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	61fb      	str	r3, [r7, #28]
 800c3e6:	69fa      	ldr	r2, [r7, #28]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d205      	bcs.n	800c3fa <qcpy+0x78>
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1d1      	bne.n	800c39e <qcpy+0x1c>
    }
  }
  return i + extra;
 800c3fa:	69fa      	ldr	r2, [r7, #28]
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	4413      	add	r3, r2
}
 800c400:	4618      	mov	r0, r3
 800c402:	3720      	adds	r7, #32
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	1d19      	adds	r1, r3, #4
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	6011      	str	r1, [r2, #0]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	1d19      	adds	r1, r3, #4
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	6011      	str	r1, [r2, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d109      	bne.n	800c44a <mg_print_esc+0x42>
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d004      	beq.n	800c446 <mg_print_esc+0x3e>
 800c43c:	6938      	ldr	r0, [r7, #16]
 800c43e:	f7f3 ffaf 	bl	80003a0 <strlen>
 800c442:	4603      	mov	r3, r0
 800c444:	e000      	b.n	800c448 <mg_print_esc+0x40>
 800c446:	2300      	movs	r3, #0
 800c448:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	68b9      	ldr	r1, [r7, #8]
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7ff ff96 	bl	800c382 <qcpy>
 800c456:	4603      	mov	r3, r0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3718      	adds	r7, #24
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 800c46c:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	4413      	add	r3, r2
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	689a      	ldr	r2, [r3, #8]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4413      	add	r3, r2
 800c486:	1d1a      	adds	r2, r3, #4
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d906      	bls.n	800c49e <mg_queue_read_len+0x3e>
 800c490:	4b05      	ldr	r3, [pc, #20]	@ (800c4a8 <mg_queue_read_len+0x48>)
 800c492:	4a06      	ldr	r2, [pc, #24]	@ (800c4ac <mg_queue_read_len+0x4c>)
 800c494:	f641 21c9 	movw	r1, #6857	@ 0x1ac9
 800c498:	4805      	ldr	r0, [pc, #20]	@ (800c4b0 <mg_queue_read_len+0x50>)
 800c49a:	f015 fd1d 	bl	8021ed8 <__assert_func>
  return n;
 800c49e:	68fb      	ldr	r3, [r7, #12]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	08024c00 	.word	0x08024c00
 800c4ac:	0802632c 	.word	0x0802632c
 800c4b0:	08024c24 	.word	0x08024c24

0800c4b4 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 800c4d0:	f3bf 8f5b 	dmb	ish
}
 800c4d4:	bf00      	nop
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	2308      	movs	r3, #8
 800c4f2:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	68da      	ldr	r2, [r3, #12]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d312      	bcc.n	800c526 <mg_queue_book+0x46>
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	68da      	ldr	r2, [r3, #12]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	441a      	add	r2, r3
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	441a      	add	r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	429a      	cmp	r2, r3
 800c512:	d808      	bhi.n	800c526 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	1ad2      	subs	r2, r2, r3
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	617b      	str	r3, [r7, #20]
 800c524:	e011      	b.n	800c54a <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	68da      	ldr	r2, [r3, #12]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d30b      	bcc.n	800c54a <mg_queue_book+0x6a>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d206      	bcs.n	800c54a <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 800c53c:	2100      	movs	r1, #0
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f7ff ffb8 	bl	800c4b4 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	68da      	ldr	r2, [r3, #12]
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	441a      	add	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	441a      	add	r2, r3
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d207      	bcs.n	800c56e <mg_queue_book+0x8e>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	689a      	ldr	r2, [r3, #8]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	1ad2      	subs	r2, r2, r3
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d007      	beq.n	800c584 <mg_queue_book+0xa4>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	3304      	adds	r3, #4
 800c57e:	441a      	add	r2, r3
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	601a      	str	r2, [r3, #0]
  return space;
 800c584:	697b      	ldr	r3, [r7, #20]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
	...

0800c590 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	689a      	ldr	r2, [r3, #8]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d013      	beq.n	800c5d2 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7ff ff58 	bl	800c460 <mg_queue_read_len>
 800c5b0:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10c      	bne.n	800c5d2 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d903      	bls.n	800c5d2 <mg_queue_next+0x42>
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff ff48 	bl	800c460 <mg_queue_read_len>
 800c5d0:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d007      	beq.n	800c5e8 <mg_queue_next+0x58>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	441a      	add	r2, r3
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	689a      	ldr	r2, [r3, #8]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	441a      	add	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d906      	bls.n	800c606 <mg_queue_next+0x76>
 800c5f8:	4b05      	ldr	r3, [pc, #20]	@ (800c610 <mg_queue_next+0x80>)
 800c5fa:	4a06      	ldr	r2, [pc, #24]	@ (800c614 <mg_queue_next+0x84>)
 800c5fc:	f641 21ea 	movw	r1, #6890	@ 0x1aea
 800c600:	4805      	ldr	r0, [pc, #20]	@ (800c618 <mg_queue_next+0x88>)
 800c602:	f015 fc69 	bl	8021ed8 <__assert_func>
  return len;
 800c606:	68fb      	ldr	r3, [r7, #12]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	08024c3c 	.word	0x08024c3c
 800c614:	08026340 	.word	0x08026340
 800c618:	08024c24 	.word	0x08024c24

0800c61c <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d106      	bne.n	800c63a <mg_queue_add+0x1e>
 800c62c:	4b13      	ldr	r3, [pc, #76]	@ (800c67c <mg_queue_add+0x60>)
 800c62e:	4a14      	ldr	r2, [pc, #80]	@ (800c680 <mg_queue_add+0x64>)
 800c630:	f641 21ef 	movw	r1, #6895	@ 0x1aef
 800c634:	4813      	ldr	r0, [pc, #76]	@ (800c684 <mg_queue_add+0x68>)
 800c636:	f015 fc4f 	bl	8021ed8 <__assert_func>
  mg_queue_write_len(q, len);
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f7ff ff39 	bl	800c4b4 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68da      	ldr	r2, [r3, #12]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	4413      	add	r3, r2
 800c64a:	f103 0208 	add.w	r2, r3, #8
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	429a      	cmp	r2, r3
 800c654:	d906      	bls.n	800c664 <mg_queue_add+0x48>
 800c656:	4b0c      	ldr	r3, [pc, #48]	@ (800c688 <mg_queue_add+0x6c>)
 800c658:	4a09      	ldr	r2, [pc, #36]	@ (800c680 <mg_queue_add+0x64>)
 800c65a:	f641 21f1 	movw	r1, #6897	@ 0x1af1
 800c65e:	4809      	ldr	r0, [pc, #36]	@ (800c684 <mg_queue_add+0x68>)
 800c660:	f015 fc3a 	bl	8021ed8 <__assert_func>
  q->head += len + sizeof(uint32_t);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	68da      	ldr	r2, [r3, #12]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	4413      	add	r3, r2
 800c66c:	1d1a      	adds	r2, r3, #4
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	60da      	str	r2, [r3, #12]
}
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	08024c58 	.word	0x08024c58
 800c680:	08026350 	.word	0x08026350
 800c684:	08024c24 	.word	0x08024c24
 800c688:	08024c60 	.word	0x08024c60

0800c68c <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	689a      	ldr	r2, [r3, #8]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	4413      	add	r3, r2
 800c69e:	1d1a      	adds	r2, r3, #4
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	1d1a      	adds	r2, r3, #4
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d906      	bls.n	800c6c0 <mg_queue_del+0x34>
 800c6b2:	4b05      	ldr	r3, [pc, #20]	@ (800c6c8 <mg_queue_del+0x3c>)
 800c6b4:	4a05      	ldr	r2, [pc, #20]	@ (800c6cc <mg_queue_del+0x40>)
 800c6b6:	f641 21f7 	movw	r1, #6903	@ 0x1af7
 800c6ba:	4805      	ldr	r0, [pc, #20]	@ (800c6d0 <mg_queue_del+0x44>)
 800c6bc:	f015 fc0c 	bl	8021ed8 <__assert_func>
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	08024c90 	.word	0x08024c90
 800c6cc:	08026360 	.word	0x08026360
 800c6d0:	08024c24 	.word	0x08024c24

0800c6d4 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 800c6e2:	6879      	ldr	r1, [r7, #4]
 800c6e4:	f04f 0200 	mov.w	r2, #0
 800c6e8:	f04f 0300 	mov.w	r3, #0
 800c6ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a0e      	ldr	r2, [pc, #56]	@ (800c72c <mg_sha256_init+0x58>)
 800c6f4:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a0d      	ldr	r2, [pc, #52]	@ (800c730 <mg_sha256_init+0x5c>)
 800c6fa:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a0d      	ldr	r2, [pc, #52]	@ (800c734 <mg_sha256_init+0x60>)
 800c700:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a0c      	ldr	r2, [pc, #48]	@ (800c738 <mg_sha256_init+0x64>)
 800c706:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a0c      	ldr	r2, [pc, #48]	@ (800c73c <mg_sha256_init+0x68>)
 800c70c:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a0b      	ldr	r2, [pc, #44]	@ (800c740 <mg_sha256_init+0x6c>)
 800c712:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a0b      	ldr	r2, [pc, #44]	@ (800c744 <mg_sha256_init+0x70>)
 800c718:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4a0a      	ldr	r2, [pc, #40]	@ (800c748 <mg_sha256_init+0x74>)
 800c71e:	61da      	str	r2, [r3, #28]
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	6a09e667 	.word	0x6a09e667
 800c730:	bb67ae85 	.word	0xbb67ae85
 800c734:	3c6ef372 	.word	0x3c6ef372
 800c738:	a54ff53a 	.word	0xa54ff53a
 800c73c:	510e527f 	.word	0x510e527f
 800c740:	9b05688c 	.word	0x9b05688c
 800c744:	1f83d9ab 	.word	0x1f83d9ab
 800c748:	5be0cd19 	.word	0x5be0cd19

0800c74c <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 800c74c:	b480      	push	{r7}
 800c74e:	b0cf      	sub	sp, #316	@ 0x13c
 800c750:	af00      	add	r7, sp, #0
 800c752:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c756:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c75a:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800c75c:	2300      	movs	r3, #0
 800c75e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800c762:	2300      	movs	r3, #0
 800c764:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800c768:	e043      	b.n	800c7f2 <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800c76a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c76e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c778:	4413      	add	r3, r2
 800c77a:	332c      	adds	r3, #44	@ 0x2c
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800c780:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c784:	3301      	adds	r3, #1
 800c786:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800c78a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800c78e:	6809      	ldr	r1, [r1, #0]
 800c790:	440b      	add	r3, r1
 800c792:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c796:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800c798:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 800c79a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c79e:	3302      	adds	r3, #2
 800c7a0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800c7a4:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800c7a8:	6809      	ldr	r1, [r1, #0]
 800c7aa:	440b      	add	r3, r1
 800c7ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c7b0:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800c7b2:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 800c7b4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800c7b8:	3203      	adds	r2, #3
 800c7ba:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800c7be:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800c7c2:	6809      	ldr	r1, [r1, #0]
 800c7c4:	440a      	add	r2, r1
 800c7c6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800c7ca:	ea43 0102 	orr.w	r1, r3, r2
 800c7ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c7d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c7d6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800c7da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800c7de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800c7e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800c7f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c7f6:	2b0f      	cmp	r3, #15
 800c7f8:	ddb7      	ble.n	800c76a <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 800c7fa:	e069      	b.n	800c8d0 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 800c7fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c800:	1e9a      	subs	r2, r3, #2
 800c802:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c806:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80e:	ea4f 4273 	mov.w	r2, r3, ror #17
 800c812:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c816:	1e99      	subs	r1, r3, #2
 800c818:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c81c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c820:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c824:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800c828:	405a      	eors	r2, r3
 800c82a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c82e:	1e99      	subs	r1, r3, #2
 800c830:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c834:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c838:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c83c:	0a9b      	lsrs	r3, r3, #10
 800c83e:	405a      	eors	r2, r3
 800c840:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c844:	1fd9      	subs	r1, r3, #7
 800c846:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c84a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c84e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c852:	441a      	add	r2, r3
 800c854:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c858:	f1a3 010f 	sub.w	r1, r3, #15
 800c85c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c860:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c868:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800c86c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c870:	f1a3 000f 	sub.w	r0, r3, #15
 800c874:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c878:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c87c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c880:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800c884:	4059      	eors	r1, r3
 800c886:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c88a:	f1a3 000f 	sub.w	r0, r3, #15
 800c88e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c892:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c896:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c89a:	08db      	lsrs	r3, r3, #3
 800c89c:	404b      	eors	r3, r1
 800c89e:	441a      	add	r2, r3
 800c8a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c8a4:	f1a3 0110 	sub.w	r1, r3, #16
 800c8a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c8ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c8b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8b4:	18d1      	adds	r1, r2, r3
 800c8b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c8ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c8be:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800c8c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 800c8c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800c8d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c8d4:	2b3f      	cmp	r3, #63	@ 0x3f
 800c8d6:	dd91      	ble.n	800c7fc <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 800c8d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c8dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 800c8e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c8ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 800c8f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c8fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 800c908:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c90c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 800c918:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c91c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 800c928:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c92c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	695b      	ldr	r3, [r3, #20]
 800c934:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 800c938:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c93c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 800c948:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c94c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	69db      	ldr	r3, [r3, #28]
 800c954:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 800c958:	2300      	movs	r3, #0
 800c95a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800c95e:	e078      	b.n	800ca52 <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 800c960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c964:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800c968:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c96c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800c970:	405a      	eors	r2, r3
 800c972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c976:	ea4f 6373 	mov.w	r3, r3, ror #25
 800c97a:	405a      	eors	r2, r3
 800c97c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c980:	441a      	add	r2, r3
 800c982:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800c986:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c98a:	4019      	ands	r1, r3
 800c98c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c990:	43d8      	mvns	r0, r3
 800c992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c996:	4003      	ands	r3, r0
 800c998:	404b      	eors	r3, r1
 800c99a:	441a      	add	r2, r3
 800c99c:	496e      	ldr	r1, [pc, #440]	@ (800cb58 <mg_sha256_chunk+0x40c>)
 800c99e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c9a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9a6:	441a      	add	r2, r3
 800c9a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c9ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c9b0:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800c9b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 800c9be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c9c2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800c9c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c9ca:	ea4f 3373 	mov.w	r3, r3, ror #13
 800c9ce:	405a      	eors	r2, r3
 800c9d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c9d4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800c9d8:	405a      	eors	r2, r3
 800c9da:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800c9de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c9e2:	4059      	eors	r1, r3
 800c9e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c9e8:	4019      	ands	r1, r3
 800c9ea:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800c9ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c9f2:	4003      	ands	r3, r0
 800c9f4:	404b      	eors	r3, r1
 800c9f6:	4413      	add	r3, r2
 800c9f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 800c9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca00:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 800ca04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ca08:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 800ca0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ca10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 800ca14:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800ca18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 800ca22:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ca26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 800ca2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 800ca32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 800ca3a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800ca3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ca42:	4413      	add	r3, r2
 800ca44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 800ca48:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800ca52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ca56:	2b3f      	cmp	r3, #63	@ 0x3f
 800ca58:	dd82      	ble.n	800c960 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 800ca5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ca5e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca6a:	441a      	add	r2, r3
 800ca6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ca70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 800ca78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ca7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685a      	ldr	r2, [r3, #4]
 800ca84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca88:	441a      	add	r2, r3
 800ca8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ca8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 800ca96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ca9a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689a      	ldr	r2, [r3, #8]
 800caa2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800caa6:	441a      	add	r2, r3
 800caa8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800caac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 800cab4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cab8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cac4:	441a      	add	r2, r3
 800cac6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800caca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 800cad2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cad6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	691a      	ldr	r2, [r3, #16]
 800cade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cae2:	441a      	add	r2, r3
 800cae4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cae8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 800caf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800caf4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	695a      	ldr	r2, [r3, #20]
 800cafc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cb00:	441a      	add	r2, r3
 800cb02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb06:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 800cb0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb12:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	699a      	ldr	r2, [r3, #24]
 800cb1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb1e:	441a      	add	r2, r3
 800cb20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 800cb2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	69da      	ldr	r2, [r3, #28]
 800cb38:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cb3c:	441a      	add	r2, r3
 800cb3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cb42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	61da      	str	r2, [r3, #28]
}
 800cb4a:	bf00      	nop
 800cb4c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	08026154 	.word	0x08026154

0800cb5c <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 800cb5c:	b5b0      	push	{r4, r5, r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 800cb68:	2300      	movs	r3, #0
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	e026      	b.n	800cbbc <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	441a      	add	r2, r3
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb78:	7811      	ldrb	r1, [r2, #0]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	460a      	mov	r2, r1
 800cb80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb88:	1c5a      	adds	r2, r3, #1
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	629a      	str	r2, [r3, #40]	@ 0x28
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb92:	2b40      	cmp	r3, #64	@ 0x40
 800cb94:	d10f      	bne.n	800cbb6 <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff fdd8 	bl	800c74c <mg_sha256_chunk>
      ctx->bits += 512;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cba2:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 800cba6:	f143 0500 	adc.w	r5, r3, #0
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	617b      	str	r3, [r7, #20]
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d3d4      	bcc.n	800cb6e <mg_sha256_update+0x12>
    }
  }
}
 800cbc4:	bf00      	nop
 800cbc6:	bf00      	nop
 800cbc8:	3718      	adds	r7, #24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bdb0      	pop	{r4, r5, r7, pc}

0800cbce <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 800cbce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbde:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2b37      	cmp	r3, #55	@ 0x37
 800cbe4:	d814      	bhi.n	800cc10 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	1c5a      	adds	r2, r3, #1
 800cbea:	60fa      	str	r2, [r7, #12]
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	4413      	add	r3, r2
 800cbf0:	2280      	movs	r2, #128	@ 0x80
 800cbf2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800cbf6:	e007      	b.n	800cc08 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	60fa      	str	r2, [r7, #12]
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	4413      	add	r3, r2
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b37      	cmp	r3, #55	@ 0x37
 800cc0c:	d9f4      	bls.n	800cbf8 <mg_sha256_final+0x2a>
 800cc0e:	e01d      	b.n	800cc4c <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	1c5a      	adds	r2, r3, #1
 800cc14:	60fa      	str	r2, [r7, #12]
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	4413      	add	r3, r2
 800cc1a:	2280      	movs	r2, #128	@ 0x80
 800cc1c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800cc20:	e007      	b.n	800cc32 <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	60fa      	str	r2, [r7, #12]
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2b3f      	cmp	r3, #63	@ 0x3f
 800cc36:	d9f4      	bls.n	800cc22 <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 800cc38:	6838      	ldr	r0, [r7, #0]
 800cc3a:	f7ff fd87 	bl	800c74c <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	332c      	adds	r3, #44	@ 0x2c
 800cc42:	2238      	movs	r2, #56	@ 0x38
 800cc44:	2100      	movs	r1, #0
 800cc46:	4618      	mov	r0, r3
 800cc48:	f015 fc71 	bl	802252e <memset>
  }

  ctx->bits += ctx->len * 8;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800cc56:	00c9      	lsls	r1, r1, #3
 800cc58:	2000      	movs	r0, #0
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	eb12 0804 	adds.w	r8, r2, r4
 800cc62:	eb43 0905 	adc.w	r9, r3, r5
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc72:	b2d2      	uxtb	r2, r2
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cc80:	f04f 0200 	mov.w	r2, #0
 800cc84:	f04f 0300 	mov.w	r3, #0
 800cc88:	0a02      	lsrs	r2, r0, #8
 800cc8a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc8e:	0a0b      	lsrs	r3, r1, #8
 800cc90:	b2d2      	uxtb	r2, r2
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cc9e:	f04f 0200 	mov.w	r2, #0
 800cca2:	f04f 0300 	mov.w	r3, #0
 800cca6:	0c02      	lsrs	r2, r0, #16
 800cca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ccac:	0c0b      	lsrs	r3, r1, #16
 800ccae:	b2d2      	uxtb	r2, r2
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800ccbc:	f04f 0200 	mov.w	r2, #0
 800ccc0:	f04f 0300 	mov.w	r3, #0
 800ccc4:	0e02      	lsrs	r2, r0, #24
 800ccc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ccca:	0e0b      	lsrs	r3, r1, #24
 800cccc:	b2d2      	uxtb	r2, r2
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800ccda:	f04f 0200 	mov.w	r2, #0
 800ccde:	f04f 0300 	mov.w	r3, #0
 800cce2:	000a      	movs	r2, r1
 800cce4:	2300      	movs	r3, #0
 800cce6:	b2d2      	uxtb	r2, r2
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800ccf4:	f04f 0200 	mov.w	r2, #0
 800ccf8:	f04f 0300 	mov.w	r3, #0
 800ccfc:	0a0a      	lsrs	r2, r1, #8
 800ccfe:	2300      	movs	r3, #0
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cd0e:	f04f 0200 	mov.w	r2, #0
 800cd12:	f04f 0300 	mov.w	r3, #0
 800cd16:	0c0a      	lsrs	r2, r1, #16
 800cd18:	2300      	movs	r3, #0
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cd28:	f04f 0200 	mov.w	r2, #0
 800cd2c:	f04f 0300 	mov.w	r3, #0
 800cd30:	0e0a      	lsrs	r2, r1, #24
 800cd32:	2300      	movs	r3, #0
 800cd34:	b2d2      	uxtb	r2, r2
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 800cd3c:	6838      	ldr	r0, [r7, #0]
 800cd3e:	f7ff fd05 	bl	800c74c <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 800cd42:	2300      	movs	r3, #0
 800cd44:	60fb      	str	r3, [r7, #12]
 800cd46:	e071      	b.n	800ce2c <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f1c3 0303 	rsb	r3, r3, #3
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	fa22 f103 	lsr.w	r1, r2, r3
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	b2ca      	uxtb	r2, r1
 800cd60:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	685a      	ldr	r2, [r3, #4]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f1c3 0303 	rsb	r3, r3, #3
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	fa22 f103 	lsr.w	r1, r2, r3
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3304      	adds	r3, #4
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	4413      	add	r3, r2
 800cd7a:	b2ca      	uxtb	r2, r1
 800cd7c:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	689a      	ldr	r2, [r3, #8]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f1c3 0303 	rsb	r3, r3, #3
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	fa22 f103 	lsr.w	r1, r2, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3308      	adds	r3, #8
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	4413      	add	r3, r2
 800cd96:	b2ca      	uxtb	r2, r1
 800cd98:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	68da      	ldr	r2, [r3, #12]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f1c3 0303 	rsb	r3, r3, #3
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	fa22 f103 	lsr.w	r1, r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	330c      	adds	r3, #12
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	b2ca      	uxtb	r2, r1
 800cdb4:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	691a      	ldr	r2, [r3, #16]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f1c3 0303 	rsb	r3, r3, #3
 800cdc0:	00db      	lsls	r3, r3, #3
 800cdc2:	fa22 f103 	lsr.w	r1, r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	3310      	adds	r3, #16
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	4413      	add	r3, r2
 800cdce:	b2ca      	uxtb	r2, r1
 800cdd0:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	695a      	ldr	r2, [r3, #20]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f1c3 0303 	rsb	r3, r3, #3
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	fa22 f103 	lsr.w	r1, r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	3314      	adds	r3, #20
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	4413      	add	r3, r2
 800cdea:	b2ca      	uxtb	r2, r1
 800cdec:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	699a      	ldr	r2, [r3, #24]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f1c3 0303 	rsb	r3, r3, #3
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	fa22 f103 	lsr.w	r1, r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3318      	adds	r3, #24
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	4413      	add	r3, r2
 800ce06:	b2ca      	uxtb	r2, r1
 800ce08:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	69da      	ldr	r2, [r3, #28]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f1c3 0303 	rsb	r3, r3, #3
 800ce14:	00db      	lsls	r3, r3, #3
 800ce16:	fa22 f103 	lsr.w	r1, r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	331c      	adds	r3, #28
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4413      	add	r3, r2
 800ce22:	b2ca      	uxtb	r2, r1
 800ce24:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	d98a      	bls.n	800cd48 <mg_sha256_final+0x17a>
  }
}
 800ce32:	bf00      	nop
 800ce34:	bf00      	nop
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ce3e <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 800ce3e:	b590      	push	{r4, r7, lr}
 800ce40:	b0d3      	sub	sp, #332	@ 0x14c
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800ce48:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800ce4c:	6020      	str	r0, [r4, #0]
 800ce4e:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800ce52:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 800ce56:	6001      	str	r1, [r0, #0]
 800ce58:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800ce5c:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800ce60:	600a      	str	r2, [r1, #0]
 800ce62:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800ce66:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800ce6a:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce72:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800ce76:	223c      	movs	r2, #60	@ 0x3c
 800ce78:	2100      	movs	r1, #0
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f015 fb57 	bl	802252e <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 800ce80:	f107 0310 	add.w	r3, r7, #16
 800ce84:	2240      	movs	r2, #64	@ 0x40
 800ce86:	2136      	movs	r1, #54	@ 0x36
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f015 fb50 	bl	802252e <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 800ce8e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ce92:	2240      	movs	r2, #64	@ 0x40
 800ce94:	215c      	movs	r1, #92	@ 0x5c
 800ce96:	4618      	mov	r0, r3
 800ce98:	f015 fb49 	bl	802252e <memset>
  if (keysz < 64) {
 800ce9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cea0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b3f      	cmp	r3, #63	@ 0x3f
 800cea8:	d815      	bhi.n	800ced6 <mg_hmac_sha256+0x98>
    if (keysz > 0) memmove(k, key, keysz);
 800ceaa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ceae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d029      	beq.n	800cf0c <mg_hmac_sha256+0xce>
 800ceb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cebc:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800cec0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cec4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800cec8:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 800cecc:	6812      	ldr	r2, [r2, #0]
 800cece:	6819      	ldr	r1, [r3, #0]
 800ced0:	f015 fb13 	bl	80224fa <memmove>
 800ced4:	e01a      	b.n	800cf0c <mg_hmac_sha256+0xce>
  } else {
    mg_sha256_init(&ctx);
 800ced6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff fbfa 	bl	800c6d4 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 800cee0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cee4:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800cee8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ceec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800cef0:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800cef4:	6812      	ldr	r2, [r2, #0]
 800cef6:	6819      	ldr	r1, [r3, #0]
 800cef8:	f7ff fe30 	bl	800cb5c <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 800cefc:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800cf00:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff fe61 	bl	800cbce <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800cf12:	e032      	b.n	800cf7a <mg_hmac_sha256+0x13c>
    i_pad[i] ^= k[i];
 800cf14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cf18:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800cf1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cf20:	4413      	add	r3, r2
 800cf22:	781a      	ldrb	r2, [r3, #0]
 800cf24:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800cf28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cf2c:	440b      	add	r3, r1
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	4053      	eors	r3, r2
 800cf32:	b2d9      	uxtb	r1, r3
 800cf34:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cf38:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800cf3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cf40:	4413      	add	r3, r2
 800cf42:	460a      	mov	r2, r1
 800cf44:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 800cf46:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800cf4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cf4e:	4413      	add	r3, r2
 800cf50:	781a      	ldrb	r2, [r3, #0]
 800cf52:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800cf56:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cf5a:	440b      	add	r3, r1
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	4053      	eors	r3, r2
 800cf60:	b2d9      	uxtb	r1, r3
 800cf62:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800cf66:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cf6a:	4413      	add	r3, r2
 800cf6c:	460a      	mov	r2, r1
 800cf6e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 800cf70:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cf74:	3301      	adds	r3, #1
 800cf76:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800cf7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cf7e:	2b3f      	cmp	r3, #63	@ 0x3f
 800cf80:	d9c8      	bls.n	800cf14 <mg_hmac_sha256+0xd6>
  }
  mg_sha256_init(&ctx);
 800cf82:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7ff fba4 	bl	800c6d4 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 800cf8c:	f107 0110 	add.w	r1, r7, #16
 800cf90:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800cf94:	2240      	movs	r2, #64	@ 0x40
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff fde0 	bl	800cb5c <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 800cf9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cfa0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800cfa4:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800cfa8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800cfac:	6819      	ldr	r1, [r3, #0]
 800cfae:	f7ff fdd5 	bl	800cb5c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800cfb2:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800cfb6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cfba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	f7ff fe04 	bl	800cbce <mg_sha256_final>
  mg_sha256_init(&ctx);
 800cfc6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff fb82 	bl	800c6d4 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 800cfd0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800cfd4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800cfd8:	2240      	movs	r2, #64	@ 0x40
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7ff fdbe 	bl	800cb5c <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 800cfe0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cfe4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800cfe8:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800cfec:	2220      	movs	r2, #32
 800cfee:	6819      	ldr	r1, [r3, #0]
 800cff0:	f7ff fdb4 	bl	800cb5c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800cff4:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800cff8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800cffc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d000:	4611      	mov	r1, r2
 800d002:	6818      	ldr	r0, [r3, #0]
 800d004:	f7ff fde3 	bl	800cbce <mg_sha256_final>
}
 800d008:	bf00      	nop
 800d00a:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd90      	pop	{r4, r7, pc}
	...

0800d014 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 800d014:	b5b0      	push	{r4, r5, r7, lr}
 800d016:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 800d018:	f7f3 fe4a 	bl	8000cb0 <mg_millis>
 800d01c:	4b05      	ldr	r3, [pc, #20]	@ (800d034 <mg_now+0x20>)
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	1884      	adds	r4, r0, r2
 800d024:	eb41 0503 	adc.w	r5, r1, r3
 800d028:	4622      	mov	r2, r4
 800d02a:	462b      	mov	r3, r5
}
 800d02c:	4610      	mov	r0, r2
 800d02e:	4619      	mov	r1, r3
 800d030:	bdb0      	pop	{r4, r5, r7, pc}
 800d032:	bf00      	nop
 800d034:	24002bb8 	.word	0x24002bb8

0800d038 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 800d038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d03c:	b086      	sub	sp, #24
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4618      	mov	r0, r3
 800d048:	f008 ffb8 	bl	8015fbc <mg_ntohl>
 800d04c:	6178      	str	r0, [r7, #20]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3304      	adds	r3, #4
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4618      	mov	r0, r3
 800d056:	f008 ffb1 	bl	8015fbc <mg_ntohl>
 800d05a:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d003      	beq.n	800d06a <gettimestamp+0x32>
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	4b2e      	ldr	r3, [pc, #184]	@ (800d120 <gettimestamp+0xe8>)
 800d066:	4413      	add	r3, r2
 800d068:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2200      	movs	r2, #0
 800d06e:	4698      	mov	r8, r3
 800d070:	4691      	mov	r9, r2
 800d072:	4642      	mov	r2, r8
 800d074:	464b      	mov	r3, r9
 800d076:	f04f 0000 	mov.w	r0, #0
 800d07a:	f04f 0100 	mov.w	r1, #0
 800d07e:	0159      	lsls	r1, r3, #5
 800d080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d084:	0150      	lsls	r0, r2, #5
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	ebb2 0408 	subs.w	r4, r2, r8
 800d08e:	eb63 0509 	sbc.w	r5, r3, r9
 800d092:	f04f 0200 	mov.w	r2, #0
 800d096:	f04f 0300 	mov.w	r3, #0
 800d09a:	00ab      	lsls	r3, r5, #2
 800d09c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d0a0:	00a2      	lsls	r2, r4, #2
 800d0a2:	4614      	mov	r4, r2
 800d0a4:	461d      	mov	r5, r3
 800d0a6:	eb14 0a08 	adds.w	sl, r4, r8
 800d0aa:	eb45 0b09 	adc.w	fp, r5, r9
 800d0ae:	f04f 0200 	mov.w	r2, #0
 800d0b2:	f04f 0300 	mov.w	r3, #0
 800d0b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d0ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d0be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0c2:	4692      	mov	sl, r2
 800d0c4:	469b      	mov	fp, r3
 800d0c6:	4654      	mov	r4, sl
 800d0c8:	465d      	mov	r5, fp
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	ee07 3a90 	vmov	s15, r3
 800d0d0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800d0d4:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 800d110 <gettimestamp+0xd8>
 800d0d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d0dc:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800d118 <gettimestamp+0xe0>
 800d0e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0e4:	ec51 0b17 	vmov	r0, r1, d7
 800d0e8:	f7f3 fb86 	bl	80007f8 <__aeabi_d2lz>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	18a1      	adds	r1, r4, r2
 800d0f2:	6039      	str	r1, [r7, #0]
 800d0f4:	eb45 0303 	adc.w	r3, r5, r3
 800d0f8:	607b      	str	r3, [r7, #4]
 800d0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800d0fe:	4610      	mov	r0, r2
 800d100:	4619      	mov	r1, r3
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d10a:	bf00      	nop
 800d10c:	f3af 8000 	nop.w
 800d110:	ffe00000 	.word	0xffe00000
 800d114:	41efffff 	.word	0x41efffff
 800d118:	00000000 	.word	0x00000000
 800d11c:	408f4000 	.word	0x408f4000
 800d120:	7c558180 	.word	0x7c558180

0800d124 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 800d124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d128:	b096      	sub	sp, #88	@ 0x58
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	61f8      	str	r0, [r7, #28]
 800d12e:	61b9      	str	r1, [r7, #24]
  int64_t epoch_milliseconds = -1;
 800d130:	f04f 32ff 	mov.w	r2, #4294967295
 800d134:	f04f 33ff 	mov.w	r3, #4294967295
 800d138:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  int mode = len > 0 ? buf[0] & 7 : 0;
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d004      	beq.n	800d14c <mg_sntp_parse+0x28>
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	f003 0307 	and.w	r3, r3, #7
 800d14a:	e000      	b.n	800d14e <mg_sntp_parse+0x2a>
 800d14c:	2300      	movs	r3, #0
 800d14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d006      	beq.n	800d164 <mg_sntp_parse+0x40>
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	08db      	lsrs	r3, r3, #3
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	f003 0307 	and.w	r3, r3, #7
 800d162:	e000      	b.n	800d166 <mg_sntp_parse+0x42>
 800d164:	2300      	movs	r3, #0
 800d166:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (len < 48) {
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	2b2f      	cmp	r3, #47	@ 0x2f
 800d16c:	d96f      	bls.n	800d24e <mg_sntp_parse+0x12a>
    MG_ERROR(("%s", "corrupt packet"));
  } else if (mode != 4 && mode != 5) {
 800d16e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d170:	2b04      	cmp	r3, #4
 800d172:	d002      	beq.n	800d17a <mg_sntp_parse+0x56>
 800d174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d176:	2b05      	cmp	r3, #5
 800d178:	d168      	bne.n	800d24c <mg_sntp_parse+0x128>
    MG_ERROR(("%s", "not a server reply"));
  } else if (buf[1] == 0) {
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	3301      	adds	r3, #1
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d064      	beq.n	800d24e <mg_sntp_parse+0x12a>
    MG_ERROR(("%s", "server sent a kiss of death"));
  } else if (version == 4 || version == 3) {
 800d184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d186:	2b04      	cmp	r3, #4
 800d188:	d002      	beq.n	800d190 <mg_sntp_parse+0x6c>
 800d18a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d18c:	2b03      	cmp	r3, #3
 800d18e:	d15e      	bne.n	800d24e <mg_sntp_parse+0x12a>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	3318      	adds	r3, #24
 800d194:	4618      	mov	r0, r3
 800d196:	f7ff ff4f 	bl	800d038 <gettimestamp>
 800d19a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	3320      	adds	r3, #32
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff ff48 	bl	800d038 <gettimestamp>
 800d1a8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	3328      	adds	r3, #40	@ 0x28
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7ff ff41 	bl	800d038 <gettimestamp>
 800d1b6:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
    int64_t now = (int64_t) mg_millis();
 800d1ba:	f7f3 fd79 	bl	8000cb0 <mg_millis>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 800d1c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800d1ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d1ce:	ebb0 0802 	subs.w	r8, r0, r2
 800d1d2:	eb61 0903 	sbc.w	r9, r1, r3
 800d1d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d1da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d1de:	1a84      	subs	r4, r0, r2
 800d1e0:	eb61 0503 	sbc.w	r5, r1, r3
 800d1e4:	ebb8 0304 	subs.w	r3, r8, r4
 800d1e8:	60bb      	str	r3, [r7, #8]
 800d1ea:	eb69 0305 	sbc.w	r3, r9, r5
 800d1ee:	60fb      	str	r3, [r7, #12]
 800d1f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d1f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
    epoch_milliseconds = transmit_time + latency / 2;
 800d1f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	da06      	bge.n	800d20e <mg_sntp_parse+0xea>
 800d200:	1c51      	adds	r1, r2, #1
 800d202:	6039      	str	r1, [r7, #0]
 800d204:	f143 0300 	adc.w	r3, r3, #0
 800d208:	607b      	str	r3, [r7, #4]
 800d20a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d20e:	f04f 0000 	mov.w	r0, #0
 800d212:	f04f 0100 	mov.w	r1, #0
 800d216:	0850      	lsrs	r0, r2, #1
 800d218:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800d21c:	1059      	asrs	r1, r3, #1
 800d21e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d222:	eb12 0a00 	adds.w	sl, r2, r0
 800d226:	eb43 0b01 	adc.w	fp, r3, r1
 800d22a:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 800d22e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800d232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d236:	1a84      	subs	r4, r0, r2
 800d238:	613c      	str	r4, [r7, #16]
 800d23a:	eb61 0303 	sbc.w	r3, r1, r3
 800d23e:	617b      	str	r3, [r7, #20]
 800d240:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d244:	4906      	ldr	r1, [pc, #24]	@ (800d260 <mg_sntp_parse+0x13c>)
 800d246:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 800d24a:	e000      	b.n	800d24e <mg_sntp_parse+0x12a>
    MG_ERROR(("%s", "not a server reply"));
 800d24c:	bf00      	nop
  } else {
    MG_ERROR(("unexpected version: %d", version));
  }
  return epoch_milliseconds;
 800d24e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
}
 800d252:	4610      	mov	r0, r2
 800d254:	4619      	mov	r1, r3
 800d256:	3758      	adds	r7, #88	@ 0x58
 800d258:	46bd      	mov	sp, r7
 800d25a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d25e:	bf00      	nop
 800d260:	24002bb8 	.word	0x24002bb8

0800d264 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 800d264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d268:	b088      	sub	sp, #32
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	60f8      	str	r0, [r7, #12]
 800d26e:	60b9      	str	r1, [r7, #8]
 800d270:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	3388      	adds	r3, #136	@ 0x88
 800d276:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d10c      	bne.n	800d298 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 800d27e:	f7f3 fd17 	bl	8000cb0 <mg_millis>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800d28a:	1854      	adds	r4, r2, r1
 800d28c:	f143 0500 	adc.w	r5, r3, #0
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 800d296:	e04b      	b.n	800d330 <sntp_cb+0xcc>
  } else if (ev == MG_EV_CONNECT) {
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2b04      	cmp	r3, #4
 800d29c:	d103      	bne.n	800d2a6 <sntp_cb+0x42>
    mg_sntp_request(c);
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f000 f84e 	bl	800d340 <mg_sntp_request>
}
 800d2a4:	e044      	b.n	800d330 <sntp_cb+0xcc>
  } else if (ev == MG_EV_READ) {
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	2b07      	cmp	r3, #7
 800d2aa:	d12f      	bne.n	800d30c <sntp_cb+0xa8>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	f7ff ff34 	bl	800d124 <mg_sntp_parse>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 800d2c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d2c8:	2a01      	cmp	r2, #1
 800d2ca:	f173 0300 	sbcs.w	r3, r3, #0
 800d2ce:	db15      	blt.n	800d2fc <sntp_cb+0x98>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 800d2d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d2d4:	4614      	mov	r4, r2
 800d2d6:	461d      	mov	r5, r3
 800d2d8:	f7f3 fcea 	bl	8000cb0 <mg_millis>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	ebb4 0802 	subs.w	r8, r4, r2
 800d2e4:	eb65 0903 	sbc.w	r9, r5, r3
 800d2e8:	4b14      	ldr	r3, [pc, #80]	@ (800d33c <sntp_cb+0xd8>)
 800d2ea:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 800d2ee:	f107 0310 	add.w	r3, r7, #16
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	2112      	movs	r1, #18
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7f5 f804 	bl	8002304 <mg_call>
    c->is_closing = 1;
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d302:	f043 0320 	orr.w	r3, r3, #32
 800d306:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800d30a:	e011      	b.n	800d330 <sntp_cb+0xcc>
  } else if (ev == MG_EV_POLL) {
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d10e      	bne.n	800d330 <sntp_cb+0xcc>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 800d312:	f7f3 fccd 	bl	8000cb0 <mg_millis>
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	4282      	cmp	r2, r0
 800d31e:	418b      	sbcs	r3, r1
 800d320:	d206      	bcs.n	800d330 <sntp_cb+0xcc>
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d328:	f043 0320 	orr.w	r3, r3, #32
 800d32c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 800d330:	bf00      	nop
 800d332:	3720      	adds	r7, #32
 800d334:	46bd      	mov	sp, r7
 800d336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d33a:	bf00      	nop
 800d33c:	24002bb8 	.word	0x24002bb8

0800d340 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 800d340:	b590      	push	{r4, r7, lr}
 800d342:	b095      	sub	sp, #84	@ 0x54
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d34e:	f003 0308 	and.w	r3, r3, #8
 800d352:	b2db      	uxtb	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d151      	bne.n	800d3fc <mg_sntp_request+0xbc>
    MG_ERROR(("%lu wait until resolved", c->id));
  } else {
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 800d358:	f7f3 fcaa 	bl	8000cb0 <mg_millis>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 800d364:	2300      	movs	r3, #0
 800d366:	60bb      	str	r3, [r7, #8]
 800d368:	f107 030c 	add.w	r3, r7, #12
 800d36c:	222c      	movs	r2, #44	@ 0x2c
 800d36e:	2100      	movs	r1, #0
 800d370:	4618      	mov	r0, r3
 800d372:	f015 f8dc 	bl	802252e <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 800d376:	f107 0308 	add.w	r3, r7, #8
 800d37a:	3328      	adds	r3, #40	@ 0x28
 800d37c:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 800d37e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800d382:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d386:	f04f 0300 	mov.w	r3, #0
 800d38a:	f7f3 f9cd 	bl	8000728 <__aeabi_ldivmod>
 800d38e:	4610      	mov	r0, r2
 800d390:	4619      	mov	r1, r3
 800d392:	f7f3 f99b 	bl	80006cc <__aeabi_l2d>
 800d396:	ec41 0b15 	vmov	d5, r0, r1
 800d39a:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 800d408 <mg_sntp_request+0xc8>
 800d39e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d3a2:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 800d410 <mg_sntp_request+0xd0>
 800d3a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3aa:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 800d3ae:	2323      	movs	r3, #35	@ 0x23
 800d3b0:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 800d3b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800d3b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d3ba:	f04f 0300 	mov.w	r3, #0
 800d3be:	f7f3 f9b3 	bl	8000728 <__aeabi_ldivmod>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4b14      	ldr	r3, [pc, #80]	@ (800d418 <mg_sntp_request+0xd8>)
 800d3c8:	4413      	add	r3, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f008 fdf6 	bl	8015fbc <mg_ntohl>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3d4:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 800d3d6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800d3da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d3de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3e0:	1d1c      	adds	r4, r3, #4
 800d3e2:	ee17 0a90 	vmov	r0, s15
 800d3e6:	f008 fde9 	bl	8015fbc <mg_ntohl>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 800d3ee:	f107 0308 	add.w	r3, r7, #8
 800d3f2:	2230      	movs	r2, #48	@ 0x30
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7fe fcc6 	bl	800bd88 <mg_send>
  }
}
 800d3fc:	bf00      	nop
 800d3fe:	3754      	adds	r7, #84	@ 0x54
 800d400:	46bd      	mov	sp, r7
 800d402:	bd90      	pop	{r4, r7, pc}
 800d404:	f3af 8000 	nop.w
 800d408:	00000000 	.word	0x00000000
 800d40c:	408f4000 	.word	0x408f4000
 800d410:	ffe00000 	.word	0xffe00000
 800d414:	41efffff 	.word	0x41efffff
 800d418:	83aa7e80 	.word	0x83aa7e80

0800d41c <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
 800d428:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <mg_sntp_connect+0x1c>
 800d434:	4b0c      	ldr	r3, [pc, #48]	@ (800d468 <mg_sntp_connect+0x4c>)
 800d436:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	68b9      	ldr	r1, [r7, #8]
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f7fb fd4c 	bl	8008edc <mg_connect>
 800d444:	6178      	str	r0, [r7, #20]
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d008      	beq.n	800d45e <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	4a07      	ldr	r2, [pc, #28]	@ (800d46c <mg_sntp_connect+0x50>)
 800d450:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	2101      	movs	r1, #1
 800d458:	6978      	ldr	r0, [r7, #20]
 800d45a:	f7ff ff03 	bl	800d264 <sntp_cb>
  }
  return c;
 800d45e:	697b      	ldr	r3, [r7, #20]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	08024d68 	.word	0x08024d68
 800d46c:	0800d265 	.word	0x0800d265

0800d470 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800d47c:	4b05      	ldr	r3, [pc, #20]	@ (800d494 <mg_http_serve_ssi+0x24>)
 800d47e:	2200      	movs	r2, #0
 800d480:	f240 11f5 	movw	r1, #501	@ 0x1f5
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f7f7 fc8d 	bl	8004da4 <mg_http_reply>
  (void) root, (void) fullpath;
}
 800d48a:	bf00      	nop
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	08024d84 	.word	0x08024d84

0800d498 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	60bb      	str	r3, [r7, #8]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d004      	beq.n	800d4b6 <mg_str_s+0x1e>
 800d4ac:	6838      	ldr	r0, [r7, #0]
 800d4ae:	f7f2 ff77 	bl	80003a0 <strlen>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	e000      	b.n	800d4b8 <mg_str_s+0x20>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	60fb      	str	r3, [r7, #12]
  return str;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	f107 0308 	add.w	r3, r7, #8
 800d4c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d4c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 800d4d2:	b480      	push	{r7}
 800d4d4:	b087      	sub	sp, #28
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	613b      	str	r3, [r7, #16]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	617b      	str	r3, [r7, #20]
  return str;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	f107 0310 	add.w	r3, r7, #16
 800d4ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d4f2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	371c      	adds	r7, #28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <mg_tolc>:

static int mg_tolc(char c) {
 800d502:	b480      	push	{r7}
 800d504:	b083      	sub	sp, #12
 800d506:	af00      	add	r7, sp, #0
 800d508:	4603      	mov	r3, r0
 800d50a:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	2b40      	cmp	r3, #64	@ 0x40
 800d510:	d905      	bls.n	800d51e <mg_tolc+0x1c>
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	2b5a      	cmp	r3, #90	@ 0x5a
 800d516:	d802      	bhi.n	800d51e <mg_tolc+0x1c>
 800d518:	79fb      	ldrb	r3, [r7, #7]
 800d51a:	3320      	adds	r3, #32
 800d51c:	e000      	b.n	800d520 <mg_tolc+0x1e>
 800d51e:	79fb      	ldrb	r3, [r7, #7]
}
 800d520:	4618      	mov	r0, r3
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	1d3b      	adds	r3, r7, #4
 800d536:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 800d53a:	2300      	movs	r3, #0
 800d53c:	617b      	str	r3, [r7, #20]
 800d53e:	2300      	movs	r3, #0
 800d540:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d01c      	beq.n	800d582 <mg_strdup+0x56>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d019      	beq.n	800d582 <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	3301      	adds	r3, #1
 800d552:	4619      	mov	r1, r3
 800d554:	2001      	movs	r0, #1
 800d556:	f014 fce1 	bl	8021f1c <calloc>
 800d55a:	4603      	mov	r3, r0
 800d55c:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00e      	beq.n	800d582 <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	4619      	mov	r1, r3
 800d56a:	69f8      	ldr	r0, [r7, #28]
 800d56c:	f015 f983 	bl	8022876 <memcpy>
      sc[s.len] = '\0';
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	69fa      	ldr	r2, [r7, #28]
 800d574:	4413      	add	r3, r2
 800d576:	2200      	movs	r2, #0
 800d578:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	461a      	mov	r2, r3
 800d586:	f107 0314 	add.w	r3, r7, #20
 800d58a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d58e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	3720      	adds	r7, #32
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 800d59a:	b490      	push	{r4, r7}
 800d59c:	b088      	sub	sp, #32
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	f107 0408 	add.w	r4, r7, #8
 800d5a4:	e884 0003 	stmia.w	r4, {r0, r1}
 800d5a8:	4639      	mov	r1, r7
 800d5aa:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800d5b2:	e019      	b.n	800d5e8 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800d5c8:	69ba      	ldr	r2, [r7, #24]
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	da02      	bge.n	800d5d6 <mg_strcmp+0x3c>
 800d5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d4:	e01e      	b.n	800d614 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 800d5d6:	69ba      	ldr	r2, [r7, #24]
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	dd01      	ble.n	800d5e2 <mg_strcmp+0x48>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e018      	b.n	800d614 <mg_strcmp+0x7a>
    i++;
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d203      	bcs.n	800d5f8 <mg_strcmp+0x5e>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	69fa      	ldr	r2, [r7, #28]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d3dd      	bcc.n	800d5b4 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	69fa      	ldr	r2, [r7, #28]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d201      	bcs.n	800d604 <mg_strcmp+0x6a>
 800d600:	2301      	movs	r3, #1
 800d602:	e007      	b.n	800d614 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	69fa      	ldr	r2, [r7, #28]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d202      	bcs.n	800d612 <mg_strcmp+0x78>
 800d60c:	f04f 33ff 	mov.w	r3, #4294967295
 800d610:	e000      	b.n	800d614 <mg_strcmp+0x7a>
  return 0;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3720      	adds	r7, #32
 800d618:	46bd      	mov	sp, r7
 800d61a:	bc90      	pop	{r4, r7}
 800d61c:	4770      	bx	lr

0800d61e <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 800d61e:	b590      	push	{r4, r7, lr}
 800d620:	b089      	sub	sp, #36	@ 0x24
 800d622:	af00      	add	r7, sp, #0
 800d624:	f107 0408 	add.w	r4, r7, #8
 800d628:	e884 0003 	stmia.w	r4, {r0, r1}
 800d62c:	4639      	mov	r1, r7
 800d62e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800d632:	2300      	movs	r3, #0
 800d634:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800d636:	e01f      	b.n	800d678 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	4413      	add	r3, r2
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff ff5e 	bl	800d502 <mg_tolc>
 800d646:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 800d648:	683a      	ldr	r2, [r7, #0]
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	4413      	add	r3, r2
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff ff56 	bl	800d502 <mg_tolc>
 800d656:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 800d658:	69ba      	ldr	r2, [r7, #24]
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	da02      	bge.n	800d666 <mg_strcasecmp+0x48>
 800d660:	f04f 33ff 	mov.w	r3, #4294967295
 800d664:	e01e      	b.n	800d6a4 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 800d666:	69ba      	ldr	r2, [r7, #24]
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	dd01      	ble.n	800d672 <mg_strcasecmp+0x54>
 800d66e:	2301      	movs	r3, #1
 800d670:	e018      	b.n	800d6a4 <mg_strcasecmp+0x86>
    i++;
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	3301      	adds	r3, #1
 800d676:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	69fa      	ldr	r2, [r7, #28]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d203      	bcs.n	800d688 <mg_strcasecmp+0x6a>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	69fa      	ldr	r2, [r7, #28]
 800d684:	429a      	cmp	r2, r3
 800d686:	d3d7      	bcc.n	800d638 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	69fa      	ldr	r2, [r7, #28]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d201      	bcs.n	800d694 <mg_strcasecmp+0x76>
 800d690:	2301      	movs	r3, #1
 800d692:	e007      	b.n	800d6a4 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	69fa      	ldr	r2, [r7, #28]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d202      	bcs.n	800d6a2 <mg_strcasecmp+0x84>
 800d69c:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a0:	e000      	b.n	800d6a4 <mg_strcasecmp+0x86>
  return 0;
 800d6a2:	2300      	movs	r3, #0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3724      	adds	r7, #36	@ 0x24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd90      	pop	{r4, r7, pc}

0800d6ac <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 800d6ac:	b490      	push	{r4, r7}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	f107 0408 	add.w	r4, r7, #8
 800d6b6:	e884 0003 	stmia.w	r4, {r0, r1}
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	61fb      	str	r3, [r7, #28]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	61bb      	str	r3, [r7, #24]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	617b      	str	r3, [r7, #20]
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 800d6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 80ba 	beq.w	800d84c <mg_match+0x1a0>
 800d6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6da:	2200      	movs	r2, #0
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 800d6e4:	e0b2      	b.n	800d84c <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	69fa      	ldr	r2, [r7, #28]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d25b      	bcs.n	800d7a6 <mg_match+0xfa>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	69ba      	ldr	r2, [r7, #24]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d257      	bcs.n	800d7a6 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 800d6fe:	2b3f      	cmp	r3, #63	@ 0x3f
 800d700:	d015      	beq.n	800d72e <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	4413      	add	r3, r2
 800d708:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 800d70a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d70c:	d04b      	beq.n	800d7a6 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 800d70e:	683a      	ldr	r2, [r7, #0]
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	4413      	add	r3, r2
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b23      	cmp	r3, #35	@ 0x23
 800d718:	d045      	beq.n	800d7a6 <mg_match+0xfa>
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	4413      	add	r3, r2
 800d720:	781a      	ldrb	r2, [r3, #0]
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	440b      	add	r3, r1
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d13b      	bne.n	800d7a6 <mg_match+0xfa>
      if (caps == NULL) {
 800d72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d730:	2b00      	cmp	r3, #0
 800d732:	d031      	beq.n	800d798 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 800d734:	683a      	ldr	r2, [r7, #0]
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	4413      	add	r3, r2
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	2b3f      	cmp	r3, #63	@ 0x3f
 800d73e:	d111      	bne.n	800d764 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	441a      	add	r2, r3
 800d746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d748:	601a      	str	r2, [r3, #0]
 800d74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74c:	2201      	movs	r2, #1
 800d74e:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 800d750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d752:	3308      	adds	r3, #8
 800d754:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d758:	2200      	movs	r2, #0
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75e:	2200      	movs	r2, #0
 800d760:	605a      	str	r2, [r3, #4]
 800d762:	e019      	b.n	800d798 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 800d764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d015      	beq.n	800d798 <mg_match+0xec>
 800d76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d111      	bne.n	800d798 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	441a      	add	r2, r3
 800d77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	461a      	mov	r2, r3
 800d782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d784:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 800d786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d788:	3308      	adds	r3, #8
 800d78a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78e:	2200      	movs	r2, #0
 800d790:	605a      	str	r2, [r3, #4]
 800d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d794:	2200      	movs	r2, #0
 800d796:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	3301      	adds	r3, #1
 800d79c:	61fb      	str	r3, [r7, #28]
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	61bb      	str	r3, [r7, #24]
 800d7a4:	e052      	b.n	800d84c <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	69fa      	ldr	r2, [r7, #28]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d222      	bcs.n	800d7f4 <mg_match+0x148>
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7b8:	d005      	beq.n	800d7c6 <mg_match+0x11a>
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	4413      	add	r3, r2
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	2b23      	cmp	r3, #35	@ 0x23
 800d7c4:	d116      	bne.n	800d7f4 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 800d7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00b      	beq.n	800d7e4 <mg_match+0x138>
 800d7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d107      	bne.n	800d7e4 <mg_match+0x138>
 800d7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	605a      	str	r2, [r3, #4]
 800d7da:	68ba      	ldr	r2, [r7, #8]
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	441a      	add	r2, r3
 800d7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e2:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	1c5a      	adds	r2, r3, #1
 800d7e8:	61fa      	str	r2, [r7, #28]
 800d7ea:	617b      	str	r3, [r7, #20]
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	613b      	str	r3, [r7, #16]
 800d7f2:	e02b      	b.n	800d84c <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d025      	beq.n	800d846 <mg_match+0x19a>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	693a      	ldr	r2, [r7, #16]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d821      	bhi.n	800d846 <mg_match+0x19a>
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	4413      	add	r3, r2
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b23      	cmp	r3, #35	@ 0x23
 800d80c:	d005      	beq.n	800d81a <mg_match+0x16e>
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	4413      	add	r3, r2
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b2f      	cmp	r3, #47	@ 0x2f
 800d818:	d015      	beq.n	800d846 <mg_match+0x19a>
      i = ni, j = nj;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	61fb      	str	r3, [r7, #28]
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 800d822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d824:	2b00      	cmp	r3, #0
 800d826:	d010      	beq.n	800d84a <mg_match+0x19e>
 800d828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10c      	bne.n	800d84a <mg_match+0x19e>
 800d830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d108      	bne.n	800d84a <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 800d838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83a:	3b08      	subs	r3, #8
 800d83c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d840:	2200      	movs	r2, #0
 800d842:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 800d844:	e001      	b.n	800d84a <mg_match+0x19e>
      }
    } else {
      return false;
 800d846:	2300      	movs	r3, #0
 800d848:	e01f      	b.n	800d88a <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 800d84a:	bf00      	nop
  while (i < p.len || j < s.len) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	429a      	cmp	r2, r3
 800d852:	f4ff af48 	bcc.w	800d6e6 <mg_match+0x3a>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	69ba      	ldr	r2, [r7, #24]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	f4ff af43 	bcc.w	800d6e6 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 800d860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d862:	2b00      	cmp	r3, #0
 800d864:	d010      	beq.n	800d888 <mg_match+0x1dc>
 800d866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00c      	beq.n	800d888 <mg_match+0x1dc>
 800d86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d108      	bne.n	800d888 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	441a      	add	r2, r3
 800d87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	461a      	mov	r2, r3
 800d884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d886:	605a      	str	r2, [r3, #4]
  }
  return true;
 800d888:	2301      	movs	r3, #1
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3720      	adds	r7, #32
 800d88e:	46bd      	mov	sp, r7
 800d890:	bc90      	pop	{r4, r7}
 800d892:	4770      	bx	lr

0800d894 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 800d894:	b590      	push	{r4, r7, lr}
 800d896:	b089      	sub	sp, #36	@ 0x24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	f107 0410 	add.w	r4, r7, #16
 800d89e:	e884 0003 	stmia.w	r4, {r0, r1}
 800d8a2:	60fa      	str	r2, [r7, #12]
 800d8a4:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <mg_span+0x1e>
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d101      	bne.n	800d8b6 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	e047      	b.n	800d946 <mg_span+0xb2>
  } else {
    size_t len = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 800d8ba:	e002      	b.n	800d8c2 <mg_span+0x2e>
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	61fb      	str	r3, [r7, #28]
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	69fa      	ldr	r2, [r7, #28]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d207      	bcs.n	800d8da <mg_span+0x46>
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d1f0      	bne.n	800d8bc <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00c      	beq.n	800d8fa <mg_span+0x66>
 800d8e0:	6939      	ldr	r1, [r7, #16]
 800d8e2:	68fc      	ldr	r4, [r7, #12]
 800d8e4:	463b      	mov	r3, r7
 800d8e6:	69fa      	ldr	r2, [r7, #28]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff fdf2 	bl	800d4d2 <mg_str_n>
 800d8ee:	4622      	mov	r2, r4
 800d8f0:	463b      	mov	r3, r7
 800d8f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d8f6:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d010      	beq.n	800d922 <mg_span+0x8e>
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	18d1      	adds	r1, r2, r3
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	1ad2      	subs	r2, r2, r3
 800d90c:	68bc      	ldr	r4, [r7, #8]
 800d90e:	463b      	mov	r3, r7
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff fdde 	bl	800d4d2 <mg_str_n>
 800d916:	4622      	mov	r2, r4
 800d918:	463b      	mov	r3, r7
 800d91a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d91e:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00d      	beq.n	800d944 <mg_span+0xb0>
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	69fa      	ldr	r2, [r7, #28]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d209      	bcs.n	800d944 <mg_span+0xb0>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	1c5a      	adds	r2, r3, #1
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	601a      	str	r2, [r3, #0]
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	1e5a      	subs	r2, r3, #1
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	605a      	str	r2, [r3, #4]
    return true;
 800d944:	2301      	movs	r3, #1
  }
}
 800d946:	4618      	mov	r0, r3
 800d948:	3724      	adds	r7, #36	@ 0x24
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd90      	pop	{r4, r7, pc}

0800d94e <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 800d94e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d952:	b0a5      	sub	sp, #148	@ 0x94
 800d954:	af00      	add	r7, sp, #0
 800d956:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800d95a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d95e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d960:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 800d962:	2300      	movs	r3, #0
 800d964:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d968:	2300      	movs	r3, #0
 800d96a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 800d96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d972:	2b01      	cmp	r3, #1
 800d974:	d016      	beq.n	800d9a4 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 800d976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d00d      	beq.n	800d99a <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 800d97e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d982:	2b04      	cmp	r3, #4
 800d984:	d104      	bne.n	800d990 <mg_str_to_num+0x42>
 800d986:	f04f 32ff 	mov.w	r2, #4294967295
 800d98a:	f04f 0300 	mov.w	r3, #0
 800d98e:	e00d      	b.n	800d9ac <mg_str_to_num+0x5e>
 800d990:	f04f 32ff 	mov.w	r2, #4294967295
 800d994:	f04f 33ff 	mov.w	r3, #4294967295
 800d998:	e008      	b.n	800d9ac <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 800d99a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d99e:	f04f 0300 	mov.w	r3, #0
 800d9a2:	e003      	b.n	800d9ac <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 800d9a4:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 800d9a8:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 800d9ac:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 800d9b0:	f04f 0200 	mov.w	r2, #0
 800d9b4:	f04f 0300 	mov.w	r3, #0
 800d9b8:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 800d9bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800d9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c4:	bf08      	it	eq
 800d9c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800d9ca:	d105      	bne.n	800d9d8 <mg_str_to_num+0x8a>
 800d9cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d9d0:	2b08      	cmp	r3, #8
 800d9d2:	d001      	beq.n	800d9d8 <mg_str_to_num+0x8a>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	e1e8      	b.n	800ddaa <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 800d9d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d12d      	bne.n	800da3a <mg_str_to_num+0xec>
 800d9de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d92a      	bls.n	800da3a <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 800d9e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d9ea:	4413      	add	r3, r2
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	2b30      	cmp	r3, #48	@ 0x30
 800d9f0:	d121      	bne.n	800da36 <mg_str_to_num+0xe8>
      i++;
 800d9f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 800d9fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da02:	4413      	add	r3, r2
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b62      	cmp	r3, #98	@ 0x62
 800da08:	d00a      	beq.n	800da20 <mg_str_to_num+0xd2>
 800da0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da10:	4413      	add	r3, r2
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b78      	cmp	r3, #120	@ 0x78
 800da16:	d101      	bne.n	800da1c <mg_str_to_num+0xce>
 800da18:	2310      	movs	r3, #16
 800da1a:	e002      	b.n	800da22 <mg_str_to_num+0xd4>
 800da1c:	230a      	movs	r3, #10
 800da1e:	e000      	b.n	800da22 <mg_str_to_num+0xd4>
 800da20:	2302      	movs	r3, #2
 800da22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 800da24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da26:	2b0a      	cmp	r3, #10
 800da28:	d007      	beq.n	800da3a <mg_str_to_num+0xec>
 800da2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da2e:	3301      	adds	r3, #1
 800da30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800da34:	e001      	b.n	800da3a <mg_str_to_num+0xec>
    } else {
      base = 10;
 800da36:	230a      	movs	r3, #10
 800da38:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 800da3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da3c:	2b10      	cmp	r3, #16
 800da3e:	f000 8178 	beq.w	800dd32 <mg_str_to_num+0x3e4>
 800da42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da44:	2b10      	cmp	r3, #16
 800da46:	f300 817d 	bgt.w	800dd44 <mg_str_to_num+0x3f6>
 800da4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d052      	beq.n	800daf6 <mg_str_to_num+0x1a8>
 800da50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da52:	2b0a      	cmp	r3, #10
 800da54:	f000 80cd 	beq.w	800dbf2 <mg_str_to_num+0x2a4>
 800da58:	e174      	b.n	800dd44 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800da5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da60:	4413      	add	r3, r2
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	3b30      	subs	r3, #48	@ 0x30
 800da66:	17da      	asrs	r2, r3, #31
 800da68:	633b      	str	r3, [r7, #48]	@ 0x30
 800da6a:	637a      	str	r2, [r7, #52]	@ 0x34
 800da6c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800da70:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 800da74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800da78:	f04f 0200 	mov.w	r2, #0
 800da7c:	f04f 0300 	mov.w	r3, #0
 800da80:	0842      	lsrs	r2, r0, #1
 800da82:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800da86:	084b      	lsrs	r3, r1, #1
 800da88:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800da8c:	4282      	cmp	r2, r0
 800da8e:	418b      	sbcs	r3, r1
 800da90:	d201      	bcs.n	800da96 <mg_str_to_num+0x148>
 800da92:	2300      	movs	r3, #0
 800da94:	e189      	b.n	800ddaa <mg_str_to_num+0x45c>
        result *= 2;
 800da96:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800da9a:	1891      	adds	r1, r2, r2
 800da9c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800da9e:	415b      	adcs	r3, r3
 800daa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800daa2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800daa6:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800daaa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800daae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800dab2:	1a85      	subs	r5, r0, r2
 800dab4:	eb61 0603 	sbc.w	r6, r1, r3
 800dab8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800dabc:	4295      	cmp	r5, r2
 800dabe:	eb76 0303 	sbcs.w	r3, r6, r3
 800dac2:	d201      	bcs.n	800dac8 <mg_str_to_num+0x17a>
 800dac4:	2300      	movs	r3, #0
 800dac6:	e170      	b.n	800ddaa <mg_str_to_num+0x45c>
        result += digit;
 800dac8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dacc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800dad0:	1884      	adds	r4, r0, r2
 800dad2:	623c      	str	r4, [r7, #32]
 800dad4:	eb41 0303 	adc.w	r3, r1, r3
 800dad8:	627b      	str	r3, [r7, #36]	@ 0x24
 800dada:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dade:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800dae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dae6:	3301      	adds	r3, #1
 800dae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800daec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800daf0:	3301      	adds	r3, #1
 800daf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 800daf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800dafc:	429a      	cmp	r2, r3
 800dafe:	f080 8123 	bcs.w	800dd48 <mg_str_to_num+0x3fa>
 800db02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db08:	4413      	add	r3, r2
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	2b30      	cmp	r3, #48	@ 0x30
 800db0e:	d0a4      	beq.n	800da5a <mg_str_to_num+0x10c>
 800db10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db16:	4413      	add	r3, r2
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	2b31      	cmp	r3, #49	@ 0x31
 800db1c:	d09d      	beq.n	800da5a <mg_str_to_num+0x10c>
      }
      break;
 800db1e:	e113      	b.n	800dd48 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 800db20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db26:	4413      	add	r3, r2
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	3b30      	subs	r3, #48	@ 0x30
 800db2c:	17da      	asrs	r2, r3, #31
 800db2e:	61bb      	str	r3, [r7, #24]
 800db30:	61fa      	str	r2, [r7, #28]
 800db32:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800db36:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 800db3a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800db3e:	f04f 020a 	mov.w	r2, #10
 800db42:	f04f 0300 	mov.w	r3, #0
 800db46:	f7f2 fe3f 	bl	80007c8 <__aeabi_uldivmod>
 800db4a:	4602      	mov	r2, r0
 800db4c:	460b      	mov	r3, r1
 800db4e:	4610      	mov	r0, r2
 800db50:	4619      	mov	r1, r3
 800db52:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800db56:	4290      	cmp	r0, r2
 800db58:	eb71 0303 	sbcs.w	r3, r1, r3
 800db5c:	d201      	bcs.n	800db62 <mg_str_to_num+0x214>
 800db5e:	2300      	movs	r3, #0
 800db60:	e123      	b.n	800ddaa <mg_str_to_num+0x45c>
        result *= 10;
 800db62:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800db66:	4622      	mov	r2, r4
 800db68:	462b      	mov	r3, r5
 800db6a:	f04f 0000 	mov.w	r0, #0
 800db6e:	f04f 0100 	mov.w	r1, #0
 800db72:	0099      	lsls	r1, r3, #2
 800db74:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800db78:	0090      	lsls	r0, r2, #2
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	eb12 0804 	adds.w	r8, r2, r4
 800db82:	eb43 0905 	adc.w	r9, r3, r5
 800db86:	eb18 0308 	adds.w	r3, r8, r8
 800db8a:	613b      	str	r3, [r7, #16]
 800db8c:	eb49 0309 	adc.w	r3, r9, r9
 800db90:	617b      	str	r3, [r7, #20]
 800db92:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800db96:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800db9a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800db9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800dba2:	1a84      	subs	r4, r0, r2
 800dba4:	63bc      	str	r4, [r7, #56]	@ 0x38
 800dba6:	eb61 0303 	sbc.w	r3, r1, r3
 800dbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbac:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800dbb0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800dbb4:	4621      	mov	r1, r4
 800dbb6:	4291      	cmp	r1, r2
 800dbb8:	4629      	mov	r1, r5
 800dbba:	eb71 0303 	sbcs.w	r3, r1, r3
 800dbbe:	d201      	bcs.n	800dbc4 <mg_str_to_num+0x276>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	e0f2      	b.n	800ddaa <mg_str_to_num+0x45c>
        result += digit;
 800dbc4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dbc8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800dbcc:	1884      	adds	r4, r0, r2
 800dbce:	60bc      	str	r4, [r7, #8]
 800dbd0:	eb41 0303 	adc.w	r3, r1, r3
 800dbd4:	60fb      	str	r3, [r7, #12]
 800dbd6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dbda:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800dbde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dbe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dbec:	3301      	adds	r3, #1
 800dbee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800dbf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbf4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	f080 80a7 	bcs.w	800dd4c <mg_str_to_num+0x3fe>
 800dbfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc04:	4413      	add	r3, r2
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc0a:	f240 809f 	bls.w	800dd4c <mg_str_to_num+0x3fe>
 800dc0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc14:	4413      	add	r3, r2
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b39      	cmp	r3, #57	@ 0x39
 800dc1a:	d981      	bls.n	800db20 <mg_str_to_num+0x1d2>
      }
      break;
 800dc1c:	e096      	b.n	800dd4c <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 800dc1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc24:	4413      	add	r3, r2
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800dc2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc30:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc32:	d90a      	bls.n	800dc4a <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 800dc34:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc38:	2b39      	cmp	r3, #57	@ 0x39
 800dc3a:	d806      	bhi.n	800dc4a <mg_str_to_num+0x2fc>
 800dc3c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc40:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800dc42:	17da      	asrs	r2, r3, #31
 800dc44:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc46:	647a      	str	r2, [r7, #68]	@ 0x44
 800dc48:	e023      	b.n	800dc92 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800dc4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc4e:	2b40      	cmp	r3, #64	@ 0x40
 800dc50:	d90a      	bls.n	800dc68 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 800dc52:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc56:	2b46      	cmp	r3, #70	@ 0x46
 800dc58:	d806      	bhi.n	800dc68 <mg_str_to_num+0x31a>
 800dc5a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc5e:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800dc60:	17da      	asrs	r2, r3, #31
 800dc62:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc64:	647a      	str	r2, [r7, #68]	@ 0x44
 800dc66:	e014      	b.n	800dc92 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 800dc68:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc6c:	2b60      	cmp	r3, #96	@ 0x60
 800dc6e:	d90a      	bls.n	800dc86 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 800dc70:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc74:	2b66      	cmp	r3, #102	@ 0x66
 800dc76:	d806      	bhi.n	800dc86 <mg_str_to_num+0x338>
 800dc78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc7c:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 800dc7e:	17da      	asrs	r2, r3, #31
 800dc80:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc82:	647a      	str	r2, [r7, #68]	@ 0x44
 800dc84:	e005      	b.n	800dc92 <mg_str_to_num+0x344>
 800dc86:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8a:	f04f 34ff 	mov.w	r4, #4294967295
 800dc8e:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 800dc92:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800dc96:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 800dc9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800dc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca2:	bf08      	it	eq
 800dca4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800dca8:	d04a      	beq.n	800dd40 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 800dcaa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800dcae:	f04f 0200 	mov.w	r2, #0
 800dcb2:	f04f 0300 	mov.w	r3, #0
 800dcb6:	0902      	lsrs	r2, r0, #4
 800dcb8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800dcbc:	090b      	lsrs	r3, r1, #4
 800dcbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dcc2:	4282      	cmp	r2, r0
 800dcc4:	418b      	sbcs	r3, r1
 800dcc6:	d201      	bcs.n	800dccc <mg_str_to_num+0x37e>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	e06e      	b.n	800ddaa <mg_str_to_num+0x45c>
        result *= 16;
 800dccc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dcd0:	f04f 0200 	mov.w	r2, #0
 800dcd4:	f04f 0300 	mov.w	r3, #0
 800dcd8:	010b      	lsls	r3, r1, #4
 800dcda:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800dcde:	0102      	lsls	r2, r0, #4
 800dce0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 800dce4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800dce8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800dcec:	ebb0 0a02 	subs.w	sl, r0, r2
 800dcf0:	eb61 0b03 	sbc.w	fp, r1, r3
 800dcf4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800dcf8:	4592      	cmp	sl, r2
 800dcfa:	eb7b 0303 	sbcs.w	r3, fp, r3
 800dcfe:	d201      	bcs.n	800dd04 <mg_str_to_num+0x3b6>
 800dd00:	2300      	movs	r3, #0
 800dd02:	e052      	b.n	800ddaa <mg_str_to_num+0x45c>
        result += digit;
 800dd04:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800dd08:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800dd0c:	1884      	adds	r4, r0, r2
 800dd0e:	603c      	str	r4, [r7, #0]
 800dd10:	eb41 0303 	adc.w	r3, r1, r3
 800dd14:	607b      	str	r3, [r7, #4]
 800dd16:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dd1a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 800dd1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd22:	3301      	adds	r3, #1
 800dd24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dd28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 800dd32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd34:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	f4ff af70 	bcc.w	800dc1e <mg_str_to_num+0x2d0>
      }
      break;
 800dd3e:	e006      	b.n	800dd4e <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 800dd40:	bf00      	nop
      break;
 800dd42:	e004      	b.n	800dd4e <mg_str_to_num+0x400>
    default:
      return false;
 800dd44:	2300      	movs	r3, #0
 800dd46:	e030      	b.n	800ddaa <mg_str_to_num+0x45c>
      break;
 800dd48:	bf00      	nop
 800dd4a:	e000      	b.n	800dd4e <mg_str_to_num+0x400>
      break;
 800dd4c:	bf00      	nop
  }
  if (ndigits == 0) return false;
 800dd4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d101      	bne.n	800dd5a <mg_str_to_num+0x40c>
 800dd56:	2300      	movs	r3, #0
 800dd58:	e027      	b.n	800ddaa <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 800dd5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d001      	beq.n	800dd68 <mg_str_to_num+0x41a>
 800dd64:	2300      	movs	r3, #0
 800dd66:	e020      	b.n	800ddaa <mg_str_to_num+0x45c>
  if (val_len == 1) {
 800dd68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d104      	bne.n	800dd7a <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 800dd70:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 800dd74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd76:	701a      	strb	r2, [r3, #0]
 800dd78:	e016      	b.n	800dda8 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 800dd7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	d104      	bne.n	800dd8c <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 800dd82:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 800dd86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd88:	801a      	strh	r2, [r3, #0]
 800dd8a:	e00d      	b.n	800dda8 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 800dd8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dd90:	2b04      	cmp	r3, #4
 800dd92:	d104      	bne.n	800dd9e <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 800dd94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dd98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	e004      	b.n	800dda8 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 800dd9e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800dda0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800dda4:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 800dda8:	2301      	movs	r3, #1
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3794      	adds	r7, #148	@ 0x94
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ddb4 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	68b9      	ldr	r1, [r7, #8]
 800ddca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddce:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	f04f 0200 	mov.w	r2, #0
 800ddd8:	f04f 0300 	mov.w	r3, #0
 800dddc:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	69ba      	ldr	r2, [r7, #24]
 800dde4:	619a      	str	r2, [r3, #24]
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	69fa      	ldr	r2, [r7, #28]
 800ddea:	61da      	str	r2, [r3, #28]
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	6a3a      	ldr	r2, [r7, #32]
 800ddf0:	621a      	str	r2, [r3, #32]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	601a      	str	r2, [r3, #0]
}
 800de00:	bf00      	nop
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800de0c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800de10:	b086      	sub	sp, #24
 800de12:	af00      	add	r7, sp, #0
 800de14:	6178      	str	r0, [r7, #20]
 800de16:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800de1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800de1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800de22:	eb10 0a02 	adds.w	sl, r0, r2
 800de26:	eb41 0b03 	adc.w	fp, r1, r3
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	4592      	cmp	sl, r2
 800de32:	eb7b 0303 	sbcs.w	r3, fp, r3
 800de36:	d206      	bcs.n	800de46 <mg_timer_expired+0x3a>
 800de38:	6979      	ldr	r1, [r7, #20]
 800de3a:	f04f 0200 	mov.w	r2, #0
 800de3e:	f04f 0300 	mov.w	r3, #0
 800de42:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	d10d      	bne.n	800de6c <mg_timer_expired+0x60>
 800de50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800de54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800de58:	1886      	adds	r6, r0, r2
 800de5a:	603e      	str	r6, [r7, #0]
 800de5c:	eb41 0303 	adc.w	r3, r1, r3
 800de60:	607b      	str	r3, [r7, #4]
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	e9d7 1200 	ldrd	r1, r2, [r7]
 800de68:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800de76:	4290      	cmp	r0, r2
 800de78:	eb71 0303 	sbcs.w	r3, r1, r3
 800de7c:	d201      	bcs.n	800de82 <mg_timer_expired+0x76>
 800de7e:	2300      	movs	r3, #0
 800de80:	e022      	b.n	800dec8 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800de8c:	ebb0 0802 	subs.w	r8, r0, r2
 800de90:	eb61 0903 	sbc.w	r9, r1, r3
 800de94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800de98:	4542      	cmp	r2, r8
 800de9a:	eb73 0309 	sbcs.w	r3, r3, r9
 800de9e:	d207      	bcs.n	800deb0 <mg_timer_expired+0xa4>
 800dea0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800dea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dea8:	1884      	adds	r4, r0, r2
 800deaa:	eb41 0503 	adc.w	r5, r1, r3
 800deae:	e007      	b.n	800dec0 <mg_timer_expired+0xb4>
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800deba:	1884      	adds	r4, r0, r2
 800debc:	eb41 0503 	adc.w	r5, r1, r3
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 800dec6:	2301      	movs	r3, #1
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ded2:	4770      	bx	lr

0800ded4 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b08b      	sub	sp, #44	@ 0x2c
 800ded8:	af02      	add	r7, sp, #8
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	61fb      	str	r3, [r7, #28]
 800dee6:	e054      	b.n	800df92 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800deee:	4313      	orrs	r3, r2
 800def0:	d10d      	bne.n	800df0e <mg_timer_poll+0x3a>
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	699b      	ldr	r3, [r3, #24]
 800def6:	f003 0302 	and.w	r3, r3, #2
 800defa:	2b00      	cmp	r3, #0
 800defc:	d007      	beq.n	800df0e <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	699b      	ldr	r3, [r3, #24]
 800df02:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800df06:	2b00      	cmp	r3, #0
 800df08:	d101      	bne.n	800df0e <mg_timer_poll+0x3a>
 800df0a:	2301      	movs	r3, #1
 800df0c:	e000      	b.n	800df10 <mg_timer_poll+0x3c>
 800df0e:	2300      	movs	r3, #0
 800df10:	76fb      	strb	r3, [r7, #27]
 800df12:	7efb      	ldrb	r3, [r7, #27]
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	f103 0410 	add.w	r4, r3, #16
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800df26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df2a:	e9cd 2300 	strd	r2, r3, [sp]
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	4620      	mov	r0, r4
 800df34:	f7ff ff6a 	bl	800de0c <mg_timer_expired>
 800df38:	4603      	mov	r3, r0
 800df3a:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df40:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 800df42:	7efb      	ldrb	r3, [r7, #27]
 800df44:	f083 0301 	eor.w	r3, r3, #1
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d005      	beq.n	800df5a <mg_timer_poll+0x86>
 800df4e:	7ebb      	ldrb	r3, [r7, #26]
 800df50:	f083 0301 	eor.w	r3, r3, #1
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d118      	bne.n	800df8c <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	699b      	ldr	r3, [r3, #24]
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	2b00      	cmp	r3, #0
 800df64:	d105      	bne.n	800df72 <mg_timer_poll+0x9e>
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	699b      	ldr	r3, [r3, #24]
 800df6a:	f003 0304 	and.w	r3, r3, #4
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d105      	bne.n	800df7e <mg_timer_poll+0xaa>
      t->fn(t->arg);
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	69db      	ldr	r3, [r3, #28]
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	6a12      	ldr	r2, [r2, #32]
 800df7a:	4610      	mov	r0, r2
 800df7c:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	699b      	ldr	r3, [r3, #24]
 800df82:	f043 0204 	orr.w	r2, r3, #4
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	619a      	str	r2, [r3, #24]
 800df8a:	e000      	b.n	800df8e <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 800df8c:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	61fb      	str	r3, [r7, #28]
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1a7      	bne.n	800dee8 <mg_timer_poll+0x14>
  }
}
 800df98:	bf00      	nop
 800df9a:	bf00      	nop
 800df9c:	3724      	adds	r7, #36	@ 0x24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd90      	pop	{r4, r7, pc}

0800dfa2 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 800dfa2:	b480      	push	{r7}
 800dfa4:	b085      	sub	sp, #20
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	60f8      	str	r0, [r7, #12]
 800dfaa:	60b9      	str	r1, [r7, #8]
 800dfac:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
}
 800dfae:	bf00      	nop
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <mg_der_to_tlv>:
  uint32_t len;
  uint8_t *value;
};

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 800dfba:	b480      	push	{r7}
 800dfbc:	b087      	sub	sp, #28
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d802      	bhi.n	800dfd2 <mg_der_to_tlv+0x18>
    return -1;
 800dfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd0:	e041      	b.n	800e056 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	781a      	ldrb	r2, [r3, #0]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	1c9a      	adds	r2, r3, #2
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	2b7f      	cmp	r3, #127	@ 0x7f
 800dff4:	d921      	bls.n	800e03a <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	3b80      	subs	r3, #128	@ 0x80
 800dffc:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 800e004:	2300      	movs	r3, #0
 800e006:	617b      	str	r3, [r7, #20]
 800e008:	e00d      	b.n	800e026 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	021b      	lsls	r3, r3, #8
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	3202      	adds	r2, #2
 800e014:	68f9      	ldr	r1, [r7, #12]
 800e016:	440a      	add	r2, r1
 800e018:	7812      	ldrb	r2, [r2, #0]
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	3301      	adds	r3, #1
 800e024:	617b      	str	r3, [r7, #20]
 800e026:	697a      	ldr	r2, [r7, #20]
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d3ed      	bcc.n	800e00a <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	3302      	adds	r3, #2
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	441a      	add	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	441a      	add	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6899      	ldr	r1, [r3, #8]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	440b      	add	r3, r1
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d202      	bcs.n	800e054 <mg_der_to_tlv+0x9a>
    return -1;
 800e04e:	f04f 33ff 	mov.w	r3, #4294967295
 800e052:	e000      	b.n	800e056 <mg_der_to_tlv+0x9c>
  }
  return 0;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	371c      	adds	r7, #28
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <mg_der_find>:

static int mg_der_find(uint8_t *der, size_t dersz, uint8_t *oid, size_t oidsz,
                       struct mg_der_tlv *tlv) {
 800e062:	b580      	push	{r7, lr}
 800e064:	b08c      	sub	sp, #48	@ 0x30
 800e066:	af02      	add	r7, sp, #8
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	60b9      	str	r1, [r7, #8]
 800e06c:	607a      	str	r2, [r7, #4]
 800e06e:	603b      	str	r3, [r7, #0]
  uint8_t *p, *end;
  struct mg_der_tlv child = {0, 0, NULL};
 800e070:	2300      	movs	r3, #0
 800e072:	743b      	strb	r3, [r7, #16]
 800e074:	2300      	movs	r3, #0
 800e076:	617b      	str	r3, [r7, #20]
 800e078:	2300      	movs	r3, #0
 800e07a:	61bb      	str	r3, [r7, #24]
  if (mg_der_to_tlv(der, dersz, tlv) < 0) {
 800e07c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e07e:	68b9      	ldr	r1, [r7, #8]
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f7ff ff9a 	bl	800dfba <mg_der_to_tlv>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da02      	bge.n	800e092 <mg_der_find+0x30>
    return -1;                  // invalid DER
 800e08c:	f04f 33ff 	mov.w	r3, #4294967295
 800e090:	e052      	b.n	800e138 <mg_der_find+0xd6>
  } else if (tlv->type == 6) {  // found OID, check value
 800e092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2b06      	cmp	r3, #6
 800e098:	d112      	bne.n	800e0c0 <mg_der_find+0x5e>
    return (tlv->len == oidsz && memcmp(tlv->value, oid, oidsz) == 0);
 800e09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d10b      	bne.n	800e0bc <mg_der_find+0x5a>
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	6879      	ldr	r1, [r7, #4]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f014 fa14 	bl	80224da <memcmp>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d101      	bne.n	800e0bc <mg_der_find+0x5a>
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e03d      	b.n	800e138 <mg_der_find+0xd6>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e03b      	b.n	800e138 <mg_der_find+0xd6>
  } else if ((tlv->type & 0x20) == 0) {
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	f003 0320 	and.w	r3, r3, #32
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <mg_der_find+0x6e>
    return 0;  // Primitive, but not OID: not found
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e033      	b.n	800e138 <mg_der_find+0xd6>
  }
  // Constructed object: scan children
  p = tlv->value;
 800e0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	627b      	str	r3, [r7, #36]	@ 0x24
  end = tlv->value + tlv->len;
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d8:	689a      	ldr	r2, [r3, #8]
 800e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	4413      	add	r3, r2
 800e0e0:	623b      	str	r3, [r7, #32]
  while (end > p) {
 800e0e2:	e024      	b.n	800e12e <mg_der_find+0xcc>
    int r;
    mg_der_to_tlv(p, (size_t) (end - p), &child);
 800e0e4:	6a3a      	ldr	r2, [r7, #32]
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	f107 0310 	add.w	r3, r7, #16
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0f4:	f7ff ff61 	bl	800dfba <mg_der_to_tlv>
    r = mg_der_find(p, (size_t) (end - p), oid, oidsz, tlv);
 800e0f8:	6a3a      	ldr	r2, [r7, #32]
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	4619      	mov	r1, r3
 800e100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e10a:	f7ff ffaa 	bl	800e062 <mg_der_find>
 800e10e:	61f8      	str	r0, [r7, #28]
    if (r < 0) return -1;  // error
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2b00      	cmp	r3, #0
 800e114:	da02      	bge.n	800e11c <mg_der_find+0xba>
 800e116:	f04f 33ff 	mov.w	r3, #4294967295
 800e11a:	e00d      	b.n	800e138 <mg_der_find+0xd6>
    if (r > 0) return 1;   // found OID!
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	dd01      	ble.n	800e126 <mg_der_find+0xc4>
 800e122:	2301      	movs	r3, #1
 800e124:	e008      	b.n	800e138 <mg_der_find+0xd6>
    p = child.value + child.len;
 800e126:	69ba      	ldr	r2, [r7, #24]
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	4413      	add	r3, r2
 800e12c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (end > p) {
 800e12e:	6a3a      	ldr	r2, [r7, #32]
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	429a      	cmp	r2, r3
 800e134:	d8d6      	bhi.n	800e0e4 <mg_der_find+0x82>
  }
  return 0;  // not found
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3728      	adds	r7, #40	@ 0x28
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e14c:	2b04      	cmp	r3, #4
 800e14e:	d914      	bls.n	800e17a <mg_tls_got_record+0x3a>
         c->rtls.len >=
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e158:	3203      	adds	r2, #3
 800e15a:	7812      	ldrb	r2, [r2, #0]
 800e15c:	0212      	lsls	r2, r2, #8
 800e15e:	b211      	sxth	r1, r2
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800e164:	3204      	adds	r2, #4
 800e166:	7812      	ldrb	r2, [r2, #0]
 800e168:	b212      	sxth	r2, r2
 800e16a:	430a      	orrs	r2, r1
 800e16c:	b212      	sxth	r2, r2
 800e16e:	b292      	uxth	r2, r2
 800e170:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 800e172:	4293      	cmp	r3, r2
 800e174:	d301      	bcc.n	800e17a <mg_tls_got_record+0x3a>
 800e176:	2301      	movs	r3, #1
 800e178:	e000      	b.n	800e17c <mg_tls_got_record+0x3c>
 800e17a:	2300      	movs	r3, #0
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	b2db      	uxtb	r3, r3
}
 800e182:	4618      	mov	r0, r3
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 800e18e:	b580      	push	{r7, lr}
 800e190:	b084      	sub	sp, #16
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	3368      	adds	r3, #104	@ 0x68
 800e19a:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3303      	adds	r3, #3
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	021b      	lsls	r3, r3, #8
 800e1a6:	b21a      	sxth	r2, r3
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	b21b      	sxth	r3, r3
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	b21b      	sxth	r3, r3
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	3305      	adds	r3, #5
 800e1ba:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 800e1bc:	897b      	ldrh	r3, [r7, #10]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f7f8 fc0b 	bl	80069de <mg_iobuf_del>
}
 800e1c8:	bf00      	nop
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e1de:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	695b      	ldr	r3, [r3, #20]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d033      	beq.n	800e25c <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	041a      	lsls	r2, r3, #16
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	3302      	adds	r3, #2
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	021b      	lsls	r3, r3, #8
 800e204:	4313      	orrs	r3, r2
 800e206:	693a      	ldr	r2, [r7, #16]
 800e208:	3203      	adds	r2, #3
 800e20a:	7812      	ldrb	r2, [r2, #0]
 800e20c:	4313      	orrs	r3, r2
 800e20e:	3304      	adds	r3, #4
 800e210:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d904      	bls.n	800e226 <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 800e21c:	4911      	ldr	r1, [pc, #68]	@ (800e264 <mg_tls_drop_message+0x94>)
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7f4 f890 	bl	8002344 <mg_error>
    return;
 800e224:	e01b      	b.n	800e25e <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	3320      	adds	r3, #32
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	6939      	ldr	r1, [r7, #16]
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fe fc94 	bl	800cb5c <mg_sha256_update>
  tls->recv_offset += len;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	695a      	ldr	r2, [r3, #20]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	441a      	add	r2, r3
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	699a      	ldr	r2, [r3, #24]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	1ad2      	subs	r2, r2, r3
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d104      	bne.n	800e25e <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7ff ff9a 	bl	800e18e <mg_tls_drop_record>
 800e25a:	e000      	b.n	800e25e <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 800e25c:	bf00      	nop
  }
}
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	08024d94 	.word	0x08024d94

0800e268 <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 800e268:	b590      	push	{r4, r7, lr}
 800e26a:	b0d1      	sub	sp, #324	@ 0x144
 800e26c:	af02      	add	r7, sp, #8
 800e26e:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 800e272:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 800e276:	6020      	str	r0, [r4, #0]
 800e278:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800e27c:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 800e280:	6001      	str	r1, [r0, #0]
 800e282:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800e286:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800e28a:	600a      	str	r2, [r1, #0]
 800e28c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e290:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800e294:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 800e296:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e29a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e29e:	6818      	ldr	r0, [r3, #0]
 800e2a0:	f7f2 f87e 	bl	80003a0 <strlen>
 800e2a4:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 800e2a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	f014 f938 	bl	802252e <memset>
 800e2be:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e2cc:	705a      	strb	r2, [r3, #1]
 800e2ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2d2:	b2da      	uxtb	r2, r3
 800e2d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e2dc:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 800e2de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00c      	beq.n	800e300 <mg_tls_derive_secret+0x98>
 800e2e6:	f107 0314 	add.w	r3, r7, #20
 800e2ea:	3303      	adds	r3, #3
 800e2ec:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e2f0:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 800e2f4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800e2f8:	6809      	ldr	r1, [r1, #0]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f014 f8fd 	bl	80224fa <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 800e300:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e304:	3303      	adds	r3, #3
 800e306:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800e30a:	b2d1      	uxtb	r1, r2
 800e30c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e310:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800e314:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 800e316:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00e      	beq.n	800e33c <mg_tls_derive_secret+0xd4>
 800e31e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e322:	3304      	adds	r3, #4
 800e324:	f107 0214 	add.w	r2, r7, #20
 800e328:	18d0      	adds	r0, r2, r3
 800e32a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e32e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e332:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800e336:	6819      	ldr	r1, [r3, #0]
 800e338:	f014 f8df 	bl	80224fa <memmove>
  packed[4 + labelsz + datasz] = 1;
 800e33c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800e340:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e344:	4413      	add	r3, r2
 800e346:	3304      	adds	r3, #4
 800e348:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e34c:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800e350:	2101      	movs	r1, #1
 800e352:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 800e354:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800e358:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e35c:	4413      	add	r3, r2
 800e35e:	3305      	adds	r3, #5
 800e360:	f107 0414 	add.w	r4, r7, #20
 800e364:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e368:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800e36c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800e370:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 800e374:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	4623      	mov	r3, r4
 800e37c:	6812      	ldr	r2, [r2, #0]
 800e37e:	6809      	ldr	r1, [r1, #0]
 800e380:	f7fe fd5d 	bl	800ce3e <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 800e384:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800e388:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800e38c:	4619      	mov	r1, r3
 800e38e:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 800e392:	f014 f8b2 	bl	80224fa <memmove>
}
 800e396:	bf00      	nop
 800e398:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd90      	pop	{r4, r7, pc}

0800e3a0 <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b0cc      	sub	sp, #304	@ 0x130
 800e3a4:	af04      	add	r7, sp, #16
 800e3a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e3aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e3ae:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800e3b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e3b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 800e3c2:	2320      	movs	r3, #32
 800e3c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 800e3c8:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800e3cc:	2320      	movs	r3, #32
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	4b89      	ldr	r3, [pc, #548]	@ (800e5f8 <mg_tls_generate_handshake_keys+0x258>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	f7fe fd32 	bl	800ce3e <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 800e3da:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e3de:	2320      	movs	r3, #32
 800e3e0:	9302      	str	r3, [sp, #8]
 800e3e2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e3e6:	9301      	str	r3, [sp, #4]
 800e3e8:	2320      	movs	r3, #32
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	4b83      	ldr	r3, [pc, #524]	@ (800e5fc <mg_tls_generate_handshake_keys+0x25c>)
 800e3ee:	2220      	movs	r2, #32
 800e3f0:	4883      	ldr	r0, [pc, #524]	@ (800e600 <mg_tls_generate_handshake_keys+0x260>)
 800e3f2:	f7ff ff39 	bl	800e268 <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 800e3f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e3fa:	f503 7032 	add.w	r0, r3, #712	@ 0x2c8
                 sizeof(pre_extract_secret), tls->x25519_sec,
 800e3fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e402:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 800e404:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800e408:	2220      	movs	r2, #32
 800e40a:	9200      	str	r2, [sp, #0]
 800e40c:	2220      	movs	r2, #32
 800e40e:	f7fe fd16 	bl	800ce3e <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 800e412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e416:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800e41a:	2220      	movs	r2, #32
 800e41c:	4619      	mov	r1, r3
 800e41e:	4879      	ldr	r0, [pc, #484]	@ (800e604 <mg_tls_generate_handshake_keys+0x264>)
 800e420:	f7ff fdbf 	bl	800dfa2 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800e424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e428:	f103 0120 	add.w	r1, r3, #32
 800e42c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800e430:	2270      	movs	r2, #112	@ 0x70
 800e432:	4618      	mov	r0, r3
 800e434:	f014 f861 	bl	80224fa <memmove>
  mg_sha256_final(hello_hash, &sha256);
 800e438:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800e43c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800e440:	4611      	mov	r1, r2
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe fbc3 	bl	800cbce <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 800e448:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800e44c:	2220      	movs	r2, #32
 800e44e:	4619      	mov	r1, r3
 800e450:	486d      	ldr	r0, [pc, #436]	@ (800e608 <mg_tls_generate_handshake_keys+0x268>)
 800e452:	f7ff fda6 	bl	800dfa2 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 800e456:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e45a:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800e45e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800e462:	2320      	movs	r3, #32
 800e464:	9302      	str	r3, [sp, #8]
 800e466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e46a:	9301      	str	r3, [sp, #4]
 800e46c:	2320      	movs	r3, #32
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	4613      	mov	r3, r2
 800e472:	2220      	movs	r2, #32
 800e474:	4865      	ldr	r0, [pc, #404]	@ (800e60c <mg_tls_generate_handshake_keys+0x26c>)
 800e476:	f7ff fef7 	bl	800e268 <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 800e47a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e47e:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800e482:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800e486:	2320      	movs	r3, #32
 800e488:	9302      	str	r3, [sp, #8]
 800e48a:	f107 0308 	add.w	r3, r7, #8
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	2320      	movs	r3, #32
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	4613      	mov	r3, r2
 800e496:	2220      	movs	r2, #32
 800e498:	485d      	ldr	r0, [pc, #372]	@ (800e610 <mg_tls_generate_handshake_keys+0x270>)
 800e49a:	f7ff fee5 	bl	800e268 <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 800e49e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e4a2:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 800e4a6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e4aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e4ae:	9202      	str	r2, [sp, #8]
 800e4b0:	9301      	str	r3, [sp, #4]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	2220      	movs	r2, #32
 800e4ba:	4856      	ldr	r0, [pc, #344]	@ (800e614 <mg_tls_generate_handshake_keys+0x274>)
 800e4bc:	f7ff fed4 	bl	800e268 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 800e4c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e4c4:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 800e4c8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e4cc:	220c      	movs	r2, #12
 800e4ce:	9202      	str	r2, [sp, #8]
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	2220      	movs	r2, #32
 800e4da:	484f      	ldr	r0, [pc, #316]	@ (800e618 <mg_tls_generate_handshake_keys+0x278>)
 800e4dc:	f7ff fec4 	bl	800e268 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 800e4e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e4e4:	f503 7345 	add.w	r3, r3, #788	@ 0x314
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 800e4e8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e4ec:	2220      	movs	r2, #32
 800e4ee:	9202      	str	r2, [sp, #8]
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	2220      	movs	r2, #32
 800e4fa:	4848      	ldr	r0, [pc, #288]	@ (800e61c <mg_tls_generate_handshake_keys+0x27c>)
 800e4fc:	f7ff feb4 	bl	800e268 <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 800e500:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e504:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 800e508:	f107 0108 	add.w	r1, r7, #8
 800e50c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e510:	9202      	str	r2, [sp, #8]
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	2300      	movs	r3, #0
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	2300      	movs	r3, #0
 800e51a:	2220      	movs	r2, #32
 800e51c:	483d      	ldr	r0, [pc, #244]	@ (800e614 <mg_tls_generate_handshake_keys+0x274>)
 800e51e:	f7ff fea3 	bl	800e268 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 800e522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e526:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 800e52a:	f107 0108 	add.w	r1, r7, #8
 800e52e:	220c      	movs	r2, #12
 800e530:	9202      	str	r2, [sp, #8]
 800e532:	9301      	str	r3, [sp, #4]
 800e534:	2300      	movs	r3, #0
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	2300      	movs	r3, #0
 800e53a:	2220      	movs	r2, #32
 800e53c:	4836      	ldr	r0, [pc, #216]	@ (800e618 <mg_tls_generate_handshake_keys+0x278>)
 800e53e:	f7ff fe93 	bl	800e268 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 800e542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e546:	f503 7358 	add.w	r3, r3, #864	@ 0x360
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 800e54a:	f107 0108 	add.w	r1, r7, #8
 800e54e:	2220      	movs	r2, #32
 800e550:	9202      	str	r2, [sp, #8]
 800e552:	9301      	str	r3, [sp, #4]
 800e554:	2300      	movs	r3, #0
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	2300      	movs	r3, #0
 800e55a:	2220      	movs	r2, #32
 800e55c:	482f      	ldr	r0, [pc, #188]	@ (800e61c <mg_tls_generate_handshake_keys+0x27c>)
 800e55e:	f7ff fe83 	bl	800e268 <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 800e562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e566:	2220      	movs	r2, #32
 800e568:	4619      	mov	r1, r3
 800e56a:	482d      	ldr	r0, [pc, #180]	@ (800e620 <mg_tls_generate_handshake_keys+0x280>)
 800e56c:	f7ff fd19 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 800e570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e574:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800e578:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e57c:	4619      	mov	r1, r3
 800e57e:	4829      	ldr	r0, [pc, #164]	@ (800e624 <mg_tls_generate_handshake_keys+0x284>)
 800e580:	f7ff fd0f 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 800e584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e588:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800e58c:	220c      	movs	r2, #12
 800e58e:	4619      	mov	r1, r3
 800e590:	4825      	ldr	r0, [pc, #148]	@ (800e628 <mg_tls_generate_handshake_keys+0x288>)
 800e592:	f7ff fd06 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 800e596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e59a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800e59e:	2220      	movs	r2, #32
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4822      	ldr	r0, [pc, #136]	@ (800e62c <mg_tls_generate_handshake_keys+0x28c>)
 800e5a4:	f7ff fcfd 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 800e5a8:	f107 0308 	add.w	r3, r7, #8
 800e5ac:	2220      	movs	r2, #32
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	481f      	ldr	r0, [pc, #124]	@ (800e630 <mg_tls_generate_handshake_keys+0x290>)
 800e5b2:	f7ff fcf6 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 800e5b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e5ba:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800e5be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	481b      	ldr	r0, [pc, #108]	@ (800e634 <mg_tls_generate_handshake_keys+0x294>)
 800e5c6:	f7ff fcec 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 800e5ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e5ce:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800e5d2:	220c      	movs	r2, #12
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4818      	ldr	r0, [pc, #96]	@ (800e638 <mg_tls_generate_handshake_keys+0x298>)
 800e5d8:	f7ff fce3 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 800e5dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e5e0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4814      	ldr	r0, [pc, #80]	@ (800e63c <mg_tls_generate_handshake_keys+0x29c>)
 800e5ea:	f7ff fcda 	bl	800dfa2 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 800e5ee:	bf00      	nop
 800e5f0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	24002bc0 	.word	0x24002bc0
 800e5fc:	24000248 	.word	0x24000248
 800e600:	08024da0 	.word	0x08024da0
 800e604:	08024db0 	.word	0x08024db0
 800e608:	08024dbc 	.word	0x08024dbc
 800e60c:	08024dc8 	.word	0x08024dc8
 800e610:	08024ddc 	.word	0x08024ddc
 800e614:	08024df0 	.word	0x08024df0
 800e618:	08024dfc 	.word	0x08024dfc
 800e61c:	08024e08 	.word	0x08024e08
 800e620:	08024e18 	.word	0x08024e18
 800e624:	08024e28 	.word	0x08024e28
 800e628:	08024e30 	.word	0x08024e30
 800e62c:	08024e38 	.word	0x08024e38
 800e630:	08024e44 	.word	0x08024e44
 800e634:	08024e54 	.word	0x08024e54
 800e638:	08024e5c 	.word	0x08024e5c
 800e63c:	08024e64 	.word	0x08024e64

0800e640 <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 800e640:	b580      	push	{r7, lr}
 800e642:	b0cc      	sub	sp, #304	@ 0x130
 800e644:	af04      	add	r7, sp, #16
 800e646:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e64a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e64e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800e650:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e654:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e65e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 800e662:	2320      	movs	r3, #32
 800e664:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800e668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e66c:	f103 0120 	add.w	r1, r3, #32
 800e670:	f107 0308 	add.w	r3, r7, #8
 800e674:	2270      	movs	r2, #112	@ 0x70
 800e676:	4618      	mov	r0, r3
 800e678:	f013 ff3f 	bl	80224fa <memmove>
  mg_sha256_final(hash, &sha256);
 800e67c:	f107 0208 	add.w	r2, r7, #8
 800e680:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800e684:	4611      	mov	r1, r2
 800e686:	4618      	mov	r0, r3
 800e688:	f7fe faa1 	bl	800cbce <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 800e68c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e690:	f503 7132 	add.w	r1, r3, #712	@ 0x2c8
 800e694:	2320      	movs	r3, #32
 800e696:	9302      	str	r3, [sp, #8]
 800e698:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	2320      	movs	r3, #32
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	4b64      	ldr	r3, [pc, #400]	@ (800e834 <mg_tls_generate_application_keys+0x1f4>)
 800e6a4:	2220      	movs	r2, #32
 800e6a6:	4864      	ldr	r0, [pc, #400]	@ (800e838 <mg_tls_generate_application_keys+0x1f8>)
 800e6a8:	f7ff fdde 	bl	800e268 <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 800e6ac:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 800e6b0:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e6b4:	2320      	movs	r3, #32
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	4b60      	ldr	r3, [pc, #384]	@ (800e83c <mg_tls_generate_application_keys+0x1fc>)
 800e6ba:	2220      	movs	r2, #32
 800e6bc:	f7fe fbbf 	bl	800ce3e <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 800e6c0:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 800e6c4:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800e6c8:	2320      	movs	r3, #32
 800e6ca:	9302      	str	r3, [sp, #8]
 800e6cc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800e6d0:	9301      	str	r3, [sp, #4]
 800e6d2:	2320      	movs	r3, #32
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	2220      	movs	r2, #32
 800e6da:	4859      	ldr	r0, [pc, #356]	@ (800e840 <mg_tls_generate_application_keys+0x200>)
 800e6dc:	f7ff fdc4 	bl	800e268 <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 800e6e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e6e4:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 800e6e8:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800e6ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e6f0:	9202      	str	r2, [sp, #8]
 800e6f2:	9301      	str	r3, [sp, #4]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	2220      	movs	r2, #32
 800e6fc:	4851      	ldr	r0, [pc, #324]	@ (800e844 <mg_tls_generate_application_keys+0x204>)
 800e6fe:	f7ff fdb3 	bl	800e268 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 800e702:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e706:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 800e70a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800e70e:	220c      	movs	r2, #12
 800e710:	9202      	str	r2, [sp, #8]
 800e712:	9301      	str	r3, [sp, #4]
 800e714:	2300      	movs	r3, #0
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	2300      	movs	r3, #0
 800e71a:	2220      	movs	r2, #32
 800e71c:	484a      	ldr	r0, [pc, #296]	@ (800e848 <mg_tls_generate_application_keys+0x208>)
 800e71e:	f7ff fda3 	bl	800e268 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 800e722:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 800e726:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800e72a:	2320      	movs	r3, #32
 800e72c:	9302      	str	r3, [sp, #8]
 800e72e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800e732:	9301      	str	r3, [sp, #4]
 800e734:	2320      	movs	r3, #32
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	4613      	mov	r3, r2
 800e73a:	2220      	movs	r2, #32
 800e73c:	4843      	ldr	r0, [pc, #268]	@ (800e84c <mg_tls_generate_application_keys+0x20c>)
 800e73e:	f7ff fd93 	bl	800e268 <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 800e742:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e746:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 800e74a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800e74e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e752:	9202      	str	r2, [sp, #8]
 800e754:	9301      	str	r3, [sp, #4]
 800e756:	2300      	movs	r3, #0
 800e758:	9300      	str	r3, [sp, #0]
 800e75a:	2300      	movs	r3, #0
 800e75c:	2220      	movs	r2, #32
 800e75e:	4839      	ldr	r0, [pc, #228]	@ (800e844 <mg_tls_generate_application_keys+0x204>)
 800e760:	f7ff fd82 	bl	800e268 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 800e764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e768:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 800e76c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800e770:	220c      	movs	r2, #12
 800e772:	9202      	str	r2, [sp, #8]
 800e774:	9301      	str	r3, [sp, #4]
 800e776:	2300      	movs	r3, #0
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	2300      	movs	r3, #0
 800e77c:	2220      	movs	r2, #32
 800e77e:	4832      	ldr	r0, [pc, #200]	@ (800e848 <mg_tls_generate_application_keys+0x208>)
 800e780:	f7ff fd72 	bl	800e268 <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 800e784:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800e788:	2220      	movs	r2, #32
 800e78a:	4619      	mov	r1, r3
 800e78c:	4830      	ldr	r0, [pc, #192]	@ (800e850 <mg_tls_generate_application_keys+0x210>)
 800e78e:	f7ff fc08 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 800e792:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e796:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800e79a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e79e:	4619      	mov	r1, r3
 800e7a0:	482c      	ldr	r0, [pc, #176]	@ (800e854 <mg_tls_generate_application_keys+0x214>)
 800e7a2:	f7ff fbfe 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 800e7a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e7aa:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800e7ae:	220c      	movs	r2, #12
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4829      	ldr	r0, [pc, #164]	@ (800e858 <mg_tls_generate_application_keys+0x218>)
 800e7b4:	f7ff fbf5 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 800e7b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e7bc:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800e7c0:	2220      	movs	r2, #32
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4825      	ldr	r0, [pc, #148]	@ (800e85c <mg_tls_generate_application_keys+0x21c>)
 800e7c6:	f7ff fbec 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 800e7ca:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800e7ce:	2220      	movs	r2, #32
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4823      	ldr	r0, [pc, #140]	@ (800e860 <mg_tls_generate_application_keys+0x220>)
 800e7d4:	f7ff fbe5 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 800e7d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e7dc:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800e7e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	481f      	ldr	r0, [pc, #124]	@ (800e864 <mg_tls_generate_application_keys+0x224>)
 800e7e8:	f7ff fbdb 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 800e7ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e7f0:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800e7f4:	220c      	movs	r2, #12
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	481b      	ldr	r0, [pc, #108]	@ (800e868 <mg_tls_generate_application_keys+0x228>)
 800e7fa:	f7ff fbd2 	bl	800dfa2 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 800e7fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e802:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800e806:	2220      	movs	r2, #32
 800e808:	4619      	mov	r1, r3
 800e80a:	4818      	ldr	r0, [pc, #96]	@ (800e86c <mg_tls_generate_application_keys+0x22c>)
 800e80c:	f7ff fbc9 	bl	800dfa2 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 800e810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e814:	2200      	movs	r2, #0
 800e816:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 800e81a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e81e:	f8d3 22c4 	ldr.w	r2, [r3, #708]	@ 0x2c4
 800e822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e826:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 800e82a:	bf00      	nop
 800e82c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	24000248 	.word	0x24000248
 800e838:	08024da0 	.word	0x08024da0
 800e83c:	24002bc0 	.word	0x24002bc0
 800e840:	08024e70 	.word	0x08024e70
 800e844:	08024df0 	.word	0x08024df0
 800e848:	08024dfc 	.word	0x08024dfc
 800e84c:	08024e84 	.word	0x08024e84
 800e850:	08024e98 	.word	0x08024e98
 800e854:	08024e28 	.word	0x08024e28
 800e858:	08024e30 	.word	0x08024e30
 800e85c:	08024e38 	.word	0x08024e38
 800e860:	08024ea8 	.word	0x08024ea8
 800e864:	08024e54 	.word	0x08024e54
 800e868:	08024e5c 	.word	0x08024e5c
 800e86c:	08024e64 	.word	0x08024e64

0800e870 <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 800e870:	b580      	push	{r7, lr}
 800e872:	b09a      	sub	sp, #104	@ 0x68
 800e874:	af04      	add	r7, sp, #16
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
 800e87c:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e884:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 800e886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e888:	3304      	adds	r3, #4
 800e88a:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	3311      	adds	r3, #17
 800e890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800e892:	2317      	movs	r3, #23
 800e894:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800e898:	2303      	movs	r3, #3
 800e89a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e89e:	2303      	movs	r3, #3
 800e8a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 800e8a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8a6:	0a1b      	lsrs	r3, r3, #8
 800e8a8:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800e8aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 800e8ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8b0:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800e8b2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800e8b6:	2317      	movs	r3, #23
 800e8b8:	773b      	strb	r3, [r7, #28]
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	777b      	strb	r3, [r7, #29]
 800e8be:	2303      	movs	r3, #3
 800e8c0:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 800e8c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8c4:	0a1b      	lsrs	r3, r3, #8
 800e8c6:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800e8c8:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 800e8ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8cc:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 800e8ce:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e8d8:	f003 0302 	and.w	r3, r3, #2
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d003      	beq.n	800e8ea <mg_tls_encrypt+0x7a>
 800e8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e8e8:	e002      	b.n	800e8f0 <mg_tls_encrypt+0x80>
 800e8ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e8f8:	f003 0302 	and.w	r3, r3, #2
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d003      	beq.n	800e90a <mg_tls_encrypt+0x9a>
 800e902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e904:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800e908:	e002      	b.n	800e910 <mg_tls_encrypt+0xa0>
 800e90a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e90c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
  uint8_t *key =
 800e910:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e918:	f003 0302 	and.w	r3, r3, #2
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d003      	beq.n	800e92a <mg_tls_encrypt+0xba>
 800e922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e924:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800e928:	e002      	b.n	800e930 <mg_tls_encrypt+0xc0>
 800e92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e92c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
  uint8_t *iv =
 800e930:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 800e932:	f107 0310 	add.w	r3, r7, #16
 800e936:	220c      	movs	r2, #12
 800e938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e93a:	4618      	mov	r0, r3
 800e93c:	f013 fddd 	bl	80224fa <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 800e940:	7e3a      	ldrb	r2, [r7, #24]
 800e942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e944:	0e1b      	lsrs	r3, r3, #24
 800e946:	b2db      	uxtb	r3, r3
 800e948:	4053      	eors	r3, r2
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 800e94e:	7e7a      	ldrb	r2, [r7, #25]
 800e950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e952:	0c1b      	lsrs	r3, r3, #16
 800e954:	b2db      	uxtb	r3, r3
 800e956:	4053      	eors	r3, r2
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 800e95c:	7eba      	ldrb	r2, [r7, #26]
 800e95e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e960:	0a1b      	lsrs	r3, r3, #8
 800e962:	b2db      	uxtb	r3, r3
 800e964:	4053      	eors	r3, r2
 800e966:	b2db      	uxtb	r3, r3
 800e968:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 800e96a:	7efa      	ldrb	r2, [r7, #27]
 800e96c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	4053      	eors	r3, r2
 800e972:	b2db      	uxtb	r3, r3
 800e974:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 800e976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e978:	6899      	ldr	r1, [r3, #8]
 800e97a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e97e:	2305      	movs	r3, #5
 800e980:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e982:	f7f7 ffda 	bl	800693a <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 800e986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e988:	689a      	ldr	r2, [r3, #8]
 800e98a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e98c:	4413      	add	r3, r2
 800e98e:	4619      	mov	r1, r3
 800e990:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e992:	f7f7 ff6b 	bl	800686c <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 800e996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	4413      	add	r3, r2
 800e9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 800e9a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9a8:	6899      	ldr	r1, [r3, #8]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	440b      	add	r3, r1
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	4413      	add	r3, r2
 800e9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	68b9      	ldr	r1, [r7, #8]
 800e9b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e9ba:	f013 fd9e 	bl	80224fa <memmove>
  outmsg[msgsz] = msgtype;
 800e9be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	78fa      	ldrb	r2, [r7, #3]
 800e9c6:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 800e9c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9cc:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 800e9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9d0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	2001      	movs	r0, #1
 800e9d8:	f013 faa0 	bl	8021f1c <calloc>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d104      	bne.n	800e9f0 <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 800e9e6:	491f      	ldr	r1, [pc, #124]	@ (800ea64 <mg_tls_encrypt+0x1f4>)
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f7f3 fcab 	bl	8002344 <mg_error>
 800e9ee:	e035      	b.n	800ea5c <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	f107 011c 	add.w	r1, r7, #28
 800e9f8:	f107 0210 	add.w	r2, r7, #16
 800e9fc:	9302      	str	r3, [sp, #8]
 800e9fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea00:	9301      	str	r3, [sp, #4]
 800ea02:	2305      	movs	r3, #5
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	460b      	mov	r3, r1
 800ea08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea0c:	f003 ffab 	bl	8012966 <mg_chacha20_poly1305_encrypt>
 800ea10:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 800ea12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ea16:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ea18:	f013 fd6f 	bl	80224fa <memmove>
      free(enc);
 800ea1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea1e:	f013 faa1 	bl	8021f64 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ea28:	f003 0302 	and.w	r3, r3, #2
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d007      	beq.n	800ea42 <mg_tls_encrypt+0x1d2>
 800ea32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea3c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 800ea40:	e006      	b.n	800ea50 <mg_tls_encrypt+0x1e0>
 800ea42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea4c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  wio->len += encsz;
 800ea50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea52:	689a      	ldr	r2, [r3, #8]
 800ea54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea56:	441a      	add	r2, r3
 800ea58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea5a:	609a      	str	r2, [r3, #8]
}
 800ea5c:	3758      	adds	r7, #88	@ 0x58
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	08024eb8 	.word	0x08024eb8

0800ea68 <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b092      	sub	sp, #72	@ 0x48
 800ea6c:	af02      	add	r7, sp, #8
 800ea6e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ea76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3368      	adds	r3, #104	@ 0x68
 800ea7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ea84:	f003 0302 	and.w	r3, r3, #2
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d003      	beq.n	800ea96 <mg_tls_recv_record+0x2e>
 800ea8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ea94:	e002      	b.n	800ea9c <mg_tls_recv_record+0x34>
 800ea96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ea9c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800eaa4:	f003 0302 	and.w	r3, r3, #2
 800eaa8:	b2db      	uxtb	r3, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d003      	beq.n	800eab6 <mg_tls_recv_record+0x4e>
 800eaae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eab0:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800eab4:	e002      	b.n	800eabc <mg_tls_recv_record+0x54>
 800eab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eab8:	f503 734d 	add.w	r3, r3, #820	@ 0x334
  uint8_t *key =
 800eabc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800eac4:	f003 0302 	and.w	r3, r3, #2
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d003      	beq.n	800ead6 <mg_tls_recv_record+0x6e>
 800eace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ead0:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800ead4:	e002      	b.n	800eadc <mg_tls_recv_record+0x74>
 800ead6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ead8:	f503 7355 	add.w	r3, r3, #852	@ 0x354
  uint8_t *iv =
 800eadc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 800eade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eae0:	699b      	ldr	r3, [r3, #24]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d001      	beq.n	800eaea <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 800eae6:	2300      	movs	r3, #0
 800eae8:	e0ae      	b.n	800ec48 <mg_tls_recv_record+0x1e0>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7ff fb28 	bl	800e140 <mg_tls_got_record>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	f083 0301 	eor.w	r3, r3, #1
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 800eafc:	f06f 0301 	mvn.w	r3, #1
 800eb00:	e0a2      	b.n	800ec48 <mg_tls_recv_record+0x1e0>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 800eb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b17      	cmp	r3, #23
 800eb0a:	d018      	beq.n	800eb3e <mg_tls_recv_record+0xd6>
      break;
    } else if (rio->buf[0] ==
 800eb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	2b14      	cmp	r3, #20
 800eb14:	d103      	bne.n	800eb1e <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7ff fb39 	bl	800e18e <mg_tls_drop_record>
 800eb1c:	e7e5      	b.n	800eaea <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b15      	cmp	r3, #21
 800eb26:	d103      	bne.n	800eb30 <mg_tls_recv_record+0xc8>
      MG_INFO(("TLS ALERT packet received"));
      mg_tls_drop_record(c);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7ff fb30 	bl	800e18e <mg_tls_drop_record>
 800eb2e:	e7dc      	b.n	800eaea <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 800eb30:	4947      	ldr	r1, [pc, #284]	@ (800ec50 <mg_tls_recv_record+0x1e8>)
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7f3 fc06 	bl	8002344 <mg_error>
      return -1;
 800eb38:	f04f 33ff 	mov.w	r3, #4294967295
 800eb3c:	e084      	b.n	800ec48 <mg_tls_recv_record+0x1e0>
      break;
 800eb3e:	bf00      	nop

#if !CHACHA20
  mg_gcm_initialize();
#endif

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 800eb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	3303      	adds	r3, #3
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	021b      	lsls	r3, r3, #8
 800eb4a:	b21a      	sxth	r2, r3
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	3304      	adds	r3, #4
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	b21b      	sxth	r3, r3
 800eb56:	4313      	orrs	r3, r2
 800eb58:	b21b      	sxth	r3, r3
 800eb5a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 800eb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	3305      	adds	r3, #5
 800eb62:	627b      	str	r3, [r7, #36]	@ 0x24
  memmove(nonce, iv, sizeof(nonce));
 800eb64:	f107 030c 	add.w	r3, r7, #12
 800eb68:	220c      	movs	r2, #12
 800eb6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f013 fcc4 	bl	80224fa <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 800eb72:	7d3a      	ldrb	r2, [r7, #20]
 800eb74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb76:	0e1b      	lsrs	r3, r3, #24
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	4053      	eors	r3, r2
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 800eb80:	7d7a      	ldrb	r2, [r7, #21]
 800eb82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb84:	0c1b      	lsrs	r3, r3, #16
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	4053      	eors	r3, r2
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 800eb8e:	7dba      	ldrb	r2, [r7, #22]
 800eb90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb92:	0a1b      	lsrs	r3, r3, #8
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	4053      	eors	r3, r2
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 800eb9c:	7dfa      	ldrb	r2, [r7, #23]
 800eb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	4053      	eors	r3, r2
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 800eba8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ebaa:	4619      	mov	r1, r3
 800ebac:	2001      	movs	r0, #1
 800ebae:	f013 f9b5 	bl	8021f1c <calloc>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d106      	bne.n	800ebca <mg_tls_recv_record+0x162>
      mg_error(c, "TLS OOM");
 800ebbc:	4925      	ldr	r1, [pc, #148]	@ (800ec54 <mg_tls_recv_record+0x1ec>)
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7f3 fbc0 	bl	8002344 <mg_error>
      return -1;
 800ebc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc8:	e03e      	b.n	800ec48 <mg_tls_recv_record+0x1e0>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 800ebca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ebcc:	f107 020c 	add.w	r2, r7, #12
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ebd6:	6a38      	ldr	r0, [r7, #32]
 800ebd8:	f003 fefd 	bl	80129d6 <mg_chacha20_poly1305_decrypt>
 800ebdc:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 800ebde:	69fa      	ldr	r2, [r7, #28]
 800ebe0:	6a39      	ldr	r1, [r7, #32]
 800ebe2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebe4:	f013 fc89 	bl	80224fa <memmove>
    free(dec);
 800ebe8:	6a38      	ldr	r0, [r7, #32]
 800ebea:	f013 f9bb 	bl	8021f64 <free>
    mg_error(c, "wrong size");
    return -1;
  }
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif
  r = msgsz - 16 - 1;
 800ebee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ebf0:	3b11      	subs	r3, #17
 800ebf2:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 800ebf4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ebf6:	3b11      	subs	r3, #17
 800ebf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebfa:	4413      	add	r3, r2
 800ebfc:	781a      	ldrb	r2, [r3, #0]
 800ebfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec00:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 800ec02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec06:	6812      	ldr	r2, [r2, #0]
 800ec08:	1a9a      	subs	r2, r3, r2
 800ec0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec0c:	615a      	str	r2, [r3, #20]
  tls->recv_len = msgsz - 16 - 1;
 800ec0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ec10:	3b11      	subs	r3, #17
 800ec12:	461a      	mov	r2, r3
 800ec14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec16:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ec1e:	f003 0302 	and.w	r3, r3, #2
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d007      	beq.n	800ec38 <mg_tls_recv_record+0x1d0>
 800ec28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ec2e:	1c5a      	adds	r2, r3, #1
 800ec30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec32:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 800ec36:	e006      	b.n	800ec46 <mg_tls_recv_record+0x1de>
 800ec38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec42:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
  return r;
 800ec46:	69bb      	ldr	r3, [r7, #24]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3740      	adds	r7, #64	@ 0x40
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	08024ec0 	.word	0x08024ec0
 800ec54:	08024eb8 	.word	0x08024eb8

0800ec58 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 800ec58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec5a:	b0d5      	sub	sp, #340	@ 0x154
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ec62:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ec66:	6018      	str	r0, [r3, #0]
 800ec68:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ec6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ec70:	6019      	str	r1, [r3, #0]
 800ec72:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ec76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ec7a:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800ec7c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ec80:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ec8a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 800ec8e:	4b41      	ldr	r3, [pc, #260]	@ (800ed94 <mg_tls_calc_cert_verify_hash+0x13c>)
 800ec90:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 800ec94:	461d      	mov	r5, r3
 800ec96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec9e:	682b      	ldr	r3, [r5, #0]
 800eca0:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 800eca2:	4b3d      	ldr	r3, [pc, #244]	@ (800ed98 <mg_tls_calc_cert_verify_hash+0x140>)
 800eca4:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 800eca8:	461d      	mov	r5, r3
 800ecaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecb2:	682b      	ldr	r3, [r5, #0]
 800ecb4:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 800ecb6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ecba:	2240      	movs	r2, #64	@ 0x40
 800ecbc:	2120      	movs	r1, #32
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f013 fc35 	bl	802252e <memset>
  if (is_client) {
 800ecc4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ecc8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d018      	beq.n	800ed04 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 800ecd2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ecd6:	3340      	adds	r3, #64	@ 0x40
 800ecd8:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 800ecdc:	469c      	mov	ip, r3
 800ecde:	f104 0e20 	add.w	lr, r4, #32
 800ece2:	4665      	mov	r5, ip
 800ece4:	4626      	mov	r6, r4
 800ece6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ece8:	6028      	str	r0, [r5, #0]
 800ecea:	6069      	str	r1, [r5, #4]
 800ecec:	60aa      	str	r2, [r5, #8]
 800ecee:	60eb      	str	r3, [r5, #12]
 800ecf0:	3410      	adds	r4, #16
 800ecf2:	f10c 0c10 	add.w	ip, ip, #16
 800ecf6:	4574      	cmp	r4, lr
 800ecf8:	d1f3      	bne.n	800ece2 <mg_tls_calc_cert_verify_hash+0x8a>
 800ecfa:	4662      	mov	r2, ip
 800ecfc:	4623      	mov	r3, r4
 800ecfe:	881b      	ldrh	r3, [r3, #0]
 800ed00:	8013      	strh	r3, [r2, #0]
 800ed02:	e017      	b.n	800ed34 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 800ed04:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ed08:	3340      	adds	r3, #64	@ 0x40
 800ed0a:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 800ed0e:	469c      	mov	ip, r3
 800ed10:	f104 0e20 	add.w	lr, r4, #32
 800ed14:	4665      	mov	r5, ip
 800ed16:	4626      	mov	r6, r4
 800ed18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ed1a:	6028      	str	r0, [r5, #0]
 800ed1c:	6069      	str	r1, [r5, #4]
 800ed1e:	60aa      	str	r2, [r5, #8]
 800ed20:	60eb      	str	r3, [r5, #12]
 800ed22:	3410      	adds	r4, #16
 800ed24:	f10c 0c10 	add.w	ip, ip, #16
 800ed28:	4574      	cmp	r4, lr
 800ed2a:	d1f3      	bne.n	800ed14 <mg_tls_calc_cert_verify_hash+0xbc>
 800ed2c:	4662      	mov	r2, ip
 800ed2e:	4623      	mov	r3, r4
 800ed30:	881b      	ldrh	r3, [r3, #0]
 800ed32:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800ed34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ed38:	f103 0120 	add.w	r1, r3, #32
 800ed3c:	f107 0310 	add.w	r3, r7, #16
 800ed40:	2270      	movs	r2, #112	@ 0x70
 800ed42:	4618      	mov	r0, r3
 800ed44:	f013 fbd9 	bl	80224fa <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 800ed48:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ed4c:	3362      	adds	r3, #98	@ 0x62
 800ed4e:	f107 0210 	add.w	r2, r7, #16
 800ed52:	4611      	mov	r1, r2
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fd ff3a 	bl	800cbce <mg_sha256_final>

  mg_sha256_init(&sha256);
 800ed5a:	f107 0310 	add.w	r3, r7, #16
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fd fcb8 	bl	800c6d4 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 800ed64:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800ed68:	f107 0310 	add.w	r3, r7, #16
 800ed6c:	2282      	movs	r2, #130	@ 0x82
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fd fef4 	bl	800cb5c <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 800ed74:	f107 0210 	add.w	r2, r7, #16
 800ed78:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ed7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800ed80:	4611      	mov	r1, r2
 800ed82:	6818      	ldr	r0, [r3, #0]
 800ed84:	f7fd ff23 	bl	800cbce <mg_sha256_final>
}
 800ed88:	bf00      	nop
 800ed8a:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed92:	bf00      	nop
 800ed94:	08024ed4 	.word	0x08024ed4
 800ed98:	08024ef8 	.word	0x08024ef8

0800ed9c <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b08c      	sub	sp, #48	@ 0x30
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800edaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	3368      	adds	r3, #104	@ 0x68
 800edb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff f9c4 	bl	800e140 <mg_tls_got_record>
 800edb8:	4603      	mov	r3, r0
 800edba:	f083 0301 	eor.w	r3, r3, #1
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d002      	beq.n	800edca <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 800edc4:	f06f 0301 	mvn.w	r3, #1
 800edc8:	e138      	b.n	800f03c <mg_tls_server_recv_hello+0x2a0>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 800edca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	2b16      	cmp	r3, #22
 800edd2:	d105      	bne.n	800ede0 <mg_tls_server_recv_hello+0x44>
 800edd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3305      	adds	r3, #5
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d006      	beq.n	800edee <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 800ede0:	4998      	ldr	r1, [pc, #608]	@ (800f044 <mg_tls_server_recv_hello+0x2a8>)
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7f3 faae 	bl	8002344 <mg_error>
    return -1;
 800ede8:	f04f 33ff 	mov.w	r3, #4294967295
 800edec:	e126      	b.n	800f03c <mg_tls_server_recv_hello+0x2a0>
  }
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 800edee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3303      	adds	r3, #3
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	021b      	lsls	r3, r3, #8
 800edf8:	b21a      	sxth	r2, r3
 800edfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	3304      	adds	r3, #4
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	b21b      	sxth	r3, r3
 800ee04:	4313      	orrs	r3, r2
 800ee06:	b21b      	sxth	r3, r3
 800ee08:	847b      	strh	r3, [r7, #34]	@ 0x22
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 800ee0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee0c:	f103 0020 	add.w	r0, r3, #32
 800ee10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	3305      	adds	r3, #5
 800ee16:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ee18:	4619      	mov	r1, r3
 800ee1a:	f7fd fe9f 	bl	800cb5c <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 800ee1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee20:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800ee24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	330b      	adds	r3, #11
 800ee2a:	2220      	movs	r2, #32
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	f013 fb64 	bl	80224fa <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 800ee32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800ee3a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 800ee3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ee42:	2b20      	cmp	r3, #32
 800ee44:	d10a      	bne.n	800ee5c <mg_tls_server_recv_hello+0xc0>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 800ee46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee48:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	332c      	adds	r3, #44	@ 0x2c
 800ee52:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ee56:	4619      	mov	r1, r3
 800ee58:	f013 fb4f 	bl	80224fa <memmove>
  } else if (session_id_len != 0) {
    MG_INFO(("bad session id len"));
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ee64:	332c      	adds	r3, #44	@ 0x2c
 800ee66:	4413      	add	r3, r2
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	021b      	lsls	r3, r3, #8
 800ee6c:	b21a      	sxth	r2, r3
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee70:	6819      	ldr	r1, [r3, #0]
 800ee72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ee76:	332d      	adds	r3, #45	@ 0x2d
 800ee78:	440b      	add	r3, r1
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	b21b      	sxth	r3, r3
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	b21b      	sxth	r3, r3
 800ee82:	83fb      	strh	r3, [r7, #30]
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 800ee84:	8bfa      	ldrh	r2, [r7, #30]
 800ee86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee88:	6899      	ldr	r1, [r3, #8]
 800ee8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ee8e:	1acb      	subs	r3, r1, r3
 800ee90:	3b2e      	subs	r3, #46	@ 0x2e
 800ee92:	429a      	cmp	r2, r3
 800ee94:	f200 80c5 	bhi.w	800f022 <mg_tls_server_recv_hello+0x286>
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 800ee98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800eea0:	8bfb      	ldrh	r3, [r7, #30]
 800eea2:	440b      	add	r3, r1
 800eea4:	3330      	adds	r3, #48	@ 0x30
 800eea6:	4413      	add	r3, r2
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	021b      	lsls	r3, r3, #8
 800eeac:	b21a      	sxth	r2, r3
 800eeae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb0:	6819      	ldr	r1, [r3, #0]
 800eeb2:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 800eeb6:	8bfb      	ldrh	r3, [r7, #30]
 800eeb8:	4403      	add	r3, r0
 800eeba:	3331      	adds	r3, #49	@ 0x31
 800eebc:	440b      	add	r3, r1
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	b21b      	sxth	r3, r3
 800eec2:	4313      	orrs	r3, r2
 800eec4:	b21b      	sxth	r3, r3
 800eec6:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 800eec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800eed0:	8bfb      	ldrh	r3, [r7, #30]
 800eed2:	440b      	add	r3, r1
 800eed4:	3332      	adds	r3, #50	@ 0x32
 800eed6:	4413      	add	r3, r2
 800eed8:	61bb      	str	r3, [r7, #24]
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 800eeda:	8bba      	ldrh	r2, [r7, #28]
 800eedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eede:	6899      	ldr	r1, [r3, #8]
 800eee0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800eee4:	1ac9      	subs	r1, r1, r3
 800eee6:	8bfb      	ldrh	r3, [r7, #30]
 800eee8:	1acb      	subs	r3, r1, r3
 800eeea:	3b32      	subs	r3, #50	@ 0x32
 800eeec:	429a      	cmp	r2, r3
 800eeee:	f200 809a 	bhi.w	800f026 <mg_tls_server_recv_hello+0x28a>
  for (j = 0; j < ext_len;) {
 800eef2:	2300      	movs	r3, #0
 800eef4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800eef6:	e08e      	b.n	800f016 <mg_tls_server_recv_hello+0x27a>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 800eef8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800eefa:	3302      	adds	r3, #2
 800eefc:	69ba      	ldr	r2, [r7, #24]
 800eefe:	4413      	add	r3, r2
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	021b      	lsls	r3, r3, #8
 800ef04:	b21a      	sxth	r2, r3
 800ef06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef08:	3303      	adds	r3, #3
 800ef0a:	69b9      	ldr	r1, [r7, #24]
 800ef0c:	440b      	add	r3, r1
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	b21b      	sxth	r3, r3
 800ef12:	4313      	orrs	r3, r2
 800ef14:	b21b      	sxth	r3, r3
 800ef16:	82fb      	strh	r3, [r7, #22]
    if (ext[j] != 0x00 ||
 800ef18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef1a:	69ba      	ldr	r2, [r7, #24]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d106      	bne.n	800ef32 <mg_tls_server_recv_hello+0x196>
        ext[j + 1] != 0x33) {  // not a key share extension, ignore
 800ef24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef26:	3301      	adds	r3, #1
 800ef28:	69ba      	ldr	r2, [r7, #24]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	781b      	ldrb	r3, [r3, #0]
    if (ext[j] != 0x00 ||
 800ef2e:	2b33      	cmp	r3, #51	@ 0x33
 800ef30:	d006      	beq.n	800ef40 <mg_tls_server_recv_hello+0x1a4>
      j += (uint16_t) (n + 4);
 800ef32:	8afa      	ldrh	r2, [r7, #22]
 800ef34:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef36:	4413      	add	r3, r2
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 800ef3e:	e06a      	b.n	800f016 <mg_tls_server_recv_hello+0x27a>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 800ef40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef42:	3304      	adds	r3, #4
 800ef44:	69ba      	ldr	r2, [r7, #24]
 800ef46:	4413      	add	r3, r2
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	021b      	lsls	r3, r3, #8
 800ef4c:	b21a      	sxth	r2, r3
 800ef4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef50:	3305      	adds	r3, #5
 800ef52:	69b9      	ldr	r1, [r7, #24]
 800ef54:	440b      	add	r3, r1
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	b21b      	sxth	r3, r3
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	b21b      	sxth	r3, r3
 800ef5e:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 800ef60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef62:	3306      	adds	r3, #6
 800ef64:	69ba      	ldr	r2, [r7, #24]
 800ef66:	4413      	add	r3, r2
 800ef68:	613b      	str	r3, [r7, #16]
    if (key_exchange_len >
 800ef6a:	8aba      	ldrh	r2, [r7, #20]
        rio->len - (uint16_t) ((size_t) key_exchange - (size_t) rio->buf) - 2)
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	6939      	ldr	r1, [r7, #16]
 800ef72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef74:	6800      	ldr	r0, [r0, #0]
 800ef76:	1a09      	subs	r1, r1, r0
 800ef78:	b289      	uxth	r1, r1
 800ef7a:	1a5b      	subs	r3, r3, r1
 800ef7c:	3b02      	subs	r3, #2
    if (key_exchange_len >
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d853      	bhi.n	800f02a <mg_tls_server_recv_hello+0x28e>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 800ef82:	2300      	movs	r3, #0
 800ef84:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ef86:	e03c      	b.n	800f002 <mg_tls_server_recv_hello+0x266>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 800ef88:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ef8a:	3302      	adds	r3, #2
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	4413      	add	r3, r2
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	021b      	lsls	r3, r3, #8
 800ef94:	b21a      	sxth	r2, r3
 800ef96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ef98:	3303      	adds	r3, #3
 800ef9a:	6939      	ldr	r1, [r7, #16]
 800ef9c:	440b      	add	r3, r1
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	b21b      	sxth	r3, r3
 800efa2:	4313      	orrs	r3, r2
 800efa4:	b21b      	sxth	r3, r3
 800efa6:	81fb      	strh	r3, [r7, #14]
      if (m > (key_exchange_len - k - 4)) goto fail;
 800efa8:	8aba      	ldrh	r2, [r7, #20]
 800efaa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	1eda      	subs	r2, r3, #3
 800efb0:	89fb      	ldrh	r3, [r7, #14]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	dd3b      	ble.n	800f02e <mg_tls_server_recv_hello+0x292>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 800efb6:	89fb      	ldrh	r3, [r7, #14]
 800efb8:	2b20      	cmp	r3, #32
 800efba:	d11c      	bne.n	800eff6 <mg_tls_server_recv_hello+0x25a>
 800efbc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800efbe:	693a      	ldr	r2, [r7, #16]
 800efc0:	4413      	add	r3, r2
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d116      	bne.n	800eff6 <mg_tls_server_recv_hello+0x25a>
 800efc8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800efca:	3301      	adds	r3, #1
 800efcc:	693a      	ldr	r2, [r7, #16]
 800efce:	4413      	add	r3, r2
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	2b1d      	cmp	r3, #29
 800efd4:	d10f      	bne.n	800eff6 <mg_tls_server_recv_hello+0x25a>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 800efd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd8:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 800efdc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800efde:	3304      	adds	r3, #4
 800efe0:	693a      	ldr	r2, [r7, #16]
 800efe2:	4413      	add	r3, r2
 800efe4:	89fa      	ldrh	r2, [r7, #14]
 800efe6:	4619      	mov	r1, r3
 800efe8:	f013 fa87 	bl	80224fa <memmove>
        mg_tls_drop_record(c);
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7ff f8ce 	bl	800e18e <mg_tls_drop_record>
        return 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	e022      	b.n	800f03c <mg_tls_server_recv_hello+0x2a0>
      }
      k += (uint16_t) (m + 4);
 800eff6:	89fa      	ldrh	r2, [r7, #14]
 800eff8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800effa:	4413      	add	r3, r2
 800effc:	b29b      	uxth	r3, r3
 800effe:	3304      	adds	r3, #4
 800f000:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 800f002:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800f004:	8abb      	ldrh	r3, [r7, #20]
 800f006:	429a      	cmp	r2, r3
 800f008:	d3be      	bcc.n	800ef88 <mg_tls_server_recv_hello+0x1ec>
    }
    j += (uint16_t) (n + 4);
 800f00a:	8afa      	ldrh	r2, [r7, #22]
 800f00c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f00e:	4413      	add	r3, r2
 800f010:	b29b      	uxth	r3, r3
 800f012:	3304      	adds	r3, #4
 800f014:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 800f016:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f018:	8bbb      	ldrh	r3, [r7, #28]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	f4ff af6c 	bcc.w	800eef8 <mg_tls_server_recv_hello+0x15c>
  }
fail:
 800f020:	e006      	b.n	800f030 <mg_tls_server_recv_hello+0x294>
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 800f022:	bf00      	nop
 800f024:	e004      	b.n	800f030 <mg_tls_server_recv_hello+0x294>
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 800f026:	bf00      	nop
 800f028:	e002      	b.n	800f030 <mg_tls_server_recv_hello+0x294>
      goto fail;
 800f02a:	bf00      	nop
 800f02c:	e000      	b.n	800f030 <mg_tls_server_recv_hello+0x294>
      if (m > (key_exchange_len - k - 4)) goto fail;
 800f02e:	bf00      	nop
  mg_error(c, "bad client hello");
 800f030:	4905      	ldr	r1, [pc, #20]	@ (800f048 <mg_tls_server_recv_hello+0x2ac>)
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7f3 f986 	bl	8002344 <mg_error>
  return -1;
 800f038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3730      	adds	r7, #48	@ 0x30
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	08024f1c 	.word	0x08024f1c
 800f048:	08024f38 	.word	0x08024f38

0800f04c <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 800f04c:	b5b0      	push	{r4, r5, r7, lr}
 800f04e:	b0b4      	sub	sp, #208	@ 0xd0
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f05a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 800f05e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f062:	3304      	adds	r3, #4
 800f064:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 800f068:	4a4c      	ldr	r2, [pc, #304]	@ (800f19c <mg_tls_server_send_hello+0x150>)
 800f06a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f06e:	4611      	mov	r1, r2
 800f070:	227a      	movs	r2, #122	@ 0x7a
 800f072:	4618      	mov	r0, r3
 800f074:	f013 fbff 	bl	8022876 <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 800f078:	f107 030c 	add.w	r3, r7, #12
 800f07c:	2120      	movs	r1, #32
 800f07e:	4618      	mov	r0, r3
 800f080:	f7f1 fde8 	bl	8000c54 <mg_random>
 800f084:	4603      	mov	r3, r0
 800f086:	f083 0301 	eor.w	r3, r3, #1
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d003      	beq.n	800f098 <mg_tls_server_send_hello+0x4c>
 800f090:	4943      	ldr	r1, [pc, #268]	@ (800f1a0 <mg_tls_server_send_hello+0x154>)
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f7f3 f956 	bl	8002344 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 800f098:	f107 010c 	add.w	r1, r7, #12
 800f09c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	4a40      	ldr	r2, [pc, #256]	@ (800f1a4 <mg_tls_server_send_hello+0x158>)
 800f0a4:	f006 fcfe 	bl	8015aa4 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 800f0a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f0ac:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 800f0b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f0b4:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 800f0b8:	f107 010c 	add.w	r1, r7, #12
 800f0bc:	2301      	movs	r3, #1
 800f0be:	f006 fcf1 	bl	8015aa4 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 800f0c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f0c6:	33f0      	adds	r3, #240	@ 0xf0
 800f0c8:	2220      	movs	r2, #32
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4836      	ldr	r0, [pc, #216]	@ (800f1a8 <mg_tls_server_send_hello+0x15c>)
 800f0ce:	f7fe ff68 	bl	800dfa2 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 800f0d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0d6:	3306      	adds	r3, #6
 800f0d8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800f0dc:	3290      	adds	r2, #144	@ 0x90
 800f0de:	6815      	ldr	r5, [r2, #0]
 800f0e0:	6854      	ldr	r4, [r2, #4]
 800f0e2:	6890      	ldr	r0, [r2, #8]
 800f0e4:	68d1      	ldr	r1, [r2, #12]
 800f0e6:	601d      	str	r5, [r3, #0]
 800f0e8:	605c      	str	r4, [r3, #4]
 800f0ea:	6098      	str	r0, [r3, #8]
 800f0ec:	60d9      	str	r1, [r3, #12]
 800f0ee:	6915      	ldr	r5, [r2, #16]
 800f0f0:	6954      	ldr	r4, [r2, #20]
 800f0f2:	6990      	ldr	r0, [r2, #24]
 800f0f4:	69d1      	ldr	r1, [r2, #28]
 800f0f6:	611d      	str	r5, [r3, #16]
 800f0f8:	615c      	str	r4, [r3, #20]
 800f0fa:	6198      	str	r0, [r3, #24]
 800f0fc:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 800f0fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f102:	3327      	adds	r3, #39	@ 0x27
 800f104:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800f108:	32b0      	adds	r2, #176	@ 0xb0
 800f10a:	6815      	ldr	r5, [r2, #0]
 800f10c:	6854      	ldr	r4, [r2, #4]
 800f10e:	6890      	ldr	r0, [r2, #8]
 800f110:	68d1      	ldr	r1, [r2, #12]
 800f112:	601d      	str	r5, [r3, #0]
 800f114:	605c      	str	r4, [r3, #4]
 800f116:	6098      	str	r0, [r3, #8]
 800f118:	60d9      	str	r1, [r3, #12]
 800f11a:	6915      	ldr	r5, [r2, #16]
 800f11c:	6954      	ldr	r4, [r2, #20]
 800f11e:	6990      	ldr	r0, [r2, #24]
 800f120:	69d1      	ldr	r1, [r2, #28]
 800f122:	611d      	str	r5, [r3, #16]
 800f124:	615c      	str	r4, [r3, #20]
 800f126:	6198      	str	r0, [r3, #24]
 800f128:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 800f12a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f12e:	3354      	adds	r3, #84	@ 0x54
 800f130:	461d      	mov	r5, r3
 800f132:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800f136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f138:	6028      	str	r0, [r5, #0]
 800f13a:	6069      	str	r1, [r5, #4]
 800f13c:	60aa      	str	r2, [r5, #8]
 800f13e:	60eb      	str	r3, [r5, #12]
 800f140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f142:	6128      	str	r0, [r5, #16]
 800f144:	6169      	str	r1, [r5, #20]
 800f146:	61aa      	str	r2, [r5, #24]
 800f148:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 800f14a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f14e:	6899      	ldr	r1, [r3, #8]
 800f150:	2305      	movs	r3, #5
 800f152:	4a16      	ldr	r2, [pc, #88]	@ (800f1ac <mg_tls_server_send_hello+0x160>)
 800f154:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800f158:	f7f7 fbef 	bl	800693a <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 800f15c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f160:	6899      	ldr	r1, [r3, #8]
 800f162:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f166:	237a      	movs	r3, #122	@ 0x7a
 800f168:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800f16c:	f7f7 fbe5 	bl	800693a <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 800f170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f174:	3320      	adds	r3, #32
 800f176:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f17a:	227a      	movs	r2, #122	@ 0x7a
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7fd fced 	bl	800cb5c <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 800f182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f186:	6899      	ldr	r1, [r3, #8]
 800f188:	2306      	movs	r3, #6
 800f18a:	4a09      	ldr	r2, [pc, #36]	@ (800f1b0 <mg_tls_server_send_hello+0x164>)
 800f18c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800f190:	f7f7 fbd3 	bl	800693a <mg_iobuf_add>
}
 800f194:	bf00      	nop
 800f196:	37d0      	adds	r7, #208	@ 0xd0
 800f198:	46bd      	mov	sp, r7
 800f19a:	bdb0      	pop	{r4, r5, r7, pc}
 800f19c:	08024f70 	.word	0x08024f70
 800f1a0:	08024f4c 	.word	0x08024f4c
 800f1a4:	08026308 	.word	0x08026308
 800f1a8:	08024f50 	.word	0x08024f50
 800f1ac:	08024f60 	.word	0x08024f60
 800f1b0:	08024f68 	.word	0x08024f68

0800f1b4 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b086      	sub	sp, #24
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f1c2:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 800f1c4:	4a0d      	ldr	r2, [pc, #52]	@ (800f1fc <mg_tls_server_send_ext+0x48>)
 800f1c6:	f107 030c 	add.w	r3, r7, #12
 800f1ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1ce:	6018      	str	r0, [r3, #0]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	8019      	strh	r1, [r3, #0]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	3320      	adds	r3, #32
 800f1d8:	f107 010c 	add.w	r1, r7, #12
 800f1dc:	2206      	movs	r2, #6
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fd fcbc 	bl	800cb5c <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 800f1e4:	f107 010c 	add.w	r1, r7, #12
 800f1e8:	2316      	movs	r3, #22
 800f1ea:	2206      	movs	r2, #6
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f7ff fb3f 	bl	800e870 <mg_tls_encrypt>
}
 800f1f2:	bf00      	nop
 800f1f4:	3718      	adds	r7, #24
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	08024fec 	.word	0x08024fec

0800f200 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f20e:	617b      	str	r3, [r7, #20]
  // server DER certificate (empty)
  size_t n = tls->cert_der.len;
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800f216:	613b      	str	r3, [r7, #16]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	330d      	adds	r3, #13
 800f21c:	4619      	mov	r1, r3
 800f21e:	2001      	movs	r0, #1
 800f220:	f012 fe7c 	bl	8021f1c <calloc>
 800f224:	4603      	mov	r3, r0
 800f226:	60fb      	str	r3, [r7, #12]
  if (cert == NULL) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d104      	bne.n	800f238 <mg_tls_server_send_cert+0x38>
    mg_error(c, "tls cert oom");
 800f22e:	493a      	ldr	r1, [pc, #232]	@ (800f318 <mg_tls_server_send_cert+0x118>)
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f7f3 f887 	bl	8002344 <mg_error>
    return;
 800f236:	e06b      	b.n	800f310 <mg_tls_server_send_cert+0x110>
  }
  cert[0] = 0x0b;                                // handshake header
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	220b      	movs	r2, #11
 800f23c:	701a      	strb	r2, [r3, #0]
  cert[1] = (uint8_t) (((n + 9) >> 16) & 255U);  // 3 bytes: payload length
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	3309      	adds	r3, #9
 800f242:	0c1a      	lsrs	r2, r3, #16
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	3301      	adds	r3, #1
 800f248:	b2d2      	uxtb	r2, r2
 800f24a:	701a      	strb	r2, [r3, #0]
  cert[2] = (uint8_t) (((n + 9) >> 8) & 255U);
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	3309      	adds	r3, #9
 800f250:	0a1a      	lsrs	r2, r3, #8
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	3302      	adds	r3, #2
 800f256:	b2d2      	uxtb	r2, r2
 800f258:	701a      	strb	r2, [r3, #0]
  cert[3] = (uint8_t) ((n + 9) & 255U);
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	b2da      	uxtb	r2, r3
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	3303      	adds	r3, #3
 800f262:	3209      	adds	r2, #9
 800f264:	b2d2      	uxtb	r2, r2
 800f266:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                   // request context
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	3304      	adds	r3, #4
 800f26c:	2200      	movs	r2, #0
 800f26e:	701a      	strb	r2, [r3, #0]
  cert[5] = (uint8_t) (((n + 5) >> 16) & 255U);  // 3 bytes: cert (s) length
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	3305      	adds	r3, #5
 800f274:	0c1a      	lsrs	r2, r3, #16
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	3305      	adds	r3, #5
 800f27a:	b2d2      	uxtb	r2, r2
 800f27c:	701a      	strb	r2, [r3, #0]
  cert[6] = (uint8_t) (((n + 5) >> 8) & 255U);
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	3305      	adds	r3, #5
 800f282:	0a1a      	lsrs	r2, r3, #8
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	3306      	adds	r3, #6
 800f288:	b2d2      	uxtb	r2, r2
 800f28a:	701a      	strb	r2, [r3, #0]
  cert[7] = (uint8_t) ((n + 5) & 255U);
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	3307      	adds	r3, #7
 800f294:	3205      	adds	r2, #5
 800f296:	b2d2      	uxtb	r2, r2
 800f298:	701a      	strb	r2, [r3, #0]
  cert[8] =
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	0c1a      	lsrs	r2, r3, #16
  cert[8] =
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	3308      	adds	r3, #8
      (uint8_t) (((n) >> 16) & 255U);  // 3 bytes: first (and only) cert len
 800f2a2:	b2d2      	uxtb	r2, r2
  cert[8] =
 800f2a4:	701a      	strb	r2, [r3, #0]
  cert[9] = (uint8_t) (((n) >> 8) & 255U);
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	0a1a      	lsrs	r2, r3, #8
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	3309      	adds	r3, #9
 800f2ae:	b2d2      	uxtb	r2, r2
 800f2b0:	701a      	strb	r2, [r3, #0]
  cert[10] = (uint8_t) (n & 255U);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	330a      	adds	r3, #10
 800f2b6:	693a      	ldr	r2, [r7, #16]
 800f2b8:	b2d2      	uxtb	r2, r2
 800f2ba:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, n);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f103 000b 	add.w	r0, r3, #11
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f2c8:	693a      	ldr	r2, [r7, #16]
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	f013 f915 	bl	80224fa <memmove>
  cert[11 + n] = cert[12 + n] = 0;  // certificate extensions (none)
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	330c      	adds	r3, #12
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	2200      	movs	r2, #0
 800f2da:	701a      	strb	r2, [r3, #0]
 800f2dc:	693a      	ldr	r2, [r7, #16]
 800f2de:	320b      	adds	r2, #11
 800f2e0:	68f9      	ldr	r1, [r7, #12]
 800f2e2:	440a      	add	r2, r1
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	7013      	strb	r3, [r2, #0]
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	f103 0020 	add.w	r0, r3, #32
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	330d      	adds	r3, #13
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	68f9      	ldr	r1, [r7, #12]
 800f2f6:	f7fd fc31 	bl	800cb5c <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f103 020d 	add.w	r2, r3, #13
 800f300:	2316      	movs	r3, #22
 800f302:	68f9      	ldr	r1, [r7, #12]
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f7ff fab3 	bl	800e870 <mg_tls_encrypt>
  free(cert);
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f012 fe2a 	bl	8021f64 <free>
}
 800f310:	3718      	adds	r7, #24
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	08024ff4 	.word	0x08024ff4

0800f31c <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3318      	adds	r3, #24
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fd f9d1 	bl	800c6d4 <mg_sha256_init>
}
 800f332:	bf00      	nop
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b086      	sub	sp, #24
 800f33e:	af00      	add	r7, sp, #0
 800f340:	60f8      	str	r0, [r7, #12]
 800f342:	60b9      	str	r1, [r7, #8]
 800f344:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	3318      	adds	r3, #24
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	68b9      	ldr	r1, [r7, #8]
 800f352:	4618      	mov	r0, r3
 800f354:	f7fd fc02 	bl	800cb5c <mg_sha256_update>
}
 800f358:	bf00      	nop
 800f35a:	3718      	adds	r7, #24
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	3318      	adds	r3, #24
 800f372:	4619      	mov	r1, r3
 800f374:	6838      	ldr	r0, [r7, #0]
 800f376:	f7fd fc2a 	bl	800cbce <mg_sha256_final>
}
 800f37a:	bf00      	nop
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
	...

0800f384 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 800f384:	b590      	push	{r4, r7, lr}
 800f386:	b0f9      	sub	sp, #484	@ 0x1e4
 800f388:	af02      	add	r7, sp, #8
 800f38a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f38e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800f392:	6018      	str	r0, [r3, #0]
 800f394:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f398:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800f39c:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f39e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f3a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f3ac:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 800f3b0:	4a8f      	ldr	r2, [pc, #572]	@ (800f5f0 <mg_tls_send_cert_verify+0x26c>)
 800f3b2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800f3b6:	6810      	ldr	r0, [r2, #0]
 800f3b8:	6851      	ldr	r1, [r2, #4]
 800f3ba:	c303      	stmia	r3!, {r0, r1}
 800f3bc:	7a12      	ldrb	r2, [r2, #8]
 800f3be:	701a      	strb	r2, [r3, #0]
 800f3c0:	f207 1379 	addw	r3, r7, #377	@ 0x179
 800f3c4:	2249      	movs	r2, #73	@ 0x49
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f013 f8b0 	bl	802252e <memset>
  size_t sigsz, verifysz = 0;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800f3da:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800f3de:	2200      	movs	r2, #0
 800f3e0:	601a      	str	r2, [r3, #0]
 800f3e2:	605a      	str	r2, [r3, #4]
 800f3e4:	609a      	str	r2, [r3, #8]
 800f3e6:	60da      	str	r2, [r3, #12]
 800f3e8:	611a      	str	r2, [r3, #16]
 800f3ea:	615a      	str	r2, [r3, #20]
 800f3ec:	619a      	str	r2, [r3, #24]
 800f3ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f3f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	601a      	str	r2, [r3, #0]
 800f3fa:	3304      	adds	r3, #4
 800f3fc:	227c      	movs	r2, #124	@ 0x7c
 800f3fe:	2100      	movs	r1, #0
 800f400:	4618      	mov	r0, r3
 800f402:	f013 f894 	bl	802252e <memset>
  struct SHA256_HashContext ctx = {
 800f406:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f40a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800f40e:	4618      	mov	r0, r3
 800f410:	2388      	movs	r3, #136	@ 0x88
 800f412:	461a      	mov	r2, r3
 800f414:	2100      	movs	r1, #0
 800f416:	f013 f88a 	bl	802252e <memset>
 800f41a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f41e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800f422:	4a74      	ldr	r2, [pc, #464]	@ (800f5f4 <mg_tls_send_cert_verify+0x270>)
 800f424:	601a      	str	r2, [r3, #0]
 800f426:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f42a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800f42e:	4a72      	ldr	r2, [pc, #456]	@ (800f5f8 <mg_tls_send_cert_verify+0x274>)
 800f430:	605a      	str	r2, [r3, #4]
 800f432:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f436:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800f43a:	4a70      	ldr	r2, [pc, #448]	@ (800f5fc <mg_tls_send_cert_verify+0x278>)
 800f43c:	609a      	str	r2, [r3, #8]
 800f43e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f442:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800f446:	2240      	movs	r2, #64	@ 0x40
 800f448:	60da      	str	r2, [r3, #12]
 800f44a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f44e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800f452:	2220      	movs	r2, #32
 800f454:	611a      	str	r2, [r3, #16]
 800f456:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f45a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800f45e:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800f462:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 800f464:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f468:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800f46c:	2200      	movs	r2, #0
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	3304      	adds	r3, #4
 800f472:	223c      	movs	r2, #60	@ 0x3c
 800f474:	2100      	movs	r1, #0
 800f476:	4618      	mov	r0, r3
 800f478:	f013 f859 	bl	802252e <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 800f47c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f480:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 800f484:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800f488:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f48c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800f490:	6812      	ldr	r2, [r2, #0]
 800f492:	6818      	ldr	r0, [r3, #0]
 800f494:	f7ff fbe0 	bl	800ec58 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 800f498:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800f49c:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 800f4a0:	f004 faac 	bl	80139fc <mg_uecc_secp256r1>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800f4aa:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800f4ae:	9301      	str	r3, [sp, #4]
 800f4b0:	f107 0308 	add.w	r3, r7, #8
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	2220      	movs	r2, #32
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f005 fb0e 	bl	8014adc <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 800f4c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f4c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	b25b      	sxtb	r3, r3
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	09db      	lsrs	r3, r3, #7
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 800f4d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f4da:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800f4de:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f4e2:	b25b      	sxtb	r3, r3
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	09db      	lsrs	r3, r3, #7
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 800f4ee:	2330      	movs	r3, #48	@ 0x30
 800f4f0:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 800f4f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800f4f8:	b2da      	uxtb	r2, r3
 800f4fa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	4413      	add	r3, r2
 800f502:	b2db      	uxtb	r3, r3
 800f504:	3344      	adds	r3, #68	@ 0x44
 800f506:	b2db      	uxtb	r3, r3
 800f508:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 800f50c:	2302      	movs	r3, #2
 800f50e:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 800f512:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800f516:	b2db      	uxtb	r3, r3
 800f518:	3320      	adds	r3, #32
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 800f520:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800f524:	330c      	adds	r3, #12
 800f526:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800f52a:	4413      	add	r3, r2
 800f52c:	f107 0108 	add.w	r1, r7, #8
 800f530:	2220      	movs	r2, #32
 800f532:	4618      	mov	r0, r3
 800f534:	f012 ffe1 	bl	80224fa <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 800f538:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800f53c:	332c      	adds	r3, #44	@ 0x2c
 800f53e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800f542:	443b      	add	r3, r7
 800f544:	2202      	movs	r2, #2
 800f546:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 800f54a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800f54e:	b2da      	uxtb	r2, r3
 800f550:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800f554:	332d      	adds	r3, #45	@ 0x2d
 800f556:	3220      	adds	r2, #32
 800f558:	b2d2      	uxtb	r2, r2
 800f55a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800f55e:	443b      	add	r3, r7
 800f560:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 800f564:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800f568:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800f56c:	4413      	add	r3, r2
 800f56e:	332e      	adds	r3, #46	@ 0x2e
 800f570:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 800f574:	18d0      	adds	r0, r2, r3
 800f576:	f107 0308 	add.w	r3, r7, #8
 800f57a:	3320      	adds	r3, #32
 800f57c:	2220      	movs	r2, #32
 800f57e:	4619      	mov	r1, r3
 800f580:	f012 ffbb 	bl	80224fa <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 800f584:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800f588:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 800f58c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800f590:	4413      	add	r3, r2
 800f592:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 800f596:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800f59a:	3308      	adds	r3, #8
 800f59c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 800f5a0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	3304      	adds	r3, #4
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 800f5ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 800f5b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800f5bc:	3320      	adds	r3, #32
 800f5be:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 800f5c2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fd fac8 	bl	800cb5c <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 800f5cc:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 800f5d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800f5d4:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 800f5d8:	2316      	movs	r3, #22
 800f5da:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800f5de:	6800      	ldr	r0, [r0, #0]
 800f5e0:	f7ff f946 	bl	800e870 <mg_tls_encrypt>
}
 800f5e4:	bf00      	nop
 800f5e6:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd90      	pop	{r4, r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	08025004 	.word	0x08025004
 800f5f4:	0800f31d 	.word	0x0800f31d
 800f5f8:	0800f33b 	.word	0x0800f33b
 800f5fc:	0800f361 	.word	0x0800f361

0800f600 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 800f600:	b580      	push	{r7, lr}
 800f602:	b0b4      	sub	sp, #208	@ 0xd0
 800f604:	af02      	add	r7, sp, #8
 800f606:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f60e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 800f612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f616:	3304      	adds	r3, #4
 800f618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 800f61c:	4a28      	ldr	r2, [pc, #160]	@ (800f6c0 <mg_tls_server_send_finish+0xc0>)
 800f61e:	f107 030c 	add.w	r3, r7, #12
 800f622:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f626:	6018      	str	r0, [r3, #0]
 800f628:	3304      	adds	r3, #4
 800f62a:	7019      	strb	r1, [r3, #0]
 800f62c:	f107 0311 	add.w	r3, r7, #17
 800f630:	221f      	movs	r2, #31
 800f632:	2100      	movs	r1, #0
 800f634:	4618      	mov	r0, r3
 800f636:	f012 ff7a 	bl	802252e <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 800f63a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f63e:	f103 0120 	add.w	r1, r3, #32
 800f642:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f646:	2270      	movs	r2, #112	@ 0x70
 800f648:	4618      	mov	r0, r3
 800f64a:	f012 ff56 	bl	80224fa <memmove>
  mg_sha256_final(hash, &sha256);
 800f64e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800f652:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f656:	4611      	mov	r1, r2
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fd fab8 	bl	800cbce <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 800f65e:	f107 000c 	add.w	r0, r7, #12
 800f662:	3004      	adds	r0, #4
 800f664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f668:	f503 7145 	add.w	r1, r3, #788	@ 0x314
 800f66c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f670:	2220      	movs	r2, #32
 800f672:	9200      	str	r2, [sp, #0]
 800f674:	2220      	movs	r2, #32
 800f676:	f7fd fbe2 	bl	800ce3e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 800f67a:	f107 010c 	add.w	r1, r7, #12
 800f67e:	2316      	movs	r3, #22
 800f680:	2224      	movs	r2, #36	@ 0x24
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7ff f8f4 	bl	800e870 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 800f688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f68c:	6819      	ldr	r1, [r3, #0]
 800f68e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	461a      	mov	r2, r3
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f7fb f848 	bl	800a72c <mg_io_send>
  wio->len = 0;
 800f69c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	609a      	str	r2, [r3, #8]

  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 800f6a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f6a8:	3320      	adds	r3, #32
 800f6aa:	f107 010c 	add.w	r1, r7, #12
 800f6ae:	2224      	movs	r2, #36	@ 0x24
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fd fa53 	bl	800cb5c <mg_sha256_update>
}
 800f6b6:	bf00      	nop
 800f6b8:	37c8      	adds	r7, #200	@ 0xc8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	08025010 	.word	0x08025010

0800f6c4 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b0a0      	sub	sp, #128	@ 0x80
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f6d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 800f6d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f6d6:	f107 0008 	add.w	r0, r7, #8
 800f6da:	3320      	adds	r3, #32
 800f6dc:	2270      	movs	r2, #112	@ 0x70
 800f6de:	4619      	mov	r1, r3
 800f6e0:	f013 f8c9 	bl	8022876 <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7ff f9bf 	bl	800ea68 <mg_tls_recv_record>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	da02      	bge.n	800f6f6 <mg_tls_server_recv_finish+0x32>
    return -1;
 800f6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f4:	e01f      	b.n	800f736 <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f6fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f6fc:	695b      	ldr	r3, [r3, #20]
 800f6fe:	4413      	add	r3, r2
 800f700:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 800f702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2b14      	cmp	r3, #20
 800f708:	d009      	beq.n	800f71e <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 800f70a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	461a      	mov	r2, r3
 800f710:	490b      	ldr	r1, [pc, #44]	@ (800f740 <mg_tls_server_recv_finish+0x7c>)
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7f2 fe16 	bl	8002344 <mg_error>
    return -1;
 800f718:	f04f 33ff 	mov.w	r3, #4294967295
 800f71c:	e00b      	b.n	800f736 <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7fe fd56 	bl	800e1d0 <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 800f724:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f726:	3320      	adds	r3, #32
 800f728:	f107 0108 	add.w	r1, r7, #8
 800f72c:	2270      	movs	r2, #112	@ 0x70
 800f72e:	4618      	mov	r0, r3
 800f730:	f013 f8a1 	bl	8022876 <memcpy>
  return 0;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	3780      	adds	r7, #128	@ 0x80
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	08025034 	.word	0x08025034

0800f744 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 800f744:	b5b0      	push	{r4, r5, r7, lr}
 800f746:	b0c4      	sub	sp, #272	@ 0x110
 800f748:	af00      	add	r7, sp, #0
 800f74a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f74e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f752:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800f754:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f758:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f762:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  struct mg_iobuf *wio = &tls->send;
 800f766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f76a:	3304      	adds	r3, #4
 800f76c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

  uint8_t x25519_pub[X25519_BYTES];

  // the only signature algorithm we actually support
  uint8_t secp256r1_sig_algs[8] = {
 800f770:	4a28      	ldr	r2, [pc, #160]	@ (800f814 <mg_tls_client_send_hello+0xd0>)
 800f772:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800f776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f77a:	e883 0003 	stmia.w	r3, {r0, r1}
      0x00, 0x0d, 0x00, 0x04, 0x00, 0x02, 0x04, 0x03,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 800f77e:	4b26      	ldr	r3, [pc, #152]	@ (800f818 <mg_tls_client_send_hello+0xd4>)
 800f780:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 800f784:	461d      	mov	r5, r3
 800f786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f78a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f78c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f78e:	682b      	ldr	r3, [r5, #0]
 800f790:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 800f792:	4a22      	ldr	r2, [pc, #136]	@ (800f81c <mg_tls_client_send_hello+0xd8>)
 800f794:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800f798:	ca07      	ldmia	r2, {r0, r1, r2}
 800f79a:	c303      	stmia	r3!, {r0, r1}
 800f79c:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 800f79e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f7a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7a6:	4a1e      	ldr	r2, [pc, #120]	@ (800f820 <mg_tls_client_send_hello+0xdc>)
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	2391      	movs	r3, #145	@ 0x91
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	f013 f861 	bl	8022876 <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 800f7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f7b8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800f7bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  size_t hostnamesz = strlen(tls->hostname);
 800f7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f7c4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7f0 fde9 	bl	80003a0 <strlen>
 800f7ce:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 800f7d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d003      	beq.n	800f7e2 <mg_tls_client_send_hello+0x9e>
 800f7da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f7de:	3309      	adds	r3, #9
 800f7e0:	e000      	b.n	800f7e4 <mg_tls_client_send_hello+0xa0>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 800f7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f7ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d002      	beq.n	800f7fa <mg_tls_client_send_hello+0xb6>
 800f7f4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800f7f8:	e001      	b.n	800f7fe <mg_tls_client_send_hello+0xba>
 800f7fa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800f7fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 800f802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f806:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00a      	beq.n	800f824 <mg_tls_client_send_hello+0xe0>
 800f80e:	2322      	movs	r3, #34	@ 0x22
 800f810:	e009      	b.n	800f826 <mg_tls_client_send_hello+0xe2>
 800f812:	bf00      	nop
 800f814:	08025058 	.word	0x08025058
 800f818:	08025060 	.word	0x08025060
 800f81c:	08025084 	.word	0x08025084
 800f820:	08025090 	.word	0x08025090
 800f824:	2308      	movs	r3, #8
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 800f826:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 800f82a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800f82e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f832:	4413      	add	r3, r2
 800f834:	338c      	adds	r3, #140	@ 0x8c
 800f836:	0a1b      	lsrs	r3, r3, #8
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f83e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f842:	70da      	strb	r2, [r3, #3]
 800f844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	4413      	add	r3, r2
 800f852:	b2db      	uxtb	r3, r3
 800f854:	3b74      	subs	r3, #116	@ 0x74
 800f856:	b2da      	uxtb	r2, r3
 800f858:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f85c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f860:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 800f862:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800f866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f86a:	4413      	add	r3, r2
 800f86c:	3388      	adds	r3, #136	@ 0x88
 800f86e:	0a1b      	lsrs	r3, r3, #8
 800f870:	b2da      	uxtb	r2, r3
 800f872:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f87a:	71da      	strb	r2, [r3, #7]
 800f87c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f880:	b2da      	uxtb	r2, r3
 800f882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f886:	b2db      	uxtb	r3, r3
 800f888:	4413      	add	r3, r2
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	3b78      	subs	r3, #120	@ 0x78
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f898:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 800f89a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800f89e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f8a2:	4413      	add	r3, r2
 800f8a4:	333d      	adds	r3, #61	@ 0x3d
 800f8a6:	0a1b      	lsrs	r3, r3, #8
 800f8a8:	b2da      	uxtb	r2, r3
 800f8aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8b2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 800f8b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f8ba:	b2da      	uxtb	r2, r3
 800f8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	4413      	add	r3, r2
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	333d      	adds	r3, #61	@ 0x3d
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8d2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 800f8d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d026      	beq.n	800f92c <mg_tls_client_send_hello+0x1e8>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 800f8de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f8e2:	3305      	adds	r3, #5
 800f8e4:	0a1b      	lsrs	r3, r3, #8
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800f8ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	3305      	adds	r3, #5
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 800f8fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f8fe:	3303      	adds	r3, #3
 800f900:	0a1b      	lsrs	r3, r3, #8
 800f902:	b2db      	uxtb	r3, r3
 800f904:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 800f908:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	3303      	adds	r3, #3
 800f910:	b2db      	uxtb	r3, r3
 800f912:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 800f916:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f91a:	0a1b      	lsrs	r3, r3, #8
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 800f922:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f926:	b2db      	uxtb	r3, r3
 800f928:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 800f92c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f930:	33d0      	adds	r3, #208	@ 0xd0
 800f932:	2120      	movs	r1, #32
 800f934:	4618      	mov	r0, r3
 800f936:	f7f1 f98d 	bl	8000c54 <mg_random>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f083 0301 	eor.w	r3, r3, #1
 800f940:	b2db      	uxtb	r3, r3
 800f942:	2b00      	cmp	r3, #0
 800f944:	d007      	beq.n	800f956 <mg_tls_client_send_hello+0x212>
 800f946:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f94a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f94e:	4974      	ldr	r1, [pc, #464]	@ (800fb20 <mg_tls_client_send_hello+0x3dc>)
 800f950:	6818      	ldr	r0, [r3, #0]
 800f952:	f7f2 fcf7 	bl	8002344 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 800f956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f95a:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 800f95e:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 800f962:	2301      	movs	r3, #1
 800f964:	4a6f      	ldr	r2, [pc, #444]	@ (800fb24 <mg_tls_client_send_hello+0x3e0>)
 800f966:	f006 f89d 	bl	8015aa4 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 800f96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f96e:	33b0      	adds	r3, #176	@ 0xb0
 800f970:	2120      	movs	r1, #32
 800f972:	4618      	mov	r0, r3
 800f974:	f7f1 f96e 	bl	8000c54 <mg_random>
 800f978:	4603      	mov	r3, r0
 800f97a:	f083 0301 	eor.w	r3, r3, #1
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	d007      	beq.n	800f994 <mg_tls_client_send_hello+0x250>
 800f984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f988:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f98c:	4964      	ldr	r1, [pc, #400]	@ (800fb20 <mg_tls_client_send_hello+0x3dc>)
 800f98e:	6818      	ldr	r0, [r3, #0]
 800f990:	f7f2 fcd8 	bl	8002344 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 800f994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f998:	3390      	adds	r3, #144	@ 0x90
 800f99a:	2120      	movs	r1, #32
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7f1 f959 	bl	8000c54 <mg_random>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	f083 0301 	eor.w	r3, r3, #1
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d007      	beq.n	800f9be <mg_tls_client_send_hello+0x27a>
 800f9ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f9b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f9b6:	495a      	ldr	r1, [pc, #360]	@ (800fb20 <mg_tls_client_send_hello+0x3dc>)
 800f9b8:	6818      	ldr	r0, [r3, #0]
 800f9ba:	f7f2 fcc3 	bl	8002344 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 800f9be:	f107 0308 	add.w	r3, r7, #8
 800f9c2:	330b      	adds	r3, #11
 800f9c4:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800f9c8:	3290      	adds	r2, #144	@ 0x90
 800f9ca:	6815      	ldr	r5, [r2, #0]
 800f9cc:	6854      	ldr	r4, [r2, #4]
 800f9ce:	6890      	ldr	r0, [r2, #8]
 800f9d0:	68d1      	ldr	r1, [r2, #12]
 800f9d2:	601d      	str	r5, [r3, #0]
 800f9d4:	605c      	str	r4, [r3, #4]
 800f9d6:	6098      	str	r0, [r3, #8]
 800f9d8:	60d9      	str	r1, [r3, #12]
 800f9da:	6915      	ldr	r5, [r2, #16]
 800f9dc:	6954      	ldr	r4, [r2, #20]
 800f9de:	6990      	ldr	r0, [r2, #24]
 800f9e0:	69d1      	ldr	r1, [r2, #28]
 800f9e2:	611d      	str	r5, [r3, #16]
 800f9e4:	615c      	str	r4, [r3, #20]
 800f9e6:	6198      	str	r0, [r3, #24]
 800f9e8:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 800f9ea:	f107 0308 	add.w	r3, r7, #8
 800f9ee:	332c      	adds	r3, #44	@ 0x2c
 800f9f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800f9f4:	32b0      	adds	r2, #176	@ 0xb0
 800f9f6:	6815      	ldr	r5, [r2, #0]
 800f9f8:	6854      	ldr	r4, [r2, #4]
 800f9fa:	6890      	ldr	r0, [r2, #8]
 800f9fc:	68d1      	ldr	r1, [r2, #12]
 800f9fe:	601d      	str	r5, [r3, #0]
 800fa00:	605c      	str	r4, [r3, #4]
 800fa02:	6098      	str	r0, [r3, #8]
 800fa04:	60d9      	str	r1, [r3, #12]
 800fa06:	6915      	ldr	r5, [r2, #16]
 800fa08:	6954      	ldr	r4, [r2, #20]
 800fa0a:	6990      	ldr	r0, [r2, #24]
 800fa0c:	69d1      	ldr	r1, [r2, #28]
 800fa0e:	611d      	str	r5, [r3, #16]
 800fa10:	615c      	str	r4, [r3, #20]
 800fa12:	6198      	str	r0, [r3, #24]
 800fa14:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 800fa16:	f107 0308 	add.w	r3, r7, #8
 800fa1a:	335e      	adds	r3, #94	@ 0x5e
 800fa1c:	461d      	mov	r5, r3
 800fa1e:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 800fa22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa24:	6028      	str	r0, [r5, #0]
 800fa26:	6069      	str	r1, [r5, #4]
 800fa28:	60aa      	str	r2, [r5, #8]
 800fa2a:	60eb      	str	r3, [r5, #12]
 800fa2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa2e:	6128      	str	r0, [r5, #16]
 800fa30:	6169      	str	r1, [r5, #20]
 800fa32:	61aa      	str	r2, [r5, #24]
 800fa34:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 800fa36:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800fa3a:	6899      	ldr	r1, [r3, #8]
 800fa3c:	f107 0208 	add.w	r2, r7, #8
 800fa40:	2391      	movs	r3, #145	@ 0x91
 800fa42:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800fa46:	f7f6 ff78 	bl	800693a <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 800fa4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800fa4e:	f103 0020 	add.w	r0, r3, #32
 800fa52:	f107 0308 	add.w	r3, r7, #8
 800fa56:	3305      	adds	r3, #5
 800fa58:	228c      	movs	r2, #140	@ 0x8c
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	f7fd f87e 	bl	800cb5c <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 800fa60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800fa64:	6899      	ldr	r1, [r3, #8]
 800fa66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fa6a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800fa6e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800fa72:	f7f6 ff62 	bl	800693a <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 800fa76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800fa7a:	3320      	adds	r3, #32
 800fa7c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800fa80:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7fd f869 	bl	800cb5c <mg_sha256_update>
  if (hostnamesz > 0) {
 800fa8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d027      	beq.n	800fae2 <mg_tls_client_send_hello+0x39e>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 800fa92:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800fa96:	6899      	ldr	r1, [r3, #8]
 800fa98:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800fa9c:	2309      	movs	r3, #9
 800fa9e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800faa2:	f7f6 ff4a 	bl	800693a <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 800faa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800faaa:	6899      	ldr	r1, [r3, #8]
 800faac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800fab0:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800fab4:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800fab8:	f7f6 ff3f 	bl	800693a <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 800fabc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800fac0:	3320      	adds	r3, #32
 800fac2:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800fac6:	2209      	movs	r2, #9
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fd f847 	bl	800cb5c <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 800face:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800fad2:	3320      	adds	r3, #32
 800fad4:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800fad8:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fd f83d 	bl	800cb5c <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 800fae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800fae6:	6899      	ldr	r1, [r3, #8]
 800fae8:	2306      	movs	r3, #6
 800faea:	4a0f      	ldr	r2, [pc, #60]	@ (800fb28 <mg_tls_client_send_hello+0x3e4>)
 800faec:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800faf0:	f7f6 ff23 	bl	800693a <mg_iobuf_add>
  mg_io_send(c, wio->buf, wio->len);
 800faf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800faf8:	6819      	ldr	r1, [r3, #0]
 800fafa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800fafe:	689a      	ldr	r2, [r3, #8]
 800fb00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fb04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800fb08:	6818      	ldr	r0, [r3, #0]
 800fb0a:	f7fa fe0f 	bl	800a72c <mg_io_send>
  wio->len = 0;
 800fb0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800fb12:	2200      	movs	r2, #0
 800fb14:	609a      	str	r2, [r3, #8]
}
 800fb16:	bf00      	nop
 800fb18:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bdb0      	pop	{r4, r5, r7, pc}
 800fb20:	08024f4c 	.word	0x08024f4c
 800fb24:	08026308 	.word	0x08026308
 800fb28:	08024f68 	.word	0x08024f68

0800fb2c <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b08a      	sub	sp, #40	@ 0x28
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fb3a:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	3368      	adds	r3, #104	@ 0x68
 800fb40:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7fe fafc 	bl	800e140 <mg_tls_got_record>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	f083 0301 	eor.w	r3, r3, #1
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d002      	beq.n	800fb5a <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 800fb54:	f06f 0301 	mvn.w	r3, #1
 800fb58:	e0ec      	b.n	800fd34 <mg_tls_client_recv_hello+0x208>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	2b16      	cmp	r3, #22
 800fb62:	d105      	bne.n	800fb70 <mg_tls_client_recv_hello+0x44>
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3305      	adds	r3, #5
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	2b02      	cmp	r3, #2
 800fb6e:	d01b      	beq.n	800fba8 <mg_tls_client_recv_hello+0x7c>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	2b15      	cmp	r3, #21
 800fb78:	d10f      	bne.n	800fb9a <mg_tls_client_recv_hello+0x6e>
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	2b06      	cmp	r3, #6
 800fb80:	d90b      	bls.n	800fb9a <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3306      	adds	r3, #6
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	496b      	ldr	r1, [pc, #428]	@ (800fd3c <mg_tls_client_recv_hello+0x210>)
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7f2 fbd8 	bl	8002344 <mg_error>
      return -1;
 800fb94:	f04f 33ff 	mov.w	r3, #4294967295
 800fb98:	e0cc      	b.n	800fd34 <mg_tls_client_recv_hello+0x208>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
    mg_error(c, "not a server hello packet");
 800fb9a:	4969      	ldr	r1, [pc, #420]	@ (800fd40 <mg_tls_client_recv_hello+0x214>)
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7f2 fbd1 	bl	8002344 <mg_error>
    return -1;
 800fba2:	f04f 33ff 	mov.w	r3, #4294967295
 800fba6:	e0c5      	b.n	800fd34 <mg_tls_client_recv_hello+0x208>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	3303      	adds	r3, #3
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	021b      	lsls	r3, r3, #8
 800fbb2:	b21a      	sxth	r2, r3
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	3304      	adds	r3, #4
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	b21b      	sxth	r3, r3
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	b21b      	sxth	r3, r3
 800fbc2:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 800fbc4:	6a3b      	ldr	r3, [r7, #32]
 800fbc6:	f103 0020 	add.w	r0, r3, #32
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	3305      	adds	r3, #5
 800fbd0:	8b7a      	ldrh	r2, [r7, #26]
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	f7fc ffc2 	bl	800cb5c <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	334f      	adds	r3, #79	@ 0x4f
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	021b      	lsls	r3, r3, #8
 800fbe2:	b21a      	sxth	r2, r3
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	3350      	adds	r3, #80	@ 0x50
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	b21b      	sxth	r3, r3
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	b21b      	sxth	r3, r3
 800fbf2:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	3351      	adds	r3, #81	@ 0x51
 800fbfa:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 800fbfc:	8b3a      	ldrh	r2, [r7, #24]
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	3b51      	subs	r3, #81	@ 0x51
 800fc04:	429a      	cmp	r2, r3
 800fc06:	f200 808c 	bhi.w	800fd22 <mg_tls_client_recv_hello+0x1f6>

  for (j = 0; j < ext_len;) {
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc0e:	e082      	b.n	800fd16 <mg_tls_client_recv_hello+0x1ea>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 800fc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc12:	697a      	ldr	r2, [r7, #20]
 800fc14:	4413      	add	r3, r2
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	021b      	lsls	r3, r3, #8
 800fc1a:	b21a      	sxth	r2, r3
 800fc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1e:	3301      	adds	r3, #1
 800fc20:	6979      	ldr	r1, [r7, #20]
 800fc22:	440b      	add	r3, r1
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	b21b      	sxth	r3, r3
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	b21b      	sxth	r3, r3
 800fc2c:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc30:	3302      	adds	r3, #2
 800fc32:	697a      	ldr	r2, [r7, #20]
 800fc34:	4413      	add	r3, r2
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	021b      	lsls	r3, r3, #8
 800fc3a:	b21a      	sxth	r2, r3
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc3e:	3303      	adds	r3, #3
 800fc40:	6979      	ldr	r1, [r7, #20]
 800fc42:	440b      	add	r3, r1
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	b21b      	sxth	r3, r3
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	b21b      	sxth	r3, r3
 800fc4c:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 800fc4e:	8b3a      	ldrh	r2, [r7, #24]
 800fc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	1eda      	subs	r2, r3, #3
 800fc56:	8a3b      	ldrh	r3, [r7, #16]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	dd64      	ble.n	800fd26 <mg_tls_client_recv_hello+0x1fa>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 800fc5c:	8a7b      	ldrh	r3, [r7, #18]
 800fc5e:	2b33      	cmp	r3, #51	@ 0x33
 800fc60:	d007      	beq.n	800fc72 <mg_tls_client_recv_hello+0x146>
      j += (uint16_t) (ext_len2 + 4);
 800fc62:	8a3b      	ldrh	r3, [r7, #16]
 800fc64:	3304      	adds	r3, #4
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	461a      	mov	r2, r3
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc6c:	4413      	add	r3, r2
 800fc6e:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 800fc70:	e051      	b.n	800fd16 <mg_tls_client_recv_hello+0x1ea>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 800fc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc74:	3304      	adds	r3, #4
 800fc76:	697a      	ldr	r2, [r7, #20]
 800fc78:	4413      	add	r3, r2
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	021b      	lsls	r3, r3, #8
 800fc7e:	b21a      	sxth	r2, r3
 800fc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc82:	3305      	adds	r3, #5
 800fc84:	6979      	ldr	r1, [r7, #20]
 800fc86:	440b      	add	r3, r1
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	b21b      	sxth	r3, r3
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	b21b      	sxth	r3, r3
 800fc90:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 800fc92:	89fb      	ldrh	r3, [r7, #14]
 800fc94:	2b1d      	cmp	r3, #29
 800fc96:	d006      	beq.n	800fca6 <mg_tls_client_recv_hello+0x17a>
      mg_error(c, "bad key exchange group");
 800fc98:	492a      	ldr	r1, [pc, #168]	@ (800fd44 <mg_tls_client_recv_hello+0x218>)
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7f2 fb52 	bl	8002344 <mg_error>
      return -1;
 800fca0:	f04f 33ff 	mov.w	r3, #4294967295
 800fca4:	e046      	b.n	800fd34 <mg_tls_client_recv_hello+0x208>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 800fca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca8:	3306      	adds	r3, #6
 800fcaa:	697a      	ldr	r2, [r7, #20]
 800fcac:	4413      	add	r3, r2
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	021b      	lsls	r3, r3, #8
 800fcb2:	b21a      	sxth	r2, r3
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb6:	3307      	adds	r3, #7
 800fcb8:	6979      	ldr	r1, [r7, #20]
 800fcba:	440b      	add	r3, r1
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	b21b      	sxth	r3, r3
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	b21b      	sxth	r3, r3
 800fcc4:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc8:	3308      	adds	r3, #8
 800fcca:	697a      	ldr	r2, [r7, #20]
 800fccc:	4413      	add	r3, r2
 800fcce:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 800fcd0:	89bb      	ldrh	r3, [r7, #12]
 800fcd2:	2b20      	cmp	r3, #32
 800fcd4:	d006      	beq.n	800fce4 <mg_tls_client_recv_hello+0x1b8>
      mg_error(c, "bad key exchange length");
 800fcd6:	491c      	ldr	r1, [pc, #112]	@ (800fd48 <mg_tls_client_recv_hello+0x21c>)
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7f2 fb33 	bl	8002344 <mg_error>
      return -1;
 800fcde:	f04f 33ff 	mov.w	r3, #4294967295
 800fce2:	e027      	b.n	800fd34 <mg_tls_client_recv_hello+0x208>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 800fce4:	6a3b      	ldr	r3, [r7, #32]
 800fce6:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 800fcea:	6a3b      	ldr	r3, [r7, #32]
 800fcec:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	68ba      	ldr	r2, [r7, #8]
 800fcf4:	f005 fed6 	bl	8015aa4 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 800fcf8:	6a3b      	ldr	r3, [r7, #32]
 800fcfa:	33f0      	adds	r3, #240	@ 0xf0
 800fcfc:	2220      	movs	r2, #32
 800fcfe:	4619      	mov	r1, r3
 800fd00:	4812      	ldr	r0, [pc, #72]	@ (800fd4c <mg_tls_client_recv_hello+0x220>)
 800fd02:	f7fe f94e 	bl	800dfa2 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f7fe fa41 	bl	800e18e <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7fe fb47 	bl	800e3a0 <mg_tls_generate_handshake_keys>
    return 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	e00e      	b.n	800fd34 <mg_tls_client_recv_hello+0x208>
  for (j = 0; j < ext_len;) {
 800fd16:	8b3b      	ldrh	r3, [r7, #24]
 800fd18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	f6ff af78 	blt.w	800fc10 <mg_tls_client_recv_hello+0xe4>
  }
fail:
 800fd20:	e002      	b.n	800fd28 <mg_tls_client_recv_hello+0x1fc>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 800fd22:	bf00      	nop
 800fd24:	e000      	b.n	800fd28 <mg_tls_client_recv_hello+0x1fc>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 800fd26:	bf00      	nop
  mg_error(c, "bad client hello");
 800fd28:	4909      	ldr	r1, [pc, #36]	@ (800fd50 <mg_tls_client_recv_hello+0x224>)
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7f2 fb0a 	bl	8002344 <mg_error>
  return -1;
 800fd30:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3728      	adds	r7, #40	@ 0x28
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	08025124 	.word	0x08025124
 800fd40:	08025134 	.word	0x08025134
 800fd44:	08025150 	.word	0x08025150
 800fd48:	08025168 	.word	0x08025168
 800fd4c:	08025180 	.word	0x08025180
 800fd50:	08024f38 	.word	0x08024f38

0800fd54 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fd62:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f7fe fe7f 	bl	800ea68 <mg_tls_recv_record>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	da02      	bge.n	800fd76 <mg_tls_client_recv_ext+0x22>
    return -1;
 800fd70:	f04f 33ff 	mov.w	r3, #4294967295
 800fd74:	e017      	b.n	800fda6 <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	695b      	ldr	r3, [r3, #20]
 800fd7e:	4413      	add	r3, r2
 800fd80:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	2b08      	cmp	r3, #8
 800fd88:	d009      	beq.n	800fd9e <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	4907      	ldr	r1, [pc, #28]	@ (800fdb0 <mg_tls_client_recv_ext+0x5c>)
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7f2 fad6 	bl	8002344 <mg_error>
    return -1;
 800fd98:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9c:	e003      	b.n	800fda6 <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7fe fa16 	bl	800e1d0 <mg_tls_drop_message>
  return 0;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	08025190 	.word	0x08025190

0800fdb4 <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b09a      	sub	sp, #104	@ 0x68
 800fdb8:	af02      	add	r7, sp, #8
 800fdba:	6078      	str	r0, [r7, #4]
  uint8_t *cert;
  uint32_t certsz;
  struct mg_der_tlv oid, pubkey, seq, subj;
  int subj_match = 0;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  struct tls_data *tls = (struct tls_data *) c->tls;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fdc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f7fe fe4d 	bl	800ea68 <mg_tls_recv_record>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	da02      	bge.n	800fdda <mg_tls_client_recv_cert+0x26>
    return -1;
 800fdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd8:	e13a      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fdde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fde0:	695b      	ldr	r3, [r3, #20]
 800fde2:	4413      	add	r3, r2
 800fde4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 800fde6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	2b0d      	cmp	r3, #13
 800fdec:	d109      	bne.n	800fe02 <mg_tls_client_recv_cert+0x4e>
    MG_VERBOSE(("got certificate request"));
    mg_tls_drop_message(c);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7fe f9ee 	bl	800e1d0 <mg_tls_drop_message>
    tls->cert_requested = 1;
 800fdf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 800fdfc:	f04f 33ff 	mov.w	r3, #4294967295
 800fe00:	e126      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
  }
  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 800fe02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	2b0b      	cmp	r3, #11
 800fe08:	d009      	beq.n	800fe1e <mg_tls_client_recv_cert+0x6a>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 800fe0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	4991      	ldr	r1, [pc, #580]	@ (8010058 <mg_tls_client_recv_cert+0x2a4>)
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f7f2 fa96 	bl	8002344 <mg_error>
    return -1;
 800fe18:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1c:	e118      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
  }
  if (tls->skip_verification) {
 800fe1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe20:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d004      	beq.n	800fe32 <mg_tls_client_recv_cert+0x7e>
    mg_tls_drop_message(c);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7fe f9d1 	bl	800e1d0 <mg_tls_drop_message>
    return 0;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	e10e      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
  }

  if (tls->recv_len < 11) {
 800fe32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe34:	699b      	ldr	r3, [r3, #24]
 800fe36:	2b0a      	cmp	r3, #10
 800fe38:	d806      	bhi.n	800fe48 <mg_tls_client_recv_cert+0x94>
    mg_error(c, "certificate list too short");
 800fe3a:	4988      	ldr	r1, [pc, #544]	@ (801005c <mg_tls_client_recv_cert+0x2a8>)
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7f2 fa81 	bl	8002344 <mg_error>
    return -1;
 800fe42:	f04f 33ff 	mov.w	r3, #4294967295
 800fe46:	e103      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
  }

  cert = recv_buf + 11;
 800fe48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe4a:	330b      	adds	r3, #11
 800fe4c:	653b      	str	r3, [r7, #80]	@ 0x50
  certsz = MG_LOAD_BE24(recv_buf + 8);
 800fe4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe50:	3308      	adds	r3, #8
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	041a      	lsls	r2, r3, #16
 800fe56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe58:	3309      	adds	r3, #9
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	021b      	lsls	r3, r3, #8
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe62:	320a      	adds	r2, #10
 800fe64:	7812      	ldrb	r2, [r2, #0]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (certsz > tls->recv_len - 11) {
 800fe6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe6c:	699b      	ldr	r3, [r3, #24]
 800fe6e:	3b0b      	subs	r3, #11
 800fe70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d90a      	bls.n	800fe8c <mg_tls_client_recv_cert+0xd8>
    mg_error(c, "certificate too long: %d vs %d", certsz, tls->recv_len - 11);
 800fe76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe78:	699b      	ldr	r3, [r3, #24]
 800fe7a:	3b0b      	subs	r3, #11
 800fe7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fe7e:	4978      	ldr	r1, [pc, #480]	@ (8010060 <mg_tls_client_recv_cert+0x2ac>)
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f7f2 fa5f 	bl	8002344 <mg_error>
    return -1;
 800fe86:	f04f 33ff 	mov.w	r3, #4294967295
 800fe8a:	e0e1      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
  }

  do {
    // secp256r1 public key
    if (mg_der_find(cert, certsz,
 800fe8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	2308      	movs	r3, #8
 800fe94:	4a73      	ldr	r2, [pc, #460]	@ (8010064 <mg_tls_client_recv_cert+0x2b0>)
 800fe96:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fe98:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800fe9a:	f7fe f8e2 	bl	800e062 <mg_der_find>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	da06      	bge.n	800feb2 <mg_tls_client_recv_cert+0xfe>
                    (uint8_t *) "\x2A\x86\x48\xCE\x3D\x03\x01\x07", 8,
                    &oid) < 0) {
      mg_error(c, "certificate secp256r1 public key OID not found");
 800fea4:	4970      	ldr	r1, [pc, #448]	@ (8010068 <mg_tls_client_recv_cert+0x2b4>)
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7f2 fa4c 	bl	8002344 <mg_error>
      return -1;
 800feac:	f04f 33ff 	mov.w	r3, #4294967295
 800feb0:	e0ce      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 800feb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800feb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feb6:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 800feb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800feba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800febc:	441a      	add	r2, r3
 800febe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fec2:	440b      	add	r3, r1
 800fec4:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 800fec6:	4619      	mov	r1, r3
 800fec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fecc:	461a      	mov	r2, r3
 800fece:	f7fe f874 	bl	800dfba <mg_der_to_tlv>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	da06      	bge.n	800fee6 <mg_tls_client_recv_cert+0x132>
                      &pubkey) < 0) {
      mg_error(c, "certificate secp256r1 public key not found");
 800fed8:	4964      	ldr	r1, [pc, #400]	@ (801006c <mg_tls_client_recv_cert+0x2b8>)
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7f2 fa32 	bl	8002344 <mg_error>
      return -1;
 800fee0:	f04f 33ff 	mov.w	r3, #4294967295
 800fee4:	e0b4      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
    }

    // expect BIT STRING, unpadded, uncompressed: [0]+[4]+32+32 content bytes
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 800fee6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800feea:	2b03      	cmp	r3, #3
 800feec:	d10b      	bne.n	800ff06 <mg_tls_client_recv_cert+0x152>
 800feee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef0:	2b42      	cmp	r3, #66	@ 0x42
 800fef2:	d108      	bne.n	800ff06 <mg_tls_client_recv_cert+0x152>
 800fef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d104      	bne.n	800ff06 <mg_tls_client_recv_cert+0x152>
        pubkey.value[1] != 4) {
 800fefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fefe:	3301      	adds	r3, #1
 800ff00:	781b      	ldrb	r3, [r3, #0]
    if (pubkey.type != 3 || pubkey.len != 66 || pubkey.value[0] != 0 ||
 800ff02:	2b04      	cmp	r3, #4
 800ff04:	d006      	beq.n	800ff14 <mg_tls_client_recv_cert+0x160>
      mg_error(c, "unsupported public key bitstring encoding");
 800ff06:	495a      	ldr	r1, [pc, #360]	@ (8010070 <mg_tls_client_recv_cert+0x2bc>)
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7f2 fa1b 	bl	8002344 <mg_error>
      return -1;
 800ff0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff12:	e09d      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
    }
    memmove(tls->pubkey, pubkey.value + 2, pubkey.len - 2);
 800ff14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff16:	f203 205e 	addw	r0, r3, #606	@ 0x25e
 800ff1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff1c:	1c99      	adds	r1, r3, #2
 800ff1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff20:	3b02      	subs	r3, #2
 800ff22:	461a      	mov	r2, r3
 800ff24:	f012 fae9 	bl	80224fa <memmove>
  } while (0);

  // Subject Alternative Names
  do {
    if (mg_der_find(cert, certsz, (uint8_t *) "\x55\x1d\x11", 3, &oid) < 0) {
 800ff28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	2303      	movs	r3, #3
 800ff30:	4a50      	ldr	r2, [pc, #320]	@ (8010074 <mg_tls_client_recv_cert+0x2c0>)
 800ff32:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ff34:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ff36:	f7fe f894 	bl	800e062 <mg_der_find>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	da06      	bge.n	800ff4e <mg_tls_client_recv_cert+0x19a>
      mg_error(c, "certificate does not contain subject alternative names");
 800ff40:	494d      	ldr	r1, [pc, #308]	@ (8010078 <mg_tls_client_recv_cert+0x2c4>)
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f7f2 f9fe 	bl	8002344 <mg_error>
      return -1;
 800ff48:	f04f 33ff 	mov.w	r3, #4294967295
 800ff4c:	e080      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
    }
    if (mg_der_to_tlv(oid.value + oid.len,
 800ff4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff52:	18d0      	adds	r0, r2, r3
                      (size_t) (cert + certsz - (oid.value + oid.len)),
 800ff54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ff56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff58:	441a      	add	r2, r3
 800ff5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff5e:	440b      	add	r3, r1
 800ff60:	1ad3      	subs	r3, r2, r3
    if (mg_der_to_tlv(oid.value + oid.len,
 800ff62:	4619      	mov	r1, r3
 800ff64:	f107 0318 	add.w	r3, r7, #24
 800ff68:	461a      	mov	r2, r3
 800ff6a:	f7fe f826 	bl	800dfba <mg_der_to_tlv>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	da06      	bge.n	800ff82 <mg_tls_client_recv_cert+0x1ce>
                      &seq) < 0) {
      mg_error(c, "certificate subject alternative names not found");
 800ff74:	4941      	ldr	r1, [pc, #260]	@ (801007c <mg_tls_client_recv_cert+0x2c8>)
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7f2 f9e4 	bl	8002344 <mg_error>
      return -1;
 800ff7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff80:	e066      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &seq) < 0) {
 800ff82:	6a3b      	ldr	r3, [r7, #32]
 800ff84:	69f9      	ldr	r1, [r7, #28]
 800ff86:	f107 0218 	add.w	r2, r7, #24
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fe f815 	bl	800dfba <mg_der_to_tlv>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	da43      	bge.n	801001e <mg_tls_client_recv_cert+0x26a>
      mg_error(
 800ff96:	493a      	ldr	r1, [pc, #232]	@ (8010080 <mg_tls_client_recv_cert+0x2cc>)
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7f2 f9d3 	bl	8002344 <mg_error>
          c,
          "certificate subject alternative names is not a constructed object");
      return -1;
 800ff9e:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa2:	e055      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
    }
    MG_VERBOSE(("verify hostname %s", tls->hostname));
    while (seq.len > 0) {
      if (mg_der_to_tlv(seq.value, seq.len, &subj) < 0) {
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	69f9      	ldr	r1, [r7, #28]
 800ffa8:	f107 020c 	add.w	r2, r7, #12
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe f804 	bl	800dfba <mg_der_to_tlv>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	da06      	bge.n	800ffc6 <mg_tls_client_recv_cert+0x212>
        mg_error(c, "bad subject alternative name");
 800ffb8:	4932      	ldr	r1, [pc, #200]	@ (8010084 <mg_tls_client_recv_cert+0x2d0>)
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f7f2 f9c2 	bl	8002344 <mg_error>
        return -1;
 800ffc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffc4:	e044      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
      }
      MG_VERBOSE(("subj=%.*s", subj.len, subj.value));
      if (mg_match(mg_str((const char *) tls->hostname),
 800ffc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ffc8:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 800ffcc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ffd0:	4611      	mov	r1, r2
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fd fa60 	bl	800d498 <mg_str_s>
                   mg_str_n((const char *) subj.value, subj.len), NULL)) {
 800ffd8:	6979      	ldr	r1, [r7, #20]
 800ffda:	693a      	ldr	r2, [r7, #16]
      if (mg_match(mg_str((const char *) tls->hostname),
 800ffdc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fd fa76 	bl	800d4d2 <mg_str_n>
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ffee:	cb0c      	ldmia	r3, {r2, r3}
 800fff0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800fff4:	c903      	ldmia	r1, {r0, r1}
 800fff6:	f7fd fb59 	bl	800d6ac <mg_match>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d002      	beq.n	8010006 <mg_tls_client_recv_cert+0x252>
        subj_match = 1;
 8010000:	2301      	movs	r3, #1
 8010002:	65fb      	str	r3, [r7, #92]	@ 0x5c
        break;
 8010004:	e00e      	b.n	8010024 <mg_tls_client_recv_cert+0x270>
      }
      seq.len = (uint32_t) (seq.value + seq.len - (subj.value + subj.len));
 8010006:	6a3a      	ldr	r2, [r7, #32]
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	441a      	add	r2, r3
 801000c:	6979      	ldr	r1, [r7, #20]
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	440b      	add	r3, r1
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	61fb      	str	r3, [r7, #28]
      seq.value = subj.value + subj.len;
 8010016:	697a      	ldr	r2, [r7, #20]
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	4413      	add	r3, r2
 801001c:	623b      	str	r3, [r7, #32]
    while (seq.len > 0) {
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1bf      	bne.n	800ffa4 <mg_tls_client_recv_cert+0x1f0>
    }
    if (!subj_match) {
 8010024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010026:	2b00      	cmp	r3, #0
 8010028:	d106      	bne.n	8010038 <mg_tls_client_recv_cert+0x284>
      mg_error(c, "certificate did not match the hostname");
 801002a:	4917      	ldr	r1, [pc, #92]	@ (8010088 <mg_tls_client_recv_cert+0x2d4>)
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7f2 f989 	bl	8002344 <mg_error>
      return -1;
 8010032:	f04f 33ff 	mov.w	r3, #4294967295
 8010036:	e00b      	b.n	8010050 <mg_tls_client_recv_cert+0x29c>
    }
  } while (0);

  mg_tls_drop_message(c);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7fe f8c9 	bl	800e1d0 <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 801003e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010040:	f203 239e 	addw	r3, r3, #670	@ 0x29e
 8010044:	2200      	movs	r2, #0
 8010046:	4619      	mov	r1, r3
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7fe fe05 	bl	800ec58 <mg_tls_calc_cert_verify_hash>
  return 0;
 801004e:	2300      	movs	r3, #0
}
 8010050:	4618      	mov	r0, r3
 8010052:	3760      	adds	r7, #96	@ 0x60
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	080251c0 	.word	0x080251c0
 801005c:	080251f0 	.word	0x080251f0
 8010060:	0802520c 	.word	0x0802520c
 8010064:	0802522c 	.word	0x0802522c
 8010068:	08025238 	.word	0x08025238
 801006c:	08025268 	.word	0x08025268
 8010070:	08025294 	.word	0x08025294
 8010074:	080252c0 	.word	0x080252c0
 8010078:	080252c4 	.word	0x080252c4
 801007c:	080252fc 	.word	0x080252fc
 8010080:	0802532c 	.word	0x0802532c
 8010084:	08025370 	.word	0x08025370
 8010088:	08025390 	.word	0x08025390

0801008c <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 801008c:	b5b0      	push	{r4, r5, r7, lr}
 801008e:	b0a0      	sub	sp, #128	@ 0x80
 8010090:	af02      	add	r7, sp, #8
 8010092:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801009a:	677b      	str	r3, [r7, #116]	@ 0x74
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7fe fce3 	bl	800ea68 <mg_tls_recv_record>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	da02      	bge.n	80100ae <mg_tls_client_recv_cert_verify+0x22>
    return -1;
 80100a8:	f04f 33ff 	mov.w	r3, #4294967295
 80100ac:	e09a      	b.n	80101e4 <mg_tls_client_recv_cert_verify+0x158>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80100b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80100b4:	695b      	ldr	r3, [r3, #20]
 80100b6:	4413      	add	r3, r2
 80100b8:	673b      	str	r3, [r7, #112]	@ 0x70
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 80100ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	2b0f      	cmp	r3, #15
 80100c0:	d009      	beq.n	80100d6 <mg_tls_client_recv_cert_verify+0x4a>
    mg_error(c, "expected server certificate verify but got msg 0x%02x", recv_buf[0]);
 80100c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	461a      	mov	r2, r3
 80100c8:	4948      	ldr	r1, [pc, #288]	@ (80101ec <mg_tls_client_recv_cert_verify+0x160>)
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f7f2 f93a 	bl	8002344 <mg_error>
    return -1;
 80100d0:	f04f 33ff 	mov.w	r3, #4294967295
 80100d4:	e086      	b.n	80101e4 <mg_tls_client_recv_cert_verify+0x158>
  }
  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 80100d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80100d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d004      	beq.n	80100ea <mg_tls_client_recv_cert_verify+0x5e>
    mg_tls_drop_message(c);
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7fe f875 	bl	800e1d0 <mg_tls_drop_message>
    return 0;
 80100e6:	2300      	movs	r3, #0
 80100e8:	e07c      	b.n	80101e4 <mg_tls_client_recv_cert_verify+0x158>

  // Extract certificate signature and verify it using pubkey and sighash
  do {
    uint8_t sig[64];
    struct mg_der_tlv seq, a, b;
    if (mg_der_to_tlv(recv_buf + 8, tls->recv_len - 8, &seq) < 0) {
 80100ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80100ec:	f103 0008 	add.w	r0, r3, #8
 80100f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80100f2:	699b      	ldr	r3, [r3, #24]
 80100f4:	3b08      	subs	r3, #8
 80100f6:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80100fa:	4619      	mov	r1, r3
 80100fc:	f7fd ff5d 	bl	800dfba <mg_der_to_tlv>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	da06      	bge.n	8010114 <mg_tls_client_recv_cert_verify+0x88>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 8010106:	493a      	ldr	r1, [pc, #232]	@ (80101f0 <mg_tls_client_recv_cert_verify+0x164>)
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7f2 f91b 	bl	8002344 <mg_error>
      return -1;
 801010e:	f04f 33ff 	mov.w	r3, #4294967295
 8010112:	e067      	b.n	80101e4 <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &a) < 0) {
 8010114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010116:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010118:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801011c:	4618      	mov	r0, r3
 801011e:	f7fd ff4c 	bl	800dfba <mg_der_to_tlv>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	da06      	bge.n	8010136 <mg_tls_client_recv_cert_verify+0xaa>
      mg_error(c, "missing first part of the signature");
 8010128:	4932      	ldr	r1, [pc, #200]	@ (80101f4 <mg_tls_client_recv_cert_verify+0x168>)
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7f2 f90a 	bl	8002344 <mg_error>
      return -1;
 8010130:	f04f 33ff 	mov.w	r3, #4294967295
 8010134:	e056      	b.n	80101e4 <mg_tls_client_recv_cert_verify+0x158>
    }
    if (mg_der_to_tlv(a.value + a.len, seq.len - a.len, &b) < 0) {
 8010136:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801013a:	18d0      	adds	r0, r2, r3
 801013c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801013e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010140:	1ad3      	subs	r3, r2, r3
 8010142:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010146:	4619      	mov	r1, r3
 8010148:	f7fd ff37 	bl	800dfba <mg_der_to_tlv>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	da06      	bge.n	8010160 <mg_tls_client_recv_cert_verify+0xd4>
      mg_error(c, "missing second part of the signature");
 8010152:	4929      	ldr	r1, [pc, #164]	@ (80101f8 <mg_tls_client_recv_cert_verify+0x16c>)
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f7f2 f8f5 	bl	8002344 <mg_error>
      return -1;
 801015a:	f04f 33ff 	mov.w	r3, #4294967295
 801015e:	e041      	b.n	80101e4 <mg_tls_client_recv_cert_verify+0x158>
    }
    // Integers may be padded with zeroes
    if (a.len > 32) {
 8010160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010162:	2b20      	cmp	r3, #32
 8010164:	d906      	bls.n	8010174 <mg_tls_client_recv_cert_verify+0xe8>
      a.value = a.value + (a.len - 32);
 8010166:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801016a:	3b20      	subs	r3, #32
 801016c:	4413      	add	r3, r2
 801016e:	663b      	str	r3, [r7, #96]	@ 0x60
      a.len = 32;
 8010170:	2320      	movs	r3, #32
 8010172:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
    if (b.len > 32) {
 8010174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010176:	2b20      	cmp	r3, #32
 8010178:	d906      	bls.n	8010188 <mg_tls_client_recv_cert_verify+0xfc>
      b.value = b.value + (b.len - 32);
 801017a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801017c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801017e:	3b20      	subs	r3, #32
 8010180:	4413      	add	r3, r2
 8010182:	657b      	str	r3, [r7, #84]	@ 0x54
      b.len = 32;
 8010184:	2320      	movs	r3, #32
 8010186:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    memmove(sig, a.value, a.len);
 8010188:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801018a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801018c:	f107 030c 	add.w	r3, r7, #12
 8010190:	4618      	mov	r0, r3
 8010192:	f012 f9b2 	bl	80224fa <memmove>
    memmove(sig + 32, b.value, b.len);
 8010196:	f107 030c 	add.w	r3, r7, #12
 801019a:	3320      	adds	r3, #32
 801019c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801019e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80101a0:	4618      	mov	r0, r3
 80101a2:	f012 f9aa 	bl	80224fa <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 80101a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80101a8:	f203 245e 	addw	r4, r3, #606	@ 0x25e
 80101ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80101ae:	f203 259e 	addw	r5, r3, #670	@ 0x29e
 80101b2:	f003 fc23 	bl	80139fc <mg_uecc_secp256r1>
 80101b6:	4602      	mov	r2, r0
 80101b8:	f107 030c 	add.w	r3, r7, #12
 80101bc:	9200      	str	r2, [sp, #0]
 80101be:	2220      	movs	r2, #32
 80101c0:	4629      	mov	r1, r5
 80101c2:	4620      	mov	r0, r4
 80101c4:	f004 fdb6 	bl	8014d34 <mg_uecc_verify>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d006      	beq.n	80101dc <mg_tls_client_recv_cert_verify+0x150>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify certificate");
 80101ce:	490b      	ldr	r1, [pc, #44]	@ (80101fc <mg_tls_client_recv_cert_verify+0x170>)
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f7f2 f8b7 	bl	8002344 <mg_error>
      return -1;
 80101d6:	f04f 33ff 	mov.w	r3, #4294967295
 80101da:	e003      	b.n	80101e4 <mg_tls_client_recv_cert_verify+0x158>
    }
  } while (0);

  mg_tls_drop_message(c);
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7fd fff7 	bl	800e1d0 <mg_tls_drop_message>
  return 0;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3778      	adds	r7, #120	@ 0x78
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bdb0      	pop	{r4, r5, r7, pc}
 80101ec:	080253b8 	.word	0x080253b8
 80101f0:	080253f0 	.word	0x080253f0
 80101f4:	08025424 	.word	0x08025424
 80101f8:	08025448 	.word	0x08025448
 80101fc:	08025470 	.word	0x08025470

08010200 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801020e:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7fe fc29 	bl	800ea68 <mg_tls_recv_record>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	da02      	bge.n	8010222 <mg_tls_client_recv_finish+0x22>
    return -1;
 801021c:	f04f 33ff 	mov.w	r3, #4294967295
 8010220:	e017      	b.n	8010252 <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	695b      	ldr	r3, [r3, #20]
 801022a:	4413      	add	r3, r2
 801022c:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	2b14      	cmp	r3, #20
 8010234:	d009      	beq.n	801024a <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	461a      	mov	r2, r3
 801023c:	4907      	ldr	r1, [pc, #28]	@ (801025c <mg_tls_client_recv_finish+0x5c>)
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7f2 f880 	bl	8002344 <mg_error>
    return -1;
 8010244:	f04f 33ff 	mov.w	r3, #4294967295
 8010248:	e003      	b.n	8010252 <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f7fd ffc0 	bl	800e1d0 <mg_tls_drop_message>
  return 0;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	08025490 	.word	0x08025490

08010260 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8010260:	b580      	push	{r7, lr}
 8010262:	b0b4      	sub	sp, #208	@ 0xd0
 8010264:	af02      	add	r7, sp, #8
 8010266:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801026e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 8010272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010276:	3304      	adds	r3, #4
 8010278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 801027c:	4a23      	ldr	r2, [pc, #140]	@ (801030c <mg_tls_client_send_finish+0xac>)
 801027e:	f107 030c 	add.w	r3, r7, #12
 8010282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010286:	6018      	str	r0, [r3, #0]
 8010288:	3304      	adds	r3, #4
 801028a:	7019      	strb	r1, [r3, #0]
 801028c:	f107 0311 	add.w	r3, r7, #17
 8010290:	221f      	movs	r2, #31
 8010292:	2100      	movs	r1, #0
 8010294:	4618      	mov	r0, r3
 8010296:	f012 f94a 	bl	802252e <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 801029a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801029e:	f103 0120 	add.w	r1, r3, #32
 80102a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80102a6:	2270      	movs	r2, #112	@ 0x70
 80102a8:	4618      	mov	r0, r3
 80102aa:	f012 f926 	bl	80224fa <memmove>
  mg_sha256_final(hash, &sha256);
 80102ae:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80102b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80102b6:	4611      	mov	r1, r2
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7fc fc88 	bl	800cbce <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 80102be:	f107 000c 	add.w	r0, r7, #12
 80102c2:	3004      	adds	r0, #4
 80102c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80102c8:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 80102cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80102d0:	2220      	movs	r2, #32
 80102d2:	9200      	str	r2, [sp, #0]
 80102d4:	2220      	movs	r2, #32
 80102d6:	f7fc fdb2 	bl	800ce3e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 80102da:	f107 010c 	add.w	r1, r7, #12
 80102de:	2316      	movs	r3, #22
 80102e0:	2224      	movs	r2, #36	@ 0x24
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7fe fac4 	bl	800e870 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 80102e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80102ec:	6819      	ldr	r1, [r3, #0]
 80102ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	461a      	mov	r2, r3
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7fa fa18 	bl	800a72c <mg_io_send>
  wio->len = 0;
 80102fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010300:	2200      	movs	r2, #0
 8010302:	609a      	str	r2, [r3, #8]
}
 8010304:	bf00      	nop
 8010306:	37c8      	adds	r7, #200	@ 0xc8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	08025010 	.word	0x08025010

08010310 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 8010310:	b580      	push	{r7, lr}
 8010312:	b0e4      	sub	sp, #400	@ 0x190
 8010314:	af00      	add	r7, sp, #0
 8010316:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801031a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801031e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010320:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010324:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801032e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 8010332:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	2b05      	cmp	r3, #5
 801033a:	f200 80d1 	bhi.w	80104e0 <mg_tls_client_handshake+0x1d0>
 801033e:	a201      	add	r2, pc, #4	@ (adr r2, 8010344 <mg_tls_client_handshake+0x34>)
 8010340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010344:	0801035d 	.word	0x0801035d
 8010348:	08010373 	.word	0x08010373
 801034c:	08010391 	.word	0x08010391
 8010350:	080103af 	.word	0x080103af
 8010354:	080103cd 	.word	0x080103cd
 8010358:	080103eb 	.word	0x080103eb
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 801035c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010360:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8010364:	6818      	ldr	r0, [r3, #0]
 8010366:	f7ff f9ed 	bl	800f744 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 801036a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801036e:	2201      	movs	r2, #1
 8010370:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 8010372:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010376:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801037a:	6818      	ldr	r0, [r3, #0]
 801037c:	f7ff fbd6 	bl	800fb2c <mg_tls_client_recv_hello>
 8010380:	4603      	mov	r3, r0
 8010382:	2b00      	cmp	r3, #0
 8010384:	f2c0 80b9 	blt.w	80104fa <mg_tls_client_handshake+0x1ea>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 8010388:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801038c:	2202      	movs	r2, #2
 801038e:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 8010390:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010394:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	f7ff fcdb 	bl	800fd54 <mg_tls_client_recv_ext>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f2c0 80ac 	blt.w	80104fe <mg_tls_client_handshake+0x1ee>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 80103a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80103aa:	2203      	movs	r2, #3
 80103ac:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 80103ae:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80103b2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80103b6:	6818      	ldr	r0, [r3, #0]
 80103b8:	f7ff fcfc 	bl	800fdb4 <mg_tls_client_recv_cert>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f2c0 809f 	blt.w	8010502 <mg_tls_client_handshake+0x1f2>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 80103c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80103c8:	2204      	movs	r2, #4
 80103ca:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 80103cc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80103d0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80103d4:	6818      	ldr	r0, [r3, #0]
 80103d6:	f7ff fe59 	bl	801008c <mg_tls_client_recv_cert_verify>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f2c0 8092 	blt.w	8010506 <mg_tls_client_handshake+0x1f6>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISHED;
 80103e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80103e6:	2205      	movs	r2, #5
 80103e8:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISHED:
      if (mg_tls_client_recv_finish(c) < 0) {
 80103ea:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80103ee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80103f2:	6818      	ldr	r0, [r3, #0]
 80103f4:	f7ff ff04 	bl	8010200 <mg_tls_client_recv_finish>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f2c0 8085 	blt.w	801050a <mg_tls_client_handshake+0x1fa>
        break;
      }
      if (tls->cert_requested) {
 8010400:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8010404:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8010408:	2b00      	cmp	r3, #0
 801040a:	d04b      	beq.n	80104a4 <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 801040c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8010410:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8010414:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8010418:	22c0      	movs	r2, #192	@ 0xc0
 801041a:	4619      	mov	r1, r3
 801041c:	f012 fa2b 	bl	8022876 <memcpy>
        mg_tls_generate_application_keys(c);
 8010420:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010424:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8010428:	6818      	ldr	r0, [r3, #0]
 801042a:	f7fe f909 	bl	800e640 <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 801042e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010432:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8010436:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801043a:	4610      	mov	r0, r2
 801043c:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8010440:	22c0      	movs	r2, #192	@ 0xc0
 8010442:	4619      	mov	r1, r3
 8010444:	f012 fa17 	bl	8022876 <memcpy>
        tls->enc = hs_keys;
 8010448:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801044c:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8010450:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8010454:	22c0      	movs	r2, #192	@ 0xc0
 8010456:	4618      	mov	r0, r3
 8010458:	f012 fa0d 	bl	8022876 <memcpy>
        mg_tls_server_send_cert(c);
 801045c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010460:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8010464:	6818      	ldr	r0, [r3, #0]
 8010466:	f7fe fecb 	bl	800f200 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 801046a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801046e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8010472:	2101      	movs	r1, #1
 8010474:	6818      	ldr	r0, [r3, #0]
 8010476:	f7fe ff85 	bl	800f384 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 801047a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801047e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8010482:	6818      	ldr	r0, [r3, #0]
 8010484:	f7ff feec 	bl	8010260 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 8010488:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801048c:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8010490:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8010494:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8010498:	4611      	mov	r1, r2
 801049a:	22c0      	movs	r2, #192	@ 0xc0
 801049c:	4618      	mov	r0, r3
 801049e:	f012 f9ea 	bl	8022876 <memcpy>
 80104a2:	e00d      	b.n	80104c0 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 80104a4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80104a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80104ac:	6818      	ldr	r0, [r3, #0]
 80104ae:	f7ff fed7 	bl	8010260 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 80104b2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80104b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80104ba:	6818      	ldr	r0, [r3, #0]
 80104bc:	f7fe f8c0 	bl	800e640 <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 80104c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80104c4:	2206      	movs	r2, #6
 80104c6:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 80104c8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80104cc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80104d6:	f36f 13c7 	bfc	r3, #7, #1
 80104da:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      break;
 80104de:	e015      	b.n	801050c <mg_tls_client_handshake+0x1fc>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 80104e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	461a      	mov	r2, r3
 80104e8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80104ec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80104f0:	4909      	ldr	r1, [pc, #36]	@ (8010518 <mg_tls_client_handshake+0x208>)
 80104f2:	6818      	ldr	r0, [r3, #0]
 80104f4:	f7f1 ff26 	bl	8002344 <mg_error>
      break;
 80104f8:	e008      	b.n	801050c <mg_tls_client_handshake+0x1fc>
        break;
 80104fa:	bf00      	nop
 80104fc:	e006      	b.n	801050c <mg_tls_client_handshake+0x1fc>
        break;
 80104fe:	bf00      	nop
 8010500:	e004      	b.n	801050c <mg_tls_client_handshake+0x1fc>
        break;
 8010502:	bf00      	nop
 8010504:	e002      	b.n	801050c <mg_tls_client_handshake+0x1fc>
        break;
 8010506:	bf00      	nop
 8010508:	e000      	b.n	801050c <mg_tls_client_handshake+0x1fc>
        break;
 801050a:	bf00      	nop
  }
}
 801050c:	bf00      	nop
 801050e:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	080254bc 	.word	0x080254bc

0801051c <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801052a:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	2b07      	cmp	r3, #7
 8010532:	d002      	beq.n	801053a <mg_tls_server_handshake+0x1e>
 8010534:	2b08      	cmp	r3, #8
 8010536:	d01c      	beq.n	8010572 <mg_tls_server_handshake+0x56>
 8010538:	e02f      	b.n	801059a <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7fe fc2e 	bl	800ed9c <mg_tls_server_recv_hello>
 8010540:	4603      	mov	r3, r0
 8010542:	2b00      	cmp	r3, #0
 8010544:	db31      	blt.n	80105aa <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7fe fd80 	bl	800f04c <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7fd ff27 	bl	800e3a0 <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f7fe fe2e 	bl	800f1b4 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7fe fe51 	bl	800f200 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 801055e:	2100      	movs	r1, #0
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f7fe ff0f 	bl	800f384 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f7ff f84a 	bl	800f600 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2208      	movs	r2, #8
 8010570:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7ff f8a6 	bl	800f6c4 <mg_tls_server_recv_finish>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	db17      	blt.n	80105ae <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7fe f85e 	bl	800e640 <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2209      	movs	r2, #9
 8010588:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010590:	f36f 13c7 	bfc	r3, #7, #1
 8010594:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 8010598:	e00a      	b.n	80105b0 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	461a      	mov	r2, r3
 80105a0:	4905      	ldr	r1, [pc, #20]	@ (80105b8 <mg_tls_server_handshake+0x9c>)
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7f1 fece 	bl	8002344 <mg_error>
      break;
 80105a8:	e002      	b.n	80105b0 <mg_tls_server_handshake+0x94>
        return;
 80105aa:	bf00      	nop
 80105ac:	e000      	b.n	80105b0 <mg_tls_server_handshake+0x94>
        return;
 80105ae:	bf00      	nop
  }
}
 80105b0:	3710      	adds	r7, #16
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	080254d8 	.word	0x080254d8

080105bc <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  if (c->is_client) {
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80105ca:	f003 0302 	and.w	r3, r3, #2
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d003      	beq.n	80105dc <mg_tls_handshake+0x20>
    mg_tls_client_handshake(c);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7ff fe9b 	bl	8010310 <mg_tls_client_handshake>
  } else {
    mg_tls_server_handshake(c);
  }
}
 80105da:	e002      	b.n	80105e2 <mg_tls_handshake+0x26>
    mg_tls_server_handshake(c);
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff ff9d 	bl	801051c <mg_tls_server_handshake>
}
 80105e2:	bf00      	nop
 80105e4:	3708      	adds	r7, #8
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 80105ec:	b590      	push	{r4, r7, lr}
 80105ee:	b09b      	sub	sp, #108	@ 0x6c
 80105f0:	af02      	add	r7, sp, #8
 80105f2:	f107 0410 	add.w	r4, r7, #16
 80105f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80105fa:	f107 0108 	add.w	r1, r7, #8
 80105fe:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010606:	2300      	movs	r3, #0
 8010608:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 801060a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801060e:	4946      	ldr	r1, [pc, #280]	@ (8010728 <mg_parse_pem+0x13c>)
 8010610:	4618      	mov	r0, r3
 8010612:	f7fc ff41 	bl	800d498 <mg_str_s>
 8010616:	f107 0318 	add.w	r3, r7, #24
 801061a:	9300      	str	r3, [sp, #0]
 801061c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8010620:	cb0c      	ldmia	r3, {r2, r3}
 8010622:	f107 0110 	add.w	r1, r7, #16
 8010626:	c903      	ldmia	r1, {r0, r1}
 8010628:	f7fd f840 	bl	800d6ac <mg_match>
 801062c:	4603      	mov	r3, r0
 801062e:	f083 0301 	eor.w	r3, r3, #1
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00f      	beq.n	8010658 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 8010638:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801063a:	4638      	mov	r0, r7
 801063c:	f107 0310 	add.w	r3, r7, #16
 8010640:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010644:	f7fc ff72 	bl	800d52c <mg_strdup>
 8010648:	4622      	mov	r2, r4
 801064a:	463b      	mov	r3, r7
 801064c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010650:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 8010654:	2300      	movs	r3, #0
 8010656:	e062      	b.n	801071e <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 8010658:	f107 0308 	add.w	r3, r7, #8
 801065c:	cb0c      	ldmia	r3, {r2, r3}
 801065e:	f107 0120 	add.w	r1, r7, #32
 8010662:	c903      	ldmia	r1, {r0, r1}
 8010664:	f7fc ff99 	bl	800d59a <mg_strcmp>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d10a      	bne.n	8010684 <mg_parse_pem+0x98>
 801066e:	f107 0308 	add.w	r3, r7, #8
 8010672:	cb0c      	ldmia	r3, {r2, r3}
 8010674:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010678:	c903      	ldmia	r1, {r0, r1}
 801067a:	f7fc ff8e 	bl	800d59a <mg_strcmp>
 801067e:	4603      	mov	r3, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	d002      	beq.n	801068a <mg_parse_pem+0x9e>
    return -1;  // bad label
 8010684:	f04f 33ff 	mov.w	r3, #4294967295
 8010688:	e049      	b.n	801071e <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 801068a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068c:	4619      	mov	r1, r3
 801068e:	2001      	movs	r0, #1
 8010690:	f011 fc44 	bl	8021f1c <calloc>
 8010694:	4603      	mov	r3, r0
 8010696:	653b      	str	r3, [r7, #80]	@ 0x50
 8010698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801069a:	2b00      	cmp	r3, #0
 801069c:	d102      	bne.n	80106a4 <mg_parse_pem+0xb8>
    return -1;
 801069e:	f04f 33ff 	mov.w	r3, #4294967295
 80106a2:	e03c      	b.n	801071e <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 80106a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80106a8:	e01c      	b.n	80106e4 <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 80106aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	2b20      	cmp	r3, #32
 80106b0:	d014      	beq.n	80106dc <mg_parse_pem+0xf0>
 80106b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	2b0a      	cmp	r3, #10
 80106b8:	d010      	beq.n	80106dc <mg_parse_pem+0xf0>
 80106ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	2b0d      	cmp	r3, #13
 80106c0:	d00c      	beq.n	80106dc <mg_parse_pem+0xf0>
 80106c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	2b09      	cmp	r3, #9
 80106c8:	d008      	beq.n	80106dc <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 80106ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80106cc:	1c5a      	adds	r2, r3, #1
 80106ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80106d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80106d2:	4413      	add	r3, r2
 80106d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80106d6:	7812      	ldrb	r2, [r2, #0]
 80106d8:	701a      	strb	r2, [r3, #0]
 80106da:	e000      	b.n	80106de <mg_parse_pem+0xf2>
      continue;
 80106dc:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 80106de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106e0:	3301      	adds	r3, #1
 80106e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80106e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e8:	4413      	add	r3, r2
 80106ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d3dc      	bcc.n	80106aa <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 80106f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80106f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80106f4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80106f6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80106f8:	f7f0 fd7e 	bl	80011f8 <mg_base64_decode>
 80106fc:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 80106fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010700:	2b00      	cmp	r3, #0
 8010702:	d105      	bne.n	8010710 <mg_parse_pem+0x124>
    free(s);
 8010704:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010706:	f011 fc2d 	bl	8021f64 <free>
    return -1;
 801070a:	f04f 33ff 	mov.w	r3, #4294967295
 801070e:	e006      	b.n	801071e <mg_parse_pem+0x132>
  }
  der->buf = s;
 8010710:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010712:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010714:	601a      	str	r2, [r3, #0]
  der->len = m;
 8010716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010718:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801071a:	605a      	str	r2, [r3, #4]
  return 0;
 801071c:	2300      	movs	r3, #0
}
 801071e:	4618      	mov	r0, r3
 8010720:	3764      	adds	r7, #100	@ 0x64
 8010722:	46bd      	mov	sp, r7
 8010724:	bd90      	pop	{r4, r7, pc}
 8010726:	bf00      	nop
 8010728:	080254f4 	.word	0x080254f4

0801072c <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 801072c:	b580      	push	{r7, lr}
 801072e:	b08e      	sub	sp, #56	@ 0x38
 8010730:	af02      	add	r7, sp, #8
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 8010736:	f44f 7160 	mov.w	r1, #896	@ 0x380
 801073a:	2001      	movs	r0, #1
 801073c:	f011 fbee 	bl	8021f1c <calloc>
 8010740:	4603      	mov	r3, r0
 8010742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (tls == NULL) {
 8010744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010746:	2b00      	cmp	r3, #0
 8010748:	d104      	bne.n	8010754 <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 801074a:	4968      	ldr	r1, [pc, #416]	@ (80108ec <mg_tls_init+0x1c0>)
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7f1 fdf9 	bl	8002344 <mg_error>
    return;
 8010752:	e0c8      	b.n	80108e6 <mg_tls_init+0x1ba>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801075a:	f003 0302 	and.w	r3, r3, #2
 801075e:	b2db      	uxtb	r3, r3
 8010760:	2b00      	cmp	r3, #0
 8010762:	d001      	beq.n	8010768 <mg_tls_init+0x3c>
 8010764:	2200      	movs	r2, #0
 8010766:	e000      	b.n	801076a <mg_tls_init+0x3e>
 8010768:	2207      	movs	r2, #7
  tls->state =
 801076a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076c:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	6a1a      	ldr	r2, [r3, #32]
 8010772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010774:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  //tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801077c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 8010780:	687a      	ldr	r2, [r7, #4]
 8010782:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801078a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010794:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010798:	b2d9      	uxtb	r1, r3
 801079a:	687a      	ldr	r2, [r7, #4]
 801079c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80107a0:	f361 1386 	bfi	r3, r1, #6, #1
 80107a4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 80107a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107aa:	3320      	adds	r3, #32
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fb ff91 	bl	800c6d4 <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	69db      	ldr	r3, [r3, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d018      	beq.n	80107ec <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	69db      	ldr	r3, [r3, #28]
 80107be:	2bfc      	cmp	r3, #252	@ 0xfc
 80107c0:	d904      	bls.n	80107cc <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 80107c2:	494b      	ldr	r1, [pc, #300]	@ (80108f0 <mg_tls_init+0x1c4>)
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f7f1 fdbd 	bl	8002344 <mg_error>
      return;
 80107ca:	e08c      	b.n	80108e6 <mg_tls_init+0x1ba>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 80107cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ce:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	22fd      	movs	r2, #253	@ 0xfd
 80107d8:	4619      	mov	r1, r3
 80107da:	f011 fecf 	bl	802257c <strncpy>
    tls->hostname[opts->name.len] = 0;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107e4:	4413      	add	r3, r2
 80107e6:	2200      	movs	r2, #0
 80107e8:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
  }

  if (opts->cert.buf == NULL) {
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d071      	beq.n	80108d8 <mg_tls_init+0x1ac>
    MG_VERBOSE(("no certificate provided"));
    return;
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 80107f4:	f107 0314 	add.w	r3, r7, #20
 80107f8:	493e      	ldr	r1, [pc, #248]	@ (80108f4 <mg_tls_init+0x1c8>)
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fc fe4c 	bl	800d498 <mg_str_s>
 8010800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010802:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	f107 0314 	add.w	r3, r7, #20
 801080e:	cb0c      	ldmia	r3, {r2, r3}
 8010810:	3108      	adds	r1, #8
 8010812:	c903      	ldmia	r1, {r0, r1}
 8010814:	f7ff feea 	bl	80105ec <mg_parse_pem>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	db5e      	blt.n	80108dc <mg_tls_init+0x1b0>
    MG_ERROR(("Failed to load certificate"));
    return;
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	691b      	ldr	r3, [r3, #16]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d104      	bne.n	8010830 <mg_tls_init+0x104>
    mg_error(c, "certificate provided without a private key");
 8010826:	4934      	ldr	r1, [pc, #208]	@ (80108f8 <mg_tls_init+0x1cc>)
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7f1 fd8b 	bl	8002344 <mg_error>
    return;
 801082e:	e05a      	b.n	80108e6 <mg_tls_init+0x1ba>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 8010830:	f107 031c 	add.w	r3, r7, #28
 8010834:	4931      	ldr	r1, [pc, #196]	@ (80108fc <mg_tls_init+0x1d0>)
 8010836:	4618      	mov	r0, r3
 8010838:	f7fc fe2e 	bl	800d498 <mg_str_s>
 801083c:	6839      	ldr	r1, [r7, #0]
 801083e:	f107 030c 	add.w	r3, r7, #12
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	f107 031c 	add.w	r3, r7, #28
 8010848:	cb0c      	ldmia	r3, {r2, r3}
 801084a:	3110      	adds	r1, #16
 801084c:	c903      	ldmia	r1, {r0, r1}
 801084e:	f7ff fecd 	bl	80105ec <mg_parse_pem>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d121      	bne.n	801089c <mg_tls_init+0x170>
    if (key.len < 39) {
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	2b26      	cmp	r3, #38	@ 0x26
 801085c:	d940      	bls.n	80108e0 <mg_tls_init+0x1b4>
      MG_ERROR(("EC private key too short"));
      return;
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	2b30      	cmp	r3, #48	@ 0x30
 8010864:	d13e      	bne.n	80108e4 <mg_tls_init+0x1b8>
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3301      	adds	r3, #1
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	b25b      	sxtb	r3, r3
 801086e:	2b00      	cmp	r3, #0
 8010870:	db38      	blt.n	80108e4 <mg_tls_init+0x1b8>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
      return;
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	3302      	adds	r3, #2
 8010876:	2205      	movs	r2, #5
 8010878:	4921      	ldr	r1, [pc, #132]	@ (8010900 <mg_tls_init+0x1d4>)
 801087a:	4618      	mov	r0, r3
 801087c:	f011 fe2d 	bl	80224da <memcmp>
      MG_ERROR(("EC private key: ASN.1 bad data"));
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 8010880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010882:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	3307      	adds	r3, #7
 801088a:	2220      	movs	r2, #32
 801088c:	4619      	mov	r1, r3
 801088e:	f011 fe34 	bl	80224fa <memmove>
    free((void *) key.buf);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	4618      	mov	r0, r3
 8010896:	f011 fb65 	bl	8021f64 <free>
 801089a:	e024      	b.n	80108e6 <mg_tls_init+0x1ba>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 801089c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108a0:	4918      	ldr	r1, [pc, #96]	@ (8010904 <mg_tls_init+0x1d8>)
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fc fdf8 	bl	800d498 <mg_str_s>
 80108a8:	6839      	ldr	r1, [r7, #0]
 80108aa:	f107 030c 	add.w	r3, r7, #12
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108b4:	cb0c      	ldmia	r3, {r2, r3}
 80108b6:	3110      	adds	r1, #16
 80108b8:	c903      	ldmia	r1, {r0, r1}
 80108ba:	f7ff fe97 	bl	80105ec <mg_parse_pem>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d104      	bne.n	80108ce <mg_tls_init+0x1a2>
    mg_error(c, "PKCS8 private key format is not supported");
 80108c4:	4910      	ldr	r1, [pc, #64]	@ (8010908 <mg_tls_init+0x1dc>)
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7f1 fd3c 	bl	8002344 <mg_error>
 80108cc:	e00b      	b.n	80108e6 <mg_tls_init+0x1ba>
  } else {
    mg_error(c, "expected EC PRIVATE KEY or PRIVATE KEY");
 80108ce:	490f      	ldr	r1, [pc, #60]	@ (801090c <mg_tls_init+0x1e0>)
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f7f1 fd37 	bl	8002344 <mg_error>
 80108d6:	e006      	b.n	80108e6 <mg_tls_init+0x1ba>
    return;
 80108d8:	bf00      	nop
 80108da:	e004      	b.n	80108e6 <mg_tls_init+0x1ba>
    return;
 80108dc:	bf00      	nop
 80108de:	e002      	b.n	80108e6 <mg_tls_init+0x1ba>
      return;
 80108e0:	bf00      	nop
 80108e2:	e000      	b.n	80108e6 <mg_tls_init+0x1ba>
      return;
 80108e4:	bf00      	nop
  }
}
 80108e6:	3730      	adds	r7, #48	@ 0x30
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	08025518 	.word	0x08025518
 80108f0:	08025520 	.word	0x08025520
 80108f4:	08025534 	.word	0x08025534
 80108f8:	08025540 	.word	0x08025540
 80108fc:	0802556c 	.word	0x0802556c
 8010900:	0802557c 	.word	0x0802557c
 8010904:	08025584 	.word	0x08025584
 8010908:	08025590 	.word	0x08025590
 801090c:	080255bc 	.word	0x080255bc

08010910 <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801091e:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00a      	beq.n	801093c <mg_tls_free+0x2c>
    mg_iobuf_free(&tls->send);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	3304      	adds	r3, #4
 801092a:	4618      	mov	r0, r3
 801092c:	f7f6 f8a2 	bl	8006a74 <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8010936:	4618      	mov	r0, r3
 8010938:	f011 fb14 	bl	8021f64 <free>
  }
  free(c->tls);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010942:	4618      	mov	r0, r3
 8010944:	f011 fb0e 	bl	8021f64 <free>
  c->tls = NULL;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8010950:	bf00      	nop
 8010952:	3710      	adds	r7, #16
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8010958:	b580      	push	{r7, lr}
 801095a:	b086      	sub	sp, #24
 801095c:	af00      	add	r7, sp, #0
 801095e:	60f8      	str	r0, [r7, #12]
 8010960:	60b9      	str	r1, [r7, #8]
 8010962:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801096a:	613b      	str	r3, [r7, #16]
  long n = MG_IO_WAIT;
 801096c:	f06f 0301 	mvn.w	r3, #1
 8010970:	617b      	str	r3, [r7, #20]
  if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010978:	d902      	bls.n	8010980 <mg_tls_send+0x28>
 801097a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801097e:	607b      	str	r3, [r7, #4]
  if (len > 16384) len = 16384;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010986:	d902      	bls.n	801098e <mg_tls_send+0x36>
 8010988:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801098c:	607b      	str	r3, [r7, #4]
  mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 801098e:	2317      	movs	r3, #23
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	68b9      	ldr	r1, [r7, #8]
 8010994:	68f8      	ldr	r0, [r7, #12]
 8010996:	f7fd ff6b 	bl	800e870 <mg_tls_encrypt>
  while (tls->send.len > 0 &&
 801099a:	e006      	b.n	80109aa <mg_tls_send+0x52>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	3304      	adds	r3, #4
 80109a0:	697a      	ldr	r2, [r7, #20]
 80109a2:	2100      	movs	r1, #0
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7f6 f81a 	bl	80069de <mg_iobuf_del>
  while (tls->send.len > 0 &&
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00b      	beq.n	80109ca <mg_tls_send+0x72>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	6859      	ldr	r1, [r3, #4]
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	461a      	mov	r2, r3
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f7f9 feb5 	bl	800a72c <mg_io_send>
 80109c2:	6178      	str	r0, [r7, #20]
  while (tls->send.len > 0 &&
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	dce8      	bgt.n	801099c <mg_tls_send+0x44>
  }
  if (n == MG_IO_ERR || n == MG_IO_WAIT) return n;
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d0:	d003      	beq.n	80109da <mg_tls_send+0x82>
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	f113 0f02 	cmn.w	r3, #2
 80109d8:	d101      	bne.n	80109de <mg_tls_send+0x86>
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	e000      	b.n	80109e0 <mg_tls_send+0x88>
  return (long) len;
 80109de:	687b      	ldr	r3, [r7, #4]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3718      	adds	r7, #24
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b088      	sub	sp, #32
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
  int r = 0;
 80109f4:	2300      	movs	r3, #0
 80109f6:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80109fe:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f7fe f831 	bl	800ea68 <mg_tls_recv_record>
 8010a06:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	da01      	bge.n	8010a12 <mg_tls_recv+0x2a>
    return r;
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	e032      	b.n	8010a78 <mg_tls_recv+0x90>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	7f1b      	ldrb	r3, [r3, #28]
 8010a22:	2b17      	cmp	r3, #23
 8010a24:	d008      	beq.n	8010a38 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 8010a26:	69bb      	ldr	r3, [r7, #24]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f7fd fbae 	bl	800e18e <mg_tls_drop_record>
    return MG_IO_WAIT;
 8010a32:	f06f 0301 	mvn.w	r3, #1
 8010a36:	e01f      	b.n	8010a78 <mg_tls_recv+0x90>
  }
  minlen = len < tls->recv_len ? len : tls->recv_len;
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	699b      	ldr	r3, [r3, #24]
 8010a3c:	687a      	ldr	r2, [r7, #4]
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	bf28      	it	cs
 8010a42:	4613      	movcs	r3, r2
 8010a44:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 8010a46:	693a      	ldr	r2, [r7, #16]
 8010a48:	6979      	ldr	r1, [r7, #20]
 8010a4a:	68b8      	ldr	r0, [r7, #8]
 8010a4c:	f011 fd55 	bl	80224fa <memmove>
  tls->recv_offset += minlen;
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	695a      	ldr	r2, [r3, #20]
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	441a      	add	r2, r3
 8010a58:	69bb      	ldr	r3, [r7, #24]
 8010a5a:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 8010a5c:	69bb      	ldr	r3, [r7, #24]
 8010a5e:	699a      	ldr	r2, [r3, #24]
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	1ad2      	subs	r2, r2, r3
 8010a64:	69bb      	ldr	r3, [r7, #24]
 8010a66:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8010a68:	69bb      	ldr	r3, [r7, #24]
 8010a6a:	699b      	ldr	r3, [r3, #24]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d102      	bne.n	8010a76 <mg_tls_recv+0x8e>
    mg_tls_drop_record(c);
 8010a70:	68f8      	ldr	r0, [r7, #12]
 8010a72:	f7fd fb8c 	bl	800e18e <mg_tls_drop_record>
  }
  return (long) minlen;
 8010a76:	693b      	ldr	r3, [r7, #16]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3720      	adds	r7, #32
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  return mg_tls_got_record(c) ? 1 : 0;
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f7fd fb59 	bl	800e140 <mg_tls_got_record>
 8010a8e:	4603      	mov	r3, r0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	607a      	str	r2, [r7, #4]
 8010ab8:	603b      	str	r3, [r7, #0]
#ifdef static_assert
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
  state[0] = 0x61707865;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	4a2b      	ldr	r2, [pc, #172]	@ (8010b6c <initialize_state+0xc0>)
 8010abe:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	3304      	adds	r3, #4
 8010ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8010b70 <initialize_state+0xc4>)
 8010ac6:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	3308      	adds	r3, #8
 8010acc:	4a29      	ldr	r2, [pc, #164]	@ (8010b74 <initialize_state+0xc8>)
 8010ace:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	330c      	adds	r3, #12
 8010ad4:	4a28      	ldr	r2, [pc, #160]	@ (8010b78 <initialize_state+0xcc>)
 8010ad6:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	3310      	adds	r3, #16
 8010adc:	68ba      	ldr	r2, [r7, #8]
 8010ade:	6812      	ldr	r2, [r2, #0]
 8010ae0:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	3314      	adds	r3, #20
 8010ae6:	68ba      	ldr	r2, [r7, #8]
 8010ae8:	3204      	adds	r2, #4
 8010aea:	6812      	ldr	r2, [r2, #0]
 8010aec:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	3318      	adds	r3, #24
 8010af2:	68ba      	ldr	r2, [r7, #8]
 8010af4:	3208      	adds	r2, #8
 8010af6:	6812      	ldr	r2, [r2, #0]
 8010af8:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	331c      	adds	r3, #28
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	320c      	adds	r2, #12
 8010b02:	6812      	ldr	r2, [r2, #0]
 8010b04:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	3320      	adds	r3, #32
 8010b0a:	68ba      	ldr	r2, [r7, #8]
 8010b0c:	3210      	adds	r2, #16
 8010b0e:	6812      	ldr	r2, [r2, #0]
 8010b10:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	3324      	adds	r3, #36	@ 0x24
 8010b16:	68ba      	ldr	r2, [r7, #8]
 8010b18:	3214      	adds	r2, #20
 8010b1a:	6812      	ldr	r2, [r2, #0]
 8010b1c:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	3328      	adds	r3, #40	@ 0x28
 8010b22:	68ba      	ldr	r2, [r7, #8]
 8010b24:	3218      	adds	r2, #24
 8010b26:	6812      	ldr	r2, [r2, #0]
 8010b28:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	332c      	adds	r3, #44	@ 0x2c
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	321c      	adds	r2, #28
 8010b32:	6812      	ldr	r2, [r2, #0]
 8010b34:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	3330      	adds	r3, #48	@ 0x30
 8010b3a:	683a      	ldr	r2, [r7, #0]
 8010b3c:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	3334      	adds	r3, #52	@ 0x34
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	6812      	ldr	r2, [r2, #0]
 8010b46:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	3338      	adds	r3, #56	@ 0x38
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	3204      	adds	r2, #4
 8010b50:	6812      	ldr	r2, [r2, #0]
 8010b52:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	333c      	adds	r3, #60	@ 0x3c
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	3208      	adds	r2, #8
 8010b5c:	6812      	ldr	r2, [r2, #0]
 8010b5e:	601a      	str	r2, [r3, #0]
}
 8010b60:	bf00      	nop
 8010b62:	3714      	adds	r7, #20
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr
 8010b6c:	61707865 	.word	0x61707865
 8010b70:	3320646e 	.word	0x3320646e
 8010b74:	79622d32 	.word	0x79622d32
 8010b78:	6b206574 	.word	0x6b206574

08010b7c <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 8010b7c:	b480      	push	{r7}
 8010b7e:	b095      	sub	sp, #84	@ 0x54
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3304      	adds	r3, #4
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	3308      	adds	r3, #8
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	330c      	adds	r3, #12
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	3310      	adds	r3, #16
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	3314      	adds	r3, #20
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	3318      	adds	r3, #24
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	331c      	adds	r3, #28
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	3320      	adds	r3, #32
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	3324      	adds	r3, #36	@ 0x24
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	3328      	adds	r3, #40	@ 0x28
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	623b      	str	r3, [r7, #32]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	332c      	adds	r3, #44	@ 0x2c
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	61fb      	str	r3, [r7, #28]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	3330      	adds	r3, #48	@ 0x30
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	61bb      	str	r3, [r7, #24]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3334      	adds	r3, #52	@ 0x34
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	617b      	str	r3, [r7, #20]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	3338      	adds	r3, #56	@ 0x38
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	613b      	str	r3, [r7, #16]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	333c      	adds	r3, #60	@ 0x3c
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 8010c04:	2300      	movs	r3, #0
 8010c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c08:	e182      	b.n	8010f10 <core_block+0x394>
    __Q(0, 4, 8, 12);
 8010c0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0e:	4413      	add	r3, r2
 8010c10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c12:	69ba      	ldr	r2, [r7, #24]
 8010c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c16:	4053      	eors	r3, r2
 8010c18:	61bb      	str	r3, [r7, #24]
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8010c20:	61bb      	str	r3, [r7, #24]
 8010c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	4413      	add	r3, r2
 8010c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c2e:	4053      	eors	r3, r2
 8010c30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c34:	ea4f 5333 	mov.w	r3, r3, ror #20
 8010c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3e:	4413      	add	r3, r2
 8010c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c42:	69ba      	ldr	r2, [r7, #24]
 8010c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c46:	4053      	eors	r3, r2
 8010c48:	61bb      	str	r3, [r7, #24]
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010c50:	61bb      	str	r3, [r7, #24]
 8010c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	4413      	add	r3, r2
 8010c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c5e:	4053      	eors	r3, r2
 8010c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c64:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010c68:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 8010c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c6e:	4413      	add	r3, r2
 8010c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c76:	4053      	eors	r3, r2
 8010c78:	617b      	str	r3, [r7, #20]
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8010c80:	617b      	str	r3, [r7, #20]
 8010c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	4413      	add	r3, r2
 8010c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8e:	4053      	eors	r3, r2
 8010c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c94:	ea4f 5333 	mov.w	r3, r3, ror #20
 8010c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c9e:	4413      	add	r3, r2
 8010ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ca2:	697a      	ldr	r2, [r7, #20]
 8010ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ca6:	4053      	eors	r3, r2
 8010ca8:	617b      	str	r3, [r7, #20]
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010cb0:	617b      	str	r3, [r7, #20]
 8010cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010cba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cbe:	4053      	eors	r3, r2
 8010cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cc4:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010cc8:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 8010cca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cce:	4413      	add	r3, r2
 8010cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8010cd2:	693a      	ldr	r2, [r7, #16]
 8010cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010cd6:	4053      	eors	r3, r2
 8010cd8:	613b      	str	r3, [r7, #16]
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8010ce0:	613b      	str	r3, [r7, #16]
 8010ce2:	6a3a      	ldr	r2, [r7, #32]
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	623b      	str	r3, [r7, #32]
 8010cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010cec:	6a3b      	ldr	r3, [r7, #32]
 8010cee:	4053      	eors	r3, r2
 8010cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf4:	ea4f 5333 	mov.w	r3, r3, ror #20
 8010cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8010cfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfe:	4413      	add	r3, r2
 8010d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d02:	693a      	ldr	r2, [r7, #16]
 8010d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d06:	4053      	eors	r3, r2
 8010d08:	613b      	str	r3, [r7, #16]
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010d10:	613b      	str	r3, [r7, #16]
 8010d12:	6a3a      	ldr	r2, [r7, #32]
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	4413      	add	r3, r2
 8010d18:	623b      	str	r3, [r7, #32]
 8010d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d1c:	6a3b      	ldr	r3, [r7, #32]
 8010d1e:	4053      	eors	r3, r2
 8010d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d24:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010d28:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 8010d2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d2e:	4413      	add	r3, r2
 8010d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d36:	4053      	eors	r3, r2
 8010d38:	60fb      	str	r3, [r7, #12]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8010d40:	60fb      	str	r3, [r7, #12]
 8010d42:	69fa      	ldr	r2, [r7, #28]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	4413      	add	r3, r2
 8010d48:	61fb      	str	r3, [r7, #28]
 8010d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d4c:	69fb      	ldr	r3, [r7, #28]
 8010d4e:	4053      	eors	r3, r2
 8010d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d54:	ea4f 5333 	mov.w	r3, r3, ror #20
 8010d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d5e:	4413      	add	r3, r2
 8010d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d66:	4053      	eors	r3, r2
 8010d68:	60fb      	str	r3, [r7, #12]
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010d70:	60fb      	str	r3, [r7, #12]
 8010d72:	69fa      	ldr	r2, [r7, #28]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	4413      	add	r3, r2
 8010d78:	61fb      	str	r3, [r7, #28]
 8010d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	4053      	eors	r3, r2
 8010d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d84:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 8010d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d8e:	4413      	add	r3, r2
 8010d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d92:	68fa      	ldr	r2, [r7, #12]
 8010d94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d96:	4053      	eors	r3, r2
 8010d98:	60fb      	str	r3, [r7, #12]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8010da0:	60fb      	str	r3, [r7, #12]
 8010da2:	6a3a      	ldr	r2, [r7, #32]
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	4413      	add	r3, r2
 8010da8:	623b      	str	r3, [r7, #32]
 8010daa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dac:	6a3b      	ldr	r3, [r7, #32]
 8010dae:	4053      	eors	r3, r2
 8010db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010db4:	ea4f 5333 	mov.w	r3, r3, ror #20
 8010db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8010dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dbe:	4413      	add	r3, r2
 8010dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010dc2:	68fa      	ldr	r2, [r7, #12]
 8010dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010dc6:	4053      	eors	r3, r2
 8010dc8:	60fb      	str	r3, [r7, #12]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010dd0:	60fb      	str	r3, [r7, #12]
 8010dd2:	6a3a      	ldr	r2, [r7, #32]
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	623b      	str	r3, [r7, #32]
 8010dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ddc:	6a3b      	ldr	r3, [r7, #32]
 8010dde:	4053      	eors	r3, r2
 8010de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010de4:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010de8:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 8010dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dee:	4413      	add	r3, r2
 8010df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010df2:	69ba      	ldr	r2, [r7, #24]
 8010df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010df6:	4053      	eors	r3, r2
 8010df8:	61bb      	str	r3, [r7, #24]
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8010e00:	61bb      	str	r3, [r7, #24]
 8010e02:	69fa      	ldr	r2, [r7, #28]
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	4413      	add	r3, r2
 8010e08:	61fb      	str	r3, [r7, #28]
 8010e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	4053      	eors	r3, r2
 8010e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e14:	ea4f 5333 	mov.w	r3, r3, ror #20
 8010e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1e:	4413      	add	r3, r2
 8010e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e22:	69ba      	ldr	r2, [r7, #24]
 8010e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e26:	4053      	eors	r3, r2
 8010e28:	61bb      	str	r3, [r7, #24]
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010e30:	61bb      	str	r3, [r7, #24]
 8010e32:	69fa      	ldr	r2, [r7, #28]
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	4413      	add	r3, r2
 8010e38:	61fb      	str	r3, [r7, #28]
 8010e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	4053      	eors	r3, r2
 8010e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e44:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010e48:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 8010e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e4e:	4413      	add	r3, r2
 8010e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e52:	697a      	ldr	r2, [r7, #20]
 8010e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e56:	4053      	eors	r3, r2
 8010e58:	617b      	str	r3, [r7, #20]
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8010e60:	617b      	str	r3, [r7, #20]
 8010e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	4413      	add	r3, r2
 8010e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e6e:	4053      	eors	r3, r2
 8010e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e74:	ea4f 5333 	mov.w	r3, r3, ror #20
 8010e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7e:	4413      	add	r3, r2
 8010e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e82:	697a      	ldr	r2, [r7, #20]
 8010e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e86:	4053      	eors	r3, r2
 8010e88:	617b      	str	r3, [r7, #20]
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010e90:	617b      	str	r3, [r7, #20]
 8010e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	4413      	add	r3, r2
 8010e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e9e:	4053      	eors	r3, r2
 8010ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ea4:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 8010eaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eae:	4413      	add	r3, r2
 8010eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010eb2:	693a      	ldr	r2, [r7, #16]
 8010eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eb6:	4053      	eors	r3, r2
 8010eb8:	613b      	str	r3, [r7, #16]
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8010ec0:	613b      	str	r3, [r7, #16]
 8010ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010eca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ece:	4053      	eors	r3, r2
 8010ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ed4:	ea4f 5333 	mov.w	r3, r3, ror #20
 8010ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010eda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ede:	4413      	add	r3, r2
 8010ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ee2:	693a      	ldr	r2, [r7, #16]
 8010ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ee6:	4053      	eors	r3, r2
 8010ee8:	613b      	str	r3, [r7, #16]
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010ef0:	613b      	str	r3, [r7, #16]
 8010ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010efa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010efe:	4053      	eors	r3, r2
 8010f00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f04:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010f08:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 8010f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f12:	2b09      	cmp	r3, #9
 8010f14:	f77f ae79 	ble.w	8010c0a <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f1e:	441a      	add	r2, r3
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	601a      	str	r2, [r3, #0]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	3304      	adds	r3, #4
 8010f28:	6819      	ldr	r1, [r3, #0]
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	3304      	adds	r3, #4
 8010f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f30:	440a      	add	r2, r1
 8010f32:	601a      	str	r2, [r3, #0]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3308      	adds	r3, #8
 8010f38:	6819      	ldr	r1, [r3, #0]
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	3308      	adds	r3, #8
 8010f3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f40:	440a      	add	r2, r1
 8010f42:	601a      	str	r2, [r3, #0]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	330c      	adds	r3, #12
 8010f48:	6819      	ldr	r1, [r3, #0]
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	330c      	adds	r3, #12
 8010f4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f50:	440a      	add	r2, r1
 8010f52:	601a      	str	r2, [r3, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	3310      	adds	r3, #16
 8010f58:	6819      	ldr	r1, [r3, #0]
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	3310      	adds	r3, #16
 8010f5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f60:	440a      	add	r2, r1
 8010f62:	601a      	str	r2, [r3, #0]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	3314      	adds	r3, #20
 8010f68:	6819      	ldr	r1, [r3, #0]
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	3314      	adds	r3, #20
 8010f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010f70:	440a      	add	r2, r1
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	3318      	adds	r3, #24
 8010f78:	6819      	ldr	r1, [r3, #0]
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	3318      	adds	r3, #24
 8010f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f80:	440a      	add	r2, r1
 8010f82:	601a      	str	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	331c      	adds	r3, #28
 8010f88:	6819      	ldr	r1, [r3, #0]
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	331c      	adds	r3, #28
 8010f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f90:	440a      	add	r2, r1
 8010f92:	601a      	str	r2, [r3, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	3320      	adds	r3, #32
 8010f98:	6819      	ldr	r1, [r3, #0]
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	3320      	adds	r3, #32
 8010f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010fa0:	440a      	add	r2, r1
 8010fa2:	601a      	str	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	3324      	adds	r3, #36	@ 0x24
 8010fa8:	6819      	ldr	r1, [r3, #0]
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	3324      	adds	r3, #36	@ 0x24
 8010fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fb0:	440a      	add	r2, r1
 8010fb2:	601a      	str	r2, [r3, #0]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	3328      	adds	r3, #40	@ 0x28
 8010fb8:	6819      	ldr	r1, [r3, #0]
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	3328      	adds	r3, #40	@ 0x28
 8010fbe:	6a3a      	ldr	r2, [r7, #32]
 8010fc0:	440a      	add	r2, r1
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	332c      	adds	r3, #44	@ 0x2c
 8010fc8:	6819      	ldr	r1, [r3, #0]
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	332c      	adds	r3, #44	@ 0x2c
 8010fce:	69fa      	ldr	r2, [r7, #28]
 8010fd0:	440a      	add	r2, r1
 8010fd2:	601a      	str	r2, [r3, #0]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	3330      	adds	r3, #48	@ 0x30
 8010fd8:	6819      	ldr	r1, [r3, #0]
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	3330      	adds	r3, #48	@ 0x30
 8010fde:	69ba      	ldr	r2, [r7, #24]
 8010fe0:	440a      	add	r2, r1
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	3334      	adds	r3, #52	@ 0x34
 8010fe8:	6819      	ldr	r1, [r3, #0]
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	3334      	adds	r3, #52	@ 0x34
 8010fee:	697a      	ldr	r2, [r7, #20]
 8010ff0:	440a      	add	r2, r1
 8010ff2:	601a      	str	r2, [r3, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3338      	adds	r3, #56	@ 0x38
 8010ff8:	6819      	ldr	r1, [r3, #0]
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	3338      	adds	r3, #56	@ 0x38
 8010ffe:	693a      	ldr	r2, [r7, #16]
 8011000:	440a      	add	r2, r1
 8011002:	601a      	str	r2, [r3, #0]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	333c      	adds	r3, #60	@ 0x3c
 8011008:	6819      	ldr	r1, [r3, #0]
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	333c      	adds	r3, #60	@ 0x3c
 801100e:	68fa      	ldr	r2, [r7, #12]
 8011010:	440a      	add	r2, r1
 8011012:	601a      	str	r2, [r3, #0]
}
 8011014:	bf00      	nop
 8011016:	3754      	adds	r7, #84	@ 0x54
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr

08011020 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 8011020:	b480      	push	{r7}
 8011022:	b089      	sub	sp, #36	@ 0x24
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	607a      	str	r2, [r7, #4]
 801102c:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	089b      	lsrs	r3, r3, #2
 8011032:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 8011034:	2300      	movs	r3, #0
 8011036:	61fb      	str	r3, [r7, #28]
 8011038:	e016      	b.n	8011068 <xor_block+0x48>
 801103a:	69fb      	ldr	r3, [r7, #28]
 801103c:	009b      	lsls	r3, r3, #2
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	4413      	add	r3, r2
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	617b      	str	r3, [r7, #20]
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	4413      	add	r3, r2
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	4053      	eors	r3, r2
 8011054:	617b      	str	r3, [r7, #20]
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	4413      	add	r3, r2
 801105e:	697a      	ldr	r2, [r7, #20]
 8011060:	601a      	str	r2, [r3, #0]
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	3301      	adds	r3, #1
 8011066:	61fb      	str	r3, [r7, #28]
 8011068:	69fa      	ldr	r2, [r7, #28]
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	429a      	cmp	r2, r3
 801106e:	d3e4      	bcc.n	801103a <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	4413      	add	r3, r2
 8011078:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 801107a:	69bb      	ldr	r3, [r7, #24]
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	4413      	add	r3, r2
 8011082:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 8011084:	69bb      	ldr	r3, [r7, #24]
 8011086:	009b      	lsls	r3, r3, #2
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	4413      	add	r3, r2
 801108c:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	f003 0303 	and.w	r3, r3, #3
 8011094:	2b03      	cmp	r3, #3
 8011096:	d026      	beq.n	80110e6 <xor_block+0xc6>
 8011098:	2b03      	cmp	r3, #3
 801109a:	d846      	bhi.n	801112a <xor_block+0x10a>
 801109c:	2b01      	cmp	r3, #1
 801109e:	d002      	beq.n	80110a6 <xor_block+0x86>
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d00a      	beq.n	80110ba <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 80110a4:	e041      	b.n	801112a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	781a      	ldrb	r2, [r3, #0]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	4053      	eors	r3, r2
 80110b2:	b2da      	uxtb	r2, r3
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	701a      	strb	r2, [r3, #0]
      break;
 80110b8:	e037      	b.n	801112a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	781a      	ldrb	r2, [r3, #0]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	4053      	eors	r3, r2
 80110c6:	b2da      	uxtb	r2, r3
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	3301      	adds	r3, #1
 80110d0:	7819      	ldrb	r1, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	0a1b      	lsrs	r3, r3, #8
 80110d8:	b2da      	uxtb	r2, r3
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	3301      	adds	r3, #1
 80110de:	404a      	eors	r2, r1
 80110e0:	b2d2      	uxtb	r2, r2
 80110e2:	701a      	strb	r2, [r3, #0]
      break;
 80110e4:	e021      	b.n	801112a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	781a      	ldrb	r2, [r3, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	4053      	eors	r3, r2
 80110f2:	b2da      	uxtb	r2, r3
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	3301      	adds	r3, #1
 80110fc:	7819      	ldrb	r1, [r3, #0]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	0a1b      	lsrs	r3, r3, #8
 8011104:	b2da      	uxtb	r2, r3
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	3301      	adds	r3, #1
 801110a:	404a      	eors	r2, r1
 801110c:	b2d2      	uxtb	r2, r2
 801110e:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	3302      	adds	r3, #2
 8011114:	7819      	ldrb	r1, [r3, #0]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	0c1b      	lsrs	r3, r3, #16
 801111c:	b2da      	uxtb	r2, r3
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	3302      	adds	r3, #2
 8011122:	404a      	eors	r2, r1
 8011124:	b2d2      	uxtb	r2, r2
 8011126:	701a      	strb	r2, [r3, #0]
      break;
 8011128:	bf00      	nop
}
 801112a:	bf00      	nop
 801112c:	3724      	adds	r7, #36	@ 0x24
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr

08011136 <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 8011136:	b580      	push	{r7, lr}
 8011138:	b0aa      	sub	sp, #168	@ 0xa8
 801113a:	af00      	add	r7, sp, #0
 801113c:	60f8      	str	r0, [r7, #12]
 801113e:	60b9      	str	r1, [r7, #8]
 8011140:	607a      	str	r2, [r7, #4]
 8011142:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	099b      	lsrs	r3, r3, #6
 8011148:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 801114c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8011150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011154:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011158:	6839      	ldr	r1, [r7, #0]
 801115a:	f7ff fca7 	bl	8010aac <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 801115e:	2300      	movs	r3, #0
 8011160:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011164:	e03c      	b.n	80111e0 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 8011166:	f107 0218 	add.w	r2, r7, #24
 801116a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801116e:	4611      	mov	r1, r2
 8011170:	4618      	mov	r0, r3
 8011172:	f7ff fd03 	bl	8010b7c <core_block>
    increment_counter(state);
 8011176:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801117a:	3301      	adds	r3, #1
 801117c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 8011180:	2300      	movs	r3, #0
 8011182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011186:	e01c      	b.n	80111c2 <chacha20_xor_stream+0x8c>
 8011188:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801118c:	009b      	lsls	r3, r3, #2
 801118e:	68ba      	ldr	r2, [r7, #8]
 8011190:	4413      	add	r3, r2
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	617b      	str	r3, [r7, #20]
 8011196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	f107 0218 	add.w	r2, r7, #24
 80111a0:	4413      	add	r3, r2
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	4053      	eors	r3, r2
 80111a8:	617b      	str	r3, [r7, #20]
 80111aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	4413      	add	r3, r2
 80111b4:	697a      	ldr	r2, [r7, #20]
 80111b6:	601a      	str	r2, [r3, #0]
 80111b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80111bc:	3301      	adds	r3, #1
 80111be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80111c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80111c6:	2b0f      	cmp	r3, #15
 80111c8:	d9de      	bls.n	8011188 <chacha20_xor_stream+0x52>
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	3340      	adds	r3, #64	@ 0x40
 80111ce:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	3340      	adds	r3, #64	@ 0x40
 80111d4:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 80111d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80111da:	3301      	adds	r3, #1
 80111dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80111e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80111e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d3bc      	bcc.n	8011166 <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80111f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 80111f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00f      	beq.n	801121e <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 80111fe:	f107 0218 	add.w	r2, r7, #24
 8011202:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011206:	4611      	mov	r1, r2
 8011208:	4618      	mov	r0, r3
 801120a:	f7ff fcb7 	bl	8010b7c <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 801120e:	f107 0218 	add.w	r2, r7, #24
 8011212:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011216:	68b9      	ldr	r1, [r7, #8]
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	f7ff ff01 	bl	8011020 <xor_block>
  }
}
 801121e:	bf00      	nop
 8011220:	37a8      	adds	r7, #168	@ 0xa8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 8011226:	b580      	push	{r7, lr}
 8011228:	b0a4      	sub	sp, #144	@ 0x90
 801122a:	af00      	add	r7, sp, #0
 801122c:	60f8      	str	r0, [r7, #12]
 801122e:	60b9      	str	r1, [r7, #8]
 8011230:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 8011232:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8011236:	2300      	movs	r3, #0
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	68b9      	ldr	r1, [r7, #8]
 801123c:	f7ff fc36 	bl	8010aac <initialize_state>
  core_block(state, result);
 8011240:	f107 0210 	add.w	r2, r7, #16
 8011244:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011248:	4611      	mov	r1, r2
 801124a:	4618      	mov	r0, r3
 801124c:	f7ff fc96 	bl	8010b7c <core_block>
  serialize(poly_key, result);
 8011250:	f107 0310 	add.w	r3, r7, #16
 8011254:	2220      	movs	r2, #32
 8011256:	4619      	mov	r1, r3
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f011 fb0c 	bl	8022876 <memcpy>
  (void) i;
}
 801125e:	bf00      	nop
 8011260:	3790      	adds	r7, #144	@ 0x90
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 8011266:	b480      	push	{r7}
 8011268:	b083      	sub	sp, #12
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	3301      	adds	r3, #1
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 801127c:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	3302      	adds	r3, #2
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 8011286:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	3303      	adds	r3, #3
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 8011290:	4313      	orrs	r3, r2
}
 8011292:	4618      	mov	r0, r3
 8011294:	370c      	adds	r7, #12
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr

0801129e <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 801129e:	b480      	push	{r7}
 80112a0:	b083      	sub	sp, #12
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
 80112a6:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	0a1a      	lsrs	r2, r3, #8
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	3301      	adds	r3, #1
 80112b8:	b2d2      	uxtb	r2, r2
 80112ba:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	0c1a      	lsrs	r2, r3, #16
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	3302      	adds	r3, #2
 80112c4:	b2d2      	uxtb	r2, r2
 80112c6:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	0e1a      	lsrs	r2, r3, #24
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	3303      	adds	r3, #3
 80112d0:	b2d2      	uxtb	r2, r2
 80112d2:	701a      	strb	r2, [r3, #0]
}
 80112d4:	bf00      	nop
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr

080112e0 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 80112ee:	6838      	ldr	r0, [r7, #0]
 80112f0:	f7ff ffb9 	bl	8011266 <U8TO32>
 80112f4:	4603      	mov	r3, r0
 80112f6:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	3303      	adds	r3, #3
 8011302:	4618      	mov	r0, r3
 8011304:	f7ff ffaf 	bl	8011266 <U8TO32>
 8011308:	4603      	mov	r3, r0
 801130a:	089a      	lsrs	r2, r3, #2
 801130c:	4b2f      	ldr	r3, [pc, #188]	@ (80113cc <poly1305_init+0xec>)
 801130e:	4013      	ands	r3, r2
 8011310:	68fa      	ldr	r2, [r7, #12]
 8011312:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	3306      	adds	r3, #6
 8011318:	4618      	mov	r0, r3
 801131a:	f7ff ffa4 	bl	8011266 <U8TO32>
 801131e:	4603      	mov	r3, r0
 8011320:	091a      	lsrs	r2, r3, #4
 8011322:	4b2b      	ldr	r3, [pc, #172]	@ (80113d0 <poly1305_init+0xf0>)
 8011324:	4013      	ands	r3, r2
 8011326:	68fa      	ldr	r2, [r7, #12]
 8011328:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	3309      	adds	r3, #9
 801132e:	4618      	mov	r0, r3
 8011330:	f7ff ff99 	bl	8011266 <U8TO32>
 8011334:	4603      	mov	r3, r0
 8011336:	099a      	lsrs	r2, r3, #6
 8011338:	4b26      	ldr	r3, [pc, #152]	@ (80113d4 <poly1305_init+0xf4>)
 801133a:	4013      	ands	r3, r2
 801133c:	68fa      	ldr	r2, [r7, #12]
 801133e:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	330c      	adds	r3, #12
 8011344:	4618      	mov	r0, r3
 8011346:	f7ff ff8e 	bl	8011266 <U8TO32>
 801134a:	4603      	mov	r3, r0
 801134c:	0a1b      	lsrs	r3, r3, #8
 801134e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2200      	movs	r2, #0
 801135a:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2200      	movs	r2, #0
 8011360:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2200      	movs	r2, #0
 8011366:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2200      	movs	r2, #0
 801136c:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	3310      	adds	r3, #16
 8011378:	4618      	mov	r0, r3
 801137a:	f7ff ff74 	bl	8011266 <U8TO32>
 801137e:	4602      	mov	r2, r0
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	3314      	adds	r3, #20
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff ff6c 	bl	8011266 <U8TO32>
 801138e:	4602      	mov	r2, r0
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	3318      	adds	r3, #24
 8011398:	4618      	mov	r0, r3
 801139a:	f7ff ff64 	bl	8011266 <U8TO32>
 801139e:	4602      	mov	r2, r0
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	331c      	adds	r3, #28
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7ff ff5c 	bl	8011266 <U8TO32>
 80113ae:	4602      	mov	r2, r0
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2200      	movs	r2, #0
 80113b8:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2200      	movs	r2, #0
 80113be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80113c2:	bf00      	nop
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	03ffff03 	.word	0x03ffff03
 80113d0:	03ffc0ff 	.word	0x03ffc0ff
 80113d4:	03f03fff 	.word	0x03f03fff

080113d8 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 80113d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80113dc:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 80113e6:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 80113ea:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 80113ee:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80113f2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d001      	beq.n	80113fe <poly1305_blocks+0x26>
 80113fa:	2300      	movs	r3, #0
 80113fc:	e001      	b.n	8011402 <poly1305_blocks+0x2a>
 80113fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011402:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 8011406:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 8011410:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 801141a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801141e:	689b      	ldr	r3, [r3, #8]
 8011420:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 8011424:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 801142e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8011432:	691b      	ldr	r3, [r3, #16]
 8011434:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 8011438:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 801143c:	4613      	mov	r3, r2
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	4413      	add	r3, r2
 8011442:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 8011446:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801144a:	4613      	mov	r3, r2
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	4413      	add	r3, r2
 8011450:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 8011454:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8011458:	4613      	mov	r3, r2
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	4413      	add	r3, r2
 801145e:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 8011462:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8011466:	4613      	mov	r3, r2
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4413      	add	r3, r2
 801146c:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 8011470:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8011474:	695b      	ldr	r3, [r3, #20]
 8011476:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 801147a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801147e:	699b      	ldr	r3, [r3, #24]
 8011480:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 8011484:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8011488:	69db      	ldr	r3, [r3, #28]
 801148a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 801148e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8011492:	6a1b      	ldr	r3, [r3, #32]
 8011494:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 8011498:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801149c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801149e:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 80114a2:	f000 be78 	b.w	8012196 <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 80114a6:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 80114aa:	f7ff fedc 	bl	8011266 <U8TO32>
 80114ae:	4603      	mov	r3, r0
 80114b0:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 80114b4:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80114b8:	4413      	add	r3, r2
 80114ba:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 80114be:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80114c2:	3303      	adds	r3, #3
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7ff fece 	bl	8011266 <U8TO32>
 80114ca:	4603      	mov	r3, r0
 80114cc:	089b      	lsrs	r3, r3, #2
 80114ce:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 80114d2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80114d6:	4413      	add	r3, r2
 80114d8:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 80114dc:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80114e0:	3306      	adds	r3, #6
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7ff febf 	bl	8011266 <U8TO32>
 80114e8:	4603      	mov	r3, r0
 80114ea:	091b      	lsrs	r3, r3, #4
 80114ec:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 80114f0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80114f4:	4413      	add	r3, r2
 80114f6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 80114fa:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80114fe:	3309      	adds	r3, #9
 8011500:	4618      	mov	r0, r3
 8011502:	f7ff feb0 	bl	8011266 <U8TO32>
 8011506:	4603      	mov	r3, r0
 8011508:	099b      	lsrs	r3, r3, #6
 801150a:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801150e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8011512:	4413      	add	r3, r2
 8011514:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 8011518:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801151c:	330c      	adds	r3, #12
 801151e:	4618      	mov	r0, r3
 8011520:	f7ff fea1 	bl	8011266 <U8TO32>
 8011524:	4603      	mov	r3, r0
 8011526:	0a1a      	lsrs	r2, r3, #8
 8011528:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 801152c:	431a      	orrs	r2, r3
 801152e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8011532:	4413      	add	r3, r2
 8011534:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8011538:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801153c:	2200      	movs	r2, #0
 801153e:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8011542:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8011546:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801154a:	2200      	movs	r2, #0
 801154c:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8011550:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8011554:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8011558:	460b      	mov	r3, r1
 801155a:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801155e:	fb02 f203 	mul.w	r2, r2, r3
 8011562:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8011566:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 801156a:	4601      	mov	r1, r0
 801156c:	fb01 f303 	mul.w	r3, r1, r3
 8011570:	4413      	add	r3, r2
 8011572:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8011576:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 801157a:	fba2 1201 	umull	r1, r2, r2, r1
 801157e:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 8011582:	460a      	mov	r2, r1
 8011584:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 8011588:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801158c:	4413      	add	r3, r2
 801158e:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8011592:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8011596:	2200      	movs	r2, #0
 8011598:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 801159c:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 80115a0:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80115a4:	2200      	movs	r2, #0
 80115a6:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 80115aa:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 80115ae:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 80115b2:	460b      	mov	r3, r1
 80115b4:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 80115b8:	fb02 f203 	mul.w	r2, r2, r3
 80115bc:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80115c0:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 80115c4:	4601      	mov	r1, r0
 80115c6:	fb01 f303 	mul.w	r3, r1, r3
 80115ca:	4413      	add	r3, r2
 80115cc:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 80115d0:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 80115d4:	fba2 1201 	umull	r1, r2, r2, r1
 80115d8:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 80115dc:	460a      	mov	r2, r1
 80115de:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 80115e2:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 80115e6:	4413      	add	r3, r2
 80115e8:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 80115ec:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80115f0:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 80115f4:	4602      	mov	r2, r0
 80115f6:	189b      	adds	r3, r3, r2
 80115f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80115fc:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8011600:	460a      	mov	r2, r1
 8011602:	4153      	adcs	r3, r2
 8011604:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8011608:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801160c:	2200      	movs	r2, #0
 801160e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8011612:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8011616:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801161a:	2200      	movs	r2, #0
 801161c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8011620:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8011624:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8011628:	460b      	mov	r3, r1
 801162a:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 801162e:	fb02 f203 	mul.w	r2, r2, r3
 8011632:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8011636:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 801163a:	4601      	mov	r1, r0
 801163c:	fb01 f303 	mul.w	r3, r1, r3
 8011640:	4413      	add	r3, r2
 8011642:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8011646:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 801164a:	fba2 1201 	umull	r1, r2, r2, r1
 801164e:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8011652:	460a      	mov	r2, r1
 8011654:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 8011658:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 801165c:	4413      	add	r3, r2
 801165e:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8011662:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8011666:	2200      	movs	r2, #0
 8011668:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 801166c:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8011670:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8011674:	2200      	movs	r2, #0
 8011676:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 801167a:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 801167e:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8011682:	460b      	mov	r3, r1
 8011684:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8011688:	fb02 f203 	mul.w	r2, r2, r3
 801168c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8011690:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 8011694:	4601      	mov	r1, r0
 8011696:	fb01 f303 	mul.w	r3, r1, r3
 801169a:	4413      	add	r3, r2
 801169c:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 80116a0:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 80116a4:	fba2 1201 	umull	r1, r2, r2, r1
 80116a8:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80116ac:	460a      	mov	r2, r1
 80116ae:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 80116b2:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 80116b6:	4413      	add	r3, r2
 80116b8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80116bc:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 80116c0:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 80116c4:	4602      	mov	r2, r0
 80116c6:	189b      	adds	r3, r3, r2
 80116c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80116ca:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80116ce:	460a      	mov	r2, r1
 80116d0:	4153      	adcs	r3, r2
 80116d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80116d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80116d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80116dc:	4602      	mov	r2, r0
 80116de:	189b      	adds	r3, r3, r2
 80116e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80116e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80116e8:	460a      	mov	r2, r1
 80116ea:	4153      	adcs	r3, r2
 80116ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 80116f0:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80116f4:	2200      	movs	r2, #0
 80116f6:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80116fa:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 80116fe:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8011702:	2200      	movs	r2, #0
 8011704:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8011708:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 801170c:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 8011710:	460b      	mov	r3, r1
 8011712:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8011716:	fb02 f203 	mul.w	r2, r2, r3
 801171a:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 801171e:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 8011722:	4601      	mov	r1, r0
 8011724:	fb01 f303 	mul.w	r3, r1, r3
 8011728:	4413      	add	r3, r2
 801172a:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 801172e:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 8011732:	fba2 1201 	umull	r1, r2, r2, r1
 8011736:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 801173a:	460a      	mov	r2, r1
 801173c:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 8011740:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8011744:	4413      	add	r3, r2
 8011746:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801174a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801174e:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8011752:	4602      	mov	r2, r0
 8011754:	189b      	adds	r3, r3, r2
 8011756:	643b      	str	r3, [r7, #64]	@ 0x40
 8011758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801175c:	460a      	mov	r2, r1
 801175e:	4153      	adcs	r3, r2
 8011760:	647b      	str	r3, [r7, #68]	@ 0x44
 8011762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011766:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801176a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801176e:	2200      	movs	r2, #0
 8011770:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8011774:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 8011778:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801177c:	2200      	movs	r2, #0
 801177e:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8011782:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8011786:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 801178a:	460b      	mov	r3, r1
 801178c:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 8011790:	fb02 f203 	mul.w	r2, r2, r3
 8011794:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8011798:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 801179c:	4601      	mov	r1, r0
 801179e:	fb01 f303 	mul.w	r3, r1, r3
 80117a2:	4413      	add	r3, r2
 80117a4:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 80117a8:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 80117ac:	fba2 1201 	umull	r1, r2, r2, r1
 80117b0:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80117b4:	460a      	mov	r2, r1
 80117b6:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 80117ba:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 80117be:	4413      	add	r3, r2
 80117c0:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80117c4:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80117c8:	2200      	movs	r2, #0
 80117ca:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80117ce:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 80117d2:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80117d6:	2200      	movs	r2, #0
 80117d8:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80117dc:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 80117e0:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 80117e4:	460b      	mov	r3, r1
 80117e6:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80117ea:	fb02 f203 	mul.w	r2, r2, r3
 80117ee:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80117f2:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 80117f6:	4601      	mov	r1, r0
 80117f8:	fb01 f303 	mul.w	r3, r1, r3
 80117fc:	4413      	add	r3, r2
 80117fe:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8011802:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8011806:	fba2 1201 	umull	r1, r2, r2, r1
 801180a:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 801180e:	460a      	mov	r2, r1
 8011810:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 8011814:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8011818:	4413      	add	r3, r2
 801181a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801181e:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8011822:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8011826:	4602      	mov	r2, r0
 8011828:	189b      	adds	r3, r3, r2
 801182a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801182e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8011832:	460a      	mov	r2, r1
 8011834:	4153      	adcs	r3, r2
 8011836:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801183a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801183e:	2200      	movs	r2, #0
 8011840:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8011844:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8011848:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801184c:	2200      	movs	r2, #0
 801184e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8011852:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8011856:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 801185a:	460b      	mov	r3, r1
 801185c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8011860:	fb02 f203 	mul.w	r2, r2, r3
 8011864:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8011868:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 801186c:	4601      	mov	r1, r0
 801186e:	fb01 f303 	mul.w	r3, r1, r3
 8011872:	4413      	add	r3, r2
 8011874:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8011878:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 801187c:	fba2 1201 	umull	r1, r2, r2, r1
 8011880:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 8011884:	460a      	mov	r2, r1
 8011886:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 801188a:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 801188e:	4413      	add	r3, r2
 8011890:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8011894:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8011898:	2200      	movs	r2, #0
 801189a:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 801189e:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 80118a2:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80118a6:	2200      	movs	r2, #0
 80118a8:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80118ac:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 80118b0:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 80118b4:	460b      	mov	r3, r1
 80118b6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80118ba:	fb02 f203 	mul.w	r2, r2, r3
 80118be:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80118c2:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 80118c6:	4601      	mov	r1, r0
 80118c8:	fb01 f303 	mul.w	r3, r1, r3
 80118cc:	4413      	add	r3, r2
 80118ce:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80118d2:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 80118d6:	fba2 1201 	umull	r1, r2, r2, r1
 80118da:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 80118de:	460a      	mov	r2, r1
 80118e0:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 80118e4:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 80118e8:	4413      	add	r3, r2
 80118ea:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 80118ee:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80118f2:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 80118f6:	4602      	mov	r2, r0
 80118f8:	189b      	adds	r3, r3, r2
 80118fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80118fc:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8011900:	460a      	mov	r2, r1
 8011902:	4153      	adcs	r3, r2
 8011904:	667b      	str	r3, [r7, #100]	@ 0x64
 8011906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801190a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801190e:	4602      	mov	r2, r0
 8011910:	189b      	adds	r3, r3, r2
 8011912:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801191a:	460a      	mov	r2, r1
 801191c:	4153      	adcs	r3, r2
 801191e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8011922:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8011926:	2200      	movs	r2, #0
 8011928:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 801192c:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8011930:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8011934:	2200      	movs	r2, #0
 8011936:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801193a:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 801193e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8011942:	460b      	mov	r3, r1
 8011944:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8011948:	fb02 f203 	mul.w	r2, r2, r3
 801194c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8011950:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 8011954:	4601      	mov	r1, r0
 8011956:	fb01 f303 	mul.w	r3, r1, r3
 801195a:	4413      	add	r3, r2
 801195c:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8011960:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 8011964:	fba2 1201 	umull	r1, r2, r2, r1
 8011968:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801196c:	460a      	mov	r2, r1
 801196e:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8011972:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8011976:	4413      	add	r3, r2
 8011978:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801197c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011980:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8011984:	4602      	mov	r2, r0
 8011986:	189b      	adds	r3, r3, r2
 8011988:	63bb      	str	r3, [r7, #56]	@ 0x38
 801198a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801198e:	460a      	mov	r2, r1
 8011990:	4153      	adcs	r3, r2
 8011992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011998:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801199c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80119a0:	2200      	movs	r2, #0
 80119a2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80119a6:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 80119aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80119ae:	2200      	movs	r2, #0
 80119b0:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80119b4:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 80119b8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80119bc:	460b      	mov	r3, r1
 80119be:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80119c2:	fb02 f203 	mul.w	r2, r2, r3
 80119c6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80119ca:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 80119ce:	4601      	mov	r1, r0
 80119d0:	fb01 f303 	mul.w	r3, r1, r3
 80119d4:	4413      	add	r3, r2
 80119d6:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80119da:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 80119de:	fba2 1201 	umull	r1, r2, r2, r1
 80119e2:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 80119e6:	460a      	mov	r2, r1
 80119e8:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 80119ec:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 80119f0:	4413      	add	r3, r2
 80119f2:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80119f6:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80119fa:	2200      	movs	r2, #0
 80119fc:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8011a00:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8011a04:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8011a0e:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8011a12:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8011a16:	460b      	mov	r3, r1
 8011a18:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8011a1c:	fb02 f203 	mul.w	r2, r2, r3
 8011a20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8011a24:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 8011a28:	4601      	mov	r1, r0
 8011a2a:	fb01 f303 	mul.w	r3, r1, r3
 8011a2e:	4413      	add	r3, r2
 8011a30:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8011a34:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8011a38:	fba2 1201 	umull	r1, r2, r2, r1
 8011a3c:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8011a40:	460a      	mov	r2, r1
 8011a42:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 8011a46:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8011a4a:	4413      	add	r3, r2
 8011a4c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8011a50:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8011a54:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8011a58:	4602      	mov	r2, r0
 8011a5a:	189b      	adds	r3, r3, r2
 8011a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011a60:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8011a64:	460a      	mov	r2, r1
 8011a66:	4153      	adcs	r3, r2
 8011a68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 8011a6c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8011a70:	2200      	movs	r2, #0
 8011a72:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8011a76:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8011a7a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8011a84:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8011a88:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8011a92:	fb02 f203 	mul.w	r2, r2, r3
 8011a96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8011a9a:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 8011a9e:	4601      	mov	r1, r0
 8011aa0:	fb01 f303 	mul.w	r3, r1, r3
 8011aa4:	4413      	add	r3, r2
 8011aa6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8011aaa:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 8011aae:	fba2 1201 	umull	r1, r2, r2, r1
 8011ab2:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8011ab6:	460a      	mov	r2, r1
 8011ab8:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 8011abc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8011ac0:	4413      	add	r3, r2
 8011ac2:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8011ac6:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8011aca:	2200      	movs	r2, #0
 8011acc:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8011ad0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8011ad4:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8011ade:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8011ae2:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8011aec:	fb02 f203 	mul.w	r2, r2, r3
 8011af0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8011af4:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 8011af8:	4601      	mov	r1, r0
 8011afa:	fb01 f303 	mul.w	r3, r1, r3
 8011afe:	4413      	add	r3, r2
 8011b00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8011b04:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011b08:	fba2 1201 	umull	r1, r2, r2, r1
 8011b0c:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8011b10:	460a      	mov	r2, r1
 8011b12:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 8011b16:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8011b1a:	4413      	add	r3, r2
 8011b1c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8011b20:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8011b24:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8011b28:	4602      	mov	r2, r0
 8011b2a:	189b      	adds	r3, r3, r2
 8011b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b2e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8011b32:	460a      	mov	r2, r1
 8011b34:	4153      	adcs	r3, r2
 8011b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011b3c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011b40:	4602      	mov	r2, r0
 8011b42:	189b      	adds	r3, r3, r2
 8011b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011b48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011b4c:	460a      	mov	r2, r1
 8011b4e:	4153      	adcs	r3, r2
 8011b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 8011b54:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8011b5e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8011b62:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8011b66:	2200      	movs	r2, #0
 8011b68:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8011b6c:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8011b70:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8011b74:	460b      	mov	r3, r1
 8011b76:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8011b7a:	fb02 f203 	mul.w	r2, r2, r3
 8011b7e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8011b82:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 8011b86:	4601      	mov	r1, r0
 8011b88:	fb01 f303 	mul.w	r3, r1, r3
 8011b8c:	4413      	add	r3, r2
 8011b8e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8011b92:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8011b96:	fba2 1201 	umull	r1, r2, r2, r1
 8011b9a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8011b9e:	460a      	mov	r2, r1
 8011ba0:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8011ba4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8011ba8:	4413      	add	r3, r2
 8011baa:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8011bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011bb2:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	189b      	adds	r3, r3, r2
 8011bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011bc0:	460a      	mov	r2, r1
 8011bc2:	4153      	adcs	r3, r2
 8011bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8011bca:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8011bce:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8011bd8:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8011bdc:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011be0:	2200      	movs	r2, #0
 8011be2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8011be6:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8011bea:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8011bee:	460b      	mov	r3, r1
 8011bf0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8011bf4:	fb02 f203 	mul.w	r2, r2, r3
 8011bf8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8011bfc:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 8011c00:	4601      	mov	r1, r0
 8011c02:	fb01 f303 	mul.w	r3, r1, r3
 8011c06:	4413      	add	r3, r2
 8011c08:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8011c0c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8011c10:	fba2 1201 	umull	r1, r2, r2, r1
 8011c14:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 8011c18:	460a      	mov	r2, r1
 8011c1a:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 8011c1e:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8011c22:	4413      	add	r3, r2
 8011c24:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8011c28:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8011c32:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8011c36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8011c40:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8011c44:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8011c48:	460b      	mov	r3, r1
 8011c4a:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8011c4e:	fb02 f203 	mul.w	r2, r2, r3
 8011c52:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8011c56:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 8011c5a:	4601      	mov	r1, r0
 8011c5c:	fb01 f303 	mul.w	r3, r1, r3
 8011c60:	4413      	add	r3, r2
 8011c62:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8011c66:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 8011c6a:	fba2 1201 	umull	r1, r2, r2, r1
 8011c6e:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8011c72:	460a      	mov	r2, r1
 8011c74:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 8011c78:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8011c7c:	4413      	add	r3, r2
 8011c7e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8011c82:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8011c86:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	189b      	adds	r3, r3, r2
 8011c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011c92:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8011c96:	460a      	mov	r2, r1
 8011c98:	4153      	adcs	r3, r2
 8011c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 8011c9e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8011ca8:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8011cac:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8011cb6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8011cba:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8011cbe:	460b      	mov	r3, r1
 8011cc0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8011cc4:	fb02 f203 	mul.w	r2, r2, r3
 8011cc8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8011ccc:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 8011cd0:	4601      	mov	r1, r0
 8011cd2:	fb01 f303 	mul.w	r3, r1, r3
 8011cd6:	4413      	add	r3, r2
 8011cd8:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8011cdc:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8011ce0:	fba2 ab01 	umull	sl, fp, r2, r1
 8011ce4:	445b      	add	r3, fp
 8011ce6:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8011ce8:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8011cec:	2200      	movs	r2, #0
 8011cee:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8011cf2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8011cf6:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8011d00:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8011d04:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8011d08:	460b      	mov	r3, r1
 8011d0a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8011d0e:	fb02 f203 	mul.w	r2, r2, r3
 8011d12:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d16:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 8011d1a:	4601      	mov	r1, r0
 8011d1c:	fb01 f303 	mul.w	r3, r1, r3
 8011d20:	4413      	add	r3, r2
 8011d22:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8011d26:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 8011d2a:	fba2 1201 	umull	r1, r2, r2, r1
 8011d2e:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8011d32:	460a      	mov	r2, r1
 8011d34:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 8011d38:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8011d3c:	4413      	add	r3, r2
 8011d3e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8011d42:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8011d46:	460b      	mov	r3, r1
 8011d48:	eb1a 0303 	adds.w	r3, sl, r3
 8011d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d4e:	4613      	mov	r3, r2
 8011d50:	eb4b 0303 	adc.w	r3, fp, r3
 8011d54:	657b      	str	r3, [r7, #84]	@ 0x54
 8011d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011d5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8011d5e:	4602      	mov	r2, r0
 8011d60:	189b      	adds	r3, r3, r2
 8011d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d6a:	460a      	mov	r2, r1
 8011d6c:	4153      	adcs	r3, r2
 8011d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 8011d72:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8011d76:	2200      	movs	r2, #0
 8011d78:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8011d7c:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8011d80:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8011d84:	2200      	movs	r2, #0
 8011d86:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8011d8a:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8011d8e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8011d92:	460b      	mov	r3, r1
 8011d94:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011d98:	fb02 f203 	mul.w	r2, r2, r3
 8011d9c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8011da0:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 8011da4:	4601      	mov	r1, r0
 8011da6:	fb01 f303 	mul.w	r3, r1, r3
 8011daa:	4413      	add	r3, r2
 8011dac:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8011db0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8011db4:	fba2 1201 	umull	r1, r2, r2, r1
 8011db8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8011dbc:	460a      	mov	r2, r1
 8011dbe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8011dc2:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8011dc6:	4413      	add	r3, r2
 8011dc8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8011dcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011dd0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	189b      	adds	r3, r3, r2
 8011dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011dde:	460a      	mov	r2, r1
 8011de0:	4153      	adcs	r3, r2
 8011de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011de8:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8011dec:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8011df0:	2200      	movs	r2, #0
 8011df2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8011df6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8011dfa:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8011e04:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8011e08:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8011e12:	fb02 f203 	mul.w	r2, r2, r3
 8011e16:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8011e1a:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 8011e1e:	4601      	mov	r1, r0
 8011e20:	fb01 f303 	mul.w	r3, r1, r3
 8011e24:	4413      	add	r3, r2
 8011e26:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8011e2a:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8011e2e:	fba2 8901 	umull	r8, r9, r2, r1
 8011e32:	444b      	add	r3, r9
 8011e34:	4699      	mov	r9, r3
 8011e36:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8011e40:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8011e44:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8011e4e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8011e52:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8011e56:	460b      	mov	r3, r1
 8011e58:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8011e5c:	fb02 f203 	mul.w	r2, r2, r3
 8011e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011e64:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 8011e68:	4601      	mov	r1, r0
 8011e6a:	fb01 f303 	mul.w	r3, r1, r3
 8011e6e:	4413      	add	r3, r2
 8011e70:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011e74:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8011e78:	fba2 1201 	umull	r1, r2, r2, r1
 8011e7c:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8011e80:	460a      	mov	r2, r1
 8011e82:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8011e86:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8011e8a:	4413      	add	r3, r2
 8011e8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8011e90:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8011e94:	460b      	mov	r3, r1
 8011e96:	eb18 0303 	adds.w	r3, r8, r3
 8011e9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	eb49 0303 	adc.w	r3, r9, r3
 8011ea4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 8011ea8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8011eac:	2200      	movs	r2, #0
 8011eae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8011eb2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8011eb6:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8011eba:	2200      	movs	r2, #0
 8011ebc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8011ec0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8011ec4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8011ec8:	460b      	mov	r3, r1
 8011eca:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8011ece:	fb02 f203 	mul.w	r2, r2, r3
 8011ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011ed6:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 8011eda:	4601      	mov	r1, r0
 8011edc:	fb01 f303 	mul.w	r3, r1, r3
 8011ee0:	4413      	add	r3, r2
 8011ee2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8011ee6:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8011eea:	fba2 4501 	umull	r4, r5, r2, r1
 8011eee:	442b      	add	r3, r5
 8011ef0:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8011ef2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8011efc:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8011f00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8011f04:	2200      	movs	r2, #0
 8011f06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8011f0a:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8011f0e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8011f12:	460b      	mov	r3, r1
 8011f14:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8011f18:	fb02 f203 	mul.w	r2, r2, r3
 8011f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f20:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 8011f24:	4601      	mov	r1, r0
 8011f26:	fb01 f303 	mul.w	r3, r1, r3
 8011f2a:	4413      	add	r3, r2
 8011f2c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8011f30:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8011f34:	fba2 1201 	umull	r1, r2, r2, r1
 8011f38:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8011f3c:	460a      	mov	r2, r1
 8011f3e:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8011f42:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8011f46:	4413      	add	r3, r2
 8011f48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011f4c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8011f50:	460b      	mov	r3, r1
 8011f52:	18e3      	adds	r3, r4, r3
 8011f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f56:	4613      	mov	r3, r2
 8011f58:	eb45 0303 	adc.w	r3, r5, r3
 8011f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011f62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8011f66:	4602      	mov	r2, r0
 8011f68:	189b      	adds	r3, r3, r2
 8011f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011f72:	460a      	mov	r2, r1
 8011f74:	4153      	adcs	r3, r2
 8011f76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 8011f7a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011f84:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8011f88:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011f92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011f96:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8011fa0:	fb02 f203 	mul.w	r2, r2, r3
 8011fa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011fa8:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 8011fac:	4601      	mov	r1, r0
 8011fae:	fb01 f303 	mul.w	r3, r1, r3
 8011fb2:	4413      	add	r3, r2
 8011fb4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8011fb8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8011fbc:	fba2 1201 	umull	r1, r2, r2, r1
 8011fc0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011fc4:	460a      	mov	r2, r1
 8011fc6:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8011fca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011fce:	4413      	add	r3, r2
 8011fd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8011fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011fd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011fdc:	4602      	mov	r2, r0
 8011fde:	189b      	adds	r3, r3, r2
 8011fe0:	623b      	str	r3, [r7, #32]
 8011fe2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011fe6:	460a      	mov	r2, r1
 8011fe8:	4153      	adcs	r3, r2
 8011fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8011fec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011ff0:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 8011ff4:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8011ff8:	f04f 0000 	mov.w	r0, #0
 8011ffc:	f04f 0100 	mov.w	r1, #0
 8012000:	0e90      	lsrs	r0, r2, #26
 8012002:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8012006:	0e99      	lsrs	r1, r3, #26
 8012008:	4603      	mov	r3, r0
 801200a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801200e:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8012012:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8012016:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801201a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801201e:	2200      	movs	r2, #0
 8012020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012024:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012028:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801202c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8012030:	1851      	adds	r1, r2, r1
 8012032:	61b9      	str	r1, [r7, #24]
 8012034:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8012038:	414b      	adcs	r3, r1
 801203a:	61fb      	str	r3, [r7, #28]
 801203c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012040:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 8012044:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8012048:	f04f 0000 	mov.w	r0, #0
 801204c:	f04f 0100 	mov.w	r1, #0
 8012050:	0e90      	lsrs	r0, r2, #26
 8012052:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8012056:	0e99      	lsrs	r1, r3, #26
 8012058:	4603      	mov	r3, r0
 801205a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801205e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8012062:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8012066:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801206a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801206e:	2200      	movs	r2, #0
 8012070:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012074:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012078:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801207c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8012080:	1851      	adds	r1, r2, r1
 8012082:	6139      	str	r1, [r7, #16]
 8012084:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8012088:	414b      	adcs	r3, r1
 801208a:	617b      	str	r3, [r7, #20]
 801208c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012090:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 8012094:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8012098:	f04f 0000 	mov.w	r0, #0
 801209c:	f04f 0100 	mov.w	r1, #0
 80120a0:	0e90      	lsrs	r0, r2, #26
 80120a2:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 80120a6:	0e99      	lsrs	r1, r3, #26
 80120a8:	4603      	mov	r3, r0
 80120aa:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 80120ae:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 80120b2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80120b6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 80120ba:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80120be:	2200      	movs	r2, #0
 80120c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80120c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80120c4:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 80120c8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80120ca:	1851      	adds	r1, r2, r1
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80120d0:	414b      	adcs	r3, r1
 80120d2:	60fb      	str	r3, [r7, #12]
 80120d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80120d8:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 80120dc:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 80120e0:	f04f 0000 	mov.w	r0, #0
 80120e4:	f04f 0100 	mov.w	r1, #0
 80120e8:	0e90      	lsrs	r0, r2, #26
 80120ea:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 80120ee:	0e99      	lsrs	r1, r3, #26
 80120f0:	4603      	mov	r3, r0
 80120f2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 80120f6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80120fa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80120fe:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 8012102:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8012106:	2200      	movs	r2, #0
 8012108:	673b      	str	r3, [r7, #112]	@ 0x70
 801210a:	677a      	str	r2, [r7, #116]	@ 0x74
 801210c:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8012110:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8012112:	1851      	adds	r1, r2, r1
 8012114:	6039      	str	r1, [r7, #0]
 8012116:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8012118:	414b      	adcs	r3, r1
 801211a:	607b      	str	r3, [r7, #4]
 801211c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012120:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 8012124:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8012128:	f04f 0000 	mov.w	r0, #0
 801212c:	f04f 0100 	mov.w	r1, #0
 8012130:	0e90      	lsrs	r0, r2, #26
 8012132:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8012136:	0e99      	lsrs	r1, r3, #26
 8012138:	4603      	mov	r3, r0
 801213a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801213e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8012142:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8012146:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801214a:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801214e:	4613      	mov	r3, r2
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	441a      	add	r2, r3
 8012154:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8012158:	4413      	add	r3, r2
 801215a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801215e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8012162:	0e9b      	lsrs	r3, r3, #26
 8012164:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 8012168:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801216c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8012170:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 8012174:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8012178:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801217c:	4413      	add	r3, r2
 801217e:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 8012182:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8012186:	3310      	adds	r3, #16
 8012188:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 801218c:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8012190:	3b10      	subs	r3, #16
 8012192:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 8012196:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801219a:	2b0f      	cmp	r3, #15
 801219c:	f63f a983 	bhi.w	80114a6 <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 80121a0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80121a4:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80121a8:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 80121aa:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80121ae:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 80121b2:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 80121b4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80121b8:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 80121bc:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 80121be:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80121c2:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80121c6:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 80121c8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80121cc:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80121d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80121d2:	bf00      	nop
 80121d4:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 80121d8:	46bd      	mov	sp, r7
 80121da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080121de <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 80121de:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80121e2:	b0aa      	sub	sp, #168	@ 0xa8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6678      	str	r0, [r7, #100]	@ 0x64
 80121e8:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 80121ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80121ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 80121f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80121f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d030      	beq.n	801225c <poly1305_finish+0x7e>
    size_t i = st->leftover;
 80121fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80121fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 8012204:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012208:	1c53      	adds	r3, r2, #1
 801220a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801220e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012212:	441a      	add	r2, r3
 8012214:	2301      	movs	r3, #1
 8012216:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801221a:	e00d      	b.n	8012238 <poly1305_finish+0x5a>
 801221c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8012220:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012224:	4413      	add	r3, r2
 8012226:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801222a:	2300      	movs	r3, #0
 801222c:	7013      	strb	r3, [r2, #0]
 801222e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012232:	3301      	adds	r3, #1
 8012234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012238:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801223c:	2b0f      	cmp	r3, #15
 801223e:	d9ed      	bls.n	801221c <poly1305_finish+0x3e>
    st->final = 1;
 8012240:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8012244:	2301      	movs	r3, #1
 8012246:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801224a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801224e:	333c      	adds	r3, #60	@ 0x3c
 8012250:	2210      	movs	r2, #16
 8012252:	4619      	mov	r1, r3
 8012254:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8012258:	f7ff f8be 	bl	80113d8 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801225c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012260:	695b      	ldr	r3, [r3, #20]
 8012262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 8012266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801226a:	699b      	ldr	r3, [r3, #24]
 801226c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 8012270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012274:	69db      	ldr	r3, [r3, #28]
 8012276:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801227a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801227e:	6a1b      	ldr	r3, [r3, #32]
 8012280:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 8012284:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801228a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 801228e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012292:	0e9b      	lsrs	r3, r3, #26
 8012294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 8012298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801229c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80122a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 80122a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80122a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80122ac:	4413      	add	r3, r2
 80122ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 80122b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80122b6:	0e9b      	lsrs	r3, r3, #26
 80122b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 80122bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80122c0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80122c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 80122c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80122cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80122d0:	4413      	add	r3, r2
 80122d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 80122d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80122da:	0e9b      	lsrs	r3, r3, #26
 80122dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 80122e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80122e4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80122e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 80122ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80122f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80122f4:	4413      	add	r3, r2
 80122f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 80122fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80122fe:	0e9b      	lsrs	r3, r3, #26
 8012300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 8012304:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012308:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801230c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 8012310:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012314:	4613      	mov	r3, r2
 8012316:	009b      	lsls	r3, r3, #2
 8012318:	441a      	add	r2, r3
 801231a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801231e:	4413      	add	r3, r2
 8012320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 8012324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012328:	0e9b      	lsrs	r3, r3, #26
 801232a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 801232e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012332:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8012336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 801233a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801233e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012342:	4413      	add	r3, r2
 8012344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 8012348:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801234c:	3305      	adds	r3, #5
 801234e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 8012352:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012356:	0e9b      	lsrs	r3, r3, #26
 8012358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 801235c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012360:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8012364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 8012368:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801236c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012370:	4413      	add	r3, r2
 8012372:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 8012376:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801237a:	0e9b      	lsrs	r3, r3, #26
 801237c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 8012380:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012384:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8012388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 801238c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012390:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012394:	4413      	add	r3, r2
 8012396:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 8012398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801239a:	0e9b      	lsrs	r3, r3, #26
 801239c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 80123a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80123a2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80123a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 80123a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80123ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80123b0:	4413      	add	r3, r2
 80123b2:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 80123b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80123b6:	0e9b      	lsrs	r3, r3, #26
 80123b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 80123bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80123be:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80123c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 80123c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80123c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80123cc:	4413      	add	r3, r2
 80123ce:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 80123d2:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 80123d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80123d6:	0fdb      	lsrs	r3, r3, #31
 80123d8:	3b01      	subs	r3, #1
 80123da:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 80123dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80123e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80123e2:	4013      	ands	r3, r2
 80123e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 80123e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80123ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80123ee:	4013      	ands	r3, r2
 80123f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 80123f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80123f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80123f8:	4013      	ands	r3, r2
 80123fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 80123fc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80123fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012400:	4013      	ands	r3, r2
 8012402:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 8012404:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8012406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012408:	4013      	ands	r3, r2
 801240a:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 801240c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801240e:	43db      	mvns	r3, r3
 8012410:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 8012412:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8012416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012418:	401a      	ands	r2, r3
 801241a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801241e:	4313      	orrs	r3, r2
 8012420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 8012424:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012428:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801242a:	401a      	ands	r2, r3
 801242c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012430:	4313      	orrs	r3, r2
 8012432:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 8012436:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801243a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801243c:	401a      	ands	r2, r3
 801243e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012440:	4313      	orrs	r3, r2
 8012442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 8012446:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801244a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801244c:	401a      	ands	r2, r3
 801244e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012450:	4313      	orrs	r3, r2
 8012452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 8012456:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801245a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801245c:	401a      	ands	r2, r3
 801245e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012460:	4313      	orrs	r3, r2
 8012462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 8012466:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801246a:	069a      	lsls	r2, r3, #26
 801246c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012470:	4313      	orrs	r3, r2
 8012472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 8012476:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801247a:	099a      	lsrs	r2, r3, #6
 801247c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012480:	051b      	lsls	r3, r3, #20
 8012482:	4313      	orrs	r3, r2
 8012484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 8012488:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801248c:	0b1a      	lsrs	r2, r3, #12
 801248e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012492:	039b      	lsls	r3, r3, #14
 8012494:	4313      	orrs	r3, r2
 8012496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 801249a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801249e:	0c9a      	lsrs	r2, r3, #18
 80124a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80124a4:	021b      	lsls	r3, r3, #8
 80124a6:	4313      	orrs	r3, r2
 80124a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 80124ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80124b0:	2200      	movs	r2, #0
 80124b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80124b4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80124b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124bc:	2200      	movs	r2, #0
 80124be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80124c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80124c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80124c8:	4602      	mov	r2, r0
 80124ca:	189b      	adds	r3, r3, r2
 80124cc:	61bb      	str	r3, [r7, #24]
 80124ce:	460b      	mov	r3, r1
 80124d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80124d2:	eb42 0303 	adc.w	r3, r2, r3
 80124d6:	61fb      	str	r3, [r7, #28]
 80124d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80124dc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 80124e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80124e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 80124e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80124ea:	2200      	movs	r2, #0
 80124ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80124ee:	657a      	str	r2, [r7, #84]	@ 0x54
 80124f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124f6:	2200      	movs	r2, #0
 80124f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80124fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80124fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8012502:	4602      	mov	r2, r0
 8012504:	189c      	adds	r4, r3, r2
 8012506:	460b      	mov	r3, r1
 8012508:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801250a:	eb42 0303 	adc.w	r3, r2, r3
 801250e:	461d      	mov	r5, r3
 8012510:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8012514:	f04f 0000 	mov.w	r0, #0
 8012518:	f04f 0100 	mov.w	r1, #0
 801251c:	0018      	movs	r0, r3
 801251e:	2100      	movs	r1, #0
 8012520:	1823      	adds	r3, r4, r0
 8012522:	613b      	str	r3, [r7, #16]
 8012524:	eb45 0301 	adc.w	r3, r5, r1
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801252e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 8012532:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 8012538:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801253c:	2200      	movs	r2, #0
 801253e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012540:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012548:	2200      	movs	r2, #0
 801254a:	633b      	str	r3, [r7, #48]	@ 0x30
 801254c:	637a      	str	r2, [r7, #52]	@ 0x34
 801254e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8012552:	4623      	mov	r3, r4
 8012554:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8012558:	4602      	mov	r2, r0
 801255a:	eb13 0a02 	adds.w	sl, r3, r2
 801255e:	462b      	mov	r3, r5
 8012560:	460a      	mov	r2, r1
 8012562:	eb43 0b02 	adc.w	fp, r3, r2
 8012566:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801256a:	f04f 0200 	mov.w	r2, #0
 801256e:	f04f 0300 	mov.w	r3, #0
 8012572:	000a      	movs	r2, r1
 8012574:	2300      	movs	r3, #0
 8012576:	eb1a 0102 	adds.w	r1, sl, r2
 801257a:	60b9      	str	r1, [r7, #8]
 801257c:	eb4b 0303 	adc.w	r3, fp, r3
 8012580:	60fb      	str	r3, [r7, #12]
 8012582:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8012586:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 801258a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801258c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 8012590:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012594:	2200      	movs	r2, #0
 8012596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012598:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801259a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801259e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125a0:	2200      	movs	r2, #0
 80125a2:	623b      	str	r3, [r7, #32]
 80125a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80125a6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80125aa:	4623      	mov	r3, r4
 80125ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80125b0:	4602      	mov	r2, r0
 80125b2:	eb13 0802 	adds.w	r8, r3, r2
 80125b6:	462b      	mov	r3, r5
 80125b8:	460a      	mov	r2, r1
 80125ba:	eb43 0902 	adc.w	r9, r3, r2
 80125be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80125c2:	f04f 0200 	mov.w	r2, #0
 80125c6:	f04f 0300 	mov.w	r3, #0
 80125ca:	000a      	movs	r2, r1
 80125cc:	2300      	movs	r3, #0
 80125ce:	eb18 0102 	adds.w	r1, r8, r2
 80125d2:	6039      	str	r1, [r7, #0]
 80125d4:	eb49 0303 	adc.w	r3, r9, r3
 80125d8:	607b      	str	r3, [r7, #4]
 80125da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80125de:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 80125e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80125e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 80125e8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80125ec:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80125ee:	f7fe fe56 	bl	801129e <U32TO8>
  U32TO8(mac + 4, h1);
 80125f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80125f4:	3304      	adds	r3, #4
 80125f6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7fe fe4f 	bl	801129e <U32TO8>
  U32TO8(mac + 8, h2);
 8012600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012602:	3308      	adds	r3, #8
 8012604:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8012608:	4618      	mov	r0, r3
 801260a:	f7fe fe48 	bl	801129e <U32TO8>
  U32TO8(mac + 12, h3);
 801260e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012610:	330c      	adds	r3, #12
 8012612:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012616:	4618      	mov	r0, r3
 8012618:	f7fe fe41 	bl	801129e <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801261c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012620:	2200      	movs	r2, #0
 8012622:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8012624:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012628:	2200      	movs	r2, #0
 801262a:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801262c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012630:	2200      	movs	r2, #0
 8012632:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8012634:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012638:	2200      	movs	r2, #0
 801263a:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801263c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012640:	2200      	movs	r2, #0
 8012642:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 8012644:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012648:	2200      	movs	r2, #0
 801264a:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801264c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012650:	2200      	movs	r2, #0
 8012652:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 8012654:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012658:	2200      	movs	r2, #0
 801265a:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801265c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012660:	2200      	movs	r2, #0
 8012662:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 8012664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012668:	2200      	movs	r2, #0
 801266a:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 801266c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012670:	2200      	movs	r2, #0
 8012672:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 8012674:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012678:	2200      	movs	r2, #0
 801267a:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 801267c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012680:	2200      	movs	r2, #0
 8012682:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 8012684:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012688:	2200      	movs	r2, #0
 801268a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801268c:	bf00      	nop
 801268e:	37a8      	adds	r7, #168	@ 0xa8
 8012690:	46bd      	mov	sp, r7
 8012692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012696 <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 8012696:	b580      	push	{r7, lr}
 8012698:	b088      	sub	sp, #32
 801269a:	af00      	add	r7, sp, #0
 801269c:	60f8      	str	r0, [r7, #12]
 801269e:	60b9      	str	r1, [r7, #8]
 80126a0:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d03d      	beq.n	801272a <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126b2:	f1c3 0310 	rsb	r3, r3, #16
 80126b6:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 80126b8:	69ba      	ldr	r2, [r7, #24]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	429a      	cmp	r2, r3
 80126be:	d901      	bls.n	80126c4 <poly1305_update+0x2e>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 80126c4:	2300      	movs	r3, #0
 80126c6:	61fb      	str	r3, [r7, #28]
 80126c8:	e00f      	b.n	80126ea <poly1305_update+0x54>
 80126ca:	68ba      	ldr	r2, [r7, #8]
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	441a      	add	r2, r3
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	440b      	add	r3, r1
 80126d8:	7811      	ldrb	r1, [r2, #0]
 80126da:	697a      	ldr	r2, [r7, #20]
 80126dc:	4413      	add	r3, r2
 80126de:	460a      	mov	r2, r1
 80126e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80126e4:	69fb      	ldr	r3, [r7, #28]
 80126e6:	3301      	adds	r3, #1
 80126e8:	61fb      	str	r3, [r7, #28]
 80126ea:	69fa      	ldr	r2, [r7, #28]
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d3eb      	bcc.n	80126ca <poly1305_update+0x34>
    bytes -= want;
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	607b      	str	r3, [r7, #4]
    m += want;
 80126fa:	68ba      	ldr	r2, [r7, #8]
 80126fc:	69bb      	ldr	r3, [r7, #24]
 80126fe:	4413      	add	r3, r2
 8012700:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	441a      	add	r2, r3
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012712:	2b0f      	cmp	r3, #15
 8012714:	d93e      	bls.n	8012794 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	333c      	adds	r3, #60	@ 0x3c
 801271a:	2210      	movs	r2, #16
 801271c:	4619      	mov	r1, r3
 801271e:	6978      	ldr	r0, [r7, #20]
 8012720:	f7fe fe5a 	bl	80113d8 <poly1305_blocks>
    st->leftover = 0;
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	2200      	movs	r2, #0
 8012728:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2b0f      	cmp	r3, #15
 801272e:	d910      	bls.n	8012752 <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f023 030f 	bic.w	r3, r3, #15
 8012736:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 8012738:	693a      	ldr	r2, [r7, #16]
 801273a:	68b9      	ldr	r1, [r7, #8]
 801273c:	6978      	ldr	r0, [r7, #20]
 801273e:	f7fe fe4b 	bl	80113d8 <poly1305_blocks>
    m += want;
 8012742:	68ba      	ldr	r2, [r7, #8]
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	4413      	add	r3, r2
 8012748:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	1ad3      	subs	r3, r2, r3
 8012750:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d01e      	beq.n	8012796 <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 8012758:	2300      	movs	r3, #0
 801275a:	61fb      	str	r3, [r7, #28]
 801275c:	e00f      	b.n	801277e <poly1305_update+0xe8>
 801275e:	68ba      	ldr	r2, [r7, #8]
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	441a      	add	r2, r3
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	440b      	add	r3, r1
 801276c:	7811      	ldrb	r1, [r2, #0]
 801276e:	697a      	ldr	r2, [r7, #20]
 8012770:	4413      	add	r3, r2
 8012772:	460a      	mov	r2, r1
 8012774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	3301      	adds	r3, #1
 801277c:	61fb      	str	r3, [r7, #28]
 801277e:	69fa      	ldr	r2, [r7, #28]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	429a      	cmp	r2, r3
 8012784:	d3eb      	bcc.n	801275e <poly1305_update+0xc8>
    st->leftover += bytes;
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	441a      	add	r2, r3
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	639a      	str	r2, [r3, #56]	@ 0x38
 8012792:	e000      	b.n	8012796 <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 8012794:	bf00      	nop
  }
}
 8012796:	3720      	adds	r7, #32
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	f003 030f 	and.w	r3, r3, #15
 80127ac:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d007      	beq.n	80127c4 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f1c3 0310 	rsb	r3, r3, #16
 80127ba:	461a      	mov	r2, r3
 80127bc:	4903      	ldr	r1, [pc, #12]	@ (80127cc <pad_if_needed+0x30>)
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f7ff ff69 	bl	8012696 <poly1305_update>
  }
}
 80127c4:	bf00      	nop
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	24002be0 	.word	0x24002be0

080127d0 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 80127dc:	783b      	ldrb	r3, [r7, #0]
 80127de:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 80127e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80127e4:	f04f 0200 	mov.w	r2, #0
 80127e8:	f04f 0300 	mov.w	r3, #0
 80127ec:	0a02      	lsrs	r2, r0, #8
 80127ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80127f2:	0a0b      	lsrs	r3, r1, #8
 80127f4:	b2d3      	uxtb	r3, r2
 80127f6:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 80127f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80127fc:	f04f 0200 	mov.w	r2, #0
 8012800:	f04f 0300 	mov.w	r3, #0
 8012804:	0c02      	lsrs	r2, r0, #16
 8012806:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801280a:	0c0b      	lsrs	r3, r1, #16
 801280c:	b2d3      	uxtb	r3, r2
 801280e:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 8012810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012814:	f04f 0200 	mov.w	r2, #0
 8012818:	f04f 0300 	mov.w	r3, #0
 801281c:	0e02      	lsrs	r2, r0, #24
 801281e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012822:	0e0b      	lsrs	r3, r1, #24
 8012824:	b2d3      	uxtb	r3, r2
 8012826:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 8012828:	e9d7 0100 	ldrd	r0, r1, [r7]
 801282c:	f04f 0200 	mov.w	r2, #0
 8012830:	f04f 0300 	mov.w	r3, #0
 8012834:	000a      	movs	r2, r1
 8012836:	2300      	movs	r3, #0
 8012838:	b2d3      	uxtb	r3, r2
 801283a:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801283c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012840:	f04f 0200 	mov.w	r2, #0
 8012844:	f04f 0300 	mov.w	r3, #0
 8012848:	0a0a      	lsrs	r2, r1, #8
 801284a:	2300      	movs	r3, #0
 801284c:	b2d3      	uxtb	r3, r2
 801284e:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 8012850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012854:	f04f 0200 	mov.w	r2, #0
 8012858:	f04f 0300 	mov.w	r3, #0
 801285c:	0c0a      	lsrs	r2, r1, #16
 801285e:	2300      	movs	r3, #0
 8012860:	b2d3      	uxtb	r3, r2
 8012862:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 8012864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012868:	f04f 0200 	mov.w	r2, #0
 801286c:	f04f 0300 	mov.w	r3, #0
 8012870:	0e0a      	lsrs	r2, r1, #24
 8012872:	2300      	movs	r3, #0
 8012874:	b2d3      	uxtb	r3, r2
 8012876:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 8012878:	f107 0310 	add.w	r3, r7, #16
 801287c:	2208      	movs	r2, #8
 801287e:	4619      	mov	r1, r3
 8012880:	68f8      	ldr	r0, [r7, #12]
 8012882:	f7ff ff08 	bl	8012696 <poly1305_update>
}
 8012886:	bf00      	nop
 8012888:	3718      	adds	r7, #24
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 801288e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012892:	b0b0      	sub	sp, #192	@ 0xc0
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	607a      	str	r2, [r7, #4]
 801289c:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 801289e:	2300      	movs	r3, #0
 80128a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80128a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80128a8:	2200      	movs	r2, #0
 80128aa:	601a      	str	r2, [r3, #0]
 80128ac:	605a      	str	r2, [r3, #4]
 80128ae:	609a      	str	r2, [r3, #8]
 80128b0:	60da      	str	r2, [r3, #12]
 80128b2:	611a      	str	r2, [r3, #16]
 80128b4:	615a      	str	r2, [r3, #20]
 80128b6:	619a      	str	r2, [r3, #24]
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 80128b8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80128bc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80128c0:	6839      	ldr	r1, [r7, #0]
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7fe fcaf 	bl	8011226 <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 80128c8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80128cc:	f107 0314 	add.w	r3, r7, #20
 80128d0:	4611      	mov	r1, r2
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7fe fd04 	bl	80112e0 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 80128d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d013      	beq.n	8012908 <poly1305_calculate_mac+0x7a>
 80128e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d00f      	beq.n	8012908 <poly1305_calculate_mac+0x7a>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 80128e8:	f107 0314 	add.w	r3, r7, #20
 80128ec:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80128f0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7ff fece 	bl	8012696 <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 80128fa:	f107 0314 	add.w	r3, r7, #20
 80128fe:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8012902:	4618      	mov	r0, r3
 8012904:	f7ff ff4a 	bl	801279c <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 8012908:	f107 0314 	add.w	r3, r7, #20
 801290c:	687a      	ldr	r2, [r7, #4]
 801290e:	68b9      	ldr	r1, [r7, #8]
 8012910:	4618      	mov	r0, r3
 8012912:	f7ff fec0 	bl	8012696 <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 8012916:	f107 0314 	add.w	r3, r7, #20
 801291a:	6879      	ldr	r1, [r7, #4]
 801291c:	4618      	mov	r0, r3
 801291e:	f7ff ff3d 	bl	801279c <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 8012922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012926:	2200      	movs	r2, #0
 8012928:	4698      	mov	r8, r3
 801292a:	4691      	mov	r9, r2
 801292c:	f107 0114 	add.w	r1, r7, #20
 8012930:	4642      	mov	r2, r8
 8012932:	464b      	mov	r3, r9
 8012934:	4608      	mov	r0, r1
 8012936:	f7ff ff4b 	bl	80127d0 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2200      	movs	r2, #0
 801293e:	461c      	mov	r4, r3
 8012940:	4615      	mov	r5, r2
 8012942:	f107 0114 	add.w	r1, r7, #20
 8012946:	4622      	mov	r2, r4
 8012948:	462b      	mov	r3, r5
 801294a:	4608      	mov	r0, r1
 801294c:	f7ff ff40 	bl	80127d0 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 8012950:	f107 0314 	add.w	r3, r7, #20
 8012954:	68f9      	ldr	r1, [r7, #12]
 8012956:	4618      	mov	r0, r3
 8012958:	f7ff fc41 	bl	80121de <poly1305_finish>
}
 801295c:	bf00      	nop
 801295e:	37c0      	adds	r7, #192	@ 0xc0
 8012960:	46bd      	mov	sp, r7
 8012962:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08012966 <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 8012966:	b580      	push	{r7, lr}
 8012968:	b08a      	sub	sp, #40	@ 0x28
 801296a:	af04      	add	r7, sp, #16
 801296c:	60f8      	str	r0, [r7, #12]
 801296e:	60b9      	str	r1, [r7, #8]
 8012970:	607a      	str	r2, [r7, #4]
 8012972:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 8012974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012976:	3310      	adds	r3, #16
 8012978:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801297a:	68fa      	ldr	r2, [r7, #12]
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	4413      	add	r3, r2
 8012980:	461a      	mov	r2, r3
 8012982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012984:	429a      	cmp	r2, r3
 8012986:	d909      	bls.n	801299c <mg_chacha20_poly1305_encrypt+0x36>
 8012988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801298a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801298c:	4413      	add	r3, r2
 801298e:	461a      	mov	r2, r3
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	429a      	cmp	r2, r3
 8012994:	d902      	bls.n	801299c <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 8012996:	f04f 33ff 	mov.w	r3, #4294967295
 801299a:	e018      	b.n	80129ce <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 801299c:	2301      	movs	r3, #1
 801299e:	9301      	str	r3, [sp, #4]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	9300      	str	r3, [sp, #0]
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f7fe fbc3 	bl	8011136 <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129b4:	18d0      	adds	r0, r2, r3
 80129b6:	6a3b      	ldr	r3, [r7, #32]
 80129b8:	9302      	str	r3, [sp, #8]
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	9301      	str	r3, [sp, #4]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129c6:	68f9      	ldr	r1, [r7, #12]
 80129c8:	f7ff ff61 	bl	801288e <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 80129cc:	697b      	ldr	r3, [r7, #20]
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3718      	adds	r7, #24
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 80129d6:	b580      	push	{r7, lr}
 80129d8:	b088      	sub	sp, #32
 80129da:	af02      	add	r7, sp, #8
 80129dc:	60f8      	str	r0, [r7, #12]
 80129de:	60b9      	str	r1, [r7, #8]
 80129e0:	607a      	str	r2, [r7, #4]
 80129e2:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 80129e4:	6a3b      	ldr	r3, [r7, #32]
 80129e6:	3b10      	subs	r3, #16
 80129e8:	617b      	str	r3, [r7, #20]
  if (OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 80129ea:	683a      	ldr	r2, [r7, #0]
 80129ec:	6a3b      	ldr	r3, [r7, #32]
 80129ee:	4413      	add	r3, r2
 80129f0:	461a      	mov	r2, r3
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d909      	bls.n	8012a0c <mg_chacha20_poly1305_decrypt+0x36>
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	4413      	add	r3, r2
 80129fe:	461a      	mov	r2, r3
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d902      	bls.n	8012a0c <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 8012a06:	f04f 33ff 	mov.w	r3, #4294967295
 8012a0a:	e00a      	b.n	8012a22 <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	9301      	str	r3, [sp, #4]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	9300      	str	r3, [sp, #0]
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	697a      	ldr	r2, [r7, #20]
 8012a18:	6839      	ldr	r1, [r7, #0]
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	f7fe fb8b 	bl	8011136 <chacha20_xor_stream>
  return actual_size;
 8012a20:	697b      	ldr	r3, [r7, #20]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}

08012a2a <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 8012a2a:	b480      	push	{r7}
 8012a2c:	b085      	sub	sp, #20
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
 8012a32:	460b      	mov	r3, r1
 8012a34:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8012a36:	2300      	movs	r3, #0
 8012a38:	73fb      	strb	r3, [r7, #15]
 8012a3a:	e00a      	b.n	8012a52 <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 8012a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	687a      	ldr	r2, [r7, #4]
 8012a44:	4413      	add	r3, r2
 8012a46:	2200      	movs	r2, #0
 8012a48:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8012a4a:	7bfb      	ldrb	r3, [r7, #15]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	73fb      	strb	r3, [r7, #15]
 8012a52:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	dbee      	blt.n	8012a3c <mg_uecc_vli_clear+0x12>
  }
}
 8012a5e:	bf00      	nop
 8012a60:	bf00      	nop
 8012a62:	3714      	adds	r7, #20
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr

08012a6c <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 8012a6c:	b480      	push	{r7}
 8012a6e:	b085      	sub	sp, #20
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	460b      	mov	r3, r1
 8012a76:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	72fb      	strb	r3, [r7, #11]
 8012a80:	e00c      	b.n	8012a9c <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 8012a82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012a86:	009b      	lsls	r3, r3, #2
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	68fa      	ldr	r2, [r7, #12]
 8012a90:	4313      	orrs	r3, r2
 8012a92:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 8012a94:	7afb      	ldrb	r3, [r7, #11]
 8012a96:	3301      	adds	r3, #1
 8012a98:	b2db      	uxtb	r3, r3
 8012a9a:	72fb      	strb	r3, [r7, #11]
 8012a9c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8012aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	dbec      	blt.n	8012a82 <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	bf0c      	ite	eq
 8012aae:	2301      	moveq	r3, #1
 8012ab0:	2300      	movne	r3, #0
 8012ab2:	b2db      	uxtb	r3, r3
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3714      	adds	r7, #20
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr

08012ac0 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 8012ac0:	b480      	push	{r7}
 8012ac2:	b083      	sub	sp, #12
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	460b      	mov	r3, r1
 8012aca:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 8012acc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ad0:	115b      	asrs	r3, r3, #5
 8012ad2:	b21b      	sxth	r3, r3
 8012ad4:	009b      	lsls	r3, r3, #2
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	4413      	add	r3, r2
 8012ada:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 8012adc:	887b      	ldrh	r3, [r7, #2]
 8012ade:	f003 031f 	and.w	r3, r3, #31
 8012ae2:	2101      	movs	r1, #1
 8012ae4:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 8012ae8:	4013      	ands	r3, r2
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	370c      	adds	r7, #12
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr

08012af6 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 8012af6:	b480      	push	{r7}
 8012af8:	b085      	sub	sp, #20
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	460b      	mov	r3, r1
 8012b00:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 8012b02:	78fb      	ldrb	r3, [r7, #3]
 8012b04:	3b01      	subs	r3, #1
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	73fb      	strb	r3, [r7, #15]
 8012b0a:	e003      	b.n	8012b14 <vli_numDigits+0x1e>
 8012b0c:	7bfb      	ldrb	r3, [r7, #15]
 8012b0e:	3b01      	subs	r3, #1
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	73fb      	strb	r3, [r7, #15]
 8012b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	db07      	blt.n	8012b2c <vli_numDigits+0x36>
 8012b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	4413      	add	r3, r2
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d0ef      	beq.n	8012b0c <vli_numDigits+0x16>
  }

  return (i + 1);
 8012b2c:	7bfb      	ldrb	r3, [r7, #15]
 8012b2e:	3301      	adds	r3, #1
 8012b30:	b2db      	uxtb	r3, r3
 8012b32:	b25b      	sxtb	r3, r3
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3714      	adds	r7, #20
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b086      	sub	sp, #24
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	460b      	mov	r3, r1
 8012b4a:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 8012b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b50:	4619      	mov	r1, r3
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f7ff ffcf 	bl	8012af6 <vli_numDigits>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 8012b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d101      	bne.n	8012b68 <mg_uecc_vli_numBits+0x28>
    return 0;
 8012b64:	2300      	movs	r3, #0
 8012b66:	e01f      	b.n	8012ba8 <mg_uecc_vli_numBits+0x68>
  }

  digit = vli[num_digits - 1];
 8012b68:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012b6c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012b70:	4413      	add	r3, r2
 8012b72:	009b      	lsls	r3, r3, #2
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	4413      	add	r3, r2
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	617b      	str	r3, [r7, #20]
 8012b80:	e005      	b.n	8012b8e <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	085b      	lsrs	r3, r3, #1
 8012b86:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 8012b88:	697b      	ldr	r3, [r7, #20]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	617b      	str	r3, [r7, #20]
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1f6      	bne.n	8012b82 <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 8012b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b98:	3b01      	subs	r3, #1
 8012b9a:	015b      	lsls	r3, r3, #5
 8012b9c:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 8012ba2:	4413      	add	r3, r2
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	b21b      	sxth	r3, r3
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3718      	adds	r7, #24
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 8012bb0:	b480      	push	{r7}
 8012bb2:	b087      	sub	sp, #28
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	60b9      	str	r1, [r7, #8]
 8012bba:	4613      	mov	r3, r2
 8012bbc:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	75fb      	strb	r3, [r7, #23]
 8012bc2:	e00f      	b.n	8012be4 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 8012bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012bc8:	009b      	lsls	r3, r3, #2
 8012bca:	68ba      	ldr	r2, [r7, #8]
 8012bcc:	441a      	add	r2, r3
 8012bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	68f9      	ldr	r1, [r7, #12]
 8012bd6:	440b      	add	r3, r1
 8012bd8:	6812      	ldr	r2, [r2, #0]
 8012bda:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8012bdc:	7dfb      	ldrb	r3, [r7, #23]
 8012bde:	3301      	adds	r3, #1
 8012be0:	b2db      	uxtb	r3, r3
 8012be2:	75fb      	strb	r3, [r7, #23]
 8012be4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	dbe9      	blt.n	8012bc4 <mg_uecc_vli_set+0x14>
  }
}
 8012bf0:	bf00      	nop
 8012bf2:	bf00      	nop
 8012bf4:	371c      	adds	r7, #28
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr

08012bfe <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 8012bfe:	b480      	push	{r7}
 8012c00:	b087      	sub	sp, #28
 8012c02:	af00      	add	r7, sp, #0
 8012c04:	60f8      	str	r0, [r7, #12]
 8012c06:	60b9      	str	r1, [r7, #8]
 8012c08:	4613      	mov	r3, r2
 8012c0a:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 8012c0c:	79fb      	ldrb	r3, [r7, #7]
 8012c0e:	3b01      	subs	r3, #1
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	75fb      	strb	r3, [r7, #23]
 8012c14:	e024      	b.n	8012c60 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 8012c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	68fa      	ldr	r2, [r7, #12]
 8012c1e:	4413      	add	r3, r2
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	68b9      	ldr	r1, [r7, #8]
 8012c2a:	440b      	add	r3, r1
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d901      	bls.n	8012c36 <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 8012c32:	2301      	movs	r3, #1
 8012c34:	e019      	b.n	8012c6a <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 8012c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	68fa      	ldr	r2, [r7, #12]
 8012c3e:	4413      	add	r3, r2
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	68b9      	ldr	r1, [r7, #8]
 8012c4a:	440b      	add	r3, r1
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d202      	bcs.n	8012c58 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 8012c52:	f04f 33ff 	mov.w	r3, #4294967295
 8012c56:	e008      	b.n	8012c6a <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
 8012c5a:	3b01      	subs	r3, #1
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	75fb      	strb	r3, [r7, #23]
 8012c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	dad6      	bge.n	8012c16 <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 8012c68:	2300      	movs	r3, #0
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	371c      	adds	r7, #28
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c74:	4770      	bx	lr

08012c76 <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 8012c76:	b480      	push	{r7}
 8012c78:	b087      	sub	sp, #28
 8012c7a:	af00      	add	r7, sp, #0
 8012c7c:	60f8      	str	r0, [r7, #12]
 8012c7e:	60b9      	str	r1, [r7, #8]
 8012c80:	4613      	mov	r3, r2
 8012c82:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 8012c84:	2300      	movs	r3, #0
 8012c86:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 8012c88:	79fb      	ldrb	r3, [r7, #7]
 8012c8a:	3b01      	subs	r3, #1
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	74fb      	strb	r3, [r7, #19]
 8012c90:	e013      	b.n	8012cba <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 8012c92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c96:	009b      	lsls	r3, r3, #2
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	4413      	add	r3, r2
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	68b9      	ldr	r1, [r7, #8]
 8012ca6:	440b      	add	r3, r1
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	4053      	eors	r3, r2
 8012cac:	697a      	ldr	r2, [r7, #20]
 8012cae:	4313      	orrs	r3, r2
 8012cb0:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 8012cb2:	7cfb      	ldrb	r3, [r7, #19]
 8012cb4:	3b01      	subs	r3, #1
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	74fb      	strb	r3, [r7, #19]
 8012cba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	dae7      	bge.n	8012c92 <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	bf0c      	ite	eq
 8012cc8:	2301      	moveq	r3, #1
 8012cca:	2300      	movne	r3, #0
 8012ccc:	b2db      	uxtb	r3, r3
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	371c      	adds	r7, #28
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr

08012cda <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 8012cda:	b580      	push	{r7, lr}
 8012cdc:	b08e      	sub	sp, #56	@ 0x38
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	60f8      	str	r0, [r7, #12]
 8012ce2:	60b9      	str	r1, [r7, #8]
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 8012ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cec:	f107 0010 	add.w	r0, r7, #16
 8012cf0:	68ba      	ldr	r2, [r7, #8]
 8012cf2:	68f9      	ldr	r1, [r7, #12]
 8012cf4:	f000 f896 	bl	8012e24 <mg_uecc_vli_sub>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	bf14      	ite	ne
 8012cfe:	2301      	movne	r3, #1
 8012d00:	2300      	moveq	r3, #0
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 8012d06:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8012d0a:	f107 0310 	add.w	r3, r7, #16
 8012d0e:	4611      	mov	r1, r2
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7ff feab 	bl	8012a6c <mg_uecc_vli_isZero>
 8012d16:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 8012d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	bf0c      	ite	eq
 8012d1e:	2301      	moveq	r3, #1
 8012d20:	2300      	movne	r3, #0
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	461a      	mov	r2, r3
 8012d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	005b      	lsls	r3, r3, #1
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	1ad3      	subs	r3, r2, r3
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	b25b      	sxtb	r3, r3
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3738      	adds	r7, #56	@ 0x38
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 8012d3c:	b480      	push	{r7}
 8012d3e:	b087      	sub	sp, #28
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	460b      	mov	r3, r1
 8012d46:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	617b      	str	r3, [r7, #20]

  vli += num_words;
 8012d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	4413      	add	r3, r2
 8012d5a:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 8012d5c:	e00b      	b.n	8012d76 <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	085a      	lsrs	r2, r3, #1
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	431a      	orrs	r2, r3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	07db      	lsls	r3, r3, #31
 8012d74:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	1f1a      	subs	r2, r3, #4
 8012d7a:	607a      	str	r2, [r7, #4]
 8012d7c:	693a      	ldr	r2, [r7, #16]
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d3ed      	bcc.n	8012d5e <mg_uecc_vli_rshift1+0x22>
  }
}
 8012d82:	bf00      	nop
 8012d84:	bf00      	nop
 8012d86:	371c      	adds	r7, #28
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr

08012d90 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 8012d90:	b480      	push	{r7}
 8012d92:	b089      	sub	sp, #36	@ 0x24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
 8012d9c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8012da2:	2300      	movs	r3, #0
 8012da4:	76fb      	strb	r3, [r7, #27]
 8012da6:	e030      	b.n	8012e0a <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 8012da8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	68ba      	ldr	r2, [r7, #8]
 8012db0:	4413      	add	r3, r2
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	6879      	ldr	r1, [r7, #4]
 8012dbc:	440b      	add	r3, r1
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	69fa      	ldr	r2, [r7, #28]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 8012dc8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	68ba      	ldr	r2, [r7, #8]
 8012dd0:	4413      	add	r3, r2
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	697a      	ldr	r2, [r7, #20]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d00c      	beq.n	8012df4 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 8012dda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012dde:	009b      	lsls	r3, r3, #2
 8012de0:	68ba      	ldr	r2, [r7, #8]
 8012de2:	4413      	add	r3, r2
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	697a      	ldr	r2, [r7, #20]
 8012de8:	429a      	cmp	r2, r3
 8012dea:	bf34      	ite	cc
 8012dec:	2301      	movcc	r3, #1
 8012dee:	2300      	movcs	r3, #0
 8012df0:	b2db      	uxtb	r3, r3
 8012df2:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 8012df4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012df8:	009b      	lsls	r3, r3, #2
 8012dfa:	68fa      	ldr	r2, [r7, #12]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	697a      	ldr	r2, [r7, #20]
 8012e00:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8012e02:	7efb      	ldrb	r3, [r7, #27]
 8012e04:	3301      	adds	r3, #1
 8012e06:	b2db      	uxtb	r3, r3
 8012e08:	76fb      	strb	r3, [r7, #27]
 8012e0a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8012e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	dbc8      	blt.n	8012da8 <mg_uecc_vli_add+0x18>
  }
  return carry;
 8012e16:	69fb      	ldr	r3, [r7, #28]
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3724      	adds	r7, #36	@ 0x24
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 8012e24:	b480      	push	{r7}
 8012e26:	b089      	sub	sp, #36	@ 0x24
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	607a      	str	r2, [r7, #4]
 8012e30:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 8012e32:	2300      	movs	r3, #0
 8012e34:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8012e36:	2300      	movs	r3, #0
 8012e38:	76fb      	strb	r3, [r7, #27]
 8012e3a:	e030      	b.n	8012e9e <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 8012e3c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	4413      	add	r3, r2
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012e4c:	009b      	lsls	r3, r3, #2
 8012e4e:	6879      	ldr	r1, [r7, #4]
 8012e50:	440b      	add	r3, r1
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	1ad2      	subs	r2, r2, r3
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	1ad3      	subs	r3, r2, r3
 8012e5a:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 8012e5c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012e60:	009b      	lsls	r3, r3, #2
 8012e62:	68ba      	ldr	r2, [r7, #8]
 8012e64:	4413      	add	r3, r2
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	697a      	ldr	r2, [r7, #20]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d00c      	beq.n	8012e88 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 8012e6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012e72:	009b      	lsls	r3, r3, #2
 8012e74:	68ba      	ldr	r2, [r7, #8]
 8012e76:	4413      	add	r3, r2
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	697a      	ldr	r2, [r7, #20]
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	bf8c      	ite	hi
 8012e80:	2301      	movhi	r3, #1
 8012e82:	2300      	movls	r3, #0
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 8012e88:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012e8c:	009b      	lsls	r3, r3, #2
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	4413      	add	r3, r2
 8012e92:	697a      	ldr	r2, [r7, #20]
 8012e94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8012e96:	7efb      	ldrb	r3, [r7, #27]
 8012e98:	3301      	adds	r3, #1
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	76fb      	strb	r3, [r7, #27]
 8012e9e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8012ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	dbc8      	blt.n	8012e3c <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 8012eaa:	69fb      	ldr	r3, [r7, #28]
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3724      	adds	r7, #36	@ 0x24
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb6:	4770      	bx	lr

08012eb8 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 8012eb8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012ebc:	b091      	sub	sp, #68	@ 0x44
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8012ec2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012ec4:	627a      	str	r2, [r7, #36]	@ 0x24
 8012ec6:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 8012ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eca:	2200      	movs	r2, #0
 8012ecc:	4698      	mov	r8, r3
 8012ece:	4691      	mov	r9, r2
 8012ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	469a      	mov	sl, r3
 8012ed6:	4693      	mov	fp, r2
 8012ed8:	fb0a f209 	mul.w	r2, sl, r9
 8012edc:	fb08 f30b 	mul.w	r3, r8, fp
 8012ee0:	4413      	add	r3, r2
 8012ee2:	fba8 450a 	umull	r4, r5, r8, sl
 8012ee6:	442b      	add	r3, r5
 8012ee8:	461d      	mov	r5, r3
 8012eea:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 8012eee:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 8012ef2:	6a3b      	ldr	r3, [r7, #32]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	61bb      	str	r3, [r7, #24]
 8012efa:	61fa      	str	r2, [r7, #28]
 8012efc:	f04f 0200 	mov.w	r2, #0
 8012f00:	f04f 0300 	mov.w	r3, #0
 8012f04:	69b9      	ldr	r1, [r7, #24]
 8012f06:	000b      	movs	r3, r1
 8012f08:	2200      	movs	r2, #0
 8012f0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012f0c:	6809      	ldr	r1, [r1, #0]
 8012f0e:	2000      	movs	r0, #0
 8012f10:	6139      	str	r1, [r7, #16]
 8012f12:	6178      	str	r0, [r7, #20]
 8012f14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8012f18:	4621      	mov	r1, r4
 8012f1a:	4311      	orrs	r1, r2
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	4629      	mov	r1, r5
 8012f20:	4319      	orrs	r1, r3
 8012f22:	60f9      	str	r1, [r7, #12]
 8012f24:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8012f28:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 8012f2c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8012f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012f34:	1884      	adds	r4, r0, r2
 8012f36:	603c      	str	r4, [r7, #0]
 8012f38:	eb41 0303 	adc.w	r3, r1, r3
 8012f3c:	607b      	str	r3, [r7, #4]
 8012f3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012f42:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 8012f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f48:	681c      	ldr	r4, [r3, #0]
 8012f4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8012f4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012f52:	4290      	cmp	r0, r2
 8012f54:	eb71 0303 	sbcs.w	r3, r1, r3
 8012f58:	bf34      	ite	cc
 8012f5a:	2301      	movcc	r3, #1
 8012f5c:	2300      	movcs	r3, #0
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	18e2      	adds	r2, r4, r3
 8012f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f64:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 8012f66:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8012f6a:	f04f 0200 	mov.w	r2, #0
 8012f6e:	f04f 0300 	mov.w	r3, #0
 8012f72:	000a      	movs	r2, r1
 8012f74:	2300      	movs	r3, #0
 8012f76:	6a3b      	ldr	r3, [r7, #32]
 8012f78:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 8012f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f7e:	601a      	str	r2, [r3, #0]
#endif
}
 8012f80:	bf00      	nop
 8012f82:	3744      	adds	r7, #68	@ 0x44
 8012f84:	46bd      	mov	sp, r7
 8012f86:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012f8a:	4770      	bx	lr

08012f8c <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 8012f8c:	b590      	push	{r4, r7, lr}
 8012f8e:	b08b      	sub	sp, #44	@ 0x2c
 8012f90:	af02      	add	r7, sp, #8
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
 8012f98:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	77bb      	strb	r3, [r7, #30]
 8012faa:	e036      	b.n	801301a <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 8012fac:	2300      	movs	r3, #0
 8012fae:	77fb      	strb	r3, [r7, #31]
 8012fb0:	e01c      	b.n	8012fec <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 8012fb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012fb6:	009b      	lsls	r3, r3, #2
 8012fb8:	68ba      	ldr	r2, [r7, #8]
 8012fba:	4413      	add	r3, r2
 8012fbc:	6818      	ldr	r0, [r3, #0]
 8012fbe:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8012fc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012fc6:	1ad3      	subs	r3, r2, r3
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	4413      	add	r3, r2
 8012fce:	6819      	ldr	r1, [r3, #0]
 8012fd0:	f107 0414 	add.w	r4, r7, #20
 8012fd4:	f107 0218 	add.w	r2, r7, #24
 8012fd8:	f107 0310 	add.w	r3, r7, #16
 8012fdc:	9300      	str	r3, [sp, #0]
 8012fde:	4623      	mov	r3, r4
 8012fe0:	f7ff ff6a 	bl	8012eb8 <muladd>
    for (i = 0; i <= k; ++i) {
 8012fe4:	7ffb      	ldrb	r3, [r7, #31]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	77fb      	strb	r3, [r7, #31]
 8012fec:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8012ff0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	dddc      	ble.n	8012fb2 <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 8012ff8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012ffc:	009b      	lsls	r3, r3, #2
 8012ffe:	68fa      	ldr	r2, [r7, #12]
 8013000:	4413      	add	r3, r2
 8013002:	69ba      	ldr	r2, [r7, #24]
 8013004:	601a      	str	r2, [r3, #0]
    r0 = r1;
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801300e:	2300      	movs	r3, #0
 8013010:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 8013012:	7fbb      	ldrb	r3, [r7, #30]
 8013014:	3301      	adds	r3, #1
 8013016:	b2db      	uxtb	r3, r3
 8013018:	77bb      	strb	r3, [r7, #30]
 801301a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801301e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013022:	429a      	cmp	r2, r3
 8013024:	dbc2      	blt.n	8012fac <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 8013026:	78fb      	ldrb	r3, [r7, #3]
 8013028:	77bb      	strb	r3, [r7, #30]
 801302a:	e03b      	b.n	80130a4 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801302c:	7fba      	ldrb	r2, [r7, #30]
 801302e:	78fb      	ldrb	r3, [r7, #3]
 8013030:	1ad3      	subs	r3, r2, r3
 8013032:	b2db      	uxtb	r3, r3
 8013034:	3301      	adds	r3, #1
 8013036:	b2db      	uxtb	r3, r3
 8013038:	77fb      	strb	r3, [r7, #31]
 801303a:	e01c      	b.n	8013076 <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801303c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013040:	009b      	lsls	r3, r3, #2
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	4413      	add	r3, r2
 8013046:	6818      	ldr	r0, [r3, #0]
 8013048:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801304c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	009b      	lsls	r3, r3, #2
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	4413      	add	r3, r2
 8013058:	6819      	ldr	r1, [r3, #0]
 801305a:	f107 0414 	add.w	r4, r7, #20
 801305e:	f107 0218 	add.w	r2, r7, #24
 8013062:	f107 0310 	add.w	r3, r7, #16
 8013066:	9300      	str	r3, [sp, #0]
 8013068:	4623      	mov	r3, r4
 801306a:	f7ff ff25 	bl	8012eb8 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801306e:	7ffb      	ldrb	r3, [r7, #31]
 8013070:	3301      	adds	r3, #1
 8013072:	b2db      	uxtb	r3, r3
 8013074:	77fb      	strb	r3, [r7, #31]
 8013076:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801307a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801307e:	429a      	cmp	r2, r3
 8013080:	dbdc      	blt.n	801303c <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 8013082:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	68fa      	ldr	r2, [r7, #12]
 801308a:	4413      	add	r3, r2
 801308c:	69ba      	ldr	r2, [r7, #24]
 801308e:	601a      	str	r2, [r3, #0]
    r0 = r1;
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	617b      	str	r3, [r7, #20]
    r2 = 0;
 8013098:	2300      	movs	r3, #0
 801309a:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801309c:	7fbb      	ldrb	r3, [r7, #30]
 801309e:	3301      	adds	r3, #1
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	77bb      	strb	r3, [r7, #30]
 80130a4:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80130a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80130ac:	005b      	lsls	r3, r3, #1
 80130ae:	3b01      	subs	r3, #1
 80130b0:	429a      	cmp	r2, r3
 80130b2:	dbbb      	blt.n	801302c <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 80130b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80130b8:	00db      	lsls	r3, r3, #3
 80130ba:	3b04      	subs	r3, #4
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	4413      	add	r3, r2
 80130c0:	69ba      	ldr	r2, [r7, #24]
 80130c2:	601a      	str	r2, [r3, #0]
}
 80130c4:	bf00      	nop
 80130c6:	3724      	adds	r7, #36	@ 0x24
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd90      	pop	{r4, r7, pc}

080130cc <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b086      	sub	sp, #24
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
 80130d8:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 80130da:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	68b9      	ldr	r1, [r7, #8]
 80130e2:	68f8      	ldr	r0, [r7, #12]
 80130e4:	f7ff fe54 	bl	8012d90 <mg_uecc_vli_add>
 80130e8:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d109      	bne.n	8013104 <mg_uecc_vli_modAdd+0x38>
 80130f0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80130f4:	461a      	mov	r2, r3
 80130f6:	68f9      	ldr	r1, [r7, #12]
 80130f8:	6838      	ldr	r0, [r7, #0]
 80130fa:	f7ff fd80 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b01      	cmp	r3, #1
 8013102:	d006      	beq.n	8013112 <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 8013104:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8013108:	683a      	ldr	r2, [r7, #0]
 801310a:	68f9      	ldr	r1, [r7, #12]
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f7ff fe89 	bl	8012e24 <mg_uecc_vli_sub>
  }
}
 8013112:	bf00      	nop
 8013114:	3718      	adds	r7, #24
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801311a:	b580      	push	{r7, lr}
 801311c:	b086      	sub	sp, #24
 801311e:	af00      	add	r7, sp, #0
 8013120:	60f8      	str	r0, [r7, #12]
 8013122:	60b9      	str	r1, [r7, #8]
 8013124:	607a      	str	r2, [r7, #4]
 8013126:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 8013128:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	68b9      	ldr	r1, [r7, #8]
 8013130:	68f8      	ldr	r0, [r7, #12]
 8013132:	f7ff fe77 	bl	8012e24 <mg_uecc_vli_sub>
 8013136:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d006      	beq.n	801314c <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 801313e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8013142:	683a      	ldr	r2, [r7, #0]
 8013144:	68f9      	ldr	r1, [r7, #12]
 8013146:	68f8      	ldr	r0, [r7, #12]
 8013148:	f7ff fe22 	bl	8012d90 <mg_uecc_vli_add>
  }
}
 801314c:	bf00      	nop
 801314e:	3718      	adds	r7, #24
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 8013154:	b590      	push	{r4, r7, lr}
 8013156:	b0ad      	sub	sp, #180	@ 0xb4
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 8013162:	f107 0318 	add.w	r3, r7, #24
 8013166:	613b      	str	r3, [r7, #16]
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801316c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013170:	b29b      	uxth	r3, r3
 8013172:	019b      	lsls	r3, r3, #6
 8013174:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 8013176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801317a:	4619      	mov	r1, r3
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f7ff fcdf 	bl	8012b40 <mg_uecc_vli_numBits>
 8013182:	4603      	mov	r3, r0
 8013184:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 8013186:	1ae3      	subs	r3, r4, r3
 8013188:	b29b      	uxth	r3, r3
 801318a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 801318e:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8013192:	2b00      	cmp	r3, #0
 8013194:	da00      	bge.n	8013198 <mg_uecc_vli_mmod+0x44>
 8013196:	331f      	adds	r3, #31
 8013198:	115b      	asrs	r3, r3, #5
 801319a:	b21b      	sxth	r3, r3
 801319c:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 80131a0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80131a4:	425a      	negs	r2, r3
 80131a6:	f003 031f 	and.w	r3, r3, #31
 80131aa:	f002 021f 	and.w	r2, r2, #31
 80131ae:	bf58      	it	pl
 80131b0:	4253      	negpl	r3, r2
 80131b2:	b21b      	sxth	r3, r3
 80131b4:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 80131b8:	2300      	movs	r3, #0
 80131ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 80131be:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 80131c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80131c6:	4611      	mov	r1, r2
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff fc2e 	bl	8012a2a <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 80131ce:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	dd34      	ble.n	8013240 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 80131d6:	2300      	movs	r3, #0
 80131d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80131dc:	e029      	b.n	8013232 <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 80131de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80131e2:	009b      	lsls	r3, r3, #2
 80131e4:	687a      	ldr	r2, [r7, #4]
 80131e6:	4413      	add	r3, r2
 80131e8:	681a      	ldr	r2, [r3, #0]
 80131ea:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 80131ee:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 80131f2:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 80131f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80131fa:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 80131fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8013200:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	33b0      	adds	r3, #176	@ 0xb0
 8013206:	443b      	add	r3, r7
 8013208:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 801320c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013210:	009b      	lsls	r3, r3, #2
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	4413      	add	r3, r2
 8013216:	681a      	ldr	r2, [r3, #0]
 8013218:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801321c:	f1c3 0320 	rsb	r3, r3, #32
 8013220:	fa22 f303 	lsr.w	r3, r2, r3
 8013224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 8013228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801322c:	3301      	adds	r3, #1
 801322e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013236:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801323a:	429a      	cmp	r2, r3
 801323c:	d3cf      	bcc.n	80131de <mg_uecc_vli_mmod+0x8a>
 801323e:	e00b      	b.n	8013258 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 8013240:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801324a:	4413      	add	r3, r2
 801324c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8013250:	6879      	ldr	r1, [r7, #4]
 8013252:	4618      	mov	r0, r3
 8013254:	f7ff fcac 	bl	8012bb0 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 8013258:	2301      	movs	r3, #1
 801325a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801325e:	e09f      	b.n	80133a0 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 8013260:	2300      	movs	r3, #0
 8013262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 8013266:	2300      	movs	r3, #0
 8013268:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801326c:	e053      	b.n	8013316 <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 801326e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013272:	009b      	lsls	r3, r3, #2
 8013274:	33b0      	adds	r3, #176	@ 0xb0
 8013276:	443b      	add	r3, r7
 8013278:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801327c:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	4413      	add	r3, r2
 8013284:	681a      	ldr	r2, [r3, #0]
 8013286:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	33b0      	adds	r3, #176	@ 0xb0
 801328e:	443b      	add	r3, r7
 8013290:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8013294:	1ad2      	subs	r2, r2, r3
 8013296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801329a:	1ad3      	subs	r3, r2, r3
 801329c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 80132a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	33b0      	adds	r3, #176	@ 0xb0
 80132a8:	443b      	add	r3, r7
 80132aa:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80132ae:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80132b2:	009b      	lsls	r3, r3, #2
 80132b4:	4413      	add	r3, r2
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80132bc:	429a      	cmp	r2, r3
 80132be:	d014      	beq.n	80132ea <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 80132c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80132c4:	009b      	lsls	r3, r3, #2
 80132c6:	33b0      	adds	r3, #176	@ 0xb0
 80132c8:	443b      	add	r3, r7
 80132ca:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80132ce:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	4413      	add	r3, r2
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80132dc:	429a      	cmp	r2, r3
 80132de:	bf8c      	ite	hi
 80132e0:	2301      	movhi	r3, #1
 80132e2:	2300      	movls	r3, #0
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 80132ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80132ee:	f1c3 0301 	rsb	r3, r3, #1
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	33b0      	adds	r3, #176	@ 0xb0
 80132f6:	443b      	add	r3, r7
 80132f8:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80132fc:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8013300:	009b      	lsls	r3, r3, #2
 8013302:	4413      	add	r3, r2
 8013304:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013308:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 801330a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801330e:	3301      	adds	r3, #1
 8013310:	b2db      	uxtb	r3, r3
 8013312:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8013316:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 801331a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801331e:	005b      	lsls	r3, r3, #1
 8013320:	429a      	cmp	r2, r3
 8013322:	dba4      	blt.n	801326e <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8013324:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801332c:	429a      	cmp	r2, r3
 801332e:	bf0c      	ite	eq
 8013330:	2301      	moveq	r3, #1
 8013332:	2300      	movne	r3, #0
 8013334:	b2db      	uxtb	r3, r3
 8013336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 801333a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801333e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8013342:	4611      	mov	r1, r2
 8013344:	4618      	mov	r0, r3
 8013346:	f7ff fcf9 	bl	8012d3c <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801334a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801334e:	3b01      	subs	r3, #1
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	33b0      	adds	r3, #176	@ 0xb0
 8013354:	443b      	add	r3, r7
 8013356:	f853 1c58 	ldr.w	r1, [r3, #-88]
 801335a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	33b0      	adds	r3, #176	@ 0xb0
 8013362:	443b      	add	r3, r7
 8013364:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 8013368:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801336a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801336e:	3b01      	subs	r3, #1
 8013370:	430a      	orrs	r2, r1
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	33b0      	adds	r3, #176	@ 0xb0
 8013376:	443b      	add	r3, r7
 8013378:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 801337c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8013386:	4413      	add	r3, r2
 8013388:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801338c:	4611      	mov	r1, r2
 801338e:	4618      	mov	r0, r3
 8013390:	f7ff fcd4 	bl	8012d3c <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 8013394:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8013398:	3b01      	subs	r3, #1
 801339a:	b29b      	uxth	r3, r3
 801339c:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 80133a0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f6bf af5b 	bge.w	8013260 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 80133aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80133ae:	009b      	lsls	r3, r3, #2
 80133b0:	33b0      	adds	r3, #176	@ 0xb0
 80133b2:	443b      	add	r3, r7
 80133b4:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80133b8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80133bc:	4619      	mov	r1, r3
 80133be:	68f8      	ldr	r0, [r7, #12]
 80133c0:	f7ff fbf6 	bl	8012bb0 <mg_uecc_vli_set>
}
 80133c4:	bf00      	nop
 80133c6:	37b4      	adds	r7, #180	@ 0xb4
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd90      	pop	{r4, r7, pc}

080133cc <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b094      	sub	sp, #80	@ 0x50
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	607a      	str	r2, [r7, #4]
 80133d8:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 80133da:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80133de:	f107 0010 	add.w	r0, r7, #16
 80133e2:	687a      	ldr	r2, [r7, #4]
 80133e4:	68b9      	ldr	r1, [r7, #8]
 80133e6:	f7ff fdd1 	bl	8012f8c <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 80133ea:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80133ee:	f107 0110 	add.w	r1, r7, #16
 80133f2:	683a      	ldr	r2, [r7, #0]
 80133f4:	68f8      	ldr	r0, [r7, #12]
 80133f6:	f7ff fead 	bl	8013154 <mg_uecc_vli_mmod>
}
 80133fa:	bf00      	nop
 80133fc:	3750      	adds	r7, #80	@ 0x50
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}

08013402 <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 8013402:	b580      	push	{r7, lr}
 8013404:	b094      	sub	sp, #80	@ 0x50
 8013406:	af00      	add	r7, sp, #0
 8013408:	60f8      	str	r0, [r7, #12]
 801340a:	60b9      	str	r1, [r7, #8]
 801340c:	607a      	str	r2, [r7, #4]
 801340e:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	f993 3000 	ldrsb.w	r3, [r3]
 8013416:	f107 0010 	add.w	r0, r7, #16
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	68b9      	ldr	r1, [r7, #8]
 801341e:	f7ff fdb5 	bl	8012f8c <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013428:	f107 0210 	add.w	r2, r7, #16
 801342c:	4611      	mov	r1, r2
 801342e:	68f8      	ldr	r0, [r7, #12]
 8013430:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 8013432:	bf00      	nop
 8013434:	3750      	adds	r7, #80	@ 0x50
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}

0801343a <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 801343a:	b580      	push	{r7, lr}
 801343c:	b084      	sub	sp, #16
 801343e:	af00      	add	r7, sp, #0
 8013440:	60f8      	str	r0, [r7, #12]
 8013442:	60b9      	str	r1, [r7, #8]
 8013444:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	68ba      	ldr	r2, [r7, #8]
 801344a:	68b9      	ldr	r1, [r7, #8]
 801344c:	68f8      	ldr	r0, [r7, #12]
 801344e:	f7ff ffd8 	bl	8013402 <mg_uecc_vli_modMult_fast>
}
 8013452:	bf00      	nop
 8013454:	3710      	adds	r7, #16
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}

0801345a <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 801345a:	b580      	push	{r7, lr}
 801345c:	b086      	sub	sp, #24
 801345e:	af00      	add	r7, sp, #0
 8013460:	60f8      	str	r0, [r7, #12]
 8013462:	60b9      	str	r1, [r7, #8]
 8013464:	4613      	mov	r3, r2
 8013466:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 8013468:	2300      	movs	r3, #0
 801346a:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f003 0301 	and.w	r3, r3, #1
 8013474:	2b00      	cmp	r3, #0
 8013476:	d007      	beq.n	8013488 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 8013478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	68f9      	ldr	r1, [r7, #12]
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f7ff fc85 	bl	8012d90 <mg_uecc_vli_add>
 8013486:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 8013488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801348c:	4619      	mov	r1, r3
 801348e:	68f8      	ldr	r0, [r7, #12]
 8013490:	f7ff fc54 	bl	8012d3c <mg_uecc_vli_rshift1>
  if (carry) {
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d013      	beq.n	80134c2 <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 801349a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801349e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80134a2:	4413      	add	r3, r2
 80134a4:	009b      	lsls	r3, r3, #2
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	4413      	add	r3, r2
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80134b0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80134b4:	440b      	add	r3, r1
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	68f9      	ldr	r1, [r7, #12]
 80134ba:	440b      	add	r3, r1
 80134bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80134c0:	601a      	str	r2, [r3, #0]
  }
}
 80134c2:	bf00      	nop
 80134c4:	3718      	adds	r7, #24
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}

080134ca <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 80134ca:	b580      	push	{r7, lr}
 80134cc:	b0a6      	sub	sp, #152	@ 0x98
 80134ce:	af00      	add	r7, sp, #0
 80134d0:	60f8      	str	r0, [r7, #12]
 80134d2:	60b9      	str	r1, [r7, #8]
 80134d4:	607a      	str	r2, [r7, #4]
 80134d6:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 80134d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80134dc:	4619      	mov	r1, r3
 80134de:	68b8      	ldr	r0, [r7, #8]
 80134e0:	f7ff fac4 	bl	8012a6c <mg_uecc_vli_isZero>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d006      	beq.n	80134f8 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 80134ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80134ee:	4619      	mov	r1, r3
 80134f0:	68f8      	ldr	r0, [r7, #12]
 80134f2:	f7ff fa9a 	bl	8012a2a <mg_uecc_vli_clear>
 80134f6:	e0de      	b.n	80136b6 <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 80134f8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80134fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013500:	68b9      	ldr	r1, [r7, #8]
 8013502:	4618      	mov	r0, r3
 8013504:	f7ff fb54 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 8013508:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801350c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013510:	6879      	ldr	r1, [r7, #4]
 8013512:	4618      	mov	r0, r3
 8013514:	f7ff fb4c 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 8013518:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801351c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013520:	4611      	mov	r1, r2
 8013522:	4618      	mov	r0, r3
 8013524:	f7ff fa81 	bl	8012a2a <mg_uecc_vli_clear>
  u[0] = 1;
 8013528:	2301      	movs	r3, #1
 801352a:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 801352c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8013530:	f107 0314 	add.w	r3, r7, #20
 8013534:	4611      	mov	r1, r2
 8013536:	4618      	mov	r0, r3
 8013538:	f7ff fa77 	bl	8012a2a <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801353c:	e0a2      	b.n	8013684 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 801353e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013540:	f003 0301 	and.w	r3, r3, #1
 8013544:	2b00      	cmp	r3, #0
 8013546:	d110      	bne.n	801356a <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 8013548:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801354c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013550:	4611      	mov	r1, r2
 8013552:	4618      	mov	r0, r3
 8013554:	f7ff fbf2 	bl	8012d3c <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 8013558:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801355c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013560:	6879      	ldr	r1, [r7, #4]
 8013562:	4618      	mov	r0, r3
 8013564:	f7ff ff79 	bl	801345a <vli_modInv_update>
 8013568:	e08c      	b.n	8013684 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 801356a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801356c:	f003 0301 	and.w	r3, r3, #1
 8013570:	2b00      	cmp	r3, #0
 8013572:	d110      	bne.n	8013596 <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 8013574:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8013578:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801357c:	4611      	mov	r1, r2
 801357e:	4618      	mov	r0, r3
 8013580:	f7ff fbdc 	bl	8012d3c <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 8013584:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8013588:	f107 0314 	add.w	r3, r7, #20
 801358c:	6879      	ldr	r1, [r7, #4]
 801358e:	4618      	mov	r0, r3
 8013590:	f7ff ff63 	bl	801345a <vli_modInv_update>
 8013594:	e076      	b.n	8013684 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 8013596:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801359a:	2b00      	cmp	r3, #0
 801359c:	dd39      	ble.n	8013612 <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 801359e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135a2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80135a6:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80135aa:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80135ae:	f7ff fc39 	bl	8012e24 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 80135b2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80135b6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80135ba:	4611      	mov	r1, r2
 80135bc:	4618      	mov	r0, r3
 80135be:	f7ff fbbd 	bl	8012d3c <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 80135c2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80135c6:	f107 0114 	add.w	r1, r7, #20
 80135ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7ff fb15 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	da08      	bge.n	80135ec <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 80135da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135de:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80135e2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	f7ff fbd2 	bl	8012d90 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 80135ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135f0:	f107 0214 	add.w	r2, r7, #20
 80135f4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80135f8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80135fc:	f7ff fc12 	bl	8012e24 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 8013600:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8013604:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013608:	6879      	ldr	r1, [r7, #4]
 801360a:	4618      	mov	r0, r3
 801360c:	f7ff ff25 	bl	801345a <vli_modInv_update>
 8013610:	e038      	b.n	8013684 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 8013612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013616:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801361a:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801361e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8013622:	f7ff fbff 	bl	8012e24 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 8013626:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801362a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801362e:	4611      	mov	r1, r2
 8013630:	4618      	mov	r0, r3
 8013632:	f7ff fb83 	bl	8012d3c <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 8013636:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801363a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801363e:	f107 0314 	add.w	r3, r7, #20
 8013642:	4618      	mov	r0, r3
 8013644:	f7ff fadb 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 8013648:	4603      	mov	r3, r0
 801364a:	2b00      	cmp	r3, #0
 801364c:	da08      	bge.n	8013660 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 801364e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013652:	f107 0114 	add.w	r1, r7, #20
 8013656:	f107 0014 	add.w	r0, r7, #20
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	f7ff fb98 	bl	8012d90 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 8013660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013664:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8013668:	f107 0114 	add.w	r1, r7, #20
 801366c:	f107 0014 	add.w	r0, r7, #20
 8013670:	f7ff fbd8 	bl	8012e24 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 8013674:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8013678:	f107 0314 	add.w	r3, r7, #20
 801367c:	6879      	ldr	r1, [r7, #4]
 801367e:	4618      	mov	r0, r3
 8013680:	f7ff feeb 	bl	801345a <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8013684:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8013688:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801368c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013690:	4618      	mov	r0, r3
 8013692:	f7ff fab4 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 8013696:	4603      	mov	r3, r0
 8013698:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801369c:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f47f af4c 	bne.w	801353e <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 80136a6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80136aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80136ae:	4619      	mov	r1, r3
 80136b0:	68f8      	ldr	r0, [r7, #12]
 80136b2:	f7ff fa7d 	bl	8012bb0 <mg_uecc_vli_set>
}
 80136b6:	3798      	adds	r7, #152	@ 0x98
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 80136bc:	b580      	push	{r7, lr}
 80136be:	b098      	sub	sp, #96	@ 0x60
 80136c0:	af02      	add	r7, sp, #8
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
 80136c8:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 80136d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80136d6:	4619      	mov	r1, r3
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7ff f9c7 	bl	8012a6c <mg_uecc_vli_isZero>
 80136de:	4603      	mov	r3, r0
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	f040 80e6 	bne.w	80138b2 <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 80136e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80136ea:	683a      	ldr	r2, [r7, #0]
 80136ec:	68b9      	ldr	r1, [r7, #8]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7ff fea3 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 80136f4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80136f8:	f107 0010 	add.w	r0, r7, #16
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	68f9      	ldr	r1, [r7, #12]
 8013700:	f7ff fe7f 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8013704:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8013708:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801370c:	683a      	ldr	r2, [r7, #0]
 801370e:	4618      	mov	r0, r3
 8013710:	f7ff fe93 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	68b9      	ldr	r1, [r7, #8]
 801371a:	68b8      	ldr	r0, [r7, #8]
 801371c:	f7ff fe71 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8013720:	683a      	ldr	r2, [r7, #0]
 8013722:	6879      	ldr	r1, [r7, #4]
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7ff fe88 	bl	801343a <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	1d1a      	adds	r2, r3, #4
 801372e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	4613      	mov	r3, r2
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	68f9      	ldr	r1, [r7, #12]
 801373a:	68f8      	ldr	r0, [r7, #12]
 801373c:	f7ff fcc6 	bl	80130cc <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	1d1a      	adds	r2, r3, #4
 8013744:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013748:	9300      	str	r3, [sp, #0]
 801374a:	4613      	mov	r3, r2
 801374c:	687a      	ldr	r2, [r7, #4]
 801374e:	6879      	ldr	r1, [r7, #4]
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7ff fcbb 	bl	80130cc <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	1d1a      	adds	r2, r3, #4
 801375a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801375e:	9300      	str	r3, [sp, #0]
 8013760:	4613      	mov	r3, r2
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	68f9      	ldr	r1, [r7, #12]
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7ff fcd7 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	68f9      	ldr	r1, [r7, #12]
 8013772:	68f8      	ldr	r0, [r7, #12]
 8013774:	f7ff fe45 	bl	8013402 <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	1d1a      	adds	r2, r3, #4
 801377c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	4613      	mov	r3, r2
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	68f9      	ldr	r1, [r7, #12]
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f7ff fc9f 	bl	80130cc <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	1d1a      	adds	r2, r3, #4
 8013792:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013796:	9300      	str	r3, [sp, #0]
 8013798:	4613      	mov	r3, r2
 801379a:	687a      	ldr	r2, [r7, #4]
 801379c:	68f9      	ldr	r1, [r7, #12]
 801379e:	68f8      	ldr	r0, [r7, #12]
 80137a0:	f7ff fc94 	bl	80130cc <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 80137a4:	2100      	movs	r1, #0
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f7ff f98a 	bl	8012ac0 <mg_uecc_vli_testBit>
 80137ac:	4603      	mov	r3, r0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d024      	beq.n	80137fc <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	1d1a      	adds	r2, r3, #4
 80137b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80137ba:	68f9      	ldr	r1, [r7, #12]
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	f7ff fae7 	bl	8012d90 <mg_uecc_vli_add>
 80137c2:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 80137c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80137c8:	4619      	mov	r1, r3
 80137ca:	68f8      	ldr	r0, [r7, #12]
 80137cc:	f7ff fab6 	bl	8012d3c <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 80137d0:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80137d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80137d8:	4413      	add	r3, r2
 80137da:	009b      	lsls	r3, r3, #2
 80137dc:	68fa      	ldr	r2, [r7, #12]
 80137de:	4413      	add	r3, r2
 80137e0:	6819      	ldr	r1, [r3, #0]
 80137e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80137e4:	07da      	lsls	r2, r3, #31
 80137e6:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 80137ea:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80137ee:	4403      	add	r3, r0
 80137f0:	009b      	lsls	r3, r3, #2
 80137f2:	68f8      	ldr	r0, [r7, #12]
 80137f4:	4403      	add	r3, r0
 80137f6:	430a      	orrs	r2, r1
 80137f8:	601a      	str	r2, [r3, #0]
 80137fa:	e005      	b.n	8013808 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 80137fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013800:	4619      	mov	r1, r3
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f7ff fa9a 	bl	8012d3c <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 8013808:	683a      	ldr	r2, [r7, #0]
 801380a:	68f9      	ldr	r1, [r7, #12]
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7ff fe14 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	1d19      	adds	r1, r3, #4
 8013816:	f107 0210 	add.w	r2, r7, #16
 801381a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801381e:	9300      	str	r3, [sp, #0]
 8013820:	460b      	mov	r3, r1
 8013822:	6879      	ldr	r1, [r7, #4]
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f7ff fc78 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	1d19      	adds	r1, r3, #4
 801382e:	f107 0210 	add.w	r2, r7, #16
 8013832:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013836:	9300      	str	r3, [sp, #0]
 8013838:	460b      	mov	r3, r1
 801383a:	6879      	ldr	r1, [r7, #4]
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7ff fc6c 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	1d1a      	adds	r2, r3, #4
 8013846:	f107 0110 	add.w	r1, r7, #16
 801384a:	f107 0010 	add.w	r0, r7, #16
 801384e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	4613      	mov	r3, r2
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	f7ff fc5f 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801385c:	f107 0210 	add.w	r2, r7, #16
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	68f9      	ldr	r1, [r7, #12]
 8013864:	68f8      	ldr	r0, [r7, #12]
 8013866:	f7ff fdcc 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	1d19      	adds	r1, r3, #4
 801386e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013872:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8013876:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801387a:	9300      	str	r3, [sp, #0]
 801387c:	460b      	mov	r3, r1
 801387e:	68f9      	ldr	r1, [r7, #12]
 8013880:	f7ff fc4b 	bl	801311a <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 8013884:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013888:	461a      	mov	r2, r3
 801388a:	6879      	ldr	r1, [r7, #4]
 801388c:	68f8      	ldr	r0, [r7, #12]
 801388e:	f7ff f98f 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 8013892:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8013896:	461a      	mov	r2, r3
 8013898:	68b9      	ldr	r1, [r7, #8]
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f7ff f988 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 80138a0:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80138a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80138a8:	4619      	mov	r1, r3
 80138aa:	68b8      	ldr	r0, [r7, #8]
 80138ac:	f7ff f980 	bl	8012bb0 <mg_uecc_vli_set>
 80138b0:	e000      	b.n	80138b4 <double_jacobian_default+0x1f8>
    return;
 80138b2:	bf00      	nop
}
 80138b4:	3758      	adds	r7, #88	@ 0x58
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 80138ba:	b580      	push	{r7, lr}
 80138bc:	b090      	sub	sp, #64	@ 0x40
 80138be:	af02      	add	r7, sp, #8
 80138c0:	60f8      	str	r0, [r7, #12]
 80138c2:	60b9      	str	r1, [r7, #8]
 80138c4:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 80138c6:	f107 0314 	add.w	r3, r7, #20
 80138ca:	2220      	movs	r2, #32
 80138cc:	2100      	movs	r1, #0
 80138ce:	4618      	mov	r0, r3
 80138d0:	f00e fe2d 	bl	802252e <memset>
 80138d4:	2303      	movs	r3, #3
 80138d6:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 80138e0:	687a      	ldr	r2, [r7, #4]
 80138e2:	68b9      	ldr	r1, [r7, #8]
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	f7ff fda8 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	1d19      	adds	r1, r3, #4
 80138ee:	f107 0214 	add.w	r2, r7, #20
 80138f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80138f6:	9300      	str	r3, [sp, #0]
 80138f8:	460b      	mov	r3, r1
 80138fa:	68f9      	ldr	r1, [r7, #12]
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f7ff fc0c 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	68ba      	ldr	r2, [r7, #8]
 8013906:	68f9      	ldr	r1, [r7, #12]
 8013908:	68f8      	ldr	r0, [r7, #12]
 801390a:	f7ff fd7a 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	1d19      	adds	r1, r3, #4
 8013918:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801391c:	9300      	str	r3, [sp, #0]
 801391e:	460b      	mov	r3, r1
 8013920:	68f9      	ldr	r1, [r7, #12]
 8013922:	68f8      	ldr	r0, [r7, #12]
 8013924:	f7ff fbd2 	bl	80130cc <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 8013928:	bf00      	nop
 801392a:	3738      	adds	r7, #56	@ 0x38
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 8013930:	b580      	push	{r7, lr}
 8013932:	b094      	sub	sp, #80	@ 0x50
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801393a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801393e:	2220      	movs	r2, #32
 8013940:	2100      	movs	r1, #0
 8013942:	4618      	mov	r0, r3
 8013944:	f00e fdf3 	bl	802252e <memset>
 8013948:	2301      	movs	r3, #1
 801394a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801394c:	f107 030c 	add.w	r3, r7, #12
 8013950:	2220      	movs	r2, #32
 8013952:	2100      	movs	r1, #0
 8013954:	4618      	mov	r0, r3
 8013956:	f00e fdea 	bl	802252e <memset>
 801395a:	2301      	movs	r3, #1
 801395c:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	781b      	ldrb	r3, [r3, #0]
 8013962:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	1d19      	adds	r1, r3, #4
 801396a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801396e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013972:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8013976:	f7ff fa0b 	bl	8012d90 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801397a:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801397e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013982:	4611      	mov	r1, r2
 8013984:	4618      	mov	r0, r3
 8013986:	f7ff f8db 	bl	8012b40 <mg_uecc_vli_numBits>
 801398a:	4603      	mov	r3, r0
 801398c:	b29b      	uxth	r3, r3
 801398e:	3b01      	subs	r3, #1
 8013990:	b29b      	uxth	r3, r3
 8013992:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8013996:	e020      	b.n	80139da <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 8013998:	f107 010c 	add.w	r1, r7, #12
 801399c:	f107 030c 	add.w	r3, r7, #12
 80139a0:	683a      	ldr	r2, [r7, #0]
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7ff fd49 	bl	801343a <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 80139a8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 80139ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80139b0:	4611      	mov	r1, r2
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7ff f884 	bl	8012ac0 <mg_uecc_vli_testBit>
 80139b8:	4603      	mov	r3, r0
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d007      	beq.n	80139ce <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 80139be:	f107 010c 	add.w	r1, r7, #12
 80139c2:	f107 000c 	add.w	r0, r7, #12
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	f7ff fd1a 	bl	8013402 <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 80139ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80139d2:	3b01      	subs	r3, #1
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80139da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80139de:	2b01      	cmp	r3, #1
 80139e0:	dcda      	bgt.n	8013998 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 80139e2:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80139e6:	f107 030c 	add.w	r3, r7, #12
 80139ea:	4619      	mov	r1, r3
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f7ff f8df 	bl	8012bb0 <mg_uecc_vli_set>
}
 80139f2:	bf00      	nop
 80139f4:	3750      	adds	r7, #80	@ 0x50
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
	...

080139fc <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 80139fc:	b480      	push	{r7}
 80139fe:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 8013a00:	4b02      	ldr	r3, [pc, #8]	@ (8013a0c <mg_uecc_secp256r1+0x10>)
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	46bd      	mov	sp, r7
 8013a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0a:	4770      	bx	lr
 8013a0c:	08026254 	.word	0x08026254

08013a10 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b08c      	sub	sp, #48	@ 0x30
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 8013a1a:	2208      	movs	r2, #8
 8013a1c:	6839      	ldr	r1, [r7, #0]
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f7ff f8c6 	bl	8012bb0 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 8013a24:	2300      	movs	r3, #0
 8013a26:	617b      	str	r3, [r7, #20]
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	613b      	str	r3, [r7, #16]
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a34:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a3a:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a40:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a46:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8013a4e:	f107 020c 	add.w	r2, r7, #12
 8013a52:	f107 010c 	add.w	r1, r7, #12
 8013a56:	f107 000c 	add.w	r0, r7, #12
 8013a5a:	2308      	movs	r3, #8
 8013a5c:	f7ff f998 	bl	8012d90 <mg_uecc_vli_add>
 8013a60:	4603      	mov	r3, r0
 8013a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8013a64:	f107 020c 	add.w	r2, r7, #12
 8013a68:	2308      	movs	r3, #8
 8013a6a:	6879      	ldr	r1, [r7, #4]
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f7ff f98f 	bl	8012d90 <mg_uecc_vli_add>
 8013a72:	4603      	mov	r3, r0
 8013a74:	461a      	mov	r2, r3
 8013a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a78:	4413      	add	r3, r2
 8013a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a80:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a86:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a8c:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a92:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 8013a94:	2300      	movs	r3, #0
 8013a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8013a98:	f107 020c 	add.w	r2, r7, #12
 8013a9c:	f107 010c 	add.w	r1, r7, #12
 8013aa0:	f107 000c 	add.w	r0, r7, #12
 8013aa4:	2308      	movs	r3, #8
 8013aa6:	f7ff f973 	bl	8012d90 <mg_uecc_vli_add>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	461a      	mov	r2, r3
 8013aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab0:	4413      	add	r3, r2
 8013ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8013ab4:	f107 020c 	add.w	r2, r7, #12
 8013ab8:	2308      	movs	r3, #8
 8013aba:	6879      	ldr	r1, [r7, #4]
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f7ff f967 	bl	8012d90 <mg_uecc_vli_add>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ac8:	4413      	add	r3, r2
 8013aca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	6a1b      	ldr	r3, [r3, #32]
 8013ad0:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ad6:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013adc:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	623b      	str	r3, [r7, #32]
 8013ae2:	6a3b      	ldr	r3, [r7, #32]
 8013ae4:	61fb      	str	r3, [r7, #28]
 8013ae6:	69fb      	ldr	r3, [r7, #28]
 8013ae8:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013aee:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8013af6:	f107 020c 	add.w	r2, r7, #12
 8013afa:	2308      	movs	r3, #8
 8013afc:	6879      	ldr	r1, [r7, #4]
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f7ff f946 	bl	8012d90 <mg_uecc_vli_add>
 8013b04:	4603      	mov	r3, r0
 8013b06:	461a      	mov	r2, r3
 8013b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b0a:	4413      	add	r3, r2
 8013b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b12:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b18:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b1e:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b24:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b2a:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b30:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b36:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	6a1b      	ldr	r3, [r3, #32]
 8013b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8013b3e:	f107 020c 	add.w	r2, r7, #12
 8013b42:	2308      	movs	r3, #8
 8013b44:	6879      	ldr	r1, [r7, #4]
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f7ff f922 	bl	8012d90 <mg_uecc_vli_add>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	461a      	mov	r2, r3
 8013b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b52:	4413      	add	r3, r2
 8013b54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b5a:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b60:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b66:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	623b      	str	r3, [r7, #32]
 8013b6c:	6a3b      	ldr	r3, [r7, #32]
 8013b6e:	61fb      	str	r3, [r7, #28]
 8013b70:	69fb      	ldr	r3, [r7, #28]
 8013b72:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	6a1b      	ldr	r3, [r3, #32]
 8013b78:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8013b80:	f107 020c 	add.w	r2, r7, #12
 8013b84:	2308      	movs	r3, #8
 8013b86:	6879      	ldr	r1, [r7, #4]
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f7ff f94b 	bl	8012e24 <mg_uecc_vli_sub>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	461a      	mov	r2, r3
 8013b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b94:	1a9b      	subs	r3, r3, r2
 8013b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b9c:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ba2:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ba8:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013bae:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	623b      	str	r3, [r7, #32]
 8013bb4:	6a3b      	ldr	r3, [r7, #32]
 8013bb6:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8013bc4:	f107 020c 	add.w	r2, r7, #12
 8013bc8:	2308      	movs	r3, #8
 8013bca:	6879      	ldr	r1, [r7, #4]
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f7ff f929 	bl	8012e24 <mg_uecc_vli_sub>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bd8:	1a9b      	subs	r3, r3, r2
 8013bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013be0:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013be6:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013bec:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	6a1b      	ldr	r3, [r3, #32]
 8013bf2:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bf8:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bfe:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8013c00:	2300      	movs	r3, #0
 8013c02:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8013c0a:	f107 020c 	add.w	r2, r7, #12
 8013c0e:	2308      	movs	r3, #8
 8013c10:	6879      	ldr	r1, [r7, #4]
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f7ff f906 	bl	8012e24 <mg_uecc_vli_sub>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c1e:	1a9b      	subs	r3, r3, r2
 8013c20:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c26:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c2c:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c36:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c3c:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c42:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8013c44:	2300      	movs	r3, #0
 8013c46:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8013c4e:	f107 020c 	add.w	r2, r7, #12
 8013c52:	2308      	movs	r3, #8
 8013c54:	6879      	ldr	r1, [r7, #4]
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7ff f8e4 	bl	8012e24 <mg_uecc_vli_sub>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	461a      	mov	r2, r3
 8013c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c62:	1a9b      	subs	r3, r3, r2
 8013c64:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 8013c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	da19      	bge.n	8013ca0 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 8013c6c:	2308      	movs	r3, #8
 8013c6e:	4a14      	ldr	r2, [pc, #80]	@ (8013cc0 <vli_mmod_fast_secp256r1+0x2b0>)
 8013c70:	6879      	ldr	r1, [r7, #4]
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7ff f88c 	bl	8012d90 <mg_uecc_vli_add>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c7e:	4413      	add	r3, r2
 8013c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 8013c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	dbf1      	blt.n	8013c6c <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 8013c88:	e015      	b.n	8013cb6 <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 8013c8a:	2308      	movs	r3, #8
 8013c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8013cc0 <vli_mmod_fast_secp256r1+0x2b0>)
 8013c8e:	6879      	ldr	r1, [r7, #4]
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f7ff f8c7 	bl	8012e24 <mg_uecc_vli_sub>
 8013c96:	4603      	mov	r3, r0
 8013c98:	461a      	mov	r2, r3
 8013c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c9c:	1a9b      	subs	r3, r3, r2
 8013c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 8013ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d1f1      	bne.n	8013c8a <vli_mmod_fast_secp256r1+0x27a>
 8013ca6:	2208      	movs	r2, #8
 8013ca8:	6879      	ldr	r1, [r7, #4]
 8013caa:	4805      	ldr	r0, [pc, #20]	@ (8013cc0 <vli_mmod_fast_secp256r1+0x2b0>)
 8013cac:	f7fe ffa7 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	2b01      	cmp	r3, #1
 8013cb4:	d1e9      	bne.n	8013c8a <vli_mmod_fast_secp256r1+0x27a>
}
 8013cb6:	bf00      	nop
 8013cb8:	3730      	adds	r7, #48	@ 0x30
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	08026258 	.word	0x08026258

08013cc4 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b08c      	sub	sp, #48	@ 0x30
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
 8013cd0:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 8013cd2:	f107 0310 	add.w	r3, r7, #16
 8013cd6:	683a      	ldr	r2, [r7, #0]
 8013cd8:	6879      	ldr	r1, [r7, #4]
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7ff fbad 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8013ce0:	f107 0210 	add.w	r2, r7, #16
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	68f9      	ldr	r1, [r7, #12]
 8013ce8:	68f8      	ldr	r0, [r7, #12]
 8013cea:	f7ff fb8a 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8013cee:	f107 0110 	add.w	r1, r7, #16
 8013cf2:	f107 0010 	add.w	r0, r7, #16
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	f7ff fb82 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8013cfe:	f107 0210 	add.w	r2, r7, #16
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	68b9      	ldr	r1, [r7, #8]
 8013d06:	68b8      	ldr	r0, [r7, #8]
 8013d08:	f7ff fb7b 	bl	8013402 <mg_uecc_vli_modMult_fast>
}
 8013d0c:	bf00      	nop
 8013d0e:	3730      	adds	r7, #48	@ 0x30
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 8013d14:	b590      	push	{r4, r7, lr}
 8013d16:	b08f      	sub	sp, #60	@ 0x3c
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	60b9      	str	r1, [r7, #8]
 8013d1e:	607a      	str	r2, [r7, #4]
 8013d20:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8013d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d24:	781b      	ldrb	r3, [r3, #0]
 8013d26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 8013d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d008      	beq.n	8013d42 <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 8013d30:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8013d34:	f107 0314 	add.w	r3, r7, #20
 8013d38:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fe ff38 	bl	8012bb0 <mg_uecc_vli_set>
 8013d40:	e009      	b.n	8013d56 <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 8013d42:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8013d46:	f107 0314 	add.w	r3, r7, #20
 8013d4a:	4611      	mov	r1, r2
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fe fe6c 	bl	8012a2a <mg_uecc_vli_clear>
    z[0] = 1;
 8013d52:	2301      	movs	r3, #1
 8013d54:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 8013d56:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	68f9      	ldr	r1, [r7, #12]
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f7fe ff26 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 8013d64:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013d68:	461a      	mov	r2, r3
 8013d6a:	68b9      	ldr	r1, [r7, #8]
 8013d6c:	6838      	ldr	r0, [r7, #0]
 8013d6e:	f7fe ff1f 	bl	8012bb0 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 8013d72:	f107 0214 	add.w	r2, r7, #20
 8013d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d78:	68b9      	ldr	r1, [r7, #8]
 8013d7a:	68f8      	ldr	r0, [r7, #12]
 8013d7c:	f7ff ffa2 	bl	8013cc4 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 8013d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d82:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8013d86:	f107 0214 	add.w	r2, r7, #20
 8013d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d8c:	68b9      	ldr	r1, [r7, #8]
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 8013d92:	f107 0214 	add.w	r2, r7, #20
 8013d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d98:	6839      	ldr	r1, [r7, #0]
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f7ff ff92 	bl	8013cc4 <apply_z>
}
 8013da0:	bf00      	nop
 8013da2:	373c      	adds	r7, #60	@ 0x3c
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd90      	pop	{r4, r7, pc}

08013da8 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b090      	sub	sp, #64	@ 0x40
 8013dac:	af02      	add	r7, sp, #8
 8013dae:	60f8      	str	r0, [r7, #12]
 8013db0:	60b9      	str	r1, [r7, #8]
 8013db2:	607a      	str	r2, [r7, #4]
 8013db4:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 8013db6:	f107 0314 	add.w	r3, r7, #20
 8013dba:	2220      	movs	r2, #32
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f00e fbb5 	bl	802252e <memset>
  wordcount_t num_words = curve->num_words;
 8013dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8013dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013dce:	1d1a      	adds	r2, r3, #4
 8013dd0:	f107 0014 	add.w	r0, r7, #20
 8013dd4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	4613      	mov	r3, r2
 8013ddc:	68fa      	ldr	r2, [r7, #12]
 8013dde:	6879      	ldr	r1, [r7, #4]
 8013de0:	f7ff f99b 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 8013de4:	f107 0114 	add.w	r1, r7, #20
 8013de8:	f107 0314 	add.w	r3, r7, #20
 8013dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7ff fb23 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8013df4:	f107 0214 	add.w	r2, r7, #20
 8013df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013dfa:	68f9      	ldr	r1, [r7, #12]
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f7ff fb00 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 8013e02:	f107 0214 	add.w	r2, r7, #20
 8013e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e08:	6879      	ldr	r1, [r7, #4]
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f7ff faf9 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8013e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e12:	1d1a      	adds	r2, r3, #4
 8013e14:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013e18:	9300      	str	r3, [sp, #0]
 8013e1a:	4613      	mov	r3, r2
 8013e1c:	68ba      	ldr	r2, [r7, #8]
 8013e1e:	6839      	ldr	r1, [r7, #0]
 8013e20:	6838      	ldr	r0, [r7, #0]
 8013e22:	f7ff f97a 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 8013e26:	f107 0314 	add.w	r3, r7, #20
 8013e2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013e2c:	6839      	ldr	r1, [r7, #0]
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7ff fb03 	bl	801343a <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 8013e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e36:	1d1a      	adds	r2, r3, #4
 8013e38:	f107 0114 	add.w	r1, r7, #20
 8013e3c:	f107 0014 	add.w	r0, r7, #20
 8013e40:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013e44:	9300      	str	r3, [sp, #0]
 8013e46:	4613      	mov	r3, r2
 8013e48:	68fa      	ldr	r2, [r7, #12]
 8013e4a:	f7ff f966 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 8013e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e50:	1d1a      	adds	r2, r3, #4
 8013e52:	f107 0114 	add.w	r1, r7, #20
 8013e56:	f107 0014 	add.w	r0, r7, #20
 8013e5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	4613      	mov	r3, r2
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	f7ff f959 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 8013e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e6a:	1d1a      	adds	r2, r3, #4
 8013e6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	4613      	mov	r3, r2
 8013e74:	68fa      	ldr	r2, [r7, #12]
 8013e76:	6879      	ldr	r1, [r7, #4]
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7ff f94e 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 8013e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	68b9      	ldr	r1, [r7, #8]
 8013e84:	68b8      	ldr	r0, [r7, #8]
 8013e86:	f7ff fabc 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8013e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e8c:	1d19      	adds	r1, r3, #4
 8013e8e:	f107 0214 	add.w	r2, r7, #20
 8013e92:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013e96:	9300      	str	r3, [sp, #0]
 8013e98:	460b      	mov	r3, r1
 8013e9a:	68f9      	ldr	r1, [r7, #12]
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f7ff f93c 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 8013ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ea4:	687a      	ldr	r2, [r7, #4]
 8013ea6:	6839      	ldr	r1, [r7, #0]
 8013ea8:	6838      	ldr	r0, [r7, #0]
 8013eaa:	f7ff faaa 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8013eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013eb0:	1d1a      	adds	r2, r3, #4
 8013eb2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013eb6:	9300      	str	r3, [sp, #0]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	68ba      	ldr	r2, [r7, #8]
 8013ebc:	6839      	ldr	r1, [r7, #0]
 8013ebe:	6838      	ldr	r0, [r7, #0]
 8013ec0:	f7ff f92b 	bl	801311a <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 8013ec4:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8013ec8:	f107 0314 	add.w	r3, r7, #20
 8013ecc:	4619      	mov	r1, r3
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f7fe fe6e 	bl	8012bb0 <mg_uecc_vli_set>
}
 8013ed4:	bf00      	nop
 8013ed6:	3738      	adds	r7, #56	@ 0x38
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}

08013edc <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 8013edc:	b590      	push	{r4, r7, lr}
 8013ede:	b0a1      	sub	sp, #132	@ 0x84
 8013ee0:	af02      	add	r7, sp, #8
 8013ee2:	60f8      	str	r0, [r7, #12]
 8013ee4:	60b9      	str	r1, [r7, #8]
 8013ee6:	607a      	str	r2, [r7, #4]
 8013ee8:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 8013eea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013eee:	2220      	movs	r2, #32
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f00e fb1b 	bl	802252e <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8013ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013efc:	781b      	ldrb	r3, [r3, #0]
 8013efe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8013f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f06:	1d1a      	adds	r2, r3, #4
 8013f08:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8013f0c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8013f10:	9300      	str	r3, [sp, #0]
 8013f12:	4613      	mov	r3, r2
 8013f14:	68fa      	ldr	r2, [r7, #12]
 8013f16:	6879      	ldr	r1, [r7, #4]
 8013f18:	f7ff f8ff 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 8013f1c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8013f20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013f24:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff fa86 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8013f2e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8013f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f36:	68f9      	ldr	r1, [r7, #12]
 8013f38:	68f8      	ldr	r0, [r7, #12]
 8013f3a:	f7ff fa62 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 8013f3e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8013f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f46:	6879      	ldr	r1, [r7, #4]
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f7ff fa5a 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 8013f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f52:	1d1a      	adds	r2, r3, #4
 8013f54:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8013f58:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8013f5c:	9300      	str	r3, [sp, #0]
 8013f5e:	4613      	mov	r3, r2
 8013f60:	68ba      	ldr	r2, [r7, #8]
 8013f62:	6839      	ldr	r1, [r7, #0]
 8013f64:	f7ff f8b2 	bl	80130cc <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8013f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f6c:	1d1a      	adds	r2, r3, #4
 8013f6e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8013f72:	9300      	str	r3, [sp, #0]
 8013f74:	4613      	mov	r3, r2
 8013f76:	68ba      	ldr	r2, [r7, #8]
 8013f78:	6839      	ldr	r1, [r7, #0]
 8013f7a:	6838      	ldr	r0, [r7, #0]
 8013f7c:	f7ff f8cd 	bl	801311a <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 8013f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f84:	1d1a      	adds	r2, r3, #4
 8013f86:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8013f8a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8013f8e:	9300      	str	r3, [sp, #0]
 8013f90:	4613      	mov	r3, r2
 8013f92:	68fa      	ldr	r2, [r7, #12]
 8013f94:	6879      	ldr	r1, [r7, #4]
 8013f96:	f7ff f8c0 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 8013f9a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8013f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013fa2:	68b9      	ldr	r1, [r7, #8]
 8013fa4:	68b8      	ldr	r0, [r7, #8]
 8013fa6:	f7ff fa2c 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8013faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013fae:	1d1a      	adds	r2, r3, #4
 8013fb0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8013fb4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8013fb8:	9300      	str	r3, [sp, #0]
 8013fba:	4613      	mov	r3, r2
 8013fbc:	687a      	ldr	r2, [r7, #4]
 8013fbe:	68f9      	ldr	r1, [r7, #12]
 8013fc0:	f7ff f884 	bl	80130cc <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 8013fc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013fc8:	6839      	ldr	r1, [r7, #0]
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f7ff fa35 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 8013fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013fd4:	1d19      	adds	r1, r3, #4
 8013fd6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8013fda:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8013fde:	9300      	str	r3, [sp, #0]
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	6879      	ldr	r1, [r7, #4]
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7ff f898 	bl	801311a <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8013fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013fee:	1d1a      	adds	r2, r3, #4
 8013ff0:	f107 0014 	add.w	r0, r7, #20
 8013ff4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8013ff8:	9300      	str	r3, [sp, #0]
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	687a      	ldr	r2, [r7, #4]
 8013ffe:	68f9      	ldr	r1, [r7, #12]
 8014000:	f7ff f88b 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 8014004:	f107 0214 	add.w	r2, r7, #20
 8014008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801400c:	6839      	ldr	r1, [r7, #0]
 801400e:	6838      	ldr	r0, [r7, #0]
 8014010:	f7ff f9f7 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 8014014:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014018:	1d1a      	adds	r2, r3, #4
 801401a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801401e:	9300      	str	r3, [sp, #0]
 8014020:	4613      	mov	r3, r2
 8014022:	68ba      	ldr	r2, [r7, #8]
 8014024:	6839      	ldr	r1, [r7, #0]
 8014026:	6838      	ldr	r0, [r7, #0]
 8014028:	f7ff f877 	bl	801311a <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 801402c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8014030:	f107 0314 	add.w	r3, r7, #20
 8014034:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014038:	4618      	mov	r0, r3
 801403a:	f7ff f9fe 	bl	801343a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 801403e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014042:	1d1c      	adds	r4, r3, #4
 8014044:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8014048:	f107 0114 	add.w	r1, r7, #20
 801404c:	f107 0014 	add.w	r0, r7, #20
 8014050:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8014054:	9300      	str	r3, [sp, #0]
 8014056:	4623      	mov	r3, r4
 8014058:	f7ff f85f 	bl	801311a <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 801405c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014060:	1d1a      	adds	r2, r3, #4
 8014062:	f107 0114 	add.w	r1, r7, #20
 8014066:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801406a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801406e:	9300      	str	r3, [sp, #0]
 8014070:	4613      	mov	r3, r2
 8014072:	68fa      	ldr	r2, [r7, #12]
 8014074:	f7ff f851 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 8014078:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801407c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8014080:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8014084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014088:	f7ff f9bb 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 801408c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014090:	1d1a      	adds	r2, r3, #4
 8014092:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8014096:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	4613      	mov	r3, r2
 801409e:	68ba      	ldr	r2, [r7, #8]
 80140a0:	68b8      	ldr	r0, [r7, #8]
 80140a2:	f7ff f83a 	bl	801311a <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 80140a6:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 80140aa:	f107 0314 	add.w	r3, r7, #20
 80140ae:	4619      	mov	r1, r3
 80140b0:	68f8      	ldr	r0, [r7, #12]
 80140b2:	f7fe fd7d 	bl	8012bb0 <mg_uecc_vli_set>
}
 80140b6:	bf00      	nop
 80140b8:	377c      	adds	r7, #124	@ 0x7c
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd90      	pop	{r4, r7, pc}

080140be <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 80140be:	b590      	push	{r4, r7, lr}
 80140c0:	b0b1      	sub	sp, #196	@ 0xc4
 80140c2:	af02      	add	r7, sp, #8
 80140c4:	60f8      	str	r0, [r7, #12]
 80140c6:	60b9      	str	r1, [r7, #8]
 80140c8:	607a      	str	r2, [r7, #4]
 80140ca:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 80140cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 80140d6:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 80140da:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80140de:	3320      	adds	r3, #32
 80140e0:	68b9      	ldr	r1, [r7, #8]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7fe fd64 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 80140e8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	68ba      	ldr	r2, [r7, #8]
 80140f0:	18d1      	adds	r1, r2, r3
 80140f2:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 80140f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80140fa:	3320      	adds	r3, #32
 80140fc:	4618      	mov	r0, r3
 80140fe:	f7fe fd57 	bl	8012bb0 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 8014102:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8014106:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801410a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801410e:	f103 0120 	add.w	r1, r3, #32
 8014112:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8014116:	f103 0020 	add.w	r0, r3, #32
 801411a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801411e:	9301      	str	r3, [sp, #4]
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	9300      	str	r3, [sp, #0]
 8014124:	4623      	mov	r3, r4
 8014126:	f7ff fdf5 	bl	8013d14 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 801412a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801412e:	3b02      	subs	r3, #2
 8014130:	b29b      	uxth	r3, r3
 8014132:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8014136:	e059      	b.n	80141ec <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 8014138:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801413c:	4619      	mov	r1, r3
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f7fe fcbe 	bl	8012ac0 <mg_uecc_vli_testBit>
 8014144:	4603      	mov	r3, r0
 8014146:	2b00      	cmp	r3, #0
 8014148:	bf0c      	ite	eq
 801414a:	2301      	moveq	r3, #1
 801414c:	2300      	movne	r3, #0
 801414e:	b2db      	uxtb	r3, r3
 8014150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8014154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014158:	f1c3 0301 	rsb	r3, r3, #1
 801415c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8014160:	015b      	lsls	r3, r3, #5
 8014162:	18d0      	adds	r0, r2, r3
 8014164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014168:	f1c3 0301 	rsb	r3, r3, #1
 801416c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8014170:	015b      	lsls	r3, r3, #5
 8014172:	18d1      	adds	r1, r2, r3
 8014174:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8014178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801417c:	015b      	lsls	r3, r3, #5
 801417e:	18d4      	adds	r4, r2, r3
 8014180:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8014184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014188:	015b      	lsls	r3, r3, #5
 801418a:	441a      	add	r2, r3
 801418c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014190:	9300      	str	r3, [sp, #0]
 8014192:	4613      	mov	r3, r2
 8014194:	4622      	mov	r2, r4
 8014196:	f7ff fea1 	bl	8013edc <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801419a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801419e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80141a2:	015b      	lsls	r3, r3, #5
 80141a4:	18d0      	adds	r0, r2, r3
 80141a6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80141aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80141ae:	015b      	lsls	r3, r3, #5
 80141b0:	18d1      	adds	r1, r2, r3
 80141b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80141b6:	f1c3 0301 	rsb	r3, r3, #1
 80141ba:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80141be:	015b      	lsls	r3, r3, #5
 80141c0:	18d4      	adds	r4, r2, r3
 80141c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80141c6:	f1c3 0301 	rsb	r3, r3, #1
 80141ca:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80141ce:	015b      	lsls	r3, r3, #5
 80141d0:	441a      	add	r2, r3
 80141d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80141d6:	9300      	str	r3, [sp, #0]
 80141d8:	4613      	mov	r3, r2
 80141da:	4622      	mov	r2, r4
 80141dc:	f7ff fde4 	bl	8013da8 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 80141e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 80141e4:	3b01      	subs	r3, #1
 80141e6:	b29b      	uxth	r3, r3
 80141e8:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 80141ec:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	dca1      	bgt.n	8014138 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 80141f4:	2100      	movs	r1, #0
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7fe fc62 	bl	8012ac0 <mg_uecc_vli_testBit>
 80141fc:	4603      	mov	r3, r0
 80141fe:	2b00      	cmp	r3, #0
 8014200:	bf0c      	ite	eq
 8014202:	2301      	moveq	r3, #1
 8014204:	2300      	movne	r3, #0
 8014206:	b2db      	uxtb	r3, r3
 8014208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801420c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014210:	f1c3 0301 	rsb	r3, r3, #1
 8014214:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8014218:	015b      	lsls	r3, r3, #5
 801421a:	18d0      	adds	r0, r2, r3
 801421c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014220:	f1c3 0301 	rsb	r3, r3, #1
 8014224:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8014228:	015b      	lsls	r3, r3, #5
 801422a:	18d1      	adds	r1, r2, r3
 801422c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8014230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014234:	015b      	lsls	r3, r3, #5
 8014236:	18d4      	adds	r4, r2, r3
 8014238:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801423c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014240:	015b      	lsls	r3, r3, #5
 8014242:	441a      	add	r2, r3
 8014244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014248:	9300      	str	r3, [sp, #0]
 801424a:	4613      	mov	r3, r2
 801424c:	4622      	mov	r2, r4
 801424e:	f7ff fe45 	bl	8013edc <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8014252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014256:	1d1c      	adds	r4, r3, #4
 8014258:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801425c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8014260:	f103 0120 	add.w	r1, r3, #32
 8014264:	f107 0010 	add.w	r0, r7, #16
 8014268:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801426c:	9300      	str	r3, [sp, #0]
 801426e:	4623      	mov	r3, r4
 8014270:	f7fe ff53 	bl	801311a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 8014274:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014278:	f1c3 0301 	rsb	r3, r3, #1
 801427c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8014280:	015b      	lsls	r3, r3, #5
 8014282:	441a      	add	r2, r3
 8014284:	f107 0110 	add.w	r1, r7, #16
 8014288:	f107 0010 	add.w	r0, r7, #16
 801428c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014290:	f7ff f8b7 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 8014294:	f107 0110 	add.w	r1, r7, #16
 8014298:	f107 0010 	add.w	r0, r7, #16
 801429c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80142a0:	68ba      	ldr	r2, [r7, #8]
 80142a2:	f7ff f8ae 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 80142a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80142aa:	1d1a      	adds	r2, r3, #4
 80142ac:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 80142b0:	f107 0110 	add.w	r1, r7, #16
 80142b4:	f107 0010 	add.w	r0, r7, #16
 80142b8:	f7ff f907 	bl	80134ca <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 80142bc:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 80142c0:	009b      	lsls	r3, r3, #2
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	441a      	add	r2, r3
 80142c6:	f107 0110 	add.w	r1, r7, #16
 80142ca:	f107 0010 	add.w	r0, r7, #16
 80142ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80142d2:	f7ff f896 	bl	8013402 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 80142d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80142da:	f1c3 0301 	rsb	r3, r3, #1
 80142de:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80142e2:	015b      	lsls	r3, r3, #5
 80142e4:	441a      	add	r2, r3
 80142e6:	f107 0110 	add.w	r1, r7, #16
 80142ea:	f107 0010 	add.w	r0, r7, #16
 80142ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80142f2:	f7ff f886 	bl	8013402 <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 80142f6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80142fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80142fe:	015b      	lsls	r3, r3, #5
 8014300:	18d0      	adds	r0, r2, r3
 8014302:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8014306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801430a:	015b      	lsls	r3, r3, #5
 801430c:	18d1      	adds	r1, r2, r3
 801430e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014312:	f1c3 0301 	rsb	r3, r3, #1
 8014316:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801431a:	015b      	lsls	r3, r3, #5
 801431c:	18d4      	adds	r4, r2, r3
 801431e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014322:	f1c3 0301 	rsb	r3, r3, #1
 8014326:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801432a:	015b      	lsls	r3, r3, #5
 801432c:	441a      	add	r2, r3
 801432e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	4613      	mov	r3, r2
 8014336:	4622      	mov	r2, r4
 8014338:	f7ff fd36 	bl	8013da8 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 801433c:	f107 0210 	add.w	r2, r7, #16
 8014340:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014344:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8014348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801434c:	f7ff fcba 	bl	8013cc4 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 8014350:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8014354:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8014358:	4619      	mov	r1, r3
 801435a:	68f8      	ldr	r0, [r7, #12]
 801435c:	f7fe fc28 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 8014360:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8014364:	009b      	lsls	r3, r3, #2
 8014366:	68fa      	ldr	r2, [r7, #12]
 8014368:	4413      	add	r3, r2
 801436a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801436e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014372:	4618      	mov	r0, r3
 8014374:	f7fe fc1c 	bl	8012bb0 <mg_uecc_vli_set>
}
 8014378:	bf00      	nop
 801437a:	37bc      	adds	r7, #188	@ 0xbc
 801437c:	46bd      	mov	sp, r7
 801437e:	bd90      	pop	{r4, r7, pc}

08014380 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 8014380:	b580      	push	{r7, lr}
 8014382:	b086      	sub	sp, #24
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	60b9      	str	r1, [r7, #8]
 801438a:	607a      	str	r2, [r7, #4]
 801438c:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014394:	331f      	adds	r3, #31
 8014396:	2b00      	cmp	r3, #0
 8014398:	da00      	bge.n	801439c <regularize_k+0x1c>
 801439a:	331f      	adds	r3, #31
 801439c:	115b      	asrs	r3, r3, #5
 801439e:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	885b      	ldrh	r3, [r3, #2]
 80143a4:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80143ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143b0:	68f9      	ldr	r1, [r7, #12]
 80143b2:	68b8      	ldr	r0, [r7, #8]
 80143b4:	f7fe fcec 	bl	8012d90 <mg_uecc_vli_add>
 80143b8:	4603      	mov	r3, r0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d10f      	bne.n	80143de <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 80143be:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80143c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143c6:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 80143c8:	429a      	cmp	r2, r3
 80143ca:	da0a      	bge.n	80143e2 <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 80143cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80143d0:	4619      	mov	r1, r3
 80143d2:	68b8      	ldr	r0, [r7, #8]
 80143d4:	f7fe fb74 	bl	8012ac0 <mg_uecc_vli_testBit>
 80143d8:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d001      	beq.n	80143e2 <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 80143de:	2301      	movs	r3, #1
 80143e0:	e000      	b.n	80143e4 <regularize_k+0x64>
 80143e2:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 80143e4:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80143ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80143f0:	68b9      	ldr	r1, [r7, #8]
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f7fe fccc 	bl	8012d90 <mg_uecc_vli_add>
  return carry;
 80143f8:	693b      	ldr	r3, [r7, #16]
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3718      	adds	r7, #24
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}
	...

08014404 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 8014404:	b580      	push	{r7, lr}
 8014406:	b088      	sub	sp, #32
 8014408:	af00      	add	r7, sp, #0
 801440a:	60f8      	str	r0, [r7, #12]
 801440c:	60b9      	str	r1, [r7, #8]
 801440e:	4613      	mov	r3, r2
 8014410:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8014412:	f04f 33ff 	mov.w	r3, #4294967295
 8014416:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 8014418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801441c:	4619      	mov	r1, r3
 801441e:	68b8      	ldr	r0, [r7, #8]
 8014420:	f7fe fb8e 	bl	8012b40 <mg_uecc_vli_numBits>
 8014424:	4603      	mov	r3, r0
 8014426:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 8014428:	4b2a      	ldr	r3, [pc, #168]	@ (80144d4 <mg_uecc_generate_random_int+0xd0>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d101      	bne.n	8014434 <mg_uecc_generate_random_int+0x30>
    return 0;
 8014430:	2300      	movs	r3, #0
 8014432:	e04b      	b.n	80144cc <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8014434:	2300      	movs	r3, #0
 8014436:	61fb      	str	r3, [r7, #28]
 8014438:	e044      	b.n	80144c4 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 801443a:	4b26      	ldr	r3, [pc, #152]	@ (80144d4 <mg_uecc_generate_random_int+0xd0>)
 801443c:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 801443e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014442:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 8014444:	4611      	mov	r1, r2
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	4798      	blx	r3
 801444a:	4603      	mov	r3, r0
 801444c:	2b00      	cmp	r3, #0
 801444e:	d101      	bne.n	8014454 <mg_uecc_generate_random_int+0x50>
      return 0;
 8014450:	2300      	movs	r3, #0
 8014452:	e03b      	b.n	80144cc <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 8014454:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014458:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801445c:	4413      	add	r3, r2
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	4413      	add	r3, r2
 8014464:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 8014466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801446a:	b29b      	uxth	r3, r3
 801446c:	015b      	lsls	r3, r3, #5
 801446e:	b29a      	uxth	r2, r3
 8014470:	8afb      	ldrh	r3, [r7, #22]
 8014472:	1ad3      	subs	r3, r2, r3
 8014474:	b29b      	uxth	r3, r3
 8014476:	b21b      	sxth	r3, r3
 8014478:	461a      	mov	r2, r3
 801447a:	69bb      	ldr	r3, [r7, #24]
 801447c:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 8014480:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8014484:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014488:	4403      	add	r3, r0
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	68f8      	ldr	r0, [r7, #12]
 801448e:	4403      	add	r3, r0
 8014490:	400a      	ands	r2, r1
 8014492:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8014494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014498:	4619      	mov	r1, r3
 801449a:	68f8      	ldr	r0, [r7, #12]
 801449c:	f7fe fae6 	bl	8012a6c <mg_uecc_vli_isZero>
 80144a0:	4603      	mov	r3, r0
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d10b      	bne.n	80144be <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 80144a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144aa:	461a      	mov	r2, r3
 80144ac:	68f9      	ldr	r1, [r7, #12]
 80144ae:	68b8      	ldr	r0, [r7, #8]
 80144b0:	f7fe fc13 	bl	8012cda <mg_uecc_vli_cmp>
 80144b4:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d101      	bne.n	80144be <mg_uecc_generate_random_int+0xba>
      return 1;
 80144ba:	2301      	movs	r3, #1
 80144bc:	e006      	b.n	80144cc <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 80144be:	69fb      	ldr	r3, [r7, #28]
 80144c0:	3301      	adds	r3, #1
 80144c2:	61fb      	str	r3, [r7, #28]
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80144c8:	d9b7      	bls.n	801443a <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 80144ca:	2300      	movs	r3, #0
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3720      	adds	r7, #32
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	24002bf0 	.word	0x24002bf0

080144d8 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 80144d8:	b480      	push	{r7}
 80144da:	b087      	sub	sp, #28
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 80144e4:	2300      	movs	r3, #0
 80144e6:	617b      	str	r3, [r7, #20]
 80144e8:	e018      	b.n	801451c <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	1e5a      	subs	r2, r3, #1
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	1ad3      	subs	r3, r2, r3
 80144f2:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	f023 0303 	bic.w	r3, r3, #3
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	4413      	add	r3, r2
 80144fe:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	f003 0303 	and.w	r3, r3, #3
 8014506:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8014508:	fa22 f103 	lsr.w	r1, r2, r3
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	68fa      	ldr	r2, [r7, #12]
 8014510:	4413      	add	r3, r2
 8014512:	b2ca      	uxtb	r2, r1
 8014514:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	3301      	adds	r3, #1
 801451a:	617b      	str	r3, [r7, #20]
 801451c:	697a      	ldr	r2, [r7, #20]
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	429a      	cmp	r2, r3
 8014522:	dbe2      	blt.n	80144ea <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 8014524:	bf00      	nop
 8014526:	bf00      	nop
 8014528:	371c      	adds	r7, #28
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr

08014532 <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 8014532:	b580      	push	{r7, lr}
 8014534:	b086      	sub	sp, #24
 8014536:	af00      	add	r7, sp, #0
 8014538:	60f8      	str	r0, [r7, #12]
 801453a:	60b9      	str	r1, [r7, #8]
 801453c:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	3303      	adds	r3, #3
 8014542:	2b00      	cmp	r3, #0
 8014544:	da00      	bge.n	8014548 <mg_uecc_vli_bytesToNative+0x16>
 8014546:	3303      	adds	r3, #3
 8014548:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 801454a:	b25b      	sxtb	r3, r3
 801454c:	4619      	mov	r1, r3
 801454e:	68f8      	ldr	r0, [r7, #12]
 8014550:	f7fe fa6b 	bl	8012a2a <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 8014554:	2300      	movs	r3, #0
 8014556:	617b      	str	r3, [r7, #20]
 8014558:	e01e      	b.n	8014598 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	1e5a      	subs	r2, r3, #1
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	f023 0303 	bic.w	r3, r3, #3
 801456a:	68fa      	ldr	r2, [r7, #12]
 801456c:	4413      	add	r3, r2
 801456e:	6819      	ldr	r1, [r3, #0]
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	68ba      	ldr	r2, [r7, #8]
 8014574:	4413      	add	r3, r2
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 801457a:	693b      	ldr	r3, [r7, #16]
 801457c:	f003 0303 	and.w	r3, r3, #3
 8014580:	00db      	lsls	r3, r3, #3
 8014582:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	f023 0303 	bic.w	r3, r3, #3
 801458a:	68f8      	ldr	r0, [r7, #12]
 801458c:	4403      	add	r3, r0
 801458e:	430a      	orrs	r2, r1
 8014590:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	3301      	adds	r3, #1
 8014596:	617b      	str	r3, [r7, #20]
 8014598:	697a      	ldr	r2, [r7, #20]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	429a      	cmp	r2, r3
 801459e:	dbdc      	blt.n	801455a <mg_uecc_vli_bytesToNative+0x28>
  }
}
 80145a0:	bf00      	nop
 80145a2:	bf00      	nop
 80145a4:	3718      	adds	r7, #24
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 80145aa:	b580      	push	{r7, lr}
 80145ac:	b08a      	sub	sp, #40	@ 0x28
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	60f8      	str	r0, [r7, #12]
 80145b2:	60b9      	str	r1, [r7, #8]
 80145b4:	607a      	str	r2, [r7, #4]
 80145b6:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80145be:	3307      	adds	r3, #7
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	da00      	bge.n	80145c6 <bits2int+0x1c>
 80145c4:	3307      	adds	r3, #7
 80145c6:	10db      	asrs	r3, r3, #3
 80145c8:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80145d0:	331f      	adds	r3, #31
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	da00      	bge.n	80145d8 <bits2int+0x2e>
 80145d6:	331f      	adds	r3, #31
 80145d8:	115b      	asrs	r3, r3, #5
 80145da:	b25b      	sxtb	r3, r3
 80145dc:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	69fb      	ldr	r3, [r7, #28]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d901      	bls.n	80145ea <bits2int+0x40>
    bits_size = num_n_bytes;
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 80145ea:	69bb      	ldr	r3, [r7, #24]
 80145ec:	b25b      	sxtb	r3, r3
 80145ee:	4619      	mov	r1, r3
 80145f0:	68f8      	ldr	r0, [r7, #12]
 80145f2:	f7fe fa1a 	bl	8012a2a <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	461a      	mov	r2, r3
 80145fa:	68b9      	ldr	r1, [r7, #8]
 80145fc:	68f8      	ldr	r0, [r7, #12]
 80145fe:	f7ff ff98 	bl	8014532 <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	00db      	lsls	r3, r3, #3
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801460c:	4293      	cmp	r3, r2
 801460e:	d93a      	bls.n	8014686 <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	00db      	lsls	r3, r3, #3
 8014614:	683a      	ldr	r2, [r7, #0]
 8014616:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801461a:	1a9b      	subs	r3, r3, r2
 801461c:	617b      	str	r3, [r7, #20]
  carry = 0;
 801461e:	2300      	movs	r3, #0
 8014620:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	68fa      	ldr	r2, [r7, #12]
 8014628:	4413      	add	r3, r2
 801462a:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 801462c:	e010      	b.n	8014650 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 801462e:	6a3b      	ldr	r3, [r7, #32]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 8014634:	693a      	ldr	r2, [r7, #16]
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	40da      	lsrs	r2, r3
 801463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801463c:	431a      	orrs	r2, r3
 801463e:	6a3b      	ldr	r3, [r7, #32]
 8014640:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 8014642:	697b      	ldr	r3, [r7, #20]
 8014644:	f1c3 0320 	rsb	r3, r3, #32
 8014648:	693a      	ldr	r2, [r7, #16]
 801464a:	fa02 f303 	lsl.w	r3, r2, r3
 801464e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 8014650:	6a3b      	ldr	r3, [r7, #32]
 8014652:	1f1a      	subs	r2, r3, #4
 8014654:	623a      	str	r2, [r7, #32]
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	429a      	cmp	r2, r3
 801465a:	d3e8      	bcc.n	801462e <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	3324      	adds	r3, #36	@ 0x24
 8014660:	69ba      	ldr	r2, [r7, #24]
 8014662:	b252      	sxtb	r2, r2
 8014664:	68f9      	ldr	r1, [r7, #12]
 8014666:	4618      	mov	r0, r3
 8014668:	f7fe fac9 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 801466c:	4603      	mov	r3, r0
 801466e:	2b01      	cmp	r3, #1
 8014670:	d00a      	beq.n	8014688 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8014678:	69bb      	ldr	r3, [r7, #24]
 801467a:	b25b      	sxtb	r3, r3
 801467c:	68f9      	ldr	r1, [r7, #12]
 801467e:	68f8      	ldr	r0, [r7, #12]
 8014680:	f7fe fbd0 	bl	8012e24 <mg_uecc_vli_sub>
 8014684:	e000      	b.n	8014688 <bits2int+0xde>
    return;
 8014686:	bf00      	nop
  }
}
 8014688:	3728      	adds	r7, #40	@ 0x28
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
	...

08014690 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 8014690:	b590      	push	{r4, r7, lr}
 8014692:	b0ad      	sub	sp, #180	@ 0xb4
 8014694:	af02      	add	r7, sp, #8
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	607a      	str	r2, [r7, #4]
 801469c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 801469e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80146a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80146a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80146a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 80146aa:	2300      	movs	r3, #0
 80146ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 80146b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80146ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80146be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80146c2:	331f      	adds	r3, #31
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	da00      	bge.n	80146ca <mg_uecc_sign_with_k_internal+0x3a>
 80146c8:	331f      	adds	r3, #31
 80146ca:	115b      	asrs	r3, r3, #5
 80146cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 80146d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80146d4:	885b      	ldrh	r3, [r3, #2]
 80146d6:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 80146da:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 80146de:	4619      	mov	r1, r3
 80146e0:	6838      	ldr	r0, [r7, #0]
 80146e2:	f7fe f9c3 	bl	8012a6c <mg_uecc_vli_isZero>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d10b      	bne.n	8014704 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 80146ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80146f0:	3324      	adds	r3, #36	@ 0x24
 80146f2:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80146f6:	6839      	ldr	r1, [r7, #0]
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7fe faee 	bl	8012cda <mg_uecc_vli_cmp>
 80146fe:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 8014700:	2b01      	cmp	r3, #1
 8014702:	d001      	beq.n	8014708 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 8014704:	2300      	movs	r3, #0
 8014706:	e128      	b.n	801495a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 8014708:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801470c:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8014710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014714:	6838      	ldr	r0, [r7, #0]
 8014716:	f7ff fe33 	bl	8014380 <regularize_k>
 801471a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 801471e:	4b91      	ldr	r3, [pc, #580]	@ (8014964 <mg_uecc_sign_with_k_internal+0x2d4>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d01c      	beq.n	8014760 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 8014726:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	33a8      	adds	r3, #168	@ 0xa8
 801472e:	443b      	add	r3, r7
 8014730:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8014734:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014738:	3304      	adds	r3, #4
 801473a:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801473e:	4619      	mov	r1, r3
 8014740:	f7ff fe60 	bl	8014404 <mg_uecc_generate_random_int>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d101      	bne.n	801474e <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 801474a:	2300      	movs	r3, #0
 801474c:	e105      	b.n	801495a <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 801474e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8014752:	009b      	lsls	r3, r3, #2
 8014754:	33a8      	adds	r3, #168	@ 0xa8
 8014756:	443b      	add	r3, r7
 8014758:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801475c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 8014760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014764:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8014768:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801476c:	2b00      	cmp	r3, #0
 801476e:	bf0c      	ite	eq
 8014770:	2301      	moveq	r3, #1
 8014772:	2300      	movne	r3, #0
 8014774:	b2db      	uxtb	r3, r3
 8014776:	009b      	lsls	r3, r3, #2
 8014778:	33a8      	adds	r3, #168	@ 0xa8
 801477a:	443b      	add	r3, r7
 801477c:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 8014780:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8014784:	3301      	adds	r3, #1
 8014786:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 8014788:	b21b      	sxth	r3, r3
 801478a:	f107 0014 	add.w	r0, r7, #20
 801478e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8014792:	9201      	str	r2, [sp, #4]
 8014794:	9300      	str	r3, [sp, #0]
 8014796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801479a:	4622      	mov	r2, r4
 801479c:	f7ff fc8f 	bl	80140be <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 80147a0:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 80147a4:	f107 0314 	add.w	r3, r7, #20
 80147a8:	4611      	mov	r1, r2
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7fe f95e 	bl	8012a6c <mg_uecc_vli_isZero>
 80147b0:	4603      	mov	r3, r0
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d001      	beq.n	80147ba <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 80147b6:	2300      	movs	r3, #0
 80147b8:	e0cf      	b.n	801495a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 80147ba:	4b6a      	ldr	r3, [pc, #424]	@ (8014964 <mg_uecc_sign_with_k_internal+0x2d4>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d10a      	bne.n	80147d8 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 80147c2:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80147c6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80147ca:	4611      	mov	r1, r2
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7fe f92c 	bl	8012a2a <mg_uecc_vli_clear>
    tmp[0] = 1;
 80147d2:	2301      	movs	r3, #1
 80147d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80147d6:	e00f      	b.n	80147f8 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 80147d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80147dc:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80147e0:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80147e4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7ff fe0b 	bl	8014404 <mg_uecc_generate_random_int>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d101      	bne.n	80147f8 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 80147f4:	2300      	movs	r3, #0
 80147f6:	e0b0      	b.n	801495a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 80147f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80147fc:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8014800:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8014804:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8014808:	9300      	str	r3, [sp, #0]
 801480a:	460b      	mov	r3, r1
 801480c:	6839      	ldr	r1, [r7, #0]
 801480e:	6838      	ldr	r0, [r7, #0]
 8014810:	f7fe fddc 	bl	80133cc <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 8014814:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014818:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801481c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8014820:	6839      	ldr	r1, [r7, #0]
 8014822:	6838      	ldr	r0, [r7, #0]
 8014824:	f7fe fe51 	bl	80134ca <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 8014828:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801482c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8014830:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8014834:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8014838:	9300      	str	r3, [sp, #0]
 801483a:	460b      	mov	r3, r1
 801483c:	6839      	ldr	r1, [r7, #0]
 801483e:	6838      	ldr	r0, [r7, #0]
 8014840:	f7fe fdc4 	bl	80133cc <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 8014844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014848:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801484c:	4619      	mov	r1, r3
 801484e:	f107 0314 	add.w	r3, r7, #20
 8014852:	461a      	mov	r2, r3
 8014854:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8014858:	f7ff fe3e 	bl	80144d8 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 801485c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014860:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014864:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 8014866:	2b00      	cmp	r3, #0
 8014868:	da00      	bge.n	801486c <mg_uecc_sign_with_k_internal+0x1dc>
 801486a:	3307      	adds	r3, #7
 801486c:	10db      	asrs	r3, r3, #3
 801486e:	461a      	mov	r2, r3
 8014870:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8014874:	68f9      	ldr	r1, [r7, #12]
 8014876:	4618      	mov	r0, r3
 8014878:	f7ff fe5b 	bl	8014532 <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 801487c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8014880:	3b01      	subs	r3, #1
 8014882:	009b      	lsls	r3, r3, #2
 8014884:	33a8      	adds	r3, #168	@ 0xa8
 8014886:	443b      	add	r3, r7
 8014888:	2200      	movs	r2, #0
 801488a:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 801488e:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 8014892:	f107 0114 	add.w	r1, r7, #20
 8014896:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801489a:	4618      	mov	r0, r3
 801489c:	f7fe f988 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 80148a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80148a4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80148a8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80148ac:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80148b0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80148b4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80148b8:	9300      	str	r3, [sp, #0]
 80148ba:	4623      	mov	r3, r4
 80148bc:	f7fe fd86 	bl	80133cc <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 80148c0:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80148c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	68b9      	ldr	r1, [r7, #8]
 80148cc:	f7ff fe6d 	bl	80145aa <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 80148d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80148d4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80148d8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80148dc:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80148e0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80148e4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80148e8:	9300      	str	r3, [sp, #0]
 80148ea:	4623      	mov	r3, r4
 80148ec:	f7fe fbee 	bl	80130cc <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 80148f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80148f4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80148f8:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80148fc:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8014900:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8014904:	9300      	str	r3, [sp, #0]
 8014906:	4613      	mov	r3, r2
 8014908:	683a      	ldr	r2, [r7, #0]
 801490a:	f7fe fd5f 	bl	80133cc <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 801490e:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8014912:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014916:	4611      	mov	r1, r2
 8014918:	4618      	mov	r0, r3
 801491a:	f7fe f911 	bl	8012b40 <mg_uecc_vli_numBits>
 801491e:	4603      	mov	r3, r0
 8014920:	461a      	mov	r2, r3
 8014922:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014926:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801492a:	00db      	lsls	r3, r3, #3
 801492c:	429a      	cmp	r2, r3
 801492e:	dd01      	ble.n	8014934 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 8014930:	2300      	movs	r3, #0
 8014932:	e012      	b.n	801495a <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 8014934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014938:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801493c:	461a      	mov	r2, r3
 801493e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8014942:	1898      	adds	r0, r3, r2
 8014944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014948:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801494c:	4619      	mov	r1, r3
 801494e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014952:	461a      	mov	r2, r3
 8014954:	f7ff fdc0 	bl	80144d8 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 8014958:	2301      	movs	r3, #1
}
 801495a:	4618      	mov	r0, r3
 801495c:	37ac      	adds	r7, #172	@ 0xac
 801495e:	46bd      	mov	sp, r7
 8014960:	bd90      	pop	{r4, r7, pc}
 8014962:	bf00      	nop
 8014964:	24002bf0 	.word	0x24002bf0

08014968 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 8014968:	b580      	push	{r7, lr}
 801496a:	b084      	sub	sp, #16
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
 8014970:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	695a      	ldr	r2, [r3, #20]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	691b      	ldr	r3, [r3, #16]
 801497a:	005b      	lsls	r3, r3, #1
 801497c:	4413      	add	r3, r2
 801497e:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 8014980:	2300      	movs	r3, #0
 8014982:	60fb      	str	r3, [r7, #12]
 8014984:	e00d      	b.n	80149a2 <HMAC_init+0x3a>
 8014986:	683a      	ldr	r2, [r7, #0]
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	4413      	add	r3, r2
 801498c:	781a      	ldrb	r2, [r3, #0]
 801498e:	68b9      	ldr	r1, [r7, #8]
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	440b      	add	r3, r1
 8014994:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 8014998:	b2d2      	uxtb	r2, r2
 801499a:	701a      	strb	r2, [r3, #0]
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	3301      	adds	r3, #1
 80149a0:	60fb      	str	r3, [r7, #12]
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	691b      	ldr	r3, [r3, #16]
 80149a6:	68fa      	ldr	r2, [r7, #12]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	d3ec      	bcc.n	8014986 <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 80149ac:	e007      	b.n	80149be <HMAC_init+0x56>
 80149ae:	68ba      	ldr	r2, [r7, #8]
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	4413      	add	r3, r2
 80149b4:	2236      	movs	r2, #54	@ 0x36
 80149b6:	701a      	strb	r2, [r3, #0]
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	3301      	adds	r3, #1
 80149bc:	60fb      	str	r3, [r7, #12]
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	68db      	ldr	r3, [r3, #12]
 80149c2:	68fa      	ldr	r2, [r7, #12]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d3f2      	bcc.n	80149ae <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	685b      	ldr	r3, [r3, #4]
 80149d4:	687a      	ldr	r2, [r7, #4]
 80149d6:	68d2      	ldr	r2, [r2, #12]
 80149d8:	68b9      	ldr	r1, [r7, #8]
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	4798      	blx	r3
}
 80149de:	bf00      	nop
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}

080149e6 <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 80149e6:	b580      	push	{r7, lr}
 80149e8:	b084      	sub	sp, #16
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	60f8      	str	r0, [r7, #12]
 80149ee:	60b9      	str	r1, [r7, #8]
 80149f0:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	687a      	ldr	r2, [r7, #4]
 80149f8:	68b9      	ldr	r1, [r7, #8]
 80149fa:	68f8      	ldr	r0, [r7, #12]
 80149fc:	4798      	blx	r3
}
 80149fe:	bf00      	nop
 8014a00:	3710      	adds	r7, #16
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}

08014a06 <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 8014a06:	b580      	push	{r7, lr}
 8014a08:	b086      	sub	sp, #24
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	60f8      	str	r0, [r7, #12]
 8014a0e:	60b9      	str	r1, [r7, #8]
 8014a10:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	695a      	ldr	r2, [r3, #20]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	691b      	ldr	r3, [r3, #16]
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	4413      	add	r3, r2
 8014a1e:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 8014a20:	2300      	movs	r3, #0
 8014a22:	617b      	str	r3, [r7, #20]
 8014a24:	e00d      	b.n	8014a42 <HMAC_finish+0x3c>
 8014a26:	68ba      	ldr	r2, [r7, #8]
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	4413      	add	r3, r2
 8014a2c:	781a      	ldrb	r2, [r3, #0]
 8014a2e:	6939      	ldr	r1, [r7, #16]
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	440b      	add	r3, r1
 8014a34:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 8014a38:	b2d2      	uxtb	r2, r2
 8014a3a:	701a      	strb	r2, [r3, #0]
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	3301      	adds	r3, #1
 8014a40:	617b      	str	r3, [r7, #20]
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	691b      	ldr	r3, [r3, #16]
 8014a46:	697a      	ldr	r2, [r7, #20]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d3ec      	bcc.n	8014a26 <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 8014a4c:	e007      	b.n	8014a5e <HMAC_finish+0x58>
 8014a4e:	693a      	ldr	r2, [r7, #16]
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	4413      	add	r3, r2
 8014a54:	225c      	movs	r2, #92	@ 0x5c
 8014a56:	701a      	strb	r2, [r3, #0]
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	617b      	str	r3, [r7, #20]
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	68db      	ldr	r3, [r3, #12]
 8014a62:	697a      	ldr	r2, [r7, #20]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d3f2      	bcc.n	8014a4e <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	689b      	ldr	r3, [r3, #8]
 8014a6c:	6879      	ldr	r1, [r7, #4]
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	68f8      	ldr	r0, [r7, #12]
 8014a78:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	68fa      	ldr	r2, [r7, #12]
 8014a80:	68d2      	ldr	r2, [r2, #12]
 8014a82:	6939      	ldr	r1, [r7, #16]
 8014a84:	68f8      	ldr	r0, [r7, #12]
 8014a86:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	68fa      	ldr	r2, [r7, #12]
 8014a8e:	6912      	ldr	r2, [r2, #16]
 8014a90:	6879      	ldr	r1, [r7, #4]
 8014a92:	68f8      	ldr	r0, [r7, #12]
 8014a94:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	689b      	ldr	r3, [r3, #8]
 8014a9a:	6879      	ldr	r1, [r7, #4]
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	4798      	blx	r3
}
 8014aa0:	bf00      	nop
 8014aa2:	3718      	adds	r7, #24
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	60f8      	str	r0, [r7, #12]
 8014ab0:	60b9      	str	r1, [r7, #8]
 8014ab2:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 8014ab4:	68b9      	ldr	r1, [r7, #8]
 8014ab6:	68f8      	ldr	r0, [r7, #12]
 8014ab8:	f7ff ff56 	bl	8014968 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	691b      	ldr	r3, [r3, #16]
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	6879      	ldr	r1, [r7, #4]
 8014ac4:	68f8      	ldr	r0, [r7, #12]
 8014ac6:	f7ff ff8e 	bl	80149e6 <HMAC_update>
  HMAC_finish(hash_context, K, V);
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	68b9      	ldr	r1, [r7, #8]
 8014ace:	68f8      	ldr	r0, [r7, #12]
 8014ad0:	f7ff ff99 	bl	8014a06 <HMAC_finish>
}
 8014ad4:	bf00      	nop
 8014ad6:	3710      	adds	r7, #16
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b096      	sub	sp, #88	@ 0x58
 8014ae0:	af02      	add	r7, sp, #8
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	607a      	str	r2, [r7, #4]
 8014ae8:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	695b      	ldr	r3, [r3, #20]
 8014aee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	691b      	ldr	r3, [r3, #16]
 8014af4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014af6:	4413      	add	r3, r2
 8014af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 8014afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014afc:	785b      	ldrb	r3, [r3, #1]
 8014afe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8014b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014b08:	331f      	adds	r3, #31
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	da00      	bge.n	8014b10 <mg_uecc_sign_deterministic+0x34>
 8014b0e:	331f      	adds	r3, #31
 8014b10:	115b      	asrs	r3, r3, #5
 8014b12:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 8014b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b18:	885b      	ldrh	r3, [r3, #2]
 8014b1a:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014b20:	e00c      	b.n	8014b3c <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 8014b22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014b26:	4413      	add	r3, r2
 8014b28:	2201      	movs	r2, #1
 8014b2a:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 8014b2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014b30:	4413      	add	r3, r2
 8014b32:	2200      	movs	r2, #0
 8014b34:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 8014b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014b38:	3301      	adds	r3, #1
 8014b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	691b      	ldr	r3, [r3, #16]
 8014b40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014b42:	429a      	cmp	r2, r3
 8014b44:	d3ed      	bcc.n	8014b22 <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 8014b46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014b48:	6838      	ldr	r0, [r7, #0]
 8014b4a:	f7ff ff0d 	bl	8014968 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	691b      	ldr	r3, [r3, #16]
 8014b52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014b54:	4413      	add	r3, r2
 8014b56:	2200      	movs	r2, #0
 8014b58:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	691b      	ldr	r3, [r3, #16]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	461a      	mov	r2, r3
 8014b62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014b64:	6838      	ldr	r0, [r7, #0]
 8014b66:	f7ff ff3e 	bl	80149e6 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 8014b6a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8014b6e:	461a      	mov	r2, r3
 8014b70:	68f9      	ldr	r1, [r7, #12]
 8014b72:	6838      	ldr	r0, [r7, #0]
 8014b74:	f7ff ff37 	bl	80149e6 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	68b9      	ldr	r1, [r7, #8]
 8014b7c:	6838      	ldr	r0, [r7, #0]
 8014b7e:	f7ff ff32 	bl	80149e6 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 8014b82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014b84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014b86:	6838      	ldr	r0, [r7, #0]
 8014b88:	f7ff ff3d 	bl	8014a06 <HMAC_finish>

  update_V(hash_context, K, V);
 8014b8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014b8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014b90:	6838      	ldr	r0, [r7, #0]
 8014b92:	f7ff ff89 	bl	8014aa8 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 8014b96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014b98:	6838      	ldr	r0, [r7, #0]
 8014b9a:	f7ff fee5 	bl	8014968 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	691b      	ldr	r3, [r3, #16]
 8014ba2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014ba4:	4413      	add	r3, r2
 8014ba6:	2201      	movs	r2, #1
 8014ba8:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	691b      	ldr	r3, [r3, #16]
 8014bae:	3301      	adds	r3, #1
 8014bb0:	461a      	mov	r2, r3
 8014bb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014bb4:	6838      	ldr	r0, [r7, #0]
 8014bb6:	f7ff ff16 	bl	80149e6 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 8014bba:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	68f9      	ldr	r1, [r7, #12]
 8014bc2:	6838      	ldr	r0, [r7, #0]
 8014bc4:	f7ff ff0f 	bl	80149e6 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	68b9      	ldr	r1, [r7, #8]
 8014bcc:	6838      	ldr	r0, [r7, #0]
 8014bce:	f7ff ff0a 	bl	80149e6 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 8014bd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014bd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014bd6:	6838      	ldr	r0, [r7, #0]
 8014bd8:	f7ff ff15 	bl	8014a06 <HMAC_finish>

  update_V(hash_context, K, V);
 8014bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014bde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014be0:	6838      	ldr	r0, [r7, #0]
 8014be2:	f7ff ff61 	bl	8014aa8 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8014be6:	2300      	movs	r3, #0
 8014be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014bea:	e084      	b.n	8014cf6 <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 8014bec:	f107 0310 	add.w	r3, r7, #16
 8014bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 8014bf8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014bfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014bfc:	6838      	ldr	r0, [r7, #0]
 8014bfe:	f7ff ff53 	bl	8014aa8 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 8014c02:	2300      	movs	r3, #0
 8014c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c06:	e017      	b.n	8014c38 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 8014c08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c0c:	441a      	add	r2, r3
 8014c0e:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 8014c12:	b2cb      	uxtb	r3, r1
 8014c14:	3301      	adds	r3, #1
 8014c16:	b2db      	uxtb	r3, r3
 8014c18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8014c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c1e:	440b      	add	r3, r1
 8014c20:	7812      	ldrb	r2, [r2, #0]
 8014c22:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 8014c24:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 8014c28:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	da08      	bge.n	8014c44 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 8014c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c34:	3301      	adds	r3, #1
 8014c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	691b      	ldr	r3, [r3, #16]
 8014c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	d3e2      	bcc.n	8014c08 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 8014c42:	e7d9      	b.n	8014bf8 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 8014c44:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 8014c46:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8014c4a:	015a      	lsls	r2, r3, #5
 8014c4c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8014c50:	429a      	cmp	r2, r3
 8014c52:	dd20      	ble.n	8014c96 <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8014c54:	f04f 33ff 	mov.w	r3, #4294967295
 8014c58:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 8014c5a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8014c5e:	3b01      	subs	r3, #1
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	3350      	adds	r3, #80	@ 0x50
 8014c64:	443b      	add	r3, r7
 8014c66:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 8014c6a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	015b      	lsls	r3, r3, #5
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014c76:	1ad3      	subs	r3, r2, r3
 8014c78:	b29b      	uxth	r3, r3
 8014c7a:	b21b      	sxth	r3, r3
 8014c7c:	461a      	mov	r2, r3
          mask >>
 8014c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c80:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 8014c84:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8014c88:	3b01      	subs	r3, #1
 8014c8a:	400a      	ands	r2, r1
 8014c8c:	009b      	lsls	r3, r3, #2
 8014c8e:	3350      	adds	r3, #80	@ 0x50
 8014c90:	443b      	add	r3, r7
 8014c92:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 8014c96:	f107 0210 	add.w	r2, r7, #16
 8014c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c9c:	9301      	str	r3, [sp, #4]
 8014c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ca0:	9300      	str	r3, [sp, #0]
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	687a      	ldr	r2, [r7, #4]
 8014ca6:	68b9      	ldr	r1, [r7, #8]
 8014ca8:	68f8      	ldr	r0, [r7, #12]
 8014caa:	f7ff fcf1 	bl	8014690 <mg_uecc_sign_with_k_internal>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d001      	beq.n	8014cb8 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 8014cb4:	2301      	movs	r3, #1
 8014cb6:	e023      	b.n	8014d00 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 8014cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014cba:	6838      	ldr	r0, [r7, #0]
 8014cbc:	f7ff fe54 	bl	8014968 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	691b      	ldr	r3, [r3, #16]
 8014cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014cc6:	4413      	add	r3, r2
 8014cc8:	2200      	movs	r2, #0
 8014cca:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	691b      	ldr	r3, [r3, #16]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014cd6:	6838      	ldr	r0, [r7, #0]
 8014cd8:	f7ff fe85 	bl	80149e6 <HMAC_update>
    HMAC_finish(hash_context, K, K);
 8014cdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014cde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014ce0:	6838      	ldr	r0, [r7, #0]
 8014ce2:	f7ff fe90 	bl	8014a06 <HMAC_finish>

    update_V(hash_context, K, V);
 8014ce6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014ce8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014cea:	6838      	ldr	r0, [r7, #0]
 8014cec:	f7ff fedc 	bl	8014aa8 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8014cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014cf8:	2b3f      	cmp	r3, #63	@ 0x3f
 8014cfa:	f67f af77 	bls.w	8014bec <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 8014cfe:	2300      	movs	r3, #0
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3750      	adds	r7, #80	@ 0x50
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	4603      	mov	r3, r0
 8014d10:	460a      	mov	r2, r1
 8014d12:	80fb      	strh	r3, [r7, #6]
 8014d14:	4613      	mov	r3, r2
 8014d16:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 8014d18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d20:	4293      	cmp	r3, r2
 8014d22:	bfb8      	it	lt
 8014d24:	4613      	movlt	r3, r2
 8014d26:	b21b      	sxth	r3, r3
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	370c      	adds	r7, #12
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr

08014d34 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 8014d34:	b590      	push	{r4, r7, lr}
 8014d36:	b0ff      	sub	sp, #508	@ 0x1fc
 8014d38:	af02      	add	r7, sp, #8
 8014d3a:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 8014d3e:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 8014d42:	6020      	str	r0, [r4, #0]
 8014d44:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 8014d48:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 8014d4c:	6001      	str	r1, [r0, #0]
 8014d4e:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8014d52:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 8014d56:	600a      	str	r2, [r1, #0]
 8014d58:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8014d5c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8014d60:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8014d62:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014d66:	781b      	ldrb	r3, [r3, #0]
 8014d68:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8014d6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014d70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014d74:	331f      	adds	r3, #31
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	da00      	bge.n	8014d7c <mg_uecc_verify+0x48>
 8014d7a:	331f      	adds	r3, #31
 8014d7c:	115b      	asrs	r3, r3, #5
 8014d7e:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 8014d82:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8014d86:	3b01      	subs	r3, #1
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8014d8e:	443b      	add	r3, r7
 8014d90:	2200      	movs	r2, #0
 8014d92:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 8014d96:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8014d9a:	1e5a      	subs	r2, r3, #1
 8014d9c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8014da0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8014da4:	2100      	movs	r1, #0
 8014da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 8014daa:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8014dae:	1e5a      	subs	r2, r3, #1
 8014db0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8014db4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8014db8:	2100      	movs	r1, #0
 8014dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8014dbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014dc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014dc6:	461a      	mov	r2, r3
 8014dc8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8014dcc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8014dd0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8014dd4:	6819      	ldr	r1, [r3, #0]
 8014dd6:	f7ff fbac 	bl	8014532 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8014dda:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8014dde:	009b      	lsls	r3, r3, #2
 8014de0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8014de4:	18d0      	adds	r0, r2, r3
 8014de6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014dea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014dee:	461a      	mov	r2, r3
 8014df0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8014df4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 8014dfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014e00:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8014e04:	461a      	mov	r2, r3
 8014e06:	f7ff fb94 	bl	8014532 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 8014e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014e0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e12:	461a      	mov	r2, r3
 8014e14:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8014e18:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8014e1c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8014e20:	6819      	ldr	r1, [r3, #0]
 8014e22:	f7ff fb86 	bl	8014532 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 8014e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014e2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e2e:	461a      	mov	r2, r3
 8014e30:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8014e34:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	1899      	adds	r1, r3, r2
 8014e3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014e40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e44:	461a      	mov	r2, r3
 8014e46:	f107 0310 	add.w	r3, r7, #16
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7ff fb71 	bl	8014532 <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 8014e50:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8014e54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014e58:	4611      	mov	r1, r2
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7fd fe06 	bl	8012a6c <mg_uecc_vli_isZero>
 8014e60:	4603      	mov	r3, r0
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d10a      	bne.n	8014e7c <mg_uecc_verify+0x148>
 8014e66:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8014e6a:	f107 0310 	add.w	r3, r7, #16
 8014e6e:	4611      	mov	r1, r2
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7fd fdfb 	bl	8012a6c <mg_uecc_vli_isZero>
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d001      	beq.n	8014e80 <mg_uecc_verify+0x14c>
    return 0;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	e220      	b.n	80152c2 <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8014e80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014e84:	3324      	adds	r3, #36	@ 0x24
 8014e86:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8014e8a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7fd feb5 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 8014e94:	4603      	mov	r3, r0
 8014e96:	2b01      	cmp	r3, #1
 8014e98:	d10c      	bne.n	8014eb4 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 8014e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014e9e:	3324      	adds	r3, #36	@ 0x24
 8014ea0:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8014ea4:	f107 0110 	add.w	r1, r7, #16
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7fd fea8 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 8014eae:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8014eb0:	2b01      	cmp	r3, #1
 8014eb2:	d001      	beq.n	8014eb8 <mg_uecc_verify+0x184>
    return 0;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	e204      	b.n	80152c2 <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8014eb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014ebc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8014ec0:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8014ec4:	f107 0110 	add.w	r1, r7, #16
 8014ec8:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8014ecc:	f7fe fafd 	bl	80134ca <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8014ed0:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8014ed4:	3b01      	subs	r3, #1
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8014edc:	443b      	add	r3, r7
 8014ede:	2200      	movs	r2, #0
 8014ee0:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 8014ee4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8014ee8:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8014eec:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8014ef0:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 8014ef4:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8014ef8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014efc:	6812      	ldr	r2, [r2, #0]
 8014efe:	6809      	ldr	r1, [r1, #0]
 8014f00:	f7ff fb53 	bl	80145aa <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8014f04:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014f08:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8014f0c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8014f10:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 8014f14:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8014f18:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8014f1c:	9300      	str	r3, [sp, #0]
 8014f1e:	4623      	mov	r3, r4
 8014f20:	f7fe fa54 	bl	80133cc <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 8014f24:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014f28:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8014f2c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8014f30:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014f34:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8014f38:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8014f3c:	9300      	str	r3, [sp, #0]
 8014f3e:	4623      	mov	r3, r4
 8014f40:	f7fe fa44 	bl	80133cc <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 8014f44:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8014f48:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8014f4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014f50:	4618      	mov	r0, r3
 8014f52:	f7fd fe2d 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 8014f56:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8014f5a:	009b      	lsls	r3, r3, #2
 8014f5c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014f60:	18d0      	adds	r0, r2, r3
 8014f62:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8014f6c:	4413      	add	r3, r2
 8014f6e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8014f72:	4619      	mov	r1, r3
 8014f74:	f7fd fe1c 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 8014f78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014f7c:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8014f80:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8014f84:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7fd fe11 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 8014f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014f92:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8014f96:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8014f9a:	009b      	lsls	r3, r3, #2
 8014f9c:	18d1      	adds	r1, r2, r3
 8014f9e:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8014fa2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7fd fe02 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8014fac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014fb0:	1d1c      	adds	r4, r3, #4
 8014fb2:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8014fb6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8014fba:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8014fbe:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8014fc2:	9300      	str	r3, [sp, #0]
 8014fc4:	4623      	mov	r3, r4
 8014fc6:	f7fe f8a8 	bl	801311a <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8014fca:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8014fce:	009b      	lsls	r3, r3, #2
 8014fd0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014fd4:	18d4      	adds	r4, r2, r3
 8014fd6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014fda:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8014fde:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8014fe2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	4623      	mov	r3, r4
 8014fea:	f7fe fedd 	bl	8013da8 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8014fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8014ff2:	1d1a      	adds	r2, r3, #4
 8014ff4:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8014ff8:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8014ffc:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8015000:	f7fe fa63 	bl	80134ca <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 8015004:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801500e:	18d1      	adds	r1, r2, r3
 8015010:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8015014:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8015018:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801501c:	f7fe fe52 	bl	8013cc4 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 8015020:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8015024:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8015028:	2200      	movs	r2, #0
 801502a:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 801502c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8015030:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8015034:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8015038:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801503c:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 801503e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8015042:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8015046:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801504a:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 801504c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8015050:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8015054:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015058:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 801505a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801505e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8015062:	4611      	mov	r1, r2
 8015064:	4618      	mov	r0, r3
 8015066:	f7fd fd6b 	bl	8012b40 <mg_uecc_vli_numBits>
 801506a:	4603      	mov	r3, r0
 801506c:	461c      	mov	r4, r3
 801506e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8015072:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8015076:	4611      	mov	r1, r2
 8015078:	4618      	mov	r0, r3
 801507a:	f7fd fd61 	bl	8012b40 <mg_uecc_vli_numBits>
 801507e:	4603      	mov	r3, r0
 8015080:	4619      	mov	r1, r3
 8015082:	4620      	mov	r0, r4
 8015084:	f7ff fe40 	bl	8014d08 <smax>
 8015088:	4603      	mov	r3, r0
 801508a:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801508e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8015092:	3b01      	subs	r3, #1
 8015094:	b29b      	uxth	r3, r3
 8015096:	b21a      	sxth	r2, r3
 8015098:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801509c:	4611      	mov	r1, r2
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fd fd0e 	bl	8012ac0 <mg_uecc_vli_testBit>
 80150a4:	4603      	mov	r3, r0
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	bf14      	ite	ne
 80150aa:	2301      	movne	r3, #1
 80150ac:	2300      	moveq	r3, #0
 80150ae:	b2db      	uxtb	r3, r3
 80150b0:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 80150b2:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 80150b6:	3b01      	subs	r3, #1
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	b21a      	sxth	r2, r3
 80150bc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80150c0:	4611      	mov	r1, r2
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7fd fcfc 	bl	8012ac0 <mg_uecc_vli_testBit>
 80150c8:	4603      	mov	r3, r0
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d001      	beq.n	80150d2 <mg_uecc_verify+0x39e>
 80150ce:	2302      	movs	r3, #2
 80150d0:	e000      	b.n	80150d4 <mg_uecc_verify+0x3a0>
 80150d2:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 80150d4:	ea43 0204 	orr.w	r2, r3, r4
  point =
 80150d8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80150dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80150e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150e4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 80150e8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80150ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80150f0:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7fd fd5b 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 80150fa:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80150fe:	009b      	lsls	r3, r3, #2
 8015100:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8015104:	18d1      	adds	r1, r2, r3
 8015106:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801510a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801510e:	4618      	mov	r0, r3
 8015110:	f7fd fd4e 	bl	8012bb0 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 8015114:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8015118:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 801511c:	4611      	mov	r1, r2
 801511e:	4618      	mov	r0, r3
 8015120:	f7fd fc83 	bl	8012a2a <mg_uecc_vli_clear>
  z[0] = 1;
 8015124:	2301      	movs	r3, #1
 8015126:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 801512a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801512e:	3b02      	subs	r3, #2
 8015130:	b29b      	uxth	r3, r3
 8015132:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8015136:	e087      	b.n	8015248 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 8015138:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801513c:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8015140:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8015144:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8015148:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801514c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8015150:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8015152:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8015156:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801515a:	4611      	mov	r1, r2
 801515c:	4618      	mov	r0, r3
 801515e:	f7fd fcaf 	bl	8012ac0 <mg_uecc_vli_testBit>
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	bf14      	ite	ne
 8015168:	2301      	movne	r3, #1
 801516a:	2300      	moveq	r3, #0
 801516c:	b2db      	uxtb	r3, r3
 801516e:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8015170:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8015174:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8015178:	4611      	mov	r1, r2
 801517a:	4618      	mov	r0, r3
 801517c:	f7fd fca0 	bl	8012ac0 <mg_uecc_vli_testBit>
 8015180:	4603      	mov	r3, r0
 8015182:	2b00      	cmp	r3, #0
 8015184:	d001      	beq.n	801518a <mg_uecc_verify+0x456>
 8015186:	2302      	movs	r3, #2
 8015188:	e000      	b.n	801518c <mg_uecc_verify+0x458>
 801518a:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 801518c:	4323      	orrs	r3, r4
 801518e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 8015192:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8015196:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801519a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801519e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151a2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 80151a6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d046      	beq.n	801523c <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 80151ae:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80151b2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80151b6:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7fd fcf8 	bl	8012bb0 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 80151c0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80151c4:	009b      	lsls	r3, r3, #2
 80151c6:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 80151ca:	18d1      	adds	r1, r2, r3
 80151cc:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80151d0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7fd fceb 	bl	8012bb0 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 80151da:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80151de:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80151e2:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80151e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80151ea:	f7fe fd6b 	bl	8013cc4 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 80151ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80151f2:	1d1c      	adds	r4, r3, #4
 80151f4:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80151f8:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80151fc:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8015200:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8015204:	9300      	str	r3, [sp, #0]
 8015206:	4623      	mov	r3, r4
 8015208:	f7fd ff87 	bl	801311a <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 801520c:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8015210:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8015214:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8015218:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801521c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8015220:	9300      	str	r3, [sp, #0]
 8015222:	4623      	mov	r3, r4
 8015224:	f7fe fdc0 	bl	8013da8 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 8015228:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801522c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8015230:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8015234:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8015238:	f7fe f8e3 	bl	8013402 <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 801523c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8015240:	3b01      	subs	r3, #1
 8015242:	b29b      	uxth	r3, r3
 8015244:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8015248:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 801524c:	2b00      	cmp	r3, #0
 801524e:	f6bf af73 	bge.w	8015138 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8015252:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8015256:	1d1a      	adds	r2, r3, #4
 8015258:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801525c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8015260:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8015264:	f7fe f931 	bl	80134ca <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 8015268:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801526c:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8015270:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8015274:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8015278:	f7fe fd24 	bl	8013cc4 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 801527c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8015280:	3324      	adds	r3, #36	@ 0x24
 8015282:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8015286:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801528a:	4618      	mov	r0, r3
 801528c:	f7fd fcb7 	bl	8012bfe <mg_uecc_vli_cmp_unsafe>
 8015290:	4603      	mov	r3, r0
 8015292:	2b01      	cmp	r3, #1
 8015294:	d00b      	beq.n	80152ae <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 8015296:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801529a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801529e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80152a2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80152a6:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80152aa:	f7fd fdbb 	bl	8012e24 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 80152ae:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80152b2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80152b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80152ba:	4618      	mov	r0, r3
 80152bc:	f7fd fcdb 	bl	8012c76 <mg_uecc_vli_equal>
 80152c0:	4603      	mov	r3, r0
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd90      	pop	{r4, r7, pc}

080152cc <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 80152cc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80152d0:	b08f      	sub	sp, #60	@ 0x3c
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80152d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80152d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80152da:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 80152dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152de:	2200      	movs	r2, #0
 80152e0:	469a      	mov	sl, r3
 80152e2:	4693      	mov	fp, r2
 80152e4:	6a3b      	ldr	r3, [r7, #32]
 80152e6:	2200      	movs	r2, #0
 80152e8:	61bb      	str	r3, [r7, #24]
 80152ea:	61fa      	str	r2, [r7, #28]
 80152ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80152f0:	4603      	mov	r3, r0
 80152f2:	fb03 f20b 	mul.w	r2, r3, fp
 80152f6:	460b      	mov	r3, r1
 80152f8:	fb0a f303 	mul.w	r3, sl, r3
 80152fc:	4413      	add	r3, r2
 80152fe:	4602      	mov	r2, r0
 8015300:	fbaa 4502 	umull	r4, r5, sl, r2
 8015304:	442b      	add	r3, r5
 8015306:	461d      	mov	r5, r3
 8015308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801530a:	2200      	movs	r2, #0
 801530c:	613b      	str	r3, [r7, #16]
 801530e:	617a      	str	r2, [r7, #20]
 8015310:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8015314:	460b      	mov	r3, r1
 8015316:	eb14 0803 	adds.w	r8, r4, r3
 801531a:	4613      	mov	r3, r2
 801531c:	eb45 0903 	adc.w	r9, r5, r3
 8015320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2200      	movs	r2, #0
 8015326:	60bb      	str	r3, [r7, #8]
 8015328:	60fa      	str	r2, [r7, #12]
 801532a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801532e:	460b      	mov	r3, r1
 8015330:	eb18 0303 	adds.w	r3, r8, r3
 8015334:	603b      	str	r3, [r7, #0]
 8015336:	4613      	mov	r3, r2
 8015338:	eb49 0303 	adc.w	r3, r9, r3
 801533c:	607b      	str	r3, [r7, #4]
 801533e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015342:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 8015346:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801534a:	f04f 0200 	mov.w	r2, #0
 801534e:	f04f 0300 	mov.w	r3, #0
 8015352:	000a      	movs	r2, r1
 8015354:	2300      	movs	r3, #0
 8015356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015358:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 801535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801535c:	4618      	mov	r0, r3
 801535e:	373c      	adds	r7, #60	@ 0x3c
 8015360:	46bd      	mov	sp, r7
 8015362:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8015366:	4770      	bx	lr

08015368 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 8015368:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801536c:	b08b      	sub	sp, #44	@ 0x2c
 801536e:	af00      	add	r7, sp, #0
 8015370:	61f8      	str	r0, [r7, #28]
 8015372:	61b9      	str	r1, [r7, #24]
 8015374:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	2200      	movs	r2, #0
 801537c:	60bb      	str	r3, [r7, #8]
 801537e:	60fa      	str	r2, [r7, #12]
 8015380:	69bb      	ldr	r3, [r7, #24]
 8015382:	2200      	movs	r2, #0
 8015384:	469a      	mov	sl, r3
 8015386:	4693      	mov	fp, r2
 8015388:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801538c:	460b      	mov	r3, r1
 801538e:	eb13 040a 	adds.w	r4, r3, sl
 8015392:	4613      	mov	r3, r2
 8015394:	eb43 050b 	adc.w	r5, r3, fp
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	2200      	movs	r2, #0
 801539c:	4698      	mov	r8, r3
 801539e:	4691      	mov	r9, r2
 80153a0:	eb14 0308 	adds.w	r3, r4, r8
 80153a4:	603b      	str	r3, [r7, #0]
 80153a6:	eb45 0309 	adc.w	r3, r5, r9
 80153aa:	607b      	str	r3, [r7, #4]
 80153ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80153b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 80153b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80153b8:	f04f 0200 	mov.w	r2, #0
 80153bc:	f04f 0300 	mov.w	r3, #0
 80153c0:	000a      	movs	r2, r1
 80153c2:	2300      	movs	r3, #0
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 80153c8:	6a3b      	ldr	r3, [r7, #32]
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	372c      	adds	r7, #44	@ 0x2c
 80153ce:	46bd      	mov	sp, r7
 80153d0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80153d4:	4770      	bx	lr

080153d6 <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 80153d6:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80153da:	b085      	sub	sp, #20
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 80153e2:	6879      	ldr	r1, [r7, #4]
 80153e4:	6809      	ldr	r1, [r1, #0]
 80153e6:	2000      	movs	r0, #0
 80153e8:	460c      	mov	r4, r1
 80153ea:	4605      	mov	r5, r0
 80153ec:	6839      	ldr	r1, [r7, #0]
 80153ee:	2000      	movs	r0, #0
 80153f0:	460a      	mov	r2, r1
 80153f2:	4603      	mov	r3, r0
 80153f4:	eb14 0802 	adds.w	r8, r4, r2
 80153f8:	eb45 0903 	adc.w	r9, r5, r3
 80153fc:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 8015400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015404:	f04f 0200 	mov.w	r2, #0
 8015408:	f04f 0300 	mov.w	r3, #0
 801540c:	000a      	movs	r2, r1
 801540e:	2300      	movs	r3, #0
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8015414:	68bb      	ldr	r3, [r7, #8]
}
 8015416:	4618      	mov	r0, r3
 8015418:	3714      	adds	r7, #20
 801541a:	46bd      	mov	sp, r7
 801541c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8015420:	4770      	bx	lr

08015422 <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 8015422:	b590      	push	{r4, r7, lr}
 8015424:	b085      	sub	sp, #20
 8015426:	af00      	add	r7, sp, #0
 8015428:	6078      	str	r0, [r7, #4]
 801542a:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	331c      	adds	r3, #28
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	0fda      	lsrs	r2, r3, #31
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	005b      	lsls	r3, r3, #1
 8015438:	4313      	orrs	r3, r2
 801543a:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	331c      	adds	r3, #28
 8015440:	681a      	ldr	r2, [r3, #0]
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	331c      	adds	r3, #28
 8015446:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 801544a:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 801544c:	683a      	ldr	r2, [r7, #0]
 801544e:	4613      	mov	r3, r2
 8015450:	00db      	lsls	r3, r3, #3
 8015452:	4413      	add	r3, r2
 8015454:	005b      	lsls	r3, r3, #1
 8015456:	4413      	add	r3, r2
 8015458:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 801545a:	2300      	movs	r3, #0
 801545c:	60fb      	str	r3, [r7, #12]
 801545e:	e012      	b.n	8015486 <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	4413      	add	r3, r2
 8015468:	6819      	ldr	r1, [r3, #0]
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	009b      	lsls	r3, r3, #2
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	18d4      	adds	r4, r2, r3
 8015472:	f107 0308 	add.w	r3, r7, #8
 8015476:	4618      	mov	r0, r3
 8015478:	f7ff ffad 	bl	80153d6 <adc0>
 801547c:	4603      	mov	r3, r0
 801547e:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	3301      	adds	r3, #1
 8015484:	60fb      	str	r3, [r7, #12]
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	2b07      	cmp	r3, #7
 801548a:	d9e9      	bls.n	8015460 <propagate+0x3e>
  }
}
 801548c:	bf00      	nop
 801548e:	bf00      	nop
 8015490:	3714      	adds	r7, #20
 8015492:	46bd      	mov	sp, r7
 8015494:	bd90      	pop	{r4, r7, pc}

08015496 <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 8015496:	b590      	push	{r4, r7, lr}
 8015498:	b087      	sub	sp, #28
 801549a:	af00      	add	r7, sp, #0
 801549c:	60f8      	str	r0, [r7, #12]
 801549e:	60b9      	str	r1, [r7, #8]
 80154a0:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 80154a2:	2300      	movs	r3, #0
 80154a4:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 80154a6:	2300      	movs	r3, #0
 80154a8:	617b      	str	r3, [r7, #20]
 80154aa:	e018      	b.n	80154de <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	009b      	lsls	r3, r3, #2
 80154b0:	68ba      	ldr	r2, [r7, #8]
 80154b2:	4413      	add	r3, r2
 80154b4:	6819      	ldr	r1, [r3, #0]
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	009b      	lsls	r3, r3, #2
 80154ba:	687a      	ldr	r2, [r7, #4]
 80154bc:	4413      	add	r3, r2
 80154be:	6818      	ldr	r0, [r3, #0]
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	68fa      	ldr	r2, [r7, #12]
 80154c6:	18d4      	adds	r4, r2, r3
 80154c8:	f107 0310 	add.w	r3, r7, #16
 80154cc:	4602      	mov	r2, r0
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7ff ff4a 	bl	8015368 <adc>
 80154d4:	4603      	mov	r3, r0
 80154d6:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 80154d8:	697b      	ldr	r3, [r7, #20]
 80154da:	3301      	adds	r3, #1
 80154dc:	617b      	str	r3, [r7, #20]
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	2b07      	cmp	r3, #7
 80154e2:	d9e3      	bls.n	80154ac <add+0x16>
  }
  propagate(out, carry);
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	4619      	mov	r1, r3
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f7ff ff9a 	bl	8015422 <propagate>
}
 80154ee:	bf00      	nop
 80154f0:	371c      	adds	r7, #28
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd90      	pop	{r4, r7, pc}

080154f6 <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 80154f6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80154fa:	b08a      	sub	sp, #40	@ 0x28
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6178      	str	r0, [r7, #20]
 8015500:	6139      	str	r1, [r7, #16]
 8015502:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 8015504:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 8015508:	f04f 33ff 	mov.w	r3, #4294967295
 801550c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8015510:	2300      	movs	r3, #0
 8015512:	627b      	str	r3, [r7, #36]	@ 0x24
 8015514:	e032      	b.n	801557c <sub+0x86>
    carry = carry + a[i] - b[i];
 8015516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015518:	009b      	lsls	r3, r3, #2
 801551a:	693a      	ldr	r2, [r7, #16]
 801551c:	4413      	add	r3, r2
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	2200      	movs	r2, #0
 8015522:	4698      	mov	r8, r3
 8015524:	4691      	mov	r9, r2
 8015526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801552a:	eb18 0402 	adds.w	r4, r8, r2
 801552e:	eb49 0503 	adc.w	r5, r9, r3
 8015532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015534:	009b      	lsls	r3, r3, #2
 8015536:	68fa      	ldr	r2, [r7, #12]
 8015538:	4413      	add	r3, r2
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2200      	movs	r2, #0
 801553e:	469a      	mov	sl, r3
 8015540:	4693      	mov	fp, r2
 8015542:	ebb4 030a 	subs.w	r3, r4, sl
 8015546:	603b      	str	r3, [r7, #0]
 8015548:	eb65 030b 	sbc.w	r3, r5, fp
 801554c:	607b      	str	r3, [r7, #4]
 801554e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015552:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 8015556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	697a      	ldr	r2, [r7, #20]
 801555c:	4413      	add	r3, r2
 801555e:	69ba      	ldr	r2, [r7, #24]
 8015560:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 8015562:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8015566:	f04f 0200 	mov.w	r2, #0
 801556a:	f04f 0300 	mov.w	r3, #0
 801556e:	000a      	movs	r2, r1
 8015570:	17cb      	asrs	r3, r1, #31
 8015572:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8015576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015578:	3301      	adds	r3, #1
 801557a:	627b      	str	r3, [r7, #36]	@ 0x24
 801557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801557e:	2b07      	cmp	r3, #7
 8015580:	d9c9      	bls.n	8015516 <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	3301      	adds	r3, #1
 8015586:	4619      	mov	r1, r3
 8015588:	6978      	ldr	r0, [r7, #20]
 801558a:	f7ff ff4a 	bl	8015422 <propagate>
}
 801558e:	bf00      	nop
 8015590:	3728      	adds	r7, #40	@ 0x28
 8015592:	46bd      	mov	sp, r7
 8015594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015598 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 8015598:	b5b0      	push	{r4, r5, r7, lr}
 801559a:	b09a      	sub	sp, #104	@ 0x68
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 80155a6:	f107 031c 	add.w	r3, r7, #28
 80155aa:	2240      	movs	r2, #64	@ 0x40
 80155ac:	2100      	movs	r1, #0
 80155ae:	4618      	mov	r0, r3
 80155b0:	f00c ffbd 	bl	802252e <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 80155b4:	2300      	movs	r3, #0
 80155b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80155b8:	e03a      	b.n	8015630 <mul+0x98>
    limb_t mand = b[i];
 80155ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155bc:	009b      	lsls	r3, r3, #2
 80155be:	687a      	ldr	r2, [r7, #4]
 80155c0:	4413      	add	r3, r2
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 80155c6:	2300      	movs	r3, #0
 80155c8:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 80155ca:	2300      	movs	r3, #0
 80155cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80155ce:	e020      	b.n	8015612 <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 80155d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	68ba      	ldr	r2, [r7, #8]
 80155d6:	4413      	add	r3, r2
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 80155dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80155de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80155e0:	4413      	add	r3, r2
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	3368      	adds	r3, #104	@ 0x68
 80155e6:	443b      	add	r3, r7
 80155e8:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 80155ec:	697d      	ldr	r5, [r7, #20]
 80155ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80155f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80155f2:	18d4      	adds	r4, r2, r3
 80155f4:	f107 0018 	add.w	r0, r7, #24
 80155f8:	462b      	mov	r3, r5
 80155fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80155fc:	f7ff fe66 	bl	80152cc <umaal>
 8015600:	4602      	mov	r2, r0
 8015602:	00a3      	lsls	r3, r4, #2
 8015604:	3368      	adds	r3, #104	@ 0x68
 8015606:	443b      	add	r3, r7
 8015608:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 801560c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801560e:	3301      	adds	r3, #1
 8015610:	663b      	str	r3, [r7, #96]	@ 0x60
 8015612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015614:	2b07      	cmp	r3, #7
 8015616:	d9db      	bls.n	80155d0 <mul+0x38>
    }
    accum[i + j] = carry2;
 8015618:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801561a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801561c:	4413      	add	r3, r2
 801561e:	69ba      	ldr	r2, [r7, #24]
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	3368      	adds	r3, #104	@ 0x68
 8015624:	443b      	add	r3, r7
 8015626:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 801562a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801562c:	3301      	adds	r3, #1
 801562e:	667b      	str	r3, [r7, #100]	@ 0x64
 8015630:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	429a      	cmp	r2, r3
 8015636:	d3c0      	bcc.n	80155ba <mul+0x22>
  }

  carry2 = 0;
 8015638:	2300      	movs	r3, #0
 801563a:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 801563c:	2300      	movs	r3, #0
 801563e:	663b      	str	r3, [r7, #96]	@ 0x60
 8015640:	e01b      	b.n	801567a <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 8015642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015644:	009b      	lsls	r3, r3, #2
 8015646:	3368      	adds	r3, #104	@ 0x68
 8015648:	443b      	add	r3, r7
 801564a:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801564e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015650:	3308      	adds	r3, #8
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	3368      	adds	r3, #104	@ 0x68
 8015656:	443b      	add	r3, r7
 8015658:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 801565c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	68fa      	ldr	r2, [r7, #12]
 8015662:	18d4      	adds	r4, r2, r3
 8015664:	f107 0018 	add.w	r0, r7, #24
 8015668:	462b      	mov	r3, r5
 801566a:	2226      	movs	r2, #38	@ 0x26
 801566c:	f7ff fe2e 	bl	80152cc <umaal>
 8015670:	4603      	mov	r3, r0
 8015672:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 8015674:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015676:	3301      	adds	r3, #1
 8015678:	663b      	str	r3, [r7, #96]	@ 0x60
 801567a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801567c:	2b07      	cmp	r3, #7
 801567e:	d9e0      	bls.n	8015642 <mul+0xaa>
  }
  propagate(out, carry2);
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	4619      	mov	r1, r3
 8015684:	68f8      	ldr	r0, [r7, #12]
 8015686:	f7ff fecc 	bl	8015422 <propagate>
}
 801568a:	bf00      	nop
 801568c:	3768      	adds	r7, #104	@ 0x68
 801568e:	46bd      	mov	sp, r7
 8015690:	bdb0      	pop	{r4, r5, r7, pc}

08015692 <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 8015692:	b580      	push	{r7, lr}
 8015694:	b082      	sub	sp, #8
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
 801569a:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 801569c:	2308      	movs	r3, #8
 801569e:	683a      	ldr	r2, [r7, #0]
 80156a0:	6839      	ldr	r1, [r7, #0]
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f7ff ff78 	bl	8015598 <mul>
}
 80156a8:	bf00      	nop
 80156aa:	3708      	adds	r7, #8
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 80156ba:	2308      	movs	r3, #8
 80156bc:	687a      	ldr	r2, [r7, #4]
 80156be:	6839      	ldr	r1, [r7, #0]
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f7ff ff69 	bl	8015598 <mul>
}
 80156c6:	bf00      	nop
 80156c8:	3708      	adds	r7, #8
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}

080156ce <sqr1>:
static void sqr1(mg_fe a) {
 80156ce:	b580      	push	{r7, lr}
 80156d0:	b082      	sub	sp, #8
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 80156d6:	6879      	ldr	r1, [r7, #4]
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f7ff ffe9 	bl	80156b0 <mul1>
}
 80156de:	bf00      	nop
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}

080156e6 <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 80156e6:	b480      	push	{r7}
 80156e8:	b087      	sub	sp, #28
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	60f8      	str	r0, [r7, #12]
 80156ee:	60b9      	str	r1, [r7, #8]
 80156f0:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 80156f2:	2300      	movs	r3, #0
 80156f4:	617b      	str	r3, [r7, #20]
 80156f6:	e028      	b.n	801574a <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	68fa      	ldr	r2, [r7, #12]
 80156fe:	4413      	add	r3, r2
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	009b      	lsls	r3, r3, #2
 8015706:	68b9      	ldr	r1, [r7, #8]
 8015708:	440b      	add	r3, r1
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	4053      	eors	r3, r2
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	4013      	ands	r3, r2
 8015712:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	009b      	lsls	r3, r3, #2
 8015718:	68fa      	ldr	r2, [r7, #12]
 801571a:	4413      	add	r3, r2
 801571c:	6819      	ldr	r1, [r3, #0]
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	009b      	lsls	r3, r3, #2
 8015722:	68fa      	ldr	r2, [r7, #12]
 8015724:	4413      	add	r3, r2
 8015726:	693a      	ldr	r2, [r7, #16]
 8015728:	404a      	eors	r2, r1
 801572a:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	009b      	lsls	r3, r3, #2
 8015730:	68ba      	ldr	r2, [r7, #8]
 8015732:	4413      	add	r3, r2
 8015734:	6819      	ldr	r1, [r3, #0]
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	009b      	lsls	r3, r3, #2
 801573a:	68ba      	ldr	r2, [r7, #8]
 801573c:	4413      	add	r3, r2
 801573e:	693a      	ldr	r2, [r7, #16]
 8015740:	404a      	eors	r2, r1
 8015742:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	3301      	adds	r3, #1
 8015748:	617b      	str	r3, [r7, #20]
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	2b0f      	cmp	r3, #15
 801574e:	d9d3      	bls.n	80156f8 <condswap+0x12>
  }
}
 8015750:	bf00      	nop
 8015752:	bf00      	nop
 8015754:	371c      	adds	r7, #28
 8015756:	46bd      	mov	sp, r7
 8015758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575c:	4770      	bx	lr

0801575e <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 801575e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015762:	b08b      	sub	sp, #44	@ 0x2c
 8015764:	af00      	add	r7, sp, #0
 8015766:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 8015768:	2313      	movs	r3, #19
 801576a:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 801576c:	2300      	movs	r3, #0
 801576e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015770:	e012      	b.n	8015798 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 8015772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015774:	009b      	lsls	r3, r3, #2
 8015776:	68fa      	ldr	r2, [r7, #12]
 8015778:	4413      	add	r3, r2
 801577a:	6819      	ldr	r1, [r3, #0]
 801577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801577e:	009b      	lsls	r3, r3, #2
 8015780:	68fa      	ldr	r2, [r7, #12]
 8015782:	18d6      	adds	r6, r2, r3
 8015784:	f107 0314 	add.w	r3, r7, #20
 8015788:	4618      	mov	r0, r3
 801578a:	f7ff fe24 	bl	80153d6 <adc0>
 801578e:	4603      	mov	r3, r0
 8015790:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 8015792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015794:	3301      	adds	r3, #1
 8015796:	627b      	str	r3, [r7, #36]	@ 0x24
 8015798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801579a:	2b07      	cmp	r3, #7
 801579c:	d9e9      	bls.n	8015772 <canon+0x14>
  }
  propagate(x, carry0);
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	4619      	mov	r1, r3
 80157a2:	68f8      	ldr	r0, [r7, #12]
 80157a4:	f7ff fe3d 	bl	8015422 <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 80157a8:	f06f 0212 	mvn.w	r2, #18
 80157ac:	f04f 33ff 	mov.w	r3, #4294967295
 80157b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 80157b4:	2300      	movs	r3, #0
 80157b6:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 80157b8:	2300      	movs	r3, #0
 80157ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80157bc:	e02a      	b.n	8015814 <canon+0xb6>
    carry += x[i];
 80157be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c0:	009b      	lsls	r3, r3, #2
 80157c2:	68fa      	ldr	r2, [r7, #12]
 80157c4:	4413      	add	r3, r2
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2200      	movs	r2, #0
 80157ca:	4698      	mov	r8, r3
 80157cc:	4691      	mov	r9, r2
 80157ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80157d2:	eb12 0108 	adds.w	r1, r2, r8
 80157d6:	6039      	str	r1, [r7, #0]
 80157d8:	eb43 0309 	adc.w	r3, r3, r9
 80157dc:	607b      	str	r3, [r7, #4]
 80157de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80157e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 80157e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e8:	009b      	lsls	r3, r3, #2
 80157ea:	68fa      	ldr	r2, [r7, #12]
 80157ec:	4413      	add	r3, r2
 80157ee:	69ba      	ldr	r2, [r7, #24]
 80157f0:	601a      	str	r2, [r3, #0]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	6a3a      	ldr	r2, [r7, #32]
 80157f6:	4313      	orrs	r3, r2
 80157f8:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 80157fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80157fe:	f04f 0200 	mov.w	r2, #0
 8015802:	f04f 0300 	mov.w	r3, #0
 8015806:	000a      	movs	r2, r1
 8015808:	17cb      	asrs	r3, r1, #31
 801580a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015810:	3301      	adds	r3, #1
 8015812:	627b      	str	r3, [r7, #36]	@ 0x24
 8015814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015816:	2b07      	cmp	r3, #7
 8015818:	d9d1      	bls.n	80157be <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 801581a:	6a3b      	ldr	r3, [r7, #32]
 801581c:	2200      	movs	r2, #0
 801581e:	461c      	mov	r4, r3
 8015820:	4615      	mov	r5, r2
 8015822:	f114 3aff 	adds.w	sl, r4, #4294967295
 8015826:	f145 3bff 	adc.w	fp, r5, #4294967295
 801582a:	f04f 0200 	mov.w	r2, #0
 801582e:	f04f 0300 	mov.w	r3, #0
 8015832:	465a      	mov	r2, fp
 8015834:	2300      	movs	r3, #0
 8015836:	4613      	mov	r3, r2
}
 8015838:	4618      	mov	r0, r3
 801583a:	372c      	adds	r7, #44	@ 0x2c
 801583c:	46bd      	mov	sp, r7
 801583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015844 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 8015844:	b580      	push	{r7, lr}
 8015846:	b088      	sub	sp, #32
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	61fb      	str	r3, [r7, #28]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	3320      	adds	r3, #32
 8015854:	61bb      	str	r3, [r7, #24]
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	3340      	adds	r3, #64	@ 0x40
 801585a:	617b      	str	r3, [r7, #20]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	3360      	adds	r3, #96	@ 0x60
 8015860:	613b      	str	r3, [r7, #16]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	3380      	adds	r3, #128	@ 0x80
 8015866:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 8015868:	69ba      	ldr	r2, [r7, #24]
 801586a:	69f9      	ldr	r1, [r7, #28]
 801586c:	68f8      	ldr	r0, [r7, #12]
 801586e:	f7ff fe12 	bl	8015496 <add>
  sub(z2, x2, z2);                                 // z2 = B
 8015872:	69ba      	ldr	r2, [r7, #24]
 8015874:	69f9      	ldr	r1, [r7, #28]
 8015876:	69b8      	ldr	r0, [r7, #24]
 8015878:	f7ff fe3d 	bl	80154f6 <sub>
  add(x2, x3, z3);                                 // x2 = C
 801587c:	693a      	ldr	r2, [r7, #16]
 801587e:	6979      	ldr	r1, [r7, #20]
 8015880:	69f8      	ldr	r0, [r7, #28]
 8015882:	f7ff fe08 	bl	8015496 <add>
  sub(z3, x3, z3);                                 // z3 = D
 8015886:	693a      	ldr	r2, [r7, #16]
 8015888:	6979      	ldr	r1, [r7, #20]
 801588a:	6938      	ldr	r0, [r7, #16]
 801588c:	f7ff fe33 	bl	80154f6 <sub>
  mul1(z3, t1);                                    // z3 = DA
 8015890:	68f9      	ldr	r1, [r7, #12]
 8015892:	6938      	ldr	r0, [r7, #16]
 8015894:	f7ff ff0c 	bl	80156b0 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 8015898:	69b9      	ldr	r1, [r7, #24]
 801589a:	69f8      	ldr	r0, [r7, #28]
 801589c:	f7ff ff08 	bl	80156b0 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 80158a0:	69fa      	ldr	r2, [r7, #28]
 80158a2:	6939      	ldr	r1, [r7, #16]
 80158a4:	6978      	ldr	r0, [r7, #20]
 80158a6:	f7ff fdf6 	bl	8015496 <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 80158aa:	69fa      	ldr	r2, [r7, #28]
 80158ac:	6939      	ldr	r1, [r7, #16]
 80158ae:	6938      	ldr	r0, [r7, #16]
 80158b0:	f7ff fe21 	bl	80154f6 <sub>
  sqr1(t1);                                        // t1 = AA
 80158b4:	68f8      	ldr	r0, [r7, #12]
 80158b6:	f7ff ff0a 	bl	80156ce <sqr1>
  sqr1(z2);                                        // z2 = BB
 80158ba:	69b8      	ldr	r0, [r7, #24]
 80158bc:	f7ff ff07 	bl	80156ce <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 80158c0:	69ba      	ldr	r2, [r7, #24]
 80158c2:	68f9      	ldr	r1, [r7, #12]
 80158c4:	69f8      	ldr	r0, [r7, #28]
 80158c6:	f7ff fe16 	bl	80154f6 <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 80158ca:	2301      	movs	r3, #1
 80158cc:	4a06      	ldr	r2, [pc, #24]	@ (80158e8 <ladder_part1+0xa4>)
 80158ce:	69f9      	ldr	r1, [r7, #28]
 80158d0:	69b8      	ldr	r0, [r7, #24]
 80158d2:	f7ff fe61 	bl	8015598 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 80158d6:	68fa      	ldr	r2, [r7, #12]
 80158d8:	69b9      	ldr	r1, [r7, #24]
 80158da:	69b8      	ldr	r0, [r7, #24]
 80158dc:	f7ff fddb 	bl	8015496 <add>
}
 80158e0:	bf00      	nop
 80158e2:	3720      	adds	r7, #32
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	08026328 	.word	0x08026328

080158ec <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b088      	sub	sp, #32
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	61fb      	str	r3, [r7, #28]
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	3320      	adds	r3, #32
 80158fe:	61bb      	str	r3, [r7, #24]
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	3340      	adds	r3, #64	@ 0x40
 8015904:	617b      	str	r3, [r7, #20]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	3360      	adds	r3, #96	@ 0x60
 801590a:	613b      	str	r3, [r7, #16]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	3380      	adds	r3, #128	@ 0x80
 8015910:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 8015912:	6938      	ldr	r0, [r7, #16]
 8015914:	f7ff fedb 	bl	80156ce <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 8015918:	6839      	ldr	r1, [r7, #0]
 801591a:	6938      	ldr	r0, [r7, #16]
 801591c:	f7ff fec8 	bl	80156b0 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 8015920:	6978      	ldr	r0, [r7, #20]
 8015922:	f7ff fed4 	bl	80156ce <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 8015926:	69f9      	ldr	r1, [r7, #28]
 8015928:	69b8      	ldr	r0, [r7, #24]
 801592a:	f7ff fec1 	bl	80156b0 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 801592e:	69fa      	ldr	r2, [r7, #28]
 8015930:	68f9      	ldr	r1, [r7, #12]
 8015932:	69f8      	ldr	r0, [r7, #28]
 8015934:	f7ff fddf 	bl	80154f6 <sub>
  mul1(x2, t1);     // x2 = AA*BB
 8015938:	68f9      	ldr	r1, [r7, #12]
 801593a:	69f8      	ldr	r0, [r7, #28]
 801593c:	f7ff feb8 	bl	80156b0 <mul1>
}
 8015940:	bf00      	nop
 8015942:	3720      	adds	r7, #32
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}

08015948 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 8015948:	b580      	push	{r7, lr}
 801594a:	b094      	sub	sp, #80	@ 0x50
 801594c:	af00      	add	r7, sp, #0
 801594e:	60f8      	str	r0, [r7, #12]
 8015950:	60b9      	str	r1, [r7, #8]
 8015952:	607a      	str	r2, [r7, #4]
 8015954:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 8015956:	2300      	movs	r3, #0
 8015958:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	643b      	str	r3, [r7, #64]	@ 0x40
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	3340      	adds	r3, #64	@ 0x40
 8015962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	3360      	adds	r3, #96	@ 0x60
 8015968:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 801596a:	2280      	movs	r2, #128	@ 0x80
 801596c:	2100      	movs	r1, #0
 801596e:	68f8      	ldr	r0, [r7, #12]
 8015970:	f00c fddd 	bl	802252e <memset>
  x2[0] = z3[0] = 1;
 8015974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015976:	2201      	movs	r2, #1
 8015978:	601a      	str	r2, [r3, #0]
 801597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801597c:	681a      	ldr	r2, [r3, #0]
 801597e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015980:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8015982:	2300      	movs	r3, #0
 8015984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015986:	e031      	b.n	80159ec <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 8015988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	3303      	adds	r3, #3
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	4413      	add	r3, r2
 8015992:	781b      	ldrb	r3, [r3, #0]
 8015994:	061a      	lsls	r2, r3, #24
 8015996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015998:	009b      	lsls	r3, r3, #2
 801599a:	3302      	adds	r3, #2
 801599c:	6879      	ldr	r1, [r7, #4]
 801599e:	440b      	add	r3, r1
 80159a0:	781b      	ldrb	r3, [r3, #0]
 80159a2:	041b      	lsls	r3, r3, #16
 80159a4:	431a      	orrs	r2, r3
 80159a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159a8:	009b      	lsls	r3, r3, #2
 80159aa:	3301      	adds	r3, #1
 80159ac:	6879      	ldr	r1, [r7, #4]
 80159ae:	440b      	add	r3, r1
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	021b      	lsls	r3, r3, #8
 80159b4:	4313      	orrs	r3, r2
 80159b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80159b8:	0092      	lsls	r2, r2, #2
 80159ba:	4611      	mov	r1, r2
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	440a      	add	r2, r1
 80159c0:	7812      	ldrb	r2, [r2, #0]
 80159c2:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 80159c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159c6:	009b      	lsls	r3, r3, #2
 80159c8:	3350      	adds	r3, #80	@ 0x50
 80159ca:	443b      	add	r3, r7
 80159cc:	f843 2c3c 	str.w	r2, [r3, #-60]
 80159d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159d2:	009b      	lsls	r3, r3, #2
 80159d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80159d6:	441a      	add	r2, r3
 80159d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159da:	009b      	lsls	r3, r3, #2
 80159dc:	3350      	adds	r3, #80	@ 0x50
 80159de:	443b      	add	r3, r7
 80159e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80159e4:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 80159e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159e8:	3301      	adds	r3, #1
 80159ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80159ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159ee:	2b07      	cmp	r3, #7
 80159f0:	ddca      	ble.n	8015988 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 80159f2:	23ff      	movs	r3, #255	@ 0xff
 80159f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80159f6:	e049      	b.n	8015a8c <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 80159f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	da00      	bge.n	8015a00 <x25519_core+0xb8>
 80159fe:	3307      	adds	r3, #7
 8015a00:	10db      	asrs	r3, r3, #3
 8015a02:	461a      	mov	r2, r3
 8015a04:	68bb      	ldr	r3, [r7, #8]
 8015a06:	4413      	add	r3, r2
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d01a      	beq.n	8015a4a <x25519_core+0x102>
      if (i / 8 == 0) {
 8015a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a16:	3307      	adds	r3, #7
 8015a18:	2b0e      	cmp	r3, #14
 8015a1a:	d806      	bhi.n	8015a2a <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 8015a1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a20:	f023 0307 	bic.w	r3, r3, #7
 8015a24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015a28:	e00f      	b.n	8015a4a <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 8015a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a2c:	3bf8      	subs	r3, #248	@ 0xf8
 8015a2e:	2b07      	cmp	r3, #7
 8015a30:	d80b      	bhi.n	8015a4a <x25519_core+0x102>
        bytei &= 0x7F;
 8015a32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 8015a3e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 8015a4a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8015a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a50:	f003 0307 	and.w	r3, r3, #7
 8015a54:	fa42 f303 	asr.w	r3, r2, r3
 8015a58:	f003 0301 	and.w	r3, r3, #1
 8015a5c:	425b      	negs	r3, r3
 8015a5e:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 8015a60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a64:	4053      	eors	r3, r2
 8015a66:	461a      	mov	r2, r3
 8015a68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015a6a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015a6c:	f7ff fe3b 	bl	80156e6 <condswap>
    swap = doswap;
 8015a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a72:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 8015a74:	68f8      	ldr	r0, [r7, #12]
 8015a76:	f7ff fee5 	bl	8015844 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 8015a7a:	f107 0314 	add.w	r3, r7, #20
 8015a7e:	4619      	mov	r1, r3
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	f7ff ff33 	bl	80158ec <ladder_part2>
  for (i = 255; i >= 0; i--) {
 8015a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a88:	3b01      	subs	r3, #1
 8015a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	dab2      	bge.n	80159f8 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 8015a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015a94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015a96:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015a98:	f7ff fe25 	bl	80156e6 <condswap>
}
 8015a9c:	bf00      	nop
 8015a9e:	3750      	adds	r7, #80	@ 0x50
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b0be      	sub	sp, #248	@ 0xf8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	60f8      	str	r0, [r7, #12]
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	607a      	str	r2, [r7, #4]
 8015ab0:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 8015ab2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	68b9      	ldr	r1, [r7, #8]
 8015abc:	f7ff ff44 	bl	8015948 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 8015ac0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 8015ac8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015acc:	3320      	adds	r3, #32
 8015ace:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 8015ad2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015ad6:	3360      	adds	r3, #96	@ 0x60
 8015ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 8015adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015ae0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015aea:	e043      	b.n	8015b74 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 8015aec:	4952      	ldr	r1, [pc, #328]	@ (8015c38 <mg_tls_x25519+0x194>)
 8015aee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8015af2:	4613      	mov	r3, r2
 8015af4:	005b      	lsls	r3, r3, #1
 8015af6:	4413      	add	r3, r2
 8015af8:	440b      	add	r3, r1
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015b00:	015b      	lsls	r3, r3, #5
 8015b02:	4413      	add	r3, r2
 8015b04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 8015b08:	494b      	ldr	r1, [pc, #300]	@ (8015c38 <mg_tls_x25519+0x194>)
 8015b0a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8015b0e:	4613      	mov	r3, r2
 8015b10:	005b      	lsls	r3, r3, #1
 8015b12:	4413      	add	r3, r2
 8015b14:	440b      	add	r3, r1
 8015b16:	3302      	adds	r3, #2
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8015b1e:	e00e      	b.n	8015b3e <mg_tls_x25519+0x9a>
      sqr(a, prev);
 8015b20:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8015b24:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8015b28:	f7ff fdb3 	bl	8015692 <sqr>
      prev = a;
 8015b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8015b30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 8015b34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8015b38:	3b01      	subs	r3, #1
 8015b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8015b3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	dcec      	bgt.n	8015b20 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 8015b46:	493c      	ldr	r1, [pc, #240]	@ (8015c38 <mg_tls_x25519+0x194>)
 8015b48:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8015b4c:	4613      	mov	r3, r2
 8015b4e:	005b      	lsls	r3, r3, #1
 8015b50:	4413      	add	r3, r2
 8015b52:	440b      	add	r3, r1
 8015b54:	3301      	adds	r3, #1
 8015b56:	781b      	ldrb	r3, [r3, #0]
 8015b58:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8015b5c:	015b      	lsls	r3, r3, #5
 8015b5e:	4413      	add	r3, r2
 8015b60:	4619      	mov	r1, r3
 8015b62:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8015b66:	f7ff fda3 	bl	80156b0 <mul1>
  for (i = 0; i < 13; i++) {
 8015b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015b6e:	3301      	adds	r3, #1
 8015b70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015b78:	2b0c      	cmp	r3, #12
 8015b7a:	ddb7      	ble.n	8015aec <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 8015b7c:	f107 0014 	add.w	r0, r7, #20
 8015b80:	2308      	movs	r3, #8
 8015b82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8015b86:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8015b8a:	f7ff fd05 	bl	8015598 <mul>
  ret = (int) canon(out_limbs);
 8015b8e:	f107 0314 	add.w	r3, r7, #20
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7ff fde3 	bl	801575e <canon>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d102      	bne.n	8015baa <mg_tls_x25519+0x106>
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 8015baa:	2300      	movs	r3, #0
 8015bac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015bb0:	e038      	b.n	8015c24 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 8015bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015bb6:	009b      	lsls	r3, r3, #2
 8015bb8:	33f8      	adds	r3, #248	@ 0xf8
 8015bba:	443b      	add	r3, r7
 8015bbc:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8015bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 8015bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	461a      	mov	r2, r3
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	4413      	add	r3, r2
 8015bd0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8015bd4:	b2d2      	uxtb	r2, r2
 8015bd6:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 8015bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8015bdc:	0a19      	lsrs	r1, r3, #8
 8015bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	3301      	adds	r3, #1
 8015be6:	68fa      	ldr	r2, [r7, #12]
 8015be8:	4413      	add	r3, r2
 8015bea:	b2ca      	uxtb	r2, r1
 8015bec:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 8015bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8015bf2:	0c19      	lsrs	r1, r3, #16
 8015bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015bf8:	009b      	lsls	r3, r3, #2
 8015bfa:	3302      	adds	r3, #2
 8015bfc:	68fa      	ldr	r2, [r7, #12]
 8015bfe:	4413      	add	r3, r2
 8015c00:	b2ca      	uxtb	r2, r1
 8015c02:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 8015c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8015c08:	0e19      	lsrs	r1, r3, #24
 8015c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015c0e:	009b      	lsls	r3, r3, #2
 8015c10:	3303      	adds	r3, #3
 8015c12:	68fa      	ldr	r2, [r7, #12]
 8015c14:	4413      	add	r3, r2
 8015c16:	b2ca      	uxtb	r2, r1
 8015c18:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8015c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015c1e:	3301      	adds	r3, #1
 8015c20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015c28:	2b07      	cmp	r3, #7
 8015c2a:	ddc2      	ble.n	8015bb2 <mg_tls_x25519+0x10e>
  }
  return ret;
 8015c2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	37f8      	adds	r7, #248	@ 0xf8
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	08026370 	.word	0x08026370

08015c3c <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b082      	sub	sp, #8
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8015c44:	2204      	movs	r2, #4
 8015c46:	491b      	ldr	r1, [pc, #108]	@ (8015cb4 <mg_url_is_ssl+0x78>)
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f00c fc85 	bl	8022558 <strncmp>
 8015c4e:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d027      	beq.n	8015ca4 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8015c54:	2206      	movs	r2, #6
 8015c56:	4918      	ldr	r1, [pc, #96]	@ (8015cb8 <mg_url_is_ssl+0x7c>)
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f00c fc7d 	bl	8022558 <strncmp>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d01f      	beq.n	8015ca4 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8015c64:	2206      	movs	r2, #6
 8015c66:	4915      	ldr	r1, [pc, #84]	@ (8015cbc <mg_url_is_ssl+0x80>)
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f00c fc75 	bl	8022558 <strncmp>
 8015c6e:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d017      	beq.n	8015ca4 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8015c74:	2204      	movs	r2, #4
 8015c76:	4912      	ldr	r1, [pc, #72]	@ (8015cc0 <mg_url_is_ssl+0x84>)
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f00c fc6d 	bl	8022558 <strncmp>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d00f      	beq.n	8015ca4 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8015c84:	2204      	movs	r2, #4
 8015c86:	490f      	ldr	r1, [pc, #60]	@ (8015cc4 <mg_url_is_ssl+0x88>)
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f00c fc65 	bl	8022558 <strncmp>
 8015c8e:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d007      	beq.n	8015ca4 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8015c94:	2205      	movs	r2, #5
 8015c96:	490c      	ldr	r1, [pc, #48]	@ (8015cc8 <mg_url_is_ssl+0x8c>)
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	f00c fc5d 	bl	8022558 <strncmp>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d101      	bne.n	8015ca8 <mg_url_is_ssl+0x6c>
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	e000      	b.n	8015caa <mg_url_is_ssl+0x6e>
 8015ca8:	2300      	movs	r3, #0
}
 8015caa:	4618      	mov	r0, r3
 8015cac:	3708      	adds	r7, #8
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}
 8015cb2:	bf00      	nop
 8015cb4:	080255e4 	.word	0x080255e4
 8015cb8:	080255ec 	.word	0x080255ec
 8015cbc:	080255f4 	.word	0x080255f4
 8015cc0:	080255fc 	.word	0x080255fc
 8015cc4:	08025604 	.word	0x08025604
 8015cc8:	0802560c 	.word	0x0802560c

08015ccc <urlparse>:

static struct url urlparse(const char *url) {
 8015ccc:	b5b0      	push	{r4, r5, r7, lr}
 8015cce:	b08a      	sub	sp, #40	@ 0x28
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8015cd6:	f107 0308 	add.w	r3, r7, #8
 8015cda:	221c      	movs	r2, #28
 8015cdc:	2100      	movs	r1, #0
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f00c fc25 	bl	802252e <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8015ce8:	e05b      	b.n	8015da2 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8015cea:	683a      	ldr	r2, [r7, #0]
 8015cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cee:	4413      	add	r3, r2
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	2b2f      	cmp	r3, #47	@ 0x2f
 8015cf4:	d112      	bne.n	8015d1c <urlparse+0x50>
 8015cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d00f      	beq.n	8015d1c <urlparse+0x50>
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d10c      	bne.n	8015d1c <urlparse+0x50>
 8015d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d04:	3b01      	subs	r3, #1
 8015d06:	683a      	ldr	r2, [r7, #0]
 8015d08:	4413      	add	r3, r2
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8015d0e:	d105      	bne.n	8015d1c <urlparse+0x50>
      u.host = i + 1;
 8015d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d12:	3301      	adds	r3, #1
 8015d14:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8015d16:	2300      	movs	r3, #0
 8015d18:	61bb      	str	r3, [r7, #24]
 8015d1a:	e03f      	b.n	8015d9c <urlparse+0xd0>
    } else if (url[i] == ']') {
 8015d1c:	683a      	ldr	r2, [r7, #0]
 8015d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d20:	4413      	add	r3, r2
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	2b5d      	cmp	r3, #93	@ 0x5d
 8015d26:	d102      	bne.n	8015d2e <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8015d28:	2300      	movs	r3, #0
 8015d2a:	61bb      	str	r3, [r7, #24]
 8015d2c:	e036      	b.n	8015d9c <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8015d2e:	683a      	ldr	r2, [r7, #0]
 8015d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d32:	4413      	add	r3, r2
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	2b3a      	cmp	r3, #58	@ 0x3a
 8015d38:	d109      	bne.n	8015d4e <urlparse+0x82>
 8015d3a:	69bb      	ldr	r3, [r7, #24]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d106      	bne.n	8015d4e <urlparse+0x82>
 8015d40:	69fb      	ldr	r3, [r7, #28]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d103      	bne.n	8015d4e <urlparse+0x82>
      u.port = i + 1;
 8015d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d48:	3301      	adds	r3, #1
 8015d4a:	61bb      	str	r3, [r7, #24]
 8015d4c:	e026      	b.n	8015d9c <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8015d4e:	683a      	ldr	r2, [r7, #0]
 8015d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d52:	4413      	add	r3, r2
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	2b40      	cmp	r3, #64	@ 0x40
 8015d58:	d112      	bne.n	8015d80 <urlparse+0xb4>
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d10f      	bne.n	8015d80 <urlparse+0xb4>
 8015d60:	693b      	ldr	r3, [r7, #16]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d10c      	bne.n	8015d80 <urlparse+0xb4>
 8015d66:	69fb      	ldr	r3, [r7, #28]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d109      	bne.n	8015d80 <urlparse+0xb4>
      u.user = u.host;
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8015d70:	69bb      	ldr	r3, [r7, #24]
 8015d72:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8015d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d76:	3301      	adds	r3, #1
 8015d78:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	61bb      	str	r3, [r7, #24]
 8015d7e:	e00d      	b.n	8015d9c <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8015d80:	683a      	ldr	r2, [r7, #0]
 8015d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d84:	4413      	add	r3, r2
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	2b2f      	cmp	r3, #47	@ 0x2f
 8015d8a:	d107      	bne.n	8015d9c <urlparse+0xd0>
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d004      	beq.n	8015d9c <urlparse+0xd0>
 8015d92:	69fb      	ldr	r3, [r7, #28]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d101      	bne.n	8015d9c <urlparse+0xd0>
      u.uri = i;
 8015d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d9a:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8015d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d9e:	3301      	adds	r3, #1
 8015da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8015da2:	683a      	ldr	r2, [r7, #0]
 8015da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015da6:	4413      	add	r3, r2
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d19d      	bne.n	8015cea <urlparse+0x1e>
    }
  }
  u.end = i;
 8015dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015db0:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	461d      	mov	r5, r3
 8015db6:	f107 0408 	add.w	r4, r7, #8
 8015dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015dbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015dc2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	3728      	adds	r7, #40	@ 0x28
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bdb0      	pop	{r4, r5, r7, pc}

08015dce <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8015dce:	b580      	push	{r7, lr}
 8015dd0:	b08c      	sub	sp, #48	@ 0x30
 8015dd2:	af00      	add	r7, sp, #0
 8015dd4:	6078      	str	r0, [r7, #4]
 8015dd6:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8015dd8:	f107 0310 	add.w	r3, r7, #16
 8015ddc:	6839      	ldr	r1, [r7, #0]
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7ff ff74 	bl	8015ccc <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8015de4:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d004      	beq.n	8015df4 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8015dea:	6a3a      	ldr	r2, [r7, #32]
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8015df0:	3b01      	subs	r3, #1
 8015df2:	e009      	b.n	8015e08 <mg_url_host+0x3a>
 8015df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d003      	beq.n	8015e02 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8015dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015dfc:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8015dfe:	1ad3      	subs	r3, r2, r3
 8015e00:	e002      	b.n	8015e08 <mg_url_host+0x3a>
 8015e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8015e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8015e0a:	69fb      	ldr	r3, [r7, #28]
 8015e0c:	683a      	ldr	r2, [r7, #0]
 8015e0e:	18d1      	adds	r1, r2, r3
 8015e10:	f107 0308 	add.w	r3, r7, #8
 8015e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7f7 fb5b 	bl	800d4d2 <mg_str_n>
  return s;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	461a      	mov	r2, r3
 8015e20:	f107 0308 	add.w	r3, r7, #8
 8015e24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e28:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	3730      	adds	r7, #48	@ 0x30
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b08a      	sub	sp, #40	@ 0x28
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8015e3c:	f107 0308 	add.w	r3, r7, #8
 8015e40:	6879      	ldr	r1, [r7, #4]
 8015e42:	4618      	mov	r0, r3
 8015e44:	f7ff ff42 	bl	8015ccc <urlparse>
  unsigned short port = 0;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8015e4c:	2205      	movs	r2, #5
 8015e4e:	4925      	ldr	r1, [pc, #148]	@ (8015ee4 <mg_url_port+0xb0>)
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f00c fb81 	bl	8022558 <strncmp>
 8015e56:	4603      	mov	r3, r0
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d007      	beq.n	8015e6c <mg_url_port+0x38>
 8015e5c:	2203      	movs	r2, #3
 8015e5e:	4922      	ldr	r1, [pc, #136]	@ (8015ee8 <mg_url_port+0xb4>)
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f00c fb79 	bl	8022558 <strncmp>
 8015e66:	4603      	mov	r3, r0
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d101      	bne.n	8015e70 <mg_url_port+0x3c>
 8015e6c:	2350      	movs	r3, #80	@ 0x50
 8015e6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8015e70:	2204      	movs	r2, #4
 8015e72:	491e      	ldr	r1, [pc, #120]	@ (8015eec <mg_url_port+0xb8>)
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f00c fb6f 	bl	8022558 <strncmp>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d007      	beq.n	8015e90 <mg_url_port+0x5c>
 8015e80:	2206      	movs	r2, #6
 8015e82:	491b      	ldr	r1, [pc, #108]	@ (8015ef0 <mg_url_port+0xbc>)
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f00c fb67 	bl	8022558 <strncmp>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d102      	bne.n	8015e96 <mg_url_port+0x62>
    port = 443;
 8015e90:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8015e94:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8015e96:	2205      	movs	r2, #5
 8015e98:	4916      	ldr	r1, [pc, #88]	@ (8015ef4 <mg_url_port+0xc0>)
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f00c fb5c 	bl	8022558 <strncmp>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d102      	bne.n	8015eac <mg_url_port+0x78>
 8015ea6:	f240 735b 	movw	r3, #1883	@ 0x75b
 8015eaa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8015eac:	2206      	movs	r2, #6
 8015eae:	4912      	ldr	r1, [pc, #72]	@ (8015ef8 <mg_url_port+0xc4>)
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f00c fb51 	bl	8022558 <strncmp>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d102      	bne.n	8015ec2 <mg_url_port+0x8e>
 8015ebc:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8015ec0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d007      	beq.n	8015ed8 <mg_url_port+0xa4>
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	687a      	ldr	r2, [r7, #4]
 8015ecc:	4413      	add	r3, r2
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f00c f820 	bl	8021f14 <atoi>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8015ed8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3728      	adds	r7, #40	@ 0x28
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	08025614 	.word	0x08025614
 8015ee8:	0802561c 	.word	0x0802561c
 8015eec:	080255e4 	.word	0x080255e4
 8015ef0:	080255ec 	.word	0x080255ec
 8015ef4:	08025620 	.word	0x08025620
 8015ef8:	080255f4 	.word	0x080255f4

08015efc <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8015efc:	b480      	push	{r7}
 8015efe:	b083      	sub	sp, #12
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d00a      	beq.n	8015f22 <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8015f0c:	e004      	b.n	8015f18 <mg_bzero+0x1c>
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	1c5a      	adds	r2, r3, #1
 8015f12:	607a      	str	r2, [r7, #4]
 8015f14:	2200      	movs	r2, #0
 8015f16:	701a      	strb	r2, [r3, #0]
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	1e5a      	subs	r2, r3, #1
 8015f1c:	603a      	str	r2, [r7, #0]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d1f5      	bne.n	8015f0e <mg_bzero+0x12>
  }
}
 8015f22:	bf00      	nop
 8015f24:	370c      	adds	r7, #12
 8015f26:	46bd      	mov	sp, r7
 8015f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2c:	4770      	bx	lr
	...

08015f30 <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8015f3a:	6839      	ldr	r1, [r7, #0]
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f7ea fe89 	bl	8000c54 <mg_random>
  for (i = 0; i < len; i++) {
 8015f42:	2300      	movs	r3, #0
 8015f44:	60fb      	str	r3, [r7, #12]
 8015f46:	e02d      	b.n	8015fa4 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8015f48:	687a      	ldr	r2, [r7, #4]
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	4413      	add	r3, r2
 8015f4e:	781a      	ldrb	r2, [r3, #0]
 8015f50:	0853      	lsrs	r3, r2, #1
 8015f52:	4919      	ldr	r1, [pc, #100]	@ (8015fb8 <mg_random_str+0x88>)
 8015f54:	fba1 1303 	umull	r1, r3, r1, r3
 8015f58:	0919      	lsrs	r1, r3, #4
 8015f5a:	460b      	mov	r3, r1
 8015f5c:	015b      	lsls	r3, r3, #5
 8015f5e:	1a5b      	subs	r3, r3, r1
 8015f60:	005b      	lsls	r3, r3, #1
 8015f62:	1ad3      	subs	r3, r2, r3
 8015f64:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	3b01      	subs	r3, #1
 8015f6a:	68fa      	ldr	r2, [r7, #12]
 8015f6c:	429a      	cmp	r2, r3
 8015f6e:	d011      	beq.n	8015f94 <mg_random_str+0x64>
 8015f70:	7afb      	ldrb	r3, [r7, #11]
 8015f72:	2b19      	cmp	r3, #25
 8015f74:	d803      	bhi.n	8015f7e <mg_random_str+0x4e>
 8015f76:	7afb      	ldrb	r3, [r7, #11]
 8015f78:	3361      	adds	r3, #97	@ 0x61
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	e00b      	b.n	8015f96 <mg_random_str+0x66>
 8015f7e:	7afb      	ldrb	r3, [r7, #11]
 8015f80:	2b33      	cmp	r3, #51	@ 0x33
 8015f82:	d803      	bhi.n	8015f8c <mg_random_str+0x5c>
 8015f84:	7afb      	ldrb	r3, [r7, #11]
 8015f86:	3327      	adds	r3, #39	@ 0x27
 8015f88:	b2db      	uxtb	r3, r3
 8015f8a:	e004      	b.n	8015f96 <mg_random_str+0x66>
 8015f8c:	7afb      	ldrb	r3, [r7, #11]
 8015f8e:	3b04      	subs	r3, #4
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	e000      	b.n	8015f96 <mg_random_str+0x66>
 8015f94:	2300      	movs	r3, #0
 8015f96:	6879      	ldr	r1, [r7, #4]
 8015f98:	68fa      	ldr	r2, [r7, #12]
 8015f9a:	440a      	add	r2, r1
 8015f9c:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	3301      	adds	r3, #1
 8015fa2:	60fb      	str	r3, [r7, #12]
 8015fa4:	68fa      	ldr	r2, [r7, #12]
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d3cd      	bcc.n	8015f48 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8015fac:	687b      	ldr	r3, [r7, #4]
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3710      	adds	r7, #16
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	84210843 	.word	0x84210843

08015fbc <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8015fbc:	b480      	push	{r7}
 8015fbe:	b085      	sub	sp, #20
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8015fcc:	7bfb      	ldrb	r3, [r7, #15]
 8015fce:	461a      	mov	r2, r3
 8015fd0:	7bbb      	ldrb	r3, [r7, #14]
 8015fd2:	021b      	lsls	r3, r3, #8
 8015fd4:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8015fd6:	7b7b      	ldrb	r3, [r7, #13]
 8015fd8:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8015fda:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8015fdc:	7b3b      	ldrb	r3, [r7, #12]
 8015fde:	061b      	lsls	r3, r3, #24
 8015fe0:	4313      	orrs	r3, r2
}
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	3714      	adds	r7, #20
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr

08015fee <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8015fee:	b480      	push	{r7}
 8015ff0:	b085      	sub	sp, #20
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8015ffc:	88fb      	ldrh	r3, [r7, #6]
 8015ffe:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8016000:	7b7b      	ldrb	r3, [r7, #13]
 8016002:	b21a      	sxth	r2, r3
 8016004:	7b3b      	ldrb	r3, [r7, #12]
 8016006:	021b      	lsls	r3, r3, #8
 8016008:	b21b      	sxth	r3, r3
 801600a:	4313      	orrs	r3, r2
 801600c:	b21b      	sxth	r3, r3
 801600e:	b29b      	uxth	r3, r3
}
 8016010:	4618      	mov	r0, r3
 8016012:	3714      	adds	r7, #20
 8016014:	46bd      	mov	sp, r7
 8016016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601a:	4770      	bx	lr

0801601c <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 801601c:	b480      	push	{r7}
 801601e:	b087      	sub	sp, #28
 8016020:	af00      	add	r7, sp, #0
 8016022:	60f8      	str	r0, [r7, #12]
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	43db      	mvns	r3, r3
 801602c:	60fb      	str	r3, [r7, #12]
  while (len--) {
 801602e:	e01f      	b.n	8016070 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	1c5a      	adds	r2, r3, #1
 8016034:	60ba      	str	r2, [r7, #8]
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 801603a:	7dfa      	ldrb	r2, [r7, #23]
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	4053      	eors	r3, r2
 8016040:	f003 030f 	and.w	r3, r3, #15
 8016044:	4a11      	ldr	r2, [pc, #68]	@ (801608c <mg_crc32+0x70>)
 8016046:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	091b      	lsrs	r3, r3, #4
 801604e:	4053      	eors	r3, r2
 8016050:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8016052:	7dfb      	ldrb	r3, [r7, #23]
 8016054:	091b      	lsrs	r3, r3, #4
 8016056:	b2db      	uxtb	r3, r3
 8016058:	461a      	mov	r2, r3
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	4053      	eors	r3, r2
 801605e:	f003 030f 	and.w	r3, r3, #15
 8016062:	4a0a      	ldr	r2, [pc, #40]	@ (801608c <mg_crc32+0x70>)
 8016064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	091b      	lsrs	r3, r3, #4
 801606c:	4053      	eors	r3, r2
 801606e:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	1e5a      	subs	r2, r3, #1
 8016074:	607a      	str	r2, [r7, #4]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d1da      	bne.n	8016030 <mg_crc32+0x14>
  }
  return ~crc;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	43db      	mvns	r3, r3
}
 801607e:	4618      	mov	r0, r3
 8016080:	371c      	adds	r7, #28
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr
 801608a:	bf00      	nop
 801608c:	08026398 	.word	0x08026398

08016090 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8016090:	b480      	push	{r7}
 8016092:	b085      	sub	sp, #20
 8016094:	af00      	add	r7, sp, #0
 8016096:	463b      	mov	r3, r7
 8016098:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80160aa:	d123      	bne.n	80160f4 <mg_path_is_sane+0x64>
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	3301      	adds	r3, #1
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80160b4:	d11e      	bne.n	80160f4 <mg_path_is_sane+0x64>
 80160b6:	2300      	movs	r3, #0
 80160b8:	e024      	b.n	8016104 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	781b      	ldrb	r3, [r3, #0]
 80160be:	2b2f      	cmp	r3, #47	@ 0x2f
 80160c0:	d003      	beq.n	80160ca <mg_path_is_sane+0x3a>
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	781b      	ldrb	r3, [r3, #0]
 80160c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80160c8:	d10e      	bne.n	80160e8 <mg_path_is_sane+0x58>
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	2b01      	cmp	r3, #1
 80160ce:	d90b      	bls.n	80160e8 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	3301      	adds	r3, #1
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80160d8:	d106      	bne.n	80160e8 <mg_path_is_sane+0x58>
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	3302      	adds	r3, #2
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80160e2:	d101      	bne.n	80160e8 <mg_path_is_sane+0x58>
 80160e4:	2300      	movs	r3, #0
 80160e6:	e00d      	b.n	8016104 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	3301      	adds	r3, #1
 80160ec:	60fb      	str	r3, [r7, #12]
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	3b01      	subs	r3, #1
 80160f2:	60bb      	str	r3, [r7, #8]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d002      	beq.n	8016102 <mg_path_is_sane+0x72>
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d1db      	bne.n	80160ba <mg_path_is_sane+0x2a>
    }
  }
  return true;
 8016102:	2301      	movs	r3, #1
}
 8016104:	4618      	mov	r0, r3
 8016106:	3714      	adds	r7, #20
 8016108:	46bd      	mov	sp, r7
 801610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610e:	4770      	bx	lr

08016110 <mg_phy_init>:
      return "unknown";
  }
  (void) id2;
}

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8016110:	b590      	push	{r4, r7, lr}
 8016112:	b085      	sub	sp, #20
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	460b      	mov	r3, r1
 801611a:	70fb      	strb	r3, [r7, #3]
 801611c:	4613      	mov	r3, r2
 801611e:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	78f8      	ldrb	r0, [r7, #3]
 8016126:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801612a:	2100      	movs	r1, #0
 801612c:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 801612e:	bf00      	nop
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	78fa      	ldrb	r2, [r7, #3]
 8016136:	2100      	movs	r1, #0
 8016138:	4610      	mov	r0, r2
 801613a:	4798      	blx	r3
 801613c:	4603      	mov	r3, r0
 801613e:	b21b      	sxth	r3, r3
 8016140:	2b00      	cmp	r3, #0
 8016142:	dbf5      	blt.n	8016130 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	78fa      	ldrb	r2, [r7, #3]
 801614a:	2102      	movs	r1, #2
 801614c:	4610      	mov	r0, r2
 801614e:	4798      	blx	r3
 8016150:	4603      	mov	r3, r0
 8016152:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	78fa      	ldrb	r2, [r7, #3]
 801615a:	2103      	movs	r1, #3
 801615c:	4610      	mov	r0, r2
 801615e:	4798      	blx	r3
 8016160:	4603      	mov	r3, r0
 8016162:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 8016164:	89fb      	ldrh	r3, [r7, #14]
 8016166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801616a:	d11f      	bne.n	80161ac <mg_phy_init+0x9c>
 801616c:	89bb      	ldrh	r3, [r7, #12]
 801616e:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8016172:	4293      	cmp	r3, r2
 8016174:	d11a      	bne.n	80161ac <mg_phy_init+0x9c>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	78f8      	ldrb	r0, [r7, #3]
 801617c:	221f      	movs	r2, #31
 801617e:	210d      	movs	r1, #13
 8016180:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	78f8      	ldrb	r0, [r7, #3]
 8016188:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801618c:	210e      	movs	r1, #14
 801618e:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	78f8      	ldrb	r0, [r7, #3]
 8016196:	f244 021f 	movw	r2, #16415	@ 0x401f
 801619a:	210d      	movs	r1, #13
 801619c:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	685b      	ldr	r3, [r3, #4]
 80161a2:	78f8      	ldrb	r0, [r7, #3]
 80161a4:	f240 120d 	movw	r2, #269	@ 0x10d
 80161a8:	210e      	movs	r1, #14
 80161aa:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 80161ac:	78bb      	ldrb	r3, [r7, #2]
 80161ae:	f003 0302 	and.w	r3, r3, #2
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d12e      	bne.n	8016214 <mg_phy_init+0x104>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 80161b6:	89fb      	ldrh	r3, [r7, #14]
 80161b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80161bc:	d110      	bne.n	80161e0 <mg_phy_init+0xd0>
 80161be:	89bb      	ldrh	r3, [r7, #12]
 80161c0:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80161c4:	4293      	cmp	r3, r2
 80161c6:	d00b      	beq.n	80161e0 <mg_phy_init+0xd0>
 80161c8:	89bb      	ldrh	r3, [r7, #12]
 80161ca:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 80161ce:	4293      	cmp	r3, r2
 80161d0:	d006      	beq.n	80161e0 <mg_phy_init+0xd0>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	78f8      	ldrb	r0, [r7, #3]
 80161d8:	2281      	movs	r2, #129	@ 0x81
 80161da:	2117      	movs	r1, #23
 80161dc:	4798      	blx	r3
 80161de:	e019      	b.n	8016214 <mg_phy_init+0x104>
    } else if (id1 == MG_PHY_KSZ8x) {
 80161e0:	89fb      	ldrh	r3, [r7, #14]
 80161e2:	2b22      	cmp	r3, #34	@ 0x22
 80161e4:	d116      	bne.n	8016214 <mg_phy_init+0x104>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	78fa      	ldrb	r2, [r7, #3]
 80161f0:	2100      	movs	r1, #0
 80161f2:	4610      	mov	r0, r2
 80161f4:	4798      	blx	r3
 80161f6:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 80161f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	78fb      	ldrb	r3, [r7, #3]
 8016200:	2100      	movs	r1, #0
 8016202:	4618      	mov	r0, r3
 8016204:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	78f8      	ldrb	r0, [r7, #3]
 801620c:	f248 1280 	movw	r2, #33152	@ 0x8180
 8016210:	211f      	movs	r1, #31
 8016212:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8016214:	78bb      	ldrb	r3, [r7, #2]
 8016216:	f003 0301 	and.w	r3, r3, #1
 801621a:	2b00      	cmp	r3, #0
 801621c:	d00a      	beq.n	8016234 <mg_phy_init+0x124>
 801621e:	89fb      	ldrh	r3, [r7, #14]
 8016220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016224:	d106      	bne.n	8016234 <mg_phy_init+0x124>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	78f8      	ldrb	r0, [r7, #3]
 801622c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016230:	2118      	movs	r1, #24
 8016232:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8016234:	bf00      	nop
 8016236:	3714      	adds	r7, #20
 8016238:	46bd      	mov	sp, r7
 801623a:	bd90      	pop	{r4, r7, pc}

0801623c <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 801623c:	b580      	push	{r7, lr}
 801623e:	b08a      	sub	sp, #40	@ 0x28
 8016240:	af00      	add	r7, sp, #0
 8016242:	60f8      	str	r0, [r7, #12]
 8016244:	607a      	str	r2, [r7, #4]
 8016246:	603b      	str	r3, [r7, #0]
 8016248:	460b      	mov	r3, r1
 801624a:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 801624c:	2300      	movs	r3, #0
 801624e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	7afa      	ldrb	r2, [r7, #11]
 8016258:	2101      	movs	r1, #1
 801625a:	4610      	mov	r0, r2
 801625c:	4798      	blx	r3
 801625e:	4603      	mov	r3, r0
 8016260:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8016262:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016264:	f003 0320 	and.w	r3, r3, #32
 8016268:	2b00      	cmp	r3, #0
 801626a:	d00c      	beq.n	8016286 <mg_phy_up+0x4a>
 801626c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801626e:	f003 0304 	and.w	r3, r3, #4
 8016272:	2b00      	cmp	r3, #0
 8016274:	d107      	bne.n	8016286 <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	7afa      	ldrb	r2, [r7, #11]
 801627c:	2101      	movs	r1, #1
 801627e:	4610      	mov	r0, r2
 8016280:	4798      	blx	r3
 8016282:	4603      	mov	r3, r0
 8016284:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8016286:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016288:	f003 0304 	and.w	r3, r3, #4
 801628c:	2b00      	cmp	r3, #0
 801628e:	bf14      	ite	ne
 8016290:	2301      	movne	r3, #1
 8016292:	2300      	moveq	r3, #0
 8016294:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8016298:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801629c:	2b00      	cmp	r3, #0
 801629e:	f000 80bc 	beq.w	801641a <mg_phy_up+0x1de>
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	f000 80b8 	beq.w	801641a <mg_phy_up+0x1de>
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	f000 80b4 	beq.w	801641a <mg_phy_up+0x1de>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	7afa      	ldrb	r2, [r7, #11]
 80162b8:	2102      	movs	r1, #2
 80162ba:	4610      	mov	r0, r2
 80162bc:	4798      	blx	r3
 80162be:	4603      	mov	r3, r0
 80162c0:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 80162c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80162c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80162c8:	d14b      	bne.n	8016362 <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	7afa      	ldrb	r2, [r7, #11]
 80162d0:	2103      	movs	r1, #3
 80162d2:	4610      	mov	r0, r2
 80162d4:	4798      	blx	r3
 80162d6:	4603      	mov	r3, r0
 80162d8:	837b      	strh	r3, [r7, #26]
      if (id2 == MG_PHY_DP83867) {
 80162da:	8b7b      	ldrh	r3, [r7, #26]
 80162dc:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80162e0:	4293      	cmp	r3, r2
 80162e2:	d120      	bne.n	8016326 <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	7afa      	ldrb	r2, [r7, #11]
 80162ea:	2111      	movs	r1, #17
 80162ec:	4610      	mov	r0, r2
 80162ee:	4798      	blx	r3
 80162f0:	4603      	mov	r3, r0
 80162f2:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(13);
 80162f4:	8afb      	ldrh	r3, [r7, #22]
 80162f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	bf14      	ite	ne
 80162fe:	2301      	movne	r3, #1
 8016300:	2300      	moveq	r3, #0
 8016302:	b2da      	uxtb	r2, r3
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8016308:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801630c:	2b00      	cmp	r3, #0
 801630e:	db06      	blt.n	801631e <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8016310:	8afb      	ldrh	r3, [r7, #22]
 8016312:	0b9b      	lsrs	r3, r3, #14
 8016314:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8016316:	f003 0301 	and.w	r3, r3, #1
 801631a:	b2da      	uxtb	r2, r3
 801631c:	e000      	b.n	8016320 <mg_phy_up+0xe4>
 801631e:	2202      	movs	r2, #2
 8016320:	683b      	ldr	r3, [r7, #0]
 8016322:	701a      	strb	r2, [r3, #0]
 8016324:	e079      	b.n	801641a <mg_phy_up+0x1de>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	7afa      	ldrb	r2, [r7, #11]
 801632c:	2110      	movs	r1, #16
 801632e:	4610      	mov	r0, r2
 8016330:	4798      	blx	r3
 8016332:	4603      	mov	r3, r0
 8016334:	833b      	strh	r3, [r7, #24]
        *full_duplex = physts & MG_BIT(2);
 8016336:	8b3b      	ldrh	r3, [r7, #24]
 8016338:	f003 0304 	and.w	r3, r3, #4
 801633c:	2b00      	cmp	r3, #0
 801633e:	bf14      	ite	ne
 8016340:	2301      	movne	r3, #1
 8016342:	2300      	moveq	r3, #0
 8016344:	b2da      	uxtb	r2, r3
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 801634a:	8b3b      	ldrh	r3, [r7, #24]
 801634c:	f003 0302 	and.w	r3, r3, #2
 8016350:	2b00      	cmp	r3, #0
 8016352:	bf0c      	ite	eq
 8016354:	2301      	moveq	r3, #1
 8016356:	2300      	movne	r3, #0
 8016358:	b2db      	uxtb	r3, r3
 801635a:	461a      	mov	r2, r3
 801635c:	683b      	ldr	r3, [r7, #0]
 801635e:	701a      	strb	r2, [r3, #0]
 8016360:	e05b      	b.n	801641a <mg_phy_up+0x1de>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8016362:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016364:	2b22      	cmp	r3, #34	@ 0x22
 8016366:	d11d      	bne.n	80163a4 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	7afa      	ldrb	r2, [r7, #11]
 801636e:	211e      	movs	r1, #30
 8016370:	4610      	mov	r0, r2
 8016372:	4798      	blx	r3
 8016374:	4603      	mov	r3, r0
 8016376:	83bb      	strh	r3, [r7, #28]
      *full_duplex = pc1r & MG_BIT(2);
 8016378:	8bbb      	ldrh	r3, [r7, #28]
 801637a:	f003 0304 	and.w	r3, r3, #4
 801637e:	2b00      	cmp	r3, #0
 8016380:	bf14      	ite	ne
 8016382:	2301      	movne	r3, #1
 8016384:	2300      	moveq	r3, #0
 8016386:	b2da      	uxtb	r2, r3
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 801638c:	8bbb      	ldrh	r3, [r7, #28]
 801638e:	f003 0303 	and.w	r3, r3, #3
 8016392:	2b01      	cmp	r3, #1
 8016394:	bf14      	ite	ne
 8016396:	2301      	movne	r3, #1
 8016398:	2300      	moveq	r3, #0
 801639a:	b2db      	uxtb	r3, r3
 801639c:	461a      	mov	r2, r3
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	701a      	strb	r2, [r3, #0]
 80163a2:	e03a      	b.n	801641a <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_LAN87x) {
 80163a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80163a6:	2b07      	cmp	r3, #7
 80163a8:	d11a      	bne.n	80163e0 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	7afa      	ldrb	r2, [r7, #11]
 80163b0:	211f      	movs	r1, #31
 80163b2:	4610      	mov	r0, r2
 80163b4:	4798      	blx	r3
 80163b6:	4603      	mov	r3, r0
 80163b8:	83fb      	strh	r3, [r7, #30]
      *full_duplex = scsr & MG_BIT(4);
 80163ba:	8bfb      	ldrh	r3, [r7, #30]
 80163bc:	f003 0310 	and.w	r3, r3, #16
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	bf14      	ite	ne
 80163c4:	2301      	movne	r3, #1
 80163c6:	2300      	moveq	r3, #0
 80163c8:	b2da      	uxtb	r2, r3
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 80163ce:	8bfb      	ldrh	r3, [r7, #30]
 80163d0:	08db      	lsrs	r3, r3, #3
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	f003 0301 	and.w	r3, r3, #1
 80163d8:	b2da      	uxtb	r2, r3
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	701a      	strb	r2, [r3, #0]
 80163de:	e01c      	b.n	801641a <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_RTL8201) {
 80163e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80163e2:	2b1c      	cmp	r3, #28
 80163e4:	d119      	bne.n	801641a <mg_phy_up+0x1de>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	7afa      	ldrb	r2, [r7, #11]
 80163ec:	2100      	movs	r1, #0
 80163ee:	4610      	mov	r0, r2
 80163f0:	4798      	blx	r3
 80163f2:	4603      	mov	r3, r0
 80163f4:	843b      	strh	r3, [r7, #32]
      *full_duplex = bcr & MG_BIT(8);
 80163f6:	8c3b      	ldrh	r3, [r7, #32]
 80163f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	bf14      	ite	ne
 8016400:	2301      	movne	r3, #1
 8016402:	2300      	moveq	r3, #0
 8016404:	b2da      	uxtb	r2, r3
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 801640a:	8c3b      	ldrh	r3, [r7, #32]
 801640c:	0b5b      	lsrs	r3, r3, #13
 801640e:	b2db      	uxtb	r3, r3
 8016410:	f003 0301 	and.w	r3, r3, #1
 8016414:	b2da      	uxtb	r2, r3
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 801641a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 801641e:	4618      	mov	r0, r3
 8016420:	3728      	adds	r7, #40	@ 0x28
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
	...

08016428 <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	4603      	mov	r3, r0
 8016430:	460a      	mov	r2, r1
 8016432:	71fb      	strb	r3, [r7, #7]
 8016434:	4613      	mov	r3, r2
 8016436:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 8016438:	4b17      	ldr	r3, [pc, #92]	@ (8016498 <eth_read_phy+0x70>)
 801643a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801643e:	4a16      	ldr	r2, [pc, #88]	@ (8016498 <eth_read_phy+0x70>)
 8016440:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8016444:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 8016448:	4b13      	ldr	r3, [pc, #76]	@ (8016498 <eth_read_phy+0x70>)
 801644a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801644e:	79fb      	ldrb	r3, [r7, #7]
 8016450:	0559      	lsls	r1, r3, #21
 8016452:	79bb      	ldrb	r3, [r7, #6]
 8016454:	041b      	lsls	r3, r3, #16
 8016456:	430b      	orrs	r3, r1
 8016458:	4313      	orrs	r3, r2
 801645a:	4a0f      	ldr	r2, [pc, #60]	@ (8016498 <eth_read_phy+0x70>)
 801645c:	f043 030c 	orr.w	r3, r3, #12
 8016460:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8016464:	4b0c      	ldr	r3, [pc, #48]	@ (8016498 <eth_read_phy+0x70>)
 8016466:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801646a:	4a0b      	ldr	r2, [pc, #44]	@ (8016498 <eth_read_phy+0x70>)
 801646c:	f043 0301 	orr.w	r3, r3, #1
 8016470:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8016474:	bf00      	nop
 8016476:	4b08      	ldr	r3, [pc, #32]	@ (8016498 <eth_read_phy+0x70>)
 8016478:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801647c:	f003 0301 	and.w	r3, r3, #1
 8016480:	2b00      	cmp	r3, #0
 8016482:	d1f8      	bne.n	8016476 <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 8016484:	4b04      	ldr	r3, [pc, #16]	@ (8016498 <eth_read_phy+0x70>)
 8016486:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801648a:	b29b      	uxth	r3, r3
}
 801648c:	4618      	mov	r0, r3
 801648e:	370c      	adds	r7, #12
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr
 8016498:	40028000 	.word	0x40028000

0801649c <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 801649c:	b480      	push	{r7}
 801649e:	b083      	sub	sp, #12
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	4603      	mov	r3, r0
 80164a4:	71fb      	strb	r3, [r7, #7]
 80164a6:	460b      	mov	r3, r1
 80164a8:	71bb      	strb	r3, [r7, #6]
 80164aa:	4613      	mov	r3, r2
 80164ac:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 80164ae:	4a18      	ldr	r2, [pc, #96]	@ (8016510 <eth_write_phy+0x74>)
 80164b0:	88bb      	ldrh	r3, [r7, #4]
 80164b2:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 80164b6:	4b16      	ldr	r3, [pc, #88]	@ (8016510 <eth_write_phy+0x74>)
 80164b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80164bc:	4a14      	ldr	r2, [pc, #80]	@ (8016510 <eth_write_phy+0x74>)
 80164be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80164c2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 80164c6:	4b12      	ldr	r3, [pc, #72]	@ (8016510 <eth_write_phy+0x74>)
 80164c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80164cc:	79fb      	ldrb	r3, [r7, #7]
 80164ce:	0559      	lsls	r1, r3, #21
 80164d0:	79bb      	ldrb	r3, [r7, #6]
 80164d2:	041b      	lsls	r3, r3, #16
 80164d4:	430b      	orrs	r3, r1
 80164d6:	4313      	orrs	r3, r2
 80164d8:	4a0d      	ldr	r2, [pc, #52]	@ (8016510 <eth_write_phy+0x74>)
 80164da:	f043 0304 	orr.w	r3, r3, #4
 80164de:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 80164e2:	4b0b      	ldr	r3, [pc, #44]	@ (8016510 <eth_write_phy+0x74>)
 80164e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80164e8:	4a09      	ldr	r2, [pc, #36]	@ (8016510 <eth_write_phy+0x74>)
 80164ea:	f043 0301 	orr.w	r3, r3, #1
 80164ee:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 80164f2:	bf00      	nop
 80164f4:	4b06      	ldr	r3, [pc, #24]	@ (8016510 <eth_write_phy+0x74>)
 80164f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80164fa:	f003 0301 	and.w	r3, r3, #1
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d1f8      	bne.n	80164f4 <eth_write_phy+0x58>
}
 8016502:	bf00      	nop
 8016504:	bf00      	nop
 8016506:	370c      	adds	r7, #12
 8016508:	46bd      	mov	sp, r7
 801650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650e:	4770      	bx	lr
 8016510:	40028000 	.word	0x40028000

08016514 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8016514:	b580      	push	{r7, lr}
 8016516:	b08a      	sub	sp, #40	@ 0x28
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016520:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 8016522:	4a8e      	ldr	r2, [pc, #568]	@ (801675c <mg_tcpip_driver_stm32h_init+0x248>)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d002      	beq.n	8016534 <mg_tcpip_driver_stm32h_init+0x20>
 801652e:	69bb      	ldr	r3, [r7, #24]
 8016530:	791b      	ldrb	r3, [r3, #4]
 8016532:	e000      	b.n	8016536 <mg_tcpip_driver_stm32h_init+0x22>
 8016534:	2300      	movs	r3, #0
 8016536:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 8016538:	69bb      	ldr	r3, [r7, #24]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d002      	beq.n	8016544 <mg_tcpip_driver_stm32h_init+0x30>
 801653e:	69bb      	ldr	r3, [r7, #24]
 8016540:	795b      	ldrb	r3, [r3, #5]
 8016542:	e000      	b.n	8016546 <mg_tcpip_driver_stm32h_init+0x32>
 8016544:	2302      	movs	r3, #2
 8016546:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8016548:	2300      	movs	r3, #0
 801654a:	627b      	str	r3, [r7, #36]	@ 0x24
 801654c:	e017      	b.n	801657e <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 801654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016550:	f240 6204 	movw	r2, #1540	@ 0x604
 8016554:	fb02 f303 	mul.w	r3, r2, r3
 8016558:	4a81      	ldr	r2, [pc, #516]	@ (8016760 <mg_tcpip_driver_stm32h_init+0x24c>)
 801655a:	4413      	add	r3, r2
 801655c:	4619      	mov	r1, r3
 801655e:	4a81      	ldr	r2, [pc, #516]	@ (8016764 <mg_tcpip_driver_stm32h_init+0x250>)
 8016560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016562:	011b      	lsls	r3, r3, #4
 8016564:	4413      	add	r3, r2
 8016566:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 8016568:	4a7e      	ldr	r2, [pc, #504]	@ (8016764 <mg_tcpip_driver_stm32h_init+0x250>)
 801656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801656c:	011b      	lsls	r3, r3, #4
 801656e:	4413      	add	r3, r2
 8016570:	330c      	adds	r3, #12
 8016572:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8016576:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8016578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801657a:	3301      	adds	r3, #1
 801657c:	627b      	str	r3, [r7, #36]	@ 0x24
 801657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016580:	2b03      	cmp	r3, #3
 8016582:	dde4      	ble.n	801654e <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8016584:	2300      	movs	r3, #0
 8016586:	623b      	str	r3, [r7, #32]
 8016588:	e00f      	b.n	80165aa <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 801658a:	6a3b      	ldr	r3, [r7, #32]
 801658c:	f240 6204 	movw	r2, #1540	@ 0x604
 8016590:	fb02 f303 	mul.w	r3, r2, r3
 8016594:	4a74      	ldr	r2, [pc, #464]	@ (8016768 <mg_tcpip_driver_stm32h_init+0x254>)
 8016596:	4413      	add	r3, r2
 8016598:	4619      	mov	r1, r3
 801659a:	4a74      	ldr	r2, [pc, #464]	@ (801676c <mg_tcpip_driver_stm32h_init+0x258>)
 801659c:	6a3b      	ldr	r3, [r7, #32]
 801659e:	011b      	lsls	r3, r3, #4
 80165a0:	4413      	add	r3, r2
 80165a2:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80165a4:	6a3b      	ldr	r3, [r7, #32]
 80165a6:	3301      	adds	r3, #1
 80165a8:	623b      	str	r3, [r7, #32]
 80165aa:	6a3b      	ldr	r3, [r7, #32]
 80165ac:	2b03      	cmp	r3, #3
 80165ae:	ddec      	ble.n	801658a <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 80165b0:	4b6f      	ldr	r3, [pc, #444]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80165b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	4a6d      	ldr	r2, [pc, #436]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80165ba:	f043 0301 	orr.w	r3, r3, #1
 80165be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80165c2:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 80165c4:	2300      	movs	r3, #0
 80165c6:	61fb      	str	r3, [r7, #28]
 80165c8:	e002      	b.n	80165d0 <mg_tcpip_driver_stm32h_init+0xbc>
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	3301      	adds	r3, #1
 80165ce:	61fb      	str	r3, [r7, #28]
 80165d0:	69fb      	ldr	r3, [r7, #28]
 80165d2:	2b03      	cmp	r3, #3
 80165d4:	ddf9      	ble.n	80165ca <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 80165d6:	bf00      	nop
 80165d8:	4b65      	ldr	r3, [pc, #404]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80165da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	f003 0301 	and.w	r3, r3, #1
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d1f7      	bne.n	80165d8 <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 80165e8:	69bb      	ldr	r3, [r7, #24]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d006      	beq.n	80165fc <mg_tcpip_driver_stm32h_init+0xe8>
 80165ee:	69bb      	ldr	r3, [r7, #24]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	db02      	blt.n	80165fc <mg_tcpip_driver_stm32h_init+0xe8>
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	e000      	b.n	80165fe <mg_tcpip_driver_stm32h_init+0xea>
 80165fc:	2307      	movs	r3, #7
 80165fe:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 8016600:	693b      	ldr	r3, [r7, #16]
 8016602:	021b      	lsls	r3, r3, #8
 8016604:	4a5a      	ldr	r2, [pc, #360]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 8016606:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801660a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 801660e:	4b58      	ldr	r3, [pc, #352]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 8016610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016614:	461a      	mov	r2, r3
 8016616:	2300      	movs	r3, #0
 8016618:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 801661a:	4b55      	ldr	r3, [pc, #340]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 801661c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016620:	685b      	ldr	r3, [r3, #4]
 8016622:	4a53      	ldr	r2, [pc, #332]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 8016624:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8016628:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801662c:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 801662e:	4b50      	ldr	r3, [pc, #320]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 8016630:	2200      	movs	r2, #0
 8016632:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 8016636:	4b4e      	ldr	r3, [pc, #312]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 8016638:	2280      	movs	r2, #128	@ 0x80
 801663a:	671a      	str	r2, [r3, #112]	@ 0x70
  // ETH->MACPFR = MG_BIT(31);  // Receive all
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 801663c:	4a4d      	ldr	r2, [pc, #308]	@ (8016774 <mg_tcpip_driver_stm32h_init+0x260>)
 801663e:	f107 0308 	add.w	r3, r7, #8
 8016642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016646:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 801664a:	7dba      	ldrb	r2, [r7, #22]
 801664c:	7df9      	ldrb	r1, [r7, #23]
 801664e:	f107 0308 	add.w	r3, r7, #8
 8016652:	4618      	mov	r0, r3
 8016654:	f7ff fd5c 	bl	8016110 <mg_phy_init>
  ETH->DMACRDLAR =
 8016658:	4a45      	ldr	r2, [pc, #276]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 801665a:	4b42      	ldr	r3, [pc, #264]	@ (8016764 <mg_tcpip_driver_stm32h_init+0x250>)
  ETH->DMACRDLAR =
 801665c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016660:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8016664:	4b42      	ldr	r3, [pc, #264]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 8016666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801666a:	461a      	mov	r2, r3
 801666c:	2303      	movs	r3, #3
 801666e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 8016672:	4a3f      	ldr	r2, [pc, #252]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 8016674:	4b40      	ldr	r3, [pc, #256]	@ (8016778 <mg_tcpip_driver_stm32h_init+0x264>)
  ETH->DMACRDTPR =
 8016676:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801667a:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 801667e:	4a3c      	ldr	r2, [pc, #240]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 8016680:	4b3a      	ldr	r3, [pc, #232]	@ (801676c <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACTDLAR =
 8016682:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016686:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 801668a:	4b39      	ldr	r3, [pc, #228]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 801668c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016690:	461a      	mov	r2, r3
 8016692:	2303      	movs	r3, #3
 8016694:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 8016698:	4a35      	ldr	r2, [pc, #212]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 801669a:	4b34      	ldr	r3, [pc, #208]	@ (801676c <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACTDTPR =
 801669c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80166a0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 80166a4:	4b32      	ldr	r3, [pc, #200]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80166aa:	461a      	mov	r2, r3
 80166ac:	2300      	movs	r3, #0
 80166ae:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 80166b2:	4b2f      	ldr	r3, [pc, #188]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80166b8:	461a      	mov	r2, r3
 80166ba:	f248 0340 	movw	r3, #32832	@ 0x8040
 80166be:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 80166c2:	4b2b      	ldr	r3, [pc, #172]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166c4:	f24e 0203 	movw	r2, #57347	@ 0xe003
 80166c8:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 80166ca:	4b29      	ldr	r3, [pc, #164]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166cc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80166d0:	4a27      	ldr	r2, [pc, #156]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166d2:	f043 0302 	orr.w	r3, r3, #2
 80166d6:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 80166da:	4b25      	ldr	r3, [pc, #148]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80166e0:	4a23      	ldr	r2, [pc, #140]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166e2:	f043 0320 	orr.w	r3, r3, #32
 80166e6:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 80166ea:	4b21      	ldr	r3, [pc, #132]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80166f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80166f4:	4a1e      	ldr	r2, [pc, #120]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 80166f6:	f043 0301 	orr.w	r3, r3, #1
 80166fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80166fe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 8016702:	4b1b      	ldr	r3, [pc, #108]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 8016704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016708:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801670c:	4a18      	ldr	r2, [pc, #96]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 801670e:	f043 0301 	orr.w	r3, r3, #1
 8016712:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016716:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	795b      	ldrb	r3, [r3, #5]
 801671e:	021b      	lsls	r3, r3, #8
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	7912      	ldrb	r2, [r2, #4]
 8016724:	4611      	mov	r1, r2
 8016726:	4a12      	ldr	r2, [pc, #72]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
 8016728:	430b      	orrs	r3, r1
 801672a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	78db      	ldrb	r3, [r3, #3]
 8016732:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	789b      	ldrb	r3, [r3, #2]
 8016738:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801673a:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	785b      	ldrb	r3, [r3, #1]
 8016740:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8016742:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8016744:	687a      	ldr	r2, [r7, #4]
 8016746:	7812      	ldrb	r2, [r2, #0]
 8016748:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801674a:	4a09      	ldr	r2, [pc, #36]	@ (8016770 <mg_tcpip_driver_stm32h_init+0x25c>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 801674c:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801674e:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 8016752:	2301      	movs	r3, #1
}
 8016754:	4618      	mov	r0, r3
 8016756:	3728      	adds	r7, #40	@ 0x28
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}
 801675c:	24005c94 	.word	0x24005c94
 8016760:	24002c74 	.word	0x24002c74
 8016764:	24002bf4 	.word	0x24002bf4
 8016768:	24004484 	.word	0x24004484
 801676c:	24002c34 	.word	0x24002c34
 8016770:	40028000 	.word	0x40028000
 8016774:	08025834 	.word	0x08025834
 8016778:	24002c24 	.word	0x24002c24

0801677c <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 801677c:	b580      	push	{r7, lr}
 801677e:	b086      	sub	sp, #24
 8016780:	af00      	add	r7, sp, #0
 8016782:	60f8      	str	r0, [r7, #12]
 8016784:	60b9      	str	r1, [r7, #8]
 8016786:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8016788:	68bb      	ldr	r3, [r7, #8]
 801678a:	f240 6204 	movw	r2, #1540	@ 0x604
 801678e:	4293      	cmp	r3, r2
 8016790:	d902      	bls.n	8016798 <mg_tcpip_driver_stm32h_tx+0x1c>
    MG_ERROR(("Frame too big, %ld", (long) len));
    len = 0;  // Frame is too big
 8016792:	2300      	movs	r3, #0
 8016794:	60bb      	str	r3, [r7, #8]
 8016796:	e053      	b.n	8016840 <mg_tcpip_driver_stm32h_tx+0xc4>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 8016798:	4b37      	ldr	r3, [pc, #220]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	4a37      	ldr	r2, [pc, #220]	@ (801687c <mg_tcpip_driver_stm32h_tx+0x100>)
 801679e:	011b      	lsls	r3, r3, #4
 80167a0:	4413      	add	r3, r2
 80167a2:	330c      	adds	r3, #12
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	da10      	bge.n	80167cc <mg_tcpip_driver_stm32h_tx+0x50>
    ifp->nerr++;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167ae:	1c5a      	adds	r2, r3, #1
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	679a      	str	r2, [r3, #120]	@ 0x78
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 80167b4:	2300      	movs	r3, #0
 80167b6:	617b      	str	r3, [r7, #20]
 80167b8:	e002      	b.n	80167c0 <mg_tcpip_driver_stm32h_tx+0x44>
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	3301      	adds	r3, #1
 80167be:	617b      	str	r3, [r7, #20]
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	2b03      	cmp	r3, #3
 80167c4:	ddf9      	ble.n	80167ba <mg_tcpip_driver_stm32h_tx+0x3e>
    len = 0;  // All descriptors are busy, fail
 80167c6:	2300      	movs	r3, #0
 80167c8:	60bb      	str	r3, [r7, #8]
 80167ca:	e039      	b.n	8016840 <mg_tcpip_driver_stm32h_tx+0xc4>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 80167cc:	4b2a      	ldr	r3, [pc, #168]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	f240 6204 	movw	r2, #1540	@ 0x604
 80167d4:	fb02 f303 	mul.w	r3, r2, r3
 80167d8:	4a29      	ldr	r2, [pc, #164]	@ (8016880 <mg_tcpip_driver_stm32h_tx+0x104>)
 80167da:	4413      	add	r3, r2
 80167dc:	68ba      	ldr	r2, [r7, #8]
 80167de:	68f9      	ldr	r1, [r7, #12]
 80167e0:	4618      	mov	r0, r3
 80167e2:	f00c f848 	bl	8022876 <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 80167e6:	4b24      	ldr	r3, [pc, #144]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	4a24      	ldr	r2, [pc, #144]	@ (801687c <mg_tcpip_driver_stm32h_tx+0x100>)
 80167ec:	011b      	lsls	r3, r3, #4
 80167ee:	4413      	add	r3, r2
 80167f0:	3308      	adds	r3, #8
 80167f2:	68ba      	ldr	r2, [r7, #8]
 80167f4:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 80167f6:	4b20      	ldr	r3, [pc, #128]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	4a20      	ldr	r2, [pc, #128]	@ (801687c <mg_tcpip_driver_stm32h_tx+0x100>)
 80167fc:	011b      	lsls	r3, r3, #4
 80167fe:	4413      	add	r3, r2
 8016800:	330c      	adds	r3, #12
 8016802:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8016806:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 8016808:	4b1b      	ldr	r3, [pc, #108]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	4a1b      	ldr	r2, [pc, #108]	@ (801687c <mg_tcpip_driver_stm32h_tx+0x100>)
 801680e:	011b      	lsls	r3, r3, #4
 8016810:	4413      	add	r3, r2
 8016812:	330c      	adds	r3, #12
 8016814:	681a      	ldr	r2, [r3, #0]
 8016816:	4b18      	ldr	r3, [pc, #96]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801681e:	4917      	ldr	r1, [pc, #92]	@ (801687c <mg_tcpip_driver_stm32h_tx+0x100>)
 8016820:	011b      	lsls	r3, r3, #4
 8016822:	440b      	add	r3, r1
 8016824:	330c      	adds	r3, #12
 8016826:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 8016828:	4b13      	ldr	r3, [pc, #76]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	3301      	adds	r3, #1
 801682e:	4a12      	ldr	r2, [pc, #72]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 8016830:	6013      	str	r3, [r2, #0]
 8016832:	4b11      	ldr	r3, [pc, #68]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	2b03      	cmp	r3, #3
 8016838:	d902      	bls.n	8016840 <mg_tcpip_driver_stm32h_tx+0xc4>
 801683a:	4b0f      	ldr	r3, [pc, #60]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 801683c:	2200      	movs	r2, #0
 801683e:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 8016840:	4b10      	ldr	r3, [pc, #64]	@ (8016884 <mg_tcpip_driver_stm32h_tx+0x108>)
 8016842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016846:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801684a:	4a0e      	ldr	r2, [pc, #56]	@ (8016884 <mg_tcpip_driver_stm32h_tx+0x108>)
 801684c:	f043 0306 	orr.w	r3, r3, #6
 8016850:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016854:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 8016858:	4b07      	ldr	r3, [pc, #28]	@ (8016878 <mg_tcpip_driver_stm32h_tx+0xfc>)
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	011b      	lsls	r3, r3, #4
 801685e:	4a07      	ldr	r2, [pc, #28]	@ (801687c <mg_tcpip_driver_stm32h_tx+0x100>)
 8016860:	441a      	add	r2, r3
 8016862:	4b08      	ldr	r3, [pc, #32]	@ (8016884 <mg_tcpip_driver_stm32h_tx+0x108>)
 8016864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016868:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 801686c:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 801686e:	4618      	mov	r0, r3
 8016870:	3718      	adds	r7, #24
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	24005c98 	.word	0x24005c98
 801687c:	24002c34 	.word	0x24002c34
 8016880:	24004484 	.word	0x24004484
 8016884:	40028000 	.word	0x40028000

08016888 <mg_tcpip_driver_stm32h_up>:

static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {
 8016888:	b580      	push	{r7, lr}
 801688a:	b088      	sub	sp, #32
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016894:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8016896:	69bb      	ldr	r3, [r7, #24]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d002      	beq.n	80168a2 <mg_tcpip_driver_stm32h_up+0x1a>
 801689c:	69bb      	ldr	r3, [r7, #24]
 801689e:	791b      	ldrb	r3, [r3, #4]
 80168a0:	e000      	b.n	80168a4 <mg_tcpip_driver_stm32h_up+0x1c>
 80168a2:	2300      	movs	r3, #0
 80168a4:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 80168a6:	2300      	movs	r3, #0
 80168a8:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 80168aa:	2300      	movs	r3, #0
 80168ac:	75bb      	strb	r3, [r7, #22]
 80168ae:	2300      	movs	r3, #0
 80168b0:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 80168b2:	4a1c      	ldr	r2, [pc, #112]	@ (8016924 <mg_tcpip_driver_stm32h_up+0x9c>)
 80168b4:	f107 030c 	add.w	r3, r7, #12
 80168b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168bc:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 80168c0:	f107 0315 	add.w	r3, r7, #21
 80168c4:	f107 0214 	add.w	r2, r7, #20
 80168c8:	7df9      	ldrb	r1, [r7, #23]
 80168ca:	f107 000c 	add.w	r0, r7, #12
 80168ce:	f7ff fcb5 	bl	801623c <mg_phy_up>
 80168d2:	4603      	mov	r3, r0
 80168d4:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d11b      	bne.n	8016918 <mg_tcpip_driver_stm32h_up+0x90>
 80168e0:	7dbb      	ldrb	r3, [r7, #22]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d018      	beq.n	8016918 <mg_tcpip_driver_stm32h_up+0x90>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 80168e6:	4b10      	ldr	r3, [pc, #64]	@ (8016928 <mg_tcpip_driver_stm32h_up+0xa0>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80168ee:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 80168f0:	7d7b      	ldrb	r3, [r7, #21]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d103      	bne.n	80168fe <mg_tcpip_driver_stm32h_up+0x76>
 80168f6:	69fb      	ldr	r3, [r7, #28]
 80168f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80168fc:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 80168fe:	7d3b      	ldrb	r3, [r7, #20]
 8016900:	f083 0301 	eor.w	r3, r3, #1
 8016904:	b2db      	uxtb	r3, r3
 8016906:	2b00      	cmp	r3, #0
 8016908:	d003      	beq.n	8016912 <mg_tcpip_driver_stm32h_up+0x8a>
 801690a:	69fb      	ldr	r3, [r7, #28]
 801690c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016910:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8016912:	4a05      	ldr	r2, [pc, #20]	@ (8016928 <mg_tcpip_driver_stm32h_up+0xa0>)
 8016914:	69fb      	ldr	r3, [r7, #28]
 8016916:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 8016918:	7dbb      	ldrb	r3, [r7, #22]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3720      	adds	r7, #32
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}
 8016922:	bf00      	nop
 8016924:	08025834 	.word	0x08025834
 8016928:	40028000 	.word	0x40028000

0801692c <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 8016932:	4b40      	ldr	r3, [pc, #256]	@ (8016a34 <ETH_IRQHandler+0x108>)
 8016934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016938:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801693c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016940:	2b00      	cmp	r3, #0
 8016942:	d065      	beq.n	8016a10 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 8016944:	4b3b      	ldr	r3, [pc, #236]	@ (8016a34 <ETH_IRQHandler+0x108>)
 8016946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801694a:	461a      	mov	r2, r3
 801694c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8016950:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8016954:	2300      	movs	r3, #0
 8016956:	607b      	str	r3, [r7, #4]
 8016958:	e055      	b.n	8016a06 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 801695a:	4b37      	ldr	r3, [pc, #220]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	4a37      	ldr	r2, [pc, #220]	@ (8016a3c <ETH_IRQHandler+0x110>)
 8016960:	011b      	lsls	r3, r3, #4
 8016962:	4413      	add	r3, r2
 8016964:	330c      	adds	r3, #12
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	db50      	blt.n	8016a0e <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 801696c:	4b32      	ldr	r3, [pc, #200]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	4a32      	ldr	r2, [pc, #200]	@ (8016a3c <ETH_IRQHandler+0x110>)
 8016972:	011b      	lsls	r3, r3, #4
 8016974:	4413      	add	r3, r2
 8016976:	330c      	adds	r3, #12
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801697e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8016982:	d128      	bne.n	80169d6 <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 8016984:	4b2c      	ldr	r3, [pc, #176]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	4a2c      	ldr	r2, [pc, #176]	@ (8016a3c <ETH_IRQHandler+0x110>)
 801698a:	011b      	lsls	r3, r3, #4
 801698c:	4413      	add	r3, r2
 801698e:	330c      	adds	r3, #12
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 8016996:	2b00      	cmp	r3, #0
 8016998:	d11d      	bne.n	80169d6 <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 801699a:	4b27      	ldr	r3, [pc, #156]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	4a27      	ldr	r2, [pc, #156]	@ (8016a3c <ETH_IRQHandler+0x110>)
 80169a0:	011b      	lsls	r3, r3, #4
 80169a2:	4413      	add	r3, r2
 80169a4:	330c      	adds	r3, #12
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80169ac:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80169ae:	4b22      	ldr	r3, [pc, #136]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	f240 6204 	movw	r2, #1540	@ 0x604
 80169b6:	fb02 f303 	mul.w	r3, r2, r3
 80169ba:	4a21      	ldr	r2, [pc, #132]	@ (8016a40 <ETH_IRQHandler+0x114>)
 80169bc:	1898      	adds	r0, r3, r2
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	2b04      	cmp	r3, #4
 80169c2:	d902      	bls.n	80169ca <ETH_IRQHandler+0x9e>
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	3b04      	subs	r3, #4
 80169c8:	e000      	b.n	80169cc <ETH_IRQHandler+0xa0>
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	4a1d      	ldr	r2, [pc, #116]	@ (8016a44 <ETH_IRQHandler+0x118>)
 80169ce:	6812      	ldr	r2, [r2, #0]
 80169d0:	4619      	mov	r1, r3
 80169d2:	f7f4 fe81 	bl	800b6d8 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 80169d6:	4b18      	ldr	r3, [pc, #96]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	4a18      	ldr	r2, [pc, #96]	@ (8016a3c <ETH_IRQHandler+0x110>)
 80169dc:	011b      	lsls	r3, r3, #4
 80169de:	4413      	add	r3, r2
 80169e0:	330c      	adds	r3, #12
 80169e2:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80169e6:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 80169e8:	4b13      	ldr	r3, [pc, #76]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	3301      	adds	r3, #1
 80169ee:	4a12      	ldr	r2, [pc, #72]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 80169f0:	6013      	str	r3, [r2, #0]
 80169f2:	4b11      	ldr	r3, [pc, #68]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b03      	cmp	r3, #3
 80169f8:	d902      	bls.n	8016a00 <ETH_IRQHandler+0xd4>
 80169fa:	4b0f      	ldr	r3, [pc, #60]	@ (8016a38 <ETH_IRQHandler+0x10c>)
 80169fc:	2200      	movs	r2, #0
 80169fe:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	3301      	adds	r3, #1
 8016a04:	607b      	str	r3, [r7, #4]
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2b09      	cmp	r3, #9
 8016a0a:	d9a6      	bls.n	801695a <ETH_IRQHandler+0x2e>
 8016a0c:	e000      	b.n	8016a10 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8016a0e:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8016a10:	4b08      	ldr	r3, [pc, #32]	@ (8016a34 <ETH_IRQHandler+0x108>)
 8016a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016a16:	461a      	mov	r2, r3
 8016a18:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8016a1c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8016a20:	4a04      	ldr	r2, [pc, #16]	@ (8016a34 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8016a22:	4b09      	ldr	r3, [pc, #36]	@ (8016a48 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8016a24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016a28:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8016a2c:	bf00      	nop
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	40028000 	.word	0x40028000
 8016a38:	24005c9c 	.word	0x24005c9c
 8016a3c:	24002bf4 	.word	0x24002bf4
 8016a40:	24002c74 	.word	0x24002c74
 8016a44:	24005c94 	.word	0x24005c94
 8016a48:	24002c24 	.word	0x24002c24

08016a4c <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1729663508},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 8016a4c:	b480      	push	{r7}
 8016a4e:	b083      	sub	sp, #12
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 8016a56:	e005      	b.n	8016a64 <scmp+0x18>
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	607b      	str	r3, [r7, #4]
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	3301      	adds	r3, #1
 8016a62:	603b      	str	r3, [r7, #0]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	781b      	ldrb	r3, [r3, #0]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d005      	beq.n	8016a78 <scmp+0x2c>
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	781a      	ldrb	r2, [r3, #0]
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	429a      	cmp	r2, r3
 8016a76:	d0ef      	beq.n	8016a58 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	1ad3      	subs	r3, r2, r3
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	370c      	adds	r7, #12
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr

08016a90 <mg_unlist>:
const char *mg_unlist(size_t no) {
 8016a90:	b480      	push	{r7}
 8016a92:	b083      	sub	sp, #12
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 8016a98:	4906      	ldr	r1, [pc, #24]	@ (8016ab4 <mg_unlist+0x24>)
 8016a9a:	687a      	ldr	r2, [r7, #4]
 8016a9c:	4613      	mov	r3, r2
 8016a9e:	005b      	lsls	r3, r3, #1
 8016aa0:	4413      	add	r3, r2
 8016aa2:	00db      	lsls	r3, r3, #3
 8016aa4:	440b      	add	r3, r1
 8016aa6:	681b      	ldr	r3, [r3, #0]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	370c      	adds	r7, #12
 8016aac:	46bd      	mov	sp, r7
 8016aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab2:	4770      	bx	lr
 8016ab4:	080321a0 	.word	0x080321a0

08016ab8 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b086      	sub	sp, #24
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	60f8      	str	r0, [r7, #12]
 8016ac0:	60b9      	str	r1, [r7, #8]
 8016ac2:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 8016ac4:	4b16      	ldr	r3, [pc, #88]	@ (8016b20 <mg_unpack+0x68>)
 8016ac6:	617b      	str	r3, [r7, #20]
 8016ac8:	e020      	b.n	8016b0c <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	68f9      	ldr	r1, [r7, #12]
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7ff ffbb 	bl	8016a4c <scmp>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d113      	bne.n	8016b04 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 8016adc:	68bb      	ldr	r3, [r7, #8]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d004      	beq.n	8016aec <mg_unpack+0x34>
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	689b      	ldr	r3, [r3, #8]
 8016ae6:	1e5a      	subs	r2, r3, #1
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d005      	beq.n	8016afe <mg_unpack+0x46>
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016af8:	6879      	ldr	r1, [r7, #4]
 8016afa:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	685b      	ldr	r3, [r3, #4]
 8016b02:	e008      	b.n	8016b16 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 8016b04:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	3318      	adds	r3, #24
 8016b0a:	617b      	str	r3, [r7, #20]
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d1da      	bne.n	8016aca <mg_unpack+0x12>
  }
  return NULL;
 8016b14:	2300      	movs	r3, #0
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3718      	adds	r7, #24
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	080321a0 	.word	0x080321a0

08016b24 <fast_rand>:
static void gateway1_save_to_flash(void);
static void gateway1_load_from_flash(void);
static void gateway1_publish_res(struct mg_connection *c);
static void gateway1_timer_fn(void *arg);

static uint32_t fast_rand(void) {
 8016b24:	b480      	push	{r7}
 8016b26:	af00      	add	r7, sp, #0
  static uint32_t seed = 12345;
  seed = (seed * 1103515245 + 12345) & 0x7FFFFFFF;
 8016b28:	4b09      	ldr	r3, [pc, #36]	@ (8016b50 <fast_rand+0x2c>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	4a09      	ldr	r2, [pc, #36]	@ (8016b54 <fast_rand+0x30>)
 8016b2e:	fb03 f202 	mul.w	r2, r3, r2
 8016b32:	f243 0339 	movw	r3, #12345	@ 0x3039
 8016b36:	4413      	add	r3, r2
 8016b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016b3c:	4a04      	ldr	r2, [pc, #16]	@ (8016b50 <fast_rand+0x2c>)
 8016b3e:	6013      	str	r3, [r2, #0]
  return seed;
 8016b40:	4b03      	ldr	r3, [pc, #12]	@ (8016b50 <fast_rand+0x2c>)
 8016b42:	681b      	ldr	r3, [r3, #0]
}
 8016b44:	4618      	mov	r0, r3
 8016b46:	46bd      	mov	sp, r7
 8016b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4c:	4770      	bx	lr
 8016b4e:	bf00      	nop
 8016b50:	24000348 	.word	0x24000348
 8016b54:	41c64e6d 	.word	0x41c64e6d

08016b58 <timer_fn_all_topics>:
  int value;      // Current value
} Topic;

static Topic s_topics[TOPIC_COUNT];  // Array of topics

static void timer_fn_all_topics(void *arg) {
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b096      	sub	sp, #88	@ 0x58
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	60f8      	str	r0, [r7, #12]
  if (g_mqtt_conn == NULL) return;
 8016b60:	4b34      	ldr	r3, [pc, #208]	@ (8016c34 <timer_fn_all_topics+0xdc>)
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d060      	beq.n	8016c2a <timer_fn_all_topics+0xd2>
  static char msg[16];  // Reuse buffer
  struct mg_mqtt_opts opts = {0};  // Initialize once
 8016b68:	f107 0314 	add.w	r3, r7, #20
 8016b6c:	2240      	movs	r2, #64	@ 0x40
 8016b6e:	2100      	movs	r1, #0
 8016b70:	4618      	mov	r0, r3
 8016b72:	f00b fcdc 	bl	802252e <memset>

  for (int i = 0; i < TOPIC_COUNT; i++) {
 8016b76:	2300      	movs	r3, #0
 8016b78:	657b      	str	r3, [r7, #84]	@ 0x54
 8016b7a:	e051      	b.n	8016c20 <timer_fn_all_topics+0xc8>
	  s_topics[i].value = fast_rand() % 1000;
 8016b7c:	f7ff ffd2 	bl	8016b24 <fast_rand>
 8016b80:	4602      	mov	r2, r0
 8016b82:	4b2d      	ldr	r3, [pc, #180]	@ (8016c38 <timer_fn_all_topics+0xe0>)
 8016b84:	fba3 1302 	umull	r1, r3, r3, r2
 8016b88:	099b      	lsrs	r3, r3, #6
 8016b8a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016b8e:	fb01 f303 	mul.w	r3, r1, r3
 8016b92:	1ad3      	subs	r3, r2, r3
 8016b94:	4618      	mov	r0, r3
 8016b96:	4a29      	ldr	r2, [pc, #164]	@ (8016c3c <timer_fn_all_topics+0xe4>)
 8016b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b9a:	212c      	movs	r1, #44	@ 0x2c
 8016b9c:	fb01 f303 	mul.w	r3, r1, r3
 8016ba0:	4413      	add	r3, r2
 8016ba2:	3328      	adds	r3, #40	@ 0x28
 8016ba4:	6018      	str	r0, [r3, #0]
	  snprintf(msg, sizeof(msg), "%d", s_topics[i].value);
 8016ba6:	4a25      	ldr	r2, [pc, #148]	@ (8016c3c <timer_fn_all_topics+0xe4>)
 8016ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016baa:	212c      	movs	r1, #44	@ 0x2c
 8016bac:	fb01 f303 	mul.w	r3, r1, r3
 8016bb0:	4413      	add	r3, r2
 8016bb2:	3328      	adds	r3, #40	@ 0x28
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	4a22      	ldr	r2, [pc, #136]	@ (8016c40 <timer_fn_all_topics+0xe8>)
 8016bb8:	2110      	movs	r1, #16
 8016bba:	4822      	ldr	r0, [pc, #136]	@ (8016c44 <timer_fn_all_topics+0xec>)
 8016bbc:	f00b fc16 	bl	80223ec <sniprintf>
    // Publish
    opts.topic = mg_str(s_topics[i].name);
 8016bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016bc2:	222c      	movs	r2, #44	@ 0x2c
 8016bc4:	fb02 f303 	mul.w	r3, r2, r3
 8016bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8016c3c <timer_fn_all_topics+0xe4>)
 8016bca:	441a      	add	r2, r3
 8016bcc:	463b      	mov	r3, r7
 8016bce:	4611      	mov	r1, r2
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f7f6 fc61 	bl	800d498 <mg_str_s>
 8016bd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016bda:	463a      	mov	r2, r7
 8016bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016be0:	e883 0003 	stmia.w	r3, {r0, r1}
    opts.message = mg_str_n(msg,strlen(msg));
 8016be4:	4817      	ldr	r0, [pc, #92]	@ (8016c44 <timer_fn_all_topics+0xec>)
 8016be6:	f7e9 fbdb 	bl	80003a0 <strlen>
 8016bea:	4602      	mov	r2, r0
 8016bec:	463b      	mov	r3, r7
 8016bee:	4915      	ldr	r1, [pc, #84]	@ (8016c44 <timer_fn_all_topics+0xec>)
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f7f6 fc6e 	bl	800d4d2 <mg_str_n>
 8016bf6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016bfa:	463a      	mov	r2, r7
 8016bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c00:	e883 0003 	stmia.w	r3, {r0, r1}
    opts.qos = 0;  // Add this to mg_mqtt_opts initialization
 8016c04:	2300      	movs	r3, #0
 8016c06:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    mg_mqtt_pub(g_mqtt_conn, &opts);
 8016c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8016c34 <timer_fn_all_topics+0xdc>)
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	f107 0214 	add.w	r2, r7, #20
 8016c12:	4611      	mov	r1, r2
 8016c14:	4618      	mov	r0, r3
 8016c16:	f7f1 faef 	bl	80081f8 <mg_mqtt_pub>
  for (int i = 0; i < TOPIC_COUNT; i++) {
 8016c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c1c:	3301      	adds	r3, #1
 8016c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8016c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016c26:	dba9      	blt.n	8016b7c <timer_fn_all_topics+0x24>
 8016c28:	e000      	b.n	8016c2c <timer_fn_all_topics+0xd4>
  if (g_mqtt_conn == NULL) return;
 8016c2a:	bf00      	nop
  }
}
 8016c2c:	3758      	adds	r7, #88	@ 0x58
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	bf00      	nop
 8016c34:	24010bec 	.word	0x24010bec
 8016c38:	10624dd3 	.word	0x10624dd3
 8016c3c:	24005f94 	.word	0x24005f94
 8016c40:	08025858 	.word	0x08025858
 8016c44:	24010b80 	.word	0x24010b80

08016c48 <init_topics>:


static void init_topics(void) {
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b082      	sub	sp, #8
 8016c4c:	af00      	add	r7, sp, #0
  for (int i = 0; i < TOPIC_COUNT; i++) {
 8016c4e:	2300      	movs	r3, #0
 8016c50:	607b      	str	r3, [r7, #4]
 8016c52:	e00e      	b.n	8016c72 <init_topics+0x2a>
    mg_snprintf(s_topics[i].name, sizeof(s_topics[i].name),
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	222c      	movs	r2, #44	@ 0x2c
 8016c58:	fb02 f303 	mul.w	r3, r2, r3
 8016c5c:	4a09      	ldr	r2, [pc, #36]	@ (8016c84 <init_topics+0x3c>)
 8016c5e:	1898      	adds	r0, r3, r2
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	3301      	adds	r3, #1
 8016c64:	4a08      	ldr	r2, [pc, #32]	@ (8016c88 <init_topics+0x40>)
 8016c66:	2128      	movs	r1, #40	@ 0x28
 8016c68:	f7f5 fae6 	bl	800c238 <mg_snprintf>
  for (int i = 0; i < TOPIC_COUNT; i++) {
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	607b      	str	r3, [r7, #4]
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016c78:	dbec      	blt.n	8016c54 <init_topics+0xc>
               "sarayu/d1/topic%d|m/", i + 1);
  }
}
 8016c7a:	bf00      	nop
 8016c7c:	bf00      	nop
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	24005f94 	.word	0x24005f94
 8016c88:	0802585c 	.word	0x0802585c

08016c8c <glue_init_1>:


void glue_init_1(void) {
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b084      	sub	sp, #16
 8016c90:	af04      	add	r7, sp, #16
    init_topics();
 8016c92:	f7ff ffd9 	bl	8016c48 <init_topics>
    mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, timer_fn_all_topics, NULL);
 8016c96:	2300      	movs	r3, #0
 8016c98:	9302      	str	r3, [sp, #8]
 8016c9a:	4b08      	ldr	r3, [pc, #32]	@ (8016cbc <glue_init_1+0x30>)
 8016c9c:	9301      	str	r3, [sp, #4]
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	9300      	str	r3, [sp, #0]
 8016ca2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016ca6:	f04f 0300 	mov.w	r3, #0
 8016caa:	4805      	ldr	r0, [pc, #20]	@ (8016cc0 <glue_init_1+0x34>)
 8016cac:	f7f2 f9ca 	bl	8009044 <mg_timer_add>
    gateway1_load_from_flash();  // Load persisted data
 8016cb0:	f000 face 	bl	8017250 <gateway1_load_from_flash>
    MG_DEBUG(("Custom init done"));
}
 8016cb4:	bf00      	nop
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	08016b59 	.word	0x08016b59
 8016cc0:	24010b90 	.word	0x24010b90

08016cc4 <glue_lock>:


void glue_lock_init(void) {  // callback to initialize the MQTT semaphore
}

void glue_lock(void) {  // Lock mutex. Implement only if you use MQTT publish
 8016cc4:	b480      	push	{r7}
 8016cc6:	af00      	add	r7, sp, #0
}
 8016cc8:	bf00      	nop
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd0:	4770      	bx	lr

08016cd2 <glue_unlock>:

void glue_unlock(void) {  // Unlock mutex. Implement only if you use MQTT publish
 8016cd2:	b480      	push	{r7}
 8016cd4:	af00      	add	r7, sp, #0
}
 8016cd6:	bf00      	nop
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cde:	4770      	bx	lr

08016ce0 <glue_mqtt_tls_init>:

void glue_mqtt_tls_init(struct mg_connection *c) {
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b08c      	sub	sp, #48	@ 0x30
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  bool is_tls = mg_url_is_ssl(WIZARD_MQTT_URL);
 8016ce8:	480f      	ldr	r0, [pc, #60]	@ (8016d28 <glue_mqtt_tls_init+0x48>)
 8016cea:	f7fe ffa7 	bl	8015c3c <mg_url_is_ssl>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	bf14      	ite	ne
 8016cf4:	2301      	movne	r3, #1
 8016cf6:	2300      	moveq	r3, #0
 8016cf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  MG_DEBUG(("%lu TLS enabled: %s", c->id, is_tls ? "yes" : "no"));
  if (is_tls) {
 8016cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d00c      	beq.n	8016d1e <glue_mqtt_tls_init+0x3e>
    struct mg_tls_opts opts;
    memset(&opts, 0, sizeof(opts));
 8016d04:	f107 0308 	add.w	r3, r7, #8
 8016d08:	2224      	movs	r2, #36	@ 0x24
 8016d0a:	2100      	movs	r1, #0
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f00b fc0e 	bl	802252e <memset>
    mg_tls_init(c, &opts);
 8016d12:	f107 0308 	add.w	r3, r7, #8
 8016d16:	4619      	mov	r1, r3
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f7f9 fd07 	bl	801072c <mg_tls_init>
  }
}
 8016d1e:	bf00      	nop
 8016d20:	3730      	adds	r7, #48	@ 0x30
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}
 8016d26:	bf00      	nop
 8016d28:	08025874 	.word	0x08025874

08016d2c <glue_mqtt_on_connect>:

// Called when we connected to the MQTT server
void glue_mqtt_on_connect(struct mg_connection *c, int code) {
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b096      	sub	sp, #88	@ 0x58
 8016d30:	af04      	add	r7, sp, #16
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
	struct mg_mqtt_opts opts = {
 8016d36:	f107 0308 	add.w	r3, r7, #8
 8016d3a:	2240      	movs	r2, #64	@ 0x40
 8016d3c:	2100      	movs	r1, #0
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f00b fbf5 	bl	802252e <memset>
	        .clean = true,
	        .user = mg_str("Sarayu"),
 8016d44:	f107 0308 	add.w	r3, r7, #8
 8016d48:	491c      	ldr	r1, [pc, #112]	@ (8016dbc <glue_mqtt_on_connect+0x90>)
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7f6 fba4 	bl	800d498 <mg_str_s>
	        .pass = mg_str("IOTteam@123"),
 8016d50:	f107 0310 	add.w	r3, r7, #16
 8016d54:	491a      	ldr	r1, [pc, #104]	@ (8016dc0 <glue_mqtt_on_connect+0x94>)
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7f6 fb9e 	bl	800d498 <mg_str_s>
	        .qos = 1,
	        .topic = mg_str("Gateway1")
 8016d5c:	f107 0320 	add.w	r3, r7, #32
 8016d60:	4918      	ldr	r1, [pc, #96]	@ (8016dc4 <glue_mqtt_on_connect+0x98>)
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7f6 fb98 	bl	800d498 <mg_str_s>
	struct mg_mqtt_opts opts = {
 8016d68:	2301      	movs	r3, #1
 8016d6a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8016d6e:	2301      	movs	r3, #1
 8016d70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    };
	    mg_mqtt_sub(c, &opts);
 8016d74:	f107 0308 	add.w	r3, r7, #8
 8016d78:	4619      	mov	r1, r3
 8016d7a:	6878      	ldr	r0, [r7, #4]
 8016d7c:	f7f1 fae4 	bl	8008348 <mg_mqtt_sub>
	    gateway1_load_from_flash();
 8016d80:	f000 fa66 	bl	8017250 <gateway1_load_from_flash>
	    if (g_gateway1_data.device_count > 0 && !g_gateway1_timer) {
 8016d84:	4b10      	ldr	r3, [pc, #64]	@ (8016dc8 <glue_mqtt_on_connect+0x9c>)
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	dd13      	ble.n	8016db4 <glue_mqtt_on_connect+0x88>
 8016d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8016dcc <glue_mqtt_on_connect+0xa0>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d10f      	bne.n	8016db4 <glue_mqtt_on_connect+0x88>
	        g_gateway1_timer = mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT,
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	9302      	str	r3, [sp, #8]
 8016d98:	4b0d      	ldr	r3, [pc, #52]	@ (8016dd0 <glue_mqtt_on_connect+0xa4>)
 8016d9a:	9301      	str	r3, [sp, #4]
 8016d9c:	2301      	movs	r3, #1
 8016d9e:	9300      	str	r3, [sp, #0]
 8016da0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016da4:	f04f 0300 	mov.w	r3, #0
 8016da8:	480a      	ldr	r0, [pc, #40]	@ (8016dd4 <glue_mqtt_on_connect+0xa8>)
 8016daa:	f7f2 f94b 	bl	8009044 <mg_timer_add>
 8016dae:	4603      	mov	r3, r0
 8016db0:	4a06      	ldr	r2, [pc, #24]	@ (8016dcc <glue_mqtt_on_connect+0xa0>)
 8016db2:	6013      	str	r3, [r2, #0]
	                                      gateway1_timer_fn, c);
	    }
}
 8016db4:	bf00      	nop
 8016db6:	3748      	adds	r7, #72	@ 0x48
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}
 8016dbc:	08025890 	.word	0x08025890
 8016dc0:	08025898 	.word	0x08025898
 8016dc4:	080258a4 	.word	0x080258a4
 8016dc8:	24005d30 	.word	0x24005d30
 8016dcc:	24005f90 	.word	0x24005f90
 8016dd0:	0801728d 	.word	0x0801728d
 8016dd4:	24010b90 	.word	0x24010b90

08016dd8 <glue_mqtt_on_message>:

void glue_mqtt_on_message(struct mg_connection *c, struct mg_str topic,
                          struct mg_str data) {
 8016dd8:	b082      	sub	sp, #8
 8016dda:	b590      	push	{r4, r7, lr}
 8016ddc:	b0f5      	sub	sp, #468	@ 0x1d4
 8016dde:	af04      	add	r7, sp, #16
 8016de0:	f507 74e0 	add.w	r4, r7, #448	@ 0x1c0
 8016de4:	f5a4 74da 	sub.w	r4, r4, #436	@ 0x1b4
 8016de8:	6020      	str	r0, [r4, #0]
 8016dea:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8016dee:	f5a0 70de 	sub.w	r0, r0, #444	@ 0x1bc
 8016df2:	e880 0006 	stmia.w	r0, {r1, r2}
 8016df6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	char tmp[100];
	    mg_snprintf(tmp, sizeof(tmp), "Got [%.*s] -> [%.*s]",
	                (int)topic.len, topic.buf, (int)data.len, data.buf);
 8016dfa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016dfe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8016e02:	685b      	ldr	r3, [r3, #4]
	    mg_snprintf(tmp, sizeof(tmp), "Got [%.*s] -> [%.*s]",
 8016e04:	461c      	mov	r4, r3
 8016e06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016e0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8016e0e:	681b      	ldr	r3, [r3, #0]
	                (int)topic.len, topic.buf, (int)data.len, data.buf);
 8016e10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
	    mg_snprintf(tmp, sizeof(tmp), "Got [%.*s] -> [%.*s]",
 8016e14:	4611      	mov	r1, r2
 8016e16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016e1a:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8016e1e:	9202      	str	r2, [sp, #8]
 8016e20:	9101      	str	r1, [sp, #4]
 8016e22:	9300      	str	r3, [sp, #0]
 8016e24:	4623      	mov	r3, r4
 8016e26:	4a39      	ldr	r2, [pc, #228]	@ (8016f0c <glue_mqtt_on_message+0x134>)
 8016e28:	2164      	movs	r1, #100	@ 0x64
 8016e2a:	f7f5 fa05 	bl	800c238 <mg_snprintf>
	    MG_DEBUG(("%lu %s", c->id, tmp));

	    // Check if topic is "Gateway1"
	    if (mg_strcmp(topic, mg_str("Gateway1")) == 0) {
 8016e2e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016e32:	4937      	ldr	r1, [pc, #220]	@ (8016f10 <glue_mqtt_on_message+0x138>)
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7f6 fb2f 	bl	800d498 <mg_str_s>
 8016e3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016e3e:	f5a3 71de 	sub.w	r1, r3, #444	@ 0x1bc
 8016e42:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8016e46:	cb0c      	ldmia	r3, {r2, r3}
 8016e48:	c903      	ldmia	r1, {r0, r1}
 8016e4a:	f7f6 fba6 	bl	800d59a <mg_strcmp>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d152      	bne.n	8016efa <glue_mqtt_on_message+0x122>
	        char buf[256];
	        snprintf(buf, sizeof(buf), "%.*s", (int)data.len, data.buf);
 8016e54:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8016e58:	461a      	mov	r2, r3
 8016e5a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8016e5e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8016e62:	9300      	str	r3, [sp, #0]
 8016e64:	4613      	mov	r3, r2
 8016e66:	4a2b      	ldr	r2, [pc, #172]	@ (8016f14 <glue_mqtt_on_message+0x13c>)
 8016e68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016e6c:	f00b fabe 	bl	80223ec <sniprintf>
	        gateway1_parse_data(buf);
 8016e70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016e74:	4618      	mov	r0, r3
 8016e76:	f000 f859 	bl	8016f2c <gateway1_parse_data>

	        // Send acknowledgment to Gateway1_res
	        struct mg_mqtt_opts ack_opts = {
 8016e7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016e7e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8016e82:	4618      	mov	r0, r3
 8016e84:	2340      	movs	r3, #64	@ 0x40
 8016e86:	461a      	mov	r2, r3
 8016e88:	2100      	movs	r1, #0
 8016e8a:	f00b fb50 	bl	802252e <memset>
	            .topic = mg_str("Gateway1_res"),
 8016e8e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016e92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8016e96:	3318      	adds	r3, #24
 8016e98:	491f      	ldr	r1, [pc, #124]	@ (8016f18 <glue_mqtt_on_message+0x140>)
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7f6 fafc 	bl	800d498 <mg_str_s>
	            .message = mg_str("{\"status\":\"successful\"}"),
 8016ea0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016ea4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8016ea8:	3320      	adds	r3, #32
 8016eaa:	491c      	ldr	r1, [pc, #112]	@ (8016f1c <glue_mqtt_on_message+0x144>)
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7f6 faf3 	bl	800d498 <mg_str_s>
	            .qos = 0
	        };
	        mg_mqtt_pub(c, &ack_opts);
 8016eb2:	f107 0214 	add.w	r2, r7, #20
 8016eb6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016eba:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8016ebe:	4611      	mov	r1, r2
 8016ec0:	6818      	ldr	r0, [r3, #0]
 8016ec2:	f7f1 f999 	bl	80081f8 <mg_mqtt_pub>

	        // Save to flash and start publishing
	        gateway1_save_to_flash();
 8016ec6:	f000 f987 	bl	80171d8 <gateway1_save_to_flash>
	        if (!g_gateway1_timer) {
 8016eca:	4b15      	ldr	r3, [pc, #84]	@ (8016f20 <glue_mqtt_on_message+0x148>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d113      	bne.n	8016efa <glue_mqtt_on_message+0x122>
	            g_gateway1_timer = mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT,
 8016ed2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8016ed6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	9302      	str	r3, [sp, #8]
 8016ede:	4b11      	ldr	r3, [pc, #68]	@ (8016f24 <glue_mqtt_on_message+0x14c>)
 8016ee0:	9301      	str	r3, [sp, #4]
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	9300      	str	r3, [sp, #0]
 8016ee6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016eea:	f04f 0300 	mov.w	r3, #0
 8016eee:	480e      	ldr	r0, [pc, #56]	@ (8016f28 <glue_mqtt_on_message+0x150>)
 8016ef0:	f7f2 f8a8 	bl	8009044 <mg_timer_add>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8016f20 <glue_mqtt_on_message+0x148>)
 8016ef8:	6013      	str	r3, [r2, #0]
	                                          gateway1_timer_fn, c);
	        }
	    }
}
 8016efa:	bf00      	nop
 8016efc:	f507 77e2 	add.w	r7, r7, #452	@ 0x1c4
 8016f00:	46bd      	mov	sp, r7
 8016f02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016f06:	b002      	add	sp, #8
 8016f08:	4770      	bx	lr
 8016f0a:	bf00      	nop
 8016f0c:	080258b0 	.word	0x080258b0
 8016f10:	080258a4 	.word	0x080258a4
 8016f14:	080258c8 	.word	0x080258c8
 8016f18:	080258d0 	.word	0x080258d0
 8016f1c:	080258e0 	.word	0x080258e0
 8016f20:	24005f90 	.word	0x24005f90
 8016f24:	0801728d 	.word	0x0801728d
 8016f28:	24010b90 	.word	0x24010b90

08016f2c <gateway1_parse_data>:

// Add new Gateway1 functions
static void gateway1_parse_data(const char *input) {
 8016f2c:	b5b0      	push	{r4, r5, r7, lr}
 8016f2e:	b0d8      	sub	sp, #352	@ 0x160
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016f36:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016f3a:	6018      	str	r0, [r3, #0]
	char clean[256];
	    int offset = 0;
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	    g_gateway1_data.device_count = 0;
 8016f42:	4ba1      	ldr	r3, [pc, #644]	@ (80171c8 <gateway1_parse_data+0x29c>)
 8016f44:	2200      	movs	r2, #0
 8016f46:	605a      	str	r2, [r3, #4]

	    // Clean input
	    for (int i = 0; input[i] && offset < sizeof(clean)-1; i++) {
 8016f48:	2300      	movs	r3, #0
 8016f4a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8016f4e:	e049      	b.n	8016fe4 <gateway1_parse_data+0xb8>
	        if (isalnum(input[i]) || input[i] == ',' || input[i] == '"' || input[i] == ' ') {
 8016f50:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016f54:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016f58:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8016f5c:	6812      	ldr	r2, [r2, #0]
 8016f5e:	4413      	add	r3, r2
 8016f60:	781b      	ldrb	r3, [r3, #0]
 8016f62:	3301      	adds	r3, #1
 8016f64:	4a99      	ldr	r2, [pc, #612]	@ (80171cc <gateway1_parse_data+0x2a0>)
 8016f66:	4413      	add	r3, r2
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	f003 0307 	and.w	r3, r3, #7
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d120      	bne.n	8016fb4 <gateway1_parse_data+0x88>
 8016f72:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016f76:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016f7a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8016f7e:	6812      	ldr	r2, [r2, #0]
 8016f80:	4413      	add	r3, r2
 8016f82:	781b      	ldrb	r3, [r3, #0]
 8016f84:	2b2c      	cmp	r3, #44	@ 0x2c
 8016f86:	d015      	beq.n	8016fb4 <gateway1_parse_data+0x88>
 8016f88:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016f8c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016f90:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8016f94:	6812      	ldr	r2, [r2, #0]
 8016f96:	4413      	add	r3, r2
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	2b22      	cmp	r3, #34	@ 0x22
 8016f9c:	d00a      	beq.n	8016fb4 <gateway1_parse_data+0x88>
 8016f9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016fa2:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016fa6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8016faa:	6812      	ldr	r2, [r2, #0]
 8016fac:	4413      	add	r3, r2
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	2b20      	cmp	r3, #32
 8016fb2:	d112      	bne.n	8016fda <gateway1_parse_data+0xae>
	            clean[offset++] = input[i];
 8016fb4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016fb8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016fbc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8016fc0:	6812      	ldr	r2, [r2, #0]
 8016fc2:	441a      	add	r2, r3
 8016fc4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8016fc8:	1c59      	adds	r1, r3, #1
 8016fca:	f8c7 115c 	str.w	r1, [r7, #348]	@ 0x15c
 8016fce:	7811      	ldrb	r1, [r2, #0]
 8016fd0:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016fd4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8016fd8:	54d1      	strb	r1, [r2, r3]
	    for (int i = 0; input[i] && offset < sizeof(clean)-1; i++) {
 8016fda:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016fde:	3301      	adds	r3, #1
 8016fe0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8016fe4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8016fe8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016fec:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8016ff0:	6812      	ldr	r2, [r2, #0]
 8016ff2:	4413      	add	r3, r2
 8016ff4:	781b      	ldrb	r3, [r3, #0]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d003      	beq.n	8017002 <gateway1_parse_data+0xd6>
 8016ffa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8016ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8017000:	d9a6      	bls.n	8016f50 <gateway1_parse_data+0x24>
	        }
	    }
	    clean[offset] = '\0';
 8017002:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8017006:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 801700a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801700e:	4413      	add	r3, r2
 8017010:	2200      	movs	r2, #0
 8017012:	701a      	strb	r2, [r3, #0]

	    // Parse CSV data
	    char *token = strtok(clean, ",");
 8017014:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8017018:	496d      	ldr	r1, [pc, #436]	@ (80171d0 <gateway1_parse_data+0x2a4>)
 801701a:	4618      	mov	r0, r3
 801701c:	f00b fad8 	bl	80225d0 <strtok>
 8017020:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	    int field = 0;
 8017024:	2300      	movs	r3, #0
 8017026:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	    Gateway1Device dev = {0};
 801702a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801702e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8017032:	4618      	mov	r0, r3
 8017034:	233c      	movs	r3, #60	@ 0x3c
 8017036:	461a      	mov	r2, r3
 8017038:	2100      	movs	r1, #0
 801703a:	f00b fa78 	bl	802252e <memset>

	    while (token && g_gateway1_data.device_count < GATEWAY1_MAX_DEVICES) {
 801703e:	e0b5      	b.n	80171ac <gateway1_parse_data+0x280>
	        // Remove quotes
	        char *p = token;
 8017040:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8017044:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	        while (*p == '"' || *p == ' ') p++;
 8017048:	e004      	b.n	8017054 <gateway1_parse_data+0x128>
 801704a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801704e:	3301      	adds	r3, #1
 8017050:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8017054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	2b22      	cmp	r3, #34	@ 0x22
 801705c:	d0f5      	beq.n	801704a <gateway1_parse_data+0x11e>
 801705e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8017062:	781b      	ldrb	r3, [r3, #0]
 8017064:	2b20      	cmp	r3, #32
 8017066:	d0f0      	beq.n	801704a <gateway1_parse_data+0x11e>
	        char *end = p + strlen(p) - 1;
 8017068:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 801706c:	f7e9 f998 	bl	80003a0 <strlen>
 8017070:	4603      	mov	r3, r0
 8017072:	3b01      	subs	r3, #1
 8017074:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8017078:	4413      	add	r3, r2
 801707a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
	        while (end > p && (*end == '"' || *end == ' ')) end--;
 801707e:	e004      	b.n	801708a <gateway1_parse_data+0x15e>
 8017080:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8017084:	3b01      	subs	r3, #1
 8017086:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 801708a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801708e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8017092:	429a      	cmp	r2, r3
 8017094:	d909      	bls.n	80170aa <gateway1_parse_data+0x17e>
 8017096:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	2b22      	cmp	r3, #34	@ 0x22
 801709e:	d0ef      	beq.n	8017080 <gateway1_parse_data+0x154>
 80170a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	2b20      	cmp	r3, #32
 80170a8:	d0ea      	beq.n	8017080 <gateway1_parse_data+0x154>
	        *(end+1) = '\0';
 80170aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80170ae:	3301      	adds	r3, #1
 80170b0:	2200      	movs	r2, #0
 80170b2:	701a      	strb	r2, [r3, #0]

	        switch (field % GATEWAY1_DATA_SIZE) {
 80170b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80170b8:	4b46      	ldr	r3, [pc, #280]	@ (80171d4 <gateway1_parse_data+0x2a8>)
 80170ba:	fb83 2301 	smull	r2, r3, r3, r1
 80170be:	105a      	asrs	r2, r3, #1
 80170c0:	17cb      	asrs	r3, r1, #31
 80170c2:	1ad2      	subs	r2, r2, r3
 80170c4:	4613      	mov	r3, r2
 80170c6:	009b      	lsls	r3, r3, #2
 80170c8:	4413      	add	r3, r2
 80170ca:	1aca      	subs	r2, r1, r3
 80170cc:	2a04      	cmp	r2, #4
 80170ce:	d862      	bhi.n	8017196 <gateway1_parse_data+0x26a>
 80170d0:	a301      	add	r3, pc, #4	@ (adr r3, 80170d8 <gateway1_parse_data+0x1ac>)
 80170d2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80170d6:	bf00      	nop
 80170d8:	080170ed 	.word	0x080170ed
 80170dc:	080170ff 	.word	0x080170ff
 80170e0:	08017113 	.word	0x08017113
 80170e4:	08017127 	.word	0x08017127
 80170e8:	0801713b 	.word	0x0801713b
	            case 0: strncpy(dev.slave_id, p, sizeof(dev.slave_id)-1); break;
 80170ec:	f107 030c 	add.w	r3, r7, #12
 80170f0:	2209      	movs	r2, #9
 80170f2:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80170f6:	4618      	mov	r0, r3
 80170f8:	f00b fa40 	bl	802257c <strncpy>
 80170fc:	e04b      	b.n	8017196 <gateway1_parse_data+0x26a>
	            case 1: strncpy(dev.function_code, p, sizeof(dev.function_code)-1); break;
 80170fe:	f107 030c 	add.w	r3, r7, #12
 8017102:	330a      	adds	r3, #10
 8017104:	2209      	movs	r2, #9
 8017106:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 801710a:	4618      	mov	r0, r3
 801710c:	f00b fa36 	bl	802257c <strncpy>
 8017110:	e041      	b.n	8017196 <gateway1_parse_data+0x26a>
	            case 2: strncpy(dev.address, p, sizeof(dev.address)-1); break;
 8017112:	f107 030c 	add.w	r3, r7, #12
 8017116:	3314      	adds	r3, #20
 8017118:	2209      	movs	r2, #9
 801711a:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 801711e:	4618      	mov	r0, r3
 8017120:	f00b fa2c 	bl	802257c <strncpy>
 8017124:	e037      	b.n	8017196 <gateway1_parse_data+0x26a>
	            case 3: strncpy(dev.size, p, sizeof(dev.size)-1); break;
 8017126:	f107 030c 	add.w	r3, r7, #12
 801712a:	331e      	adds	r3, #30
 801712c:	2209      	movs	r2, #9
 801712e:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8017132:	4618      	mov	r0, r3
 8017134:	f00b fa22 	bl	802257c <strncpy>
 8017138:	e02d      	b.n	8017196 <gateway1_parse_data+0x26a>
	            case 4:
	                strncpy(dev.tagname, p, sizeof(dev.tagname)-1);
 801713a:	f107 030c 	add.w	r3, r7, #12
 801713e:	3328      	adds	r3, #40	@ 0x28
 8017140:	2213      	movs	r2, #19
 8017142:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8017146:	4618      	mov	r0, r3
 8017148:	f00b fa18 	bl	802257c <strncpy>
	                g_gateway1_data.devices[g_gateway1_data.device_count++] = dev;
 801714c:	4b1e      	ldr	r3, [pc, #120]	@ (80171c8 <gateway1_parse_data+0x29c>)
 801714e:	685a      	ldr	r2, [r3, #4]
 8017150:	1c53      	adds	r3, r2, #1
 8017152:	491d      	ldr	r1, [pc, #116]	@ (80171c8 <gateway1_parse_data+0x29c>)
 8017154:	604b      	str	r3, [r1, #4]
 8017156:	491c      	ldr	r1, [pc, #112]	@ (80171c8 <gateway1_parse_data+0x29c>)
 8017158:	4613      	mov	r3, r2
 801715a:	011b      	lsls	r3, r3, #4
 801715c:	1a9b      	subs	r3, r3, r2
 801715e:	009b      	lsls	r3, r3, #2
 8017160:	440b      	add	r3, r1
 8017162:	f103 0208 	add.w	r2, r3, #8
 8017166:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801716a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801716e:	4614      	mov	r4, r2
 8017170:	461d      	mov	r5, r3
 8017172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801717a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801717c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801717e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	                memset(&dev, 0, sizeof(dev));
 8017186:	f107 030c 	add.w	r3, r7, #12
 801718a:	223c      	movs	r2, #60	@ 0x3c
 801718c:	2100      	movs	r1, #0
 801718e:	4618      	mov	r0, r3
 8017190:	f00b f9cd 	bl	802252e <memset>
	                break;
 8017194:	bf00      	nop
	        }
	        field++;
 8017196:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801719a:	3301      	adds	r3, #1
 801719c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	        token = strtok(NULL, ",");
 80171a0:	490b      	ldr	r1, [pc, #44]	@ (80171d0 <gateway1_parse_data+0x2a4>)
 80171a2:	2000      	movs	r0, #0
 80171a4:	f00b fa14 	bl	80225d0 <strtok>
 80171a8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	    while (token && g_gateway1_data.device_count < GATEWAY1_MAX_DEVICES) {
 80171ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d004      	beq.n	80171be <gateway1_parse_data+0x292>
 80171b4:	4b04      	ldr	r3, [pc, #16]	@ (80171c8 <gateway1_parse_data+0x29c>)
 80171b6:	685b      	ldr	r3, [r3, #4]
 80171b8:	2b09      	cmp	r3, #9
 80171ba:	f77f af41 	ble.w	8017040 <gateway1_parse_data+0x114>
	    }
}
 80171be:	bf00      	nop
 80171c0:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bdb0      	pop	{r4, r5, r7, pc}
 80171c8:	24005d30 	.word	0x24005d30
 80171cc:	080322a3 	.word	0x080322a3
 80171d0:	080258f8 	.word	0x080258f8
 80171d4:	66666667 	.word	0x66666667

080171d8 <gateway1_save_to_flash>:

static void gateway1_save_to_flash(void) {
 80171d8:	b5b0      	push	{r4, r5, r7, lr}
 80171da:	b088      	sub	sp, #32
 80171dc:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80171de:	f003 f8b1 	bl	801a344 <HAL_FLASH_Unlock>

	    // Erase sector
	    FLASH_EraseInitTypeDef erase = {
 80171e2:	4b17      	ldr	r3, [pc, #92]	@ (8017240 <gateway1_save_to_flash+0x68>)
 80171e4:	1d3c      	adds	r4, r7, #4
 80171e6:	461d      	mov	r5, r3
 80171e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171ec:	682b      	ldr	r3, [r5, #0]
 80171ee:	6023      	str	r3, [r4, #0]
	        .Sector = FLASH_SECTOR,
	        .NbSectors = 1,
	        .VoltageRange = FLASH_VOLTAGE_RANGE_3
	    };
	    uint32_t sectorError;
	    HAL_FLASHEx_Erase(&erase, &sectorError);
 80171f0:	463a      	mov	r2, r7
 80171f2:	1d3b      	adds	r3, r7, #4
 80171f4:	4611      	mov	r1, r2
 80171f6:	4618      	mov	r0, r3
 80171f8:	f003 f9a4 	bl	801a544 <HAL_FLASHEx_Erase>

	    // Prepare data
	    g_gateway1_data.magic = FLASH_MAGIC;
 80171fc:	4b11      	ldr	r3, [pc, #68]	@ (8017244 <gateway1_save_to_flash+0x6c>)
 80171fe:	4a12      	ldr	r2, [pc, #72]	@ (8017248 <gateway1_save_to_flash+0x70>)
 8017200:	601a      	str	r2, [r3, #0]
	    uint64_t *src = (uint64_t *)&g_gateway1_data;
 8017202:	4b10      	ldr	r3, [pc, #64]	@ (8017244 <gateway1_save_to_flash+0x6c>)
 8017204:	61bb      	str	r3, [r7, #24]

	    // Program flash
	    for (size_t i = 0; i < sizeof(g_gateway1_data); i += 32) {
 8017206:	2300      	movs	r3, #0
 8017208:	61fb      	str	r3, [r7, #28]
 801720a:	e00e      	b.n	801722a <gateway1_save_to_flash+0x52>
	        HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD,
	                         FLASH_ADDR + i,
 801720c:	69fa      	ldr	r2, [r7, #28]
 801720e:	4b0f      	ldr	r3, [pc, #60]	@ (801724c <gateway1_save_to_flash+0x74>)
 8017210:	4413      	add	r3, r2
	                         (uint64_t)(uintptr_t)(src + i/8));
 8017212:	69fa      	ldr	r2, [r7, #28]
 8017214:	f022 0207 	bic.w	r2, r2, #7
 8017218:	69b9      	ldr	r1, [r7, #24]
 801721a:	440a      	add	r2, r1
	        HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD,
 801721c:	4619      	mov	r1, r3
 801721e:	2001      	movs	r0, #1
 8017220:	f002 fffe 	bl	801a220 <HAL_FLASH_Program>
	    for (size_t i = 0; i < sizeof(g_gateway1_data); i += 32) {
 8017224:	69fb      	ldr	r3, [r7, #28]
 8017226:	3320      	adds	r3, #32
 8017228:	61fb      	str	r3, [r7, #28]
 801722a:	69fb      	ldr	r3, [r7, #28]
 801722c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8017230:	d3ec      	bcc.n	801720c <gateway1_save_to_flash+0x34>
	    }

	    HAL_FLASH_Lock();
 8017232:	f003 f8c1 	bl	801a3b8 <HAL_FLASH_Lock>
}
 8017236:	bf00      	nop
 8017238:	3720      	adds	r7, #32
 801723a:	46bd      	mov	sp, r7
 801723c:	bdb0      	pop	{r4, r5, r7, pc}
 801723e:	bf00      	nop
 8017240:	080258fc 	.word	0x080258fc
 8017244:	24005d30 	.word	0x24005d30
 8017248:	47415445 	.word	0x47415445
 801724c:	081e0000 	.word	0x081e0000

08017250 <gateway1_load_from_flash>:

static void gateway1_load_from_flash(void) {
 8017250:	b580      	push	{r7, lr}
 8017252:	b082      	sub	sp, #8
 8017254:	af00      	add	r7, sp, #0
	Gateway1Storage *flash = (Gateway1Storage *)FLASH_ADDR;
 8017256:	4b0a      	ldr	r3, [pc, #40]	@ (8017280 <gateway1_load_from_flash+0x30>)
 8017258:	607b      	str	r3, [r7, #4]
	    if (flash->magic == FLASH_MAGIC && flash->device_count <= GATEWAY1_MAX_DEVICES) {
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	4a09      	ldr	r2, [pc, #36]	@ (8017284 <gateway1_load_from_flash+0x34>)
 8017260:	4293      	cmp	r3, r2
 8017262:	d109      	bne.n	8017278 <gateway1_load_from_flash+0x28>
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	2b0a      	cmp	r3, #10
 801726a:	dc05      	bgt.n	8017278 <gateway1_load_from_flash+0x28>
	        memcpy(&g_gateway1_data, flash, sizeof(Gateway1Storage));
 801726c:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8017270:	6879      	ldr	r1, [r7, #4]
 8017272:	4805      	ldr	r0, [pc, #20]	@ (8017288 <gateway1_load_from_flash+0x38>)
 8017274:	f00b faff 	bl	8022876 <memcpy>
	        MG_DEBUG(("Loaded %d devices from flash", g_gateway1_data.device_count));
	    }
}
 8017278:	bf00      	nop
 801727a:	3708      	adds	r7, #8
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	081e0000 	.word	0x081e0000
 8017284:	47415445 	.word	0x47415445
 8017288:	24005d30 	.word	0x24005d30

0801728c <gateway1_timer_fn>:

static void gateway1_timer_fn(void *arg) {
 801728c:	b580      	push	{r7, lr}
 801728e:	b084      	sub	sp, #16
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
	struct mg_connection *c = arg;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	60fb      	str	r3, [r7, #12]
	    if (c && !c->is_closing) {
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d00a      	beq.n	80172b4 <gateway1_timer_fn+0x28>
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80172a4:	f003 0320 	and.w	r3, r3, #32
 80172a8:	b2db      	uxtb	r3, r3
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d102      	bne.n	80172b4 <gateway1_timer_fn+0x28>
	        gateway1_publish_res(c);
 80172ae:	68f8      	ldr	r0, [r7, #12]
 80172b0:	f000 f804 	bl	80172bc <gateway1_publish_res>
	    }
}
 80172b4:	bf00      	nop
 80172b6:	3710      	adds	r7, #16
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}

080172bc <gateway1_publish_res>:

static void gateway1_publish_res(struct mg_connection *c) {
 80172bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172be:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 80172c2:	af06      	add	r7, sp, #24
 80172c4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80172c8:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80172cc:	6018      	str	r0, [r3, #0]
	char buf[512];
	    int offset = 0;
 80172ce:	2300      	movs	r3, #0
 80172d0:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

	    offset += snprintf(buf + offset, sizeof(buf) - offset, "[");
 80172d4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80172d8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80172dc:	18d0      	adds	r0, r2, r3
 80172de:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80172e2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80172e6:	4a4a      	ldr	r2, [pc, #296]	@ (8017410 <gateway1_publish_res+0x154>)
 80172e8:	4619      	mov	r1, r3
 80172ea:	f00b f87f 	bl	80223ec <sniprintf>
 80172ee:	4602      	mov	r2, r0
 80172f0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80172f4:	4413      	add	r3, r2
 80172f6:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
	    for (int i = 0; i < g_gateway1_data.device_count; i++) {
 80172fa:	2300      	movs	r3, #0
 80172fc:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8017300:	e040      	b.n	8017384 <gateway1_publish_res+0xc8>
	        Gateway1Device *d = &g_gateway1_data.devices[i];
 8017302:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8017306:	4613      	mov	r3, r2
 8017308:	011b      	lsls	r3, r3, #4
 801730a:	1a9b      	subs	r3, r3, r2
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	3308      	adds	r3, #8
 8017310:	4a40      	ldr	r2, [pc, #256]	@ (8017414 <gateway1_publish_res+0x158>)
 8017312:	4413      	add	r3, r2
 8017314:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	        offset += snprintf(buf + offset, sizeof(buf) - offset,
 8017318:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801731c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8017320:	18d5      	adds	r5, r2, r3
 8017322:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017326:	f5c3 7600 	rsb	r6, r3, #512	@ 0x200
 801732a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801732e:	2b00      	cmp	r3, #0
 8017330:	dd02      	ble.n	8017338 <gateway1_publish_res+0x7c>
 8017332:	4b39      	ldr	r3, [pc, #228]	@ (8017418 <gateway1_publish_res+0x15c>)
 8017334:	603b      	str	r3, [r7, #0]
 8017336:	e001      	b.n	801733c <gateway1_publish_res+0x80>
 8017338:	4b38      	ldr	r3, [pc, #224]	@ (801741c <gateway1_publish_res+0x160>)
 801733a:	603b      	str	r3, [r7, #0]
	                          "%s\"%s\",\"%s\",\"%s\",\"%s\",\"%s\"",
	                          i > 0 ? "," : "",
	                          d->slave_id, d->function_code, d->address,
 801733c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017340:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8017344:	320a      	adds	r2, #10
 8017346:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 801734a:	3114      	adds	r1, #20
	                          d->size, d->tagname);
 801734c:	f8d7 024c 	ldr.w	r0, [r7, #588]	@ 0x24c
 8017350:	301e      	adds	r0, #30
 8017352:	f8d7 424c 	ldr.w	r4, [r7, #588]	@ 0x24c
 8017356:	3428      	adds	r4, #40	@ 0x28
	        offset += snprintf(buf + offset, sizeof(buf) - offset,
 8017358:	9404      	str	r4, [sp, #16]
 801735a:	9003      	str	r0, [sp, #12]
 801735c:	9102      	str	r1, [sp, #8]
 801735e:	9201      	str	r2, [sp, #4]
 8017360:	9300      	str	r3, [sp, #0]
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	4a2e      	ldr	r2, [pc, #184]	@ (8017420 <gateway1_publish_res+0x164>)
 8017366:	4631      	mov	r1, r6
 8017368:	4628      	mov	r0, r5
 801736a:	f00b f83f 	bl	80223ec <sniprintf>
 801736e:	4602      	mov	r2, r0
 8017370:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017374:	4413      	add	r3, r2
 8017376:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
	    for (int i = 0; i < g_gateway1_data.device_count; i++) {
 801737a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801737e:	3301      	adds	r3, #1
 8017380:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8017384:	4b23      	ldr	r3, [pc, #140]	@ (8017414 <gateway1_publish_res+0x158>)
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801738c:	429a      	cmp	r2, r3
 801738e:	dbb8      	blt.n	8017302 <gateway1_publish_res+0x46>
	    }
	    offset += snprintf(buf + offset, sizeof(buf) - offset, "]");
 8017390:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017394:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8017398:	18d0      	adds	r0, r2, r3
 801739a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801739e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80173a2:	4a20      	ldr	r2, [pc, #128]	@ (8017424 <gateway1_publish_res+0x168>)
 80173a4:	4619      	mov	r1, r3
 80173a6:	f00b f821 	bl	80223ec <sniprintf>
 80173aa:	4602      	mov	r2, r0
 80173ac:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80173b0:	4413      	add	r3, r2
 80173b2:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

	    struct mg_mqtt_opts opts = {
 80173b6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80173ba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80173be:	4618      	mov	r0, r3
 80173c0:	2340      	movs	r3, #64	@ 0x40
 80173c2:	461a      	mov	r2, r3
 80173c4:	2100      	movs	r1, #0
 80173c6:	f00b f8b2 	bl	802252e <memset>
	        .topic = mg_str("Gateway1_res"),
 80173ca:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80173ce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80173d2:	3318      	adds	r3, #24
 80173d4:	4914      	ldr	r1, [pc, #80]	@ (8017428 <gateway1_publish_res+0x16c>)
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7f6 f85e 	bl	800d498 <mg_str_s>
	        .message = mg_str(buf),
 80173dc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80173e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80173e4:	3320      	adds	r3, #32
 80173e6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80173ea:	4611      	mov	r1, r2
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7f6 f853 	bl	800d498 <mg_str_s>
	        .qos = 0
	    };
	    mg_mqtt_pub(c, &opts);
 80173f2:	f107 020c 	add.w	r2, r7, #12
 80173f6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80173fa:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80173fe:	4611      	mov	r1, r2
 8017400:	6818      	ldr	r0, [r3, #0]
 8017402:	f7f0 fef9 	bl	80081f8 <mg_mqtt_pub>
}
 8017406:	bf00      	nop
 8017408:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 801740c:	46bd      	mov	sp, r7
 801740e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017410:	08025910 	.word	0x08025910
 8017414:	24005d30 	.word	0x24005d30
 8017418:	080258f8 	.word	0x080258f8
 801741c:	08025914 	.word	0x08025914
 8017420:	08025918 	.word	0x08025918
 8017424:	08025934 	.word	0x08025934
 8017428:	080258d0 	.word	0x080258d0

0801742c <glue_mqtt_on_cmd>:

void glue_mqtt_on_cmd(struct mg_connection *c, struct mg_mqtt_message *mm) {
 801742c:	b480      	push	{r7}
 801742e:	b083      	sub	sp, #12
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	6039      	str	r1, [r7, #0]
  MG_DEBUG(("%lu cmd %d qos %d", c->id, mm->cmd, mm->qos));
}
 8017436:	bf00      	nop
 8017438:	370c      	adds	r7, #12
 801743a:	46bd      	mov	sp, r7
 801743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017440:	4770      	bx	lr
	...

08017444 <glue_mqtt_connect>:

struct mg_connection *glue_mqtt_connect(struct mg_mgr *mgr, mg_event_handler_t fn) {
 8017444:	b580      	push	{r7, lr}
 8017446:	b098      	sub	sp, #96	@ 0x60
 8017448:	af02      	add	r7, sp, #8
 801744a:	60f8      	str	r0, [r7, #12]
 801744c:	60b9      	str	r1, [r7, #8]
    const char *url = WIZARD_MQTT_URL; // Uses the defined MQTT URL
 801744e:	4b19      	ldr	r3, [pc, #100]	@ (80174b4 <glue_mqtt_connect+0x70>)
 8017450:	657b      	str	r3, [r7, #84]	@ 0x54
    struct mg_mqtt_opts opts;
    memset(&opts, 0, sizeof(opts));
 8017452:	f107 0314 	add.w	r3, r7, #20
 8017456:	2240      	movs	r2, #64	@ 0x40
 8017458:	2100      	movs	r1, #0
 801745a:	4618      	mov	r0, r3
 801745c:	f00b f867 	bl	802252e <memset>

    opts.clean = true;
 8017460:	2301      	movs	r3, #1
 8017462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    opts.user = mg_str("Sarayu");       // Set username
 8017466:	463b      	mov	r3, r7
 8017468:	4913      	ldr	r1, [pc, #76]	@ (80174b8 <glue_mqtt_connect+0x74>)
 801746a:	4618      	mov	r0, r3
 801746c:	f7f6 f814 	bl	800d498 <mg_str_s>
 8017470:	f107 0314 	add.w	r3, r7, #20
 8017474:	463a      	mov	r2, r7
 8017476:	e892 0003 	ldmia.w	r2, {r0, r1}
 801747a:	e883 0003 	stmia.w	r3, {r0, r1}
    opts.pass = mg_str("IOTteam@123");  // Set password
 801747e:	463b      	mov	r3, r7
 8017480:	490e      	ldr	r1, [pc, #56]	@ (80174bc <glue_mqtt_connect+0x78>)
 8017482:	4618      	mov	r0, r3
 8017484:	f7f6 f808 	bl	800d498 <mg_str_s>
 8017488:	f107 031c 	add.w	r3, r7, #28
 801748c:	463a      	mov	r2, r7
 801748e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017492:	e883 0003 	stmia.w	r3, {r0, r1}


    return mg_mqtt_connect(mgr, url, &opts, fn, NULL);
 8017496:	f107 0214 	add.w	r2, r7, #20
 801749a:	2300      	movs	r3, #0
 801749c:	9300      	str	r3, [sp, #0]
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80174a2:	68f8      	ldr	r0, [r7, #12]
 80174a4:	f7f1 f9c8 	bl	8008838 <mg_mqtt_connect>
 80174a8:	4603      	mov	r3, r0
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3758      	adds	r7, #88	@ 0x58
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
 80174b2:	bf00      	nop
 80174b4:	08025874 	.word	0x08025874
 80174b8:	08025890 	.word	0x08025890
 80174bc:	08025898 	.word	0x08025898

080174c0 <glue_sntp_on_time>:



void glue_sntp_on_time(uint64_t utc_time_in_milliseconds) {
 80174c0:	b480      	push	{r7}
 80174c2:	b083      	sub	sp, #12
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	e9c7 0100 	strd	r0, r1, [r7]
  MG_INFO(("UTC time in milliseconds from SNTP: %llu, current time: %llu",
           utc_time_in_milliseconds, mg_now()));
}
 80174ca:	bf00      	nop
 80174cc:	370c      	adds	r7, #12
 80174ce:	46bd      	mov	sp, r7
 80174d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d4:	4770      	bx	lr
	...

080174d8 <glue_modbus_read_reg>:

// Mock a device that has 5 read/write registers at address 1000
static uint16_t s_modbus_regs[] = {11, 22, 33, 44, 55};
static uint16_t s_modbus_base = 1000;  // Base address of our registers

bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 80174d8:	b480      	push	{r7}
 80174da:	b085      	sub	sp, #20
 80174dc:	af00      	add	r7, sp, #0
 80174de:	4603      	mov	r3, r0
 80174e0:	6039      	str	r1, [r7, #0]
 80174e2:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 80174e4:	2300      	movs	r3, #0
 80174e6:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 80174e8:	2305      	movs	r3, #5
 80174ea:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 80174ec:	4b0f      	ldr	r3, [pc, #60]	@ (801752c <glue_modbus_read_reg+0x54>)
 80174ee:	881b      	ldrh	r3, [r3, #0]
 80174f0:	88fa      	ldrh	r2, [r7, #6]
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d312      	bcc.n	801751c <glue_modbus_read_reg+0x44>
 80174f6:	88fa      	ldrh	r2, [r7, #6]
 80174f8:	4b0c      	ldr	r3, [pc, #48]	@ (801752c <glue_modbus_read_reg+0x54>)
 80174fa:	881b      	ldrh	r3, [r3, #0]
 80174fc:	4619      	mov	r1, r3
 80174fe:	68bb      	ldr	r3, [r7, #8]
 8017500:	440b      	add	r3, r1
 8017502:	429a      	cmp	r2, r3
 8017504:	d20a      	bcs.n	801751c <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 8017506:	88fb      	ldrh	r3, [r7, #6]
 8017508:	4a08      	ldr	r2, [pc, #32]	@ (801752c <glue_modbus_read_reg+0x54>)
 801750a:	8812      	ldrh	r2, [r2, #0]
 801750c:	1a9b      	subs	r3, r3, r2
 801750e:	4a08      	ldr	r2, [pc, #32]	@ (8017530 <glue_modbus_read_reg+0x58>)
 8017510:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	801a      	strh	r2, [r3, #0]
    success = true;
 8017518:	2301      	movs	r3, #1
 801751a:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, *value));
  return success;
 801751c:	7bfb      	ldrb	r3, [r7, #15]
}
 801751e:	4618      	mov	r0, r3
 8017520:	3714      	adds	r7, #20
 8017522:	46bd      	mov	sp, r7
 8017524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017528:	4770      	bx	lr
 801752a:	bf00      	nop
 801752c:	24000282 	.word	0x24000282
 8017530:	24000278 	.word	0x24000278

08017534 <glue_modbus_write_reg>:

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 8017534:	b480      	push	{r7}
 8017536:	b085      	sub	sp, #20
 8017538:	af00      	add	r7, sp, #0
 801753a:	4603      	mov	r3, r0
 801753c:	460a      	mov	r2, r1
 801753e:	80fb      	strh	r3, [r7, #6]
 8017540:	4613      	mov	r3, r2
 8017542:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 8017544:	2300      	movs	r3, #0
 8017546:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8017548:	2305      	movs	r3, #5
 801754a:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 801754c:	4b0e      	ldr	r3, [pc, #56]	@ (8017588 <glue_modbus_write_reg+0x54>)
 801754e:	881b      	ldrh	r3, [r3, #0]
 8017550:	88fa      	ldrh	r2, [r7, #6]
 8017552:	429a      	cmp	r2, r3
 8017554:	d311      	bcc.n	801757a <glue_modbus_write_reg+0x46>
 8017556:	88fa      	ldrh	r2, [r7, #6]
 8017558:	4b0b      	ldr	r3, [pc, #44]	@ (8017588 <glue_modbus_write_reg+0x54>)
 801755a:	881b      	ldrh	r3, [r3, #0]
 801755c:	4619      	mov	r1, r3
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	440b      	add	r3, r1
 8017562:	429a      	cmp	r2, r3
 8017564:	d209      	bcs.n	801757a <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 8017566:	88fb      	ldrh	r3, [r7, #6]
 8017568:	4a07      	ldr	r2, [pc, #28]	@ (8017588 <glue_modbus_write_reg+0x54>)
 801756a:	8812      	ldrh	r2, [r2, #0]
 801756c:	1a9b      	subs	r3, r3, r2
 801756e:	4907      	ldr	r1, [pc, #28]	@ (801758c <glue_modbus_write_reg+0x58>)
 8017570:	88ba      	ldrh	r2, [r7, #4]
 8017572:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 8017576:	2301      	movs	r3, #1
 8017578:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, value));
  return success;
 801757a:	7bfb      	ldrb	r3, [r7, #15]

}
 801757c:	4618      	mov	r0, r3
 801757e:	3714      	adds	r7, #20
 8017580:	46bd      	mov	sp, r7
 8017582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017586:	4770      	bx	lr
 8017588:	24000282 	.word	0x24000282
 801758c:	24000278 	.word	0x24000278

08017590 <glue_authenticate>:


// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 801759a:	2300      	movs	r3, #0
 801759c:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "Sarayu") == 0 && strcmp(pass, "IOTteam@123") == 0) {
 801759e:	4913      	ldr	r1, [pc, #76]	@ (80175ec <glue_authenticate+0x5c>)
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f7e8 fe9d 	bl	80002e0 <strcmp>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d109      	bne.n	80175c0 <glue_authenticate+0x30>
 80175ac:	4910      	ldr	r1, [pc, #64]	@ (80175f0 <glue_authenticate+0x60>)
 80175ae:	6838      	ldr	r0, [r7, #0]
 80175b0:	f7e8 fe96 	bl	80002e0 <strcmp>
 80175b4:	4603      	mov	r3, r0
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d102      	bne.n	80175c0 <glue_authenticate+0x30>
    level = 7;  // Administrator
 80175ba:	2307      	movs	r3, #7
 80175bc:	60fb      	str	r3, [r7, #12]
 80175be:	e00f      	b.n	80175e0 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 80175c0:	490c      	ldr	r1, [pc, #48]	@ (80175f4 <glue_authenticate+0x64>)
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f7e8 fe8c 	bl	80002e0 <strcmp>
 80175c8:	4603      	mov	r3, r0
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d108      	bne.n	80175e0 <glue_authenticate+0x50>
 80175ce:	4909      	ldr	r1, [pc, #36]	@ (80175f4 <glue_authenticate+0x64>)
 80175d0:	6838      	ldr	r0, [r7, #0]
 80175d2:	f7e8 fe85 	bl	80002e0 <strcmp>
 80175d6:	4603      	mov	r3, r0
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d101      	bne.n	80175e0 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 80175dc:	2303      	movs	r3, #3
 80175de:	60fb      	str	r3, [r7, #12]
  }
  return level;
 80175e0:	68fb      	ldr	r3, [r7, #12]
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3710      	adds	r7, #16
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}
 80175ea:	bf00      	nop
 80175ec:	08025890 	.word	0x08025890
 80175f0:	08025898 	.word	0x08025898
 80175f4:	08025938 	.word	0x08025938

080175f8 <glue_check_reboot>:


// reboot
static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 80175f8:	b580      	push	{r7, lr}
 80175fa:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 80175fc:	f7f5 fd0a 	bl	800d014 <mg_now>
 8017600:	4b05      	ldr	r3, [pc, #20]	@ (8017618 <glue_check_reboot+0x20>)
 8017602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017606:	4290      	cmp	r0, r2
 8017608:	eb71 0303 	sbcs.w	r3, r1, r3
 801760c:	bf34      	ite	cc
 801760e:	2301      	movcc	r3, #1
 8017610:	2300      	movcs	r3, #0
 8017612:	b2db      	uxtb	r3, r3
}
 8017614:	4618      	mov	r0, r3
 8017616:	bd80      	pop	{r7, pc}
 8017618:	24010b78 	.word	0x24010b78

0801761c <glue_start_reboot>:
void glue_start_reboot(void) {
 801761c:	b5b0      	push	{r4, r5, r7, lr}
 801761e:	af00      	add	r7, sp, #0
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 8017620:	f7f5 fcf8 	bl	800d014 <mg_now>
 8017624:	4602      	mov	r2, r0
 8017626:	460b      	mov	r3, r1
 8017628:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 801762c:	f143 0500 	adc.w	r5, r3, #0
 8017630:	4b02      	ldr	r3, [pc, #8]	@ (801763c <glue_start_reboot+0x20>)
 8017632:	e9c3 4500 	strd	r4, r5, [r3]
}
 8017636:	bf00      	nop
 8017638:	bdb0      	pop	{r4, r5, r7, pc}
 801763a:	bf00      	nop
 801763c:	24010b78 	.word	0x24010b78

08017640 <glue_ota_begin_firmware_update>:

// firmware_update
void  *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 8017640:	b580      	push	{r7, lr}
 8017642:	b084      	sub	sp, #16
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 801764a:	6838      	ldr	r0, [r7, #0]
 801764c:	f7f4 fc14 	bl	800be78 <mg_ota_begin>
 8017650:	4603      	mov	r3, r0
 8017652:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
  return ok ? (void *) 1 : NULL;
 8017654:	7bfb      	ldrb	r3, [r7, #15]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d001      	beq.n	801765e <glue_ota_begin_firmware_update+0x1e>
 801765a:	2301      	movs	r3, #1
 801765c:	e000      	b.n	8017660 <glue_ota_begin_firmware_update+0x20>
 801765e:	2300      	movs	r3, #0
}
 8017660:	4618      	mov	r0, r3
 8017662:	3710      	adds	r7, #16
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}

08017668 <glue_ota_end_firmware_update>:
bool  glue_ota_end_firmware_update(void *context) {
 8017668:	b580      	push	{r7, lr}
 801766a:	b088      	sub	sp, #32
 801766c:	af04      	add	r7, sp, #16
 801766e:	6078      	str	r0, [r7, #4]
  bool ok = mg_ota_end();
 8017670:	f7f4 fcc2 	bl	800bff8 <mg_ota_end>
 8017674:	4603      	mov	r3, r0
 8017676:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("ctx: %p, success: %d", context, ok));
  if (ok) {
 8017678:	7bfb      	ldrb	r3, [r7, #15]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d00c      	beq.n	8017698 <glue_ota_end_firmware_update+0x30>
    MG_INFO(("Rebooting in %lu ms", WIZARD_REBOOT_TIMEOUT_MS));
    mg_timer_add(&g_mgr, WIZARD_REBOOT_TIMEOUT_MS, 0,
 801767e:	2300      	movs	r3, #0
 8017680:	9302      	str	r3, [sp, #8]
 8017682:	4b08      	ldr	r3, [pc, #32]	@ (80176a4 <glue_ota_end_firmware_update+0x3c>)
 8017684:	9301      	str	r3, [sp, #4]
 8017686:	2300      	movs	r3, #0
 8017688:	9300      	str	r3, [sp, #0]
 801768a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801768e:	f04f 0300 	mov.w	r3, #0
 8017692:	4805      	ldr	r0, [pc, #20]	@ (80176a8 <glue_ota_end_firmware_update+0x40>)
 8017694:	f7f1 fcd6 	bl	8009044 <mg_timer_add>
      (void(*)(void *)) mg_device_reset, NULL);
  }
  return ok;
 8017698:	7bfb      	ldrb	r3, [r7, #15]
}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	08023b3b 	.word	0x08023b3b
 80176a8:	24010b90 	.word	0x24010b90

080176ac <glue_ota_write_firmware_update>:
bool  glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	60f8      	str	r0, [r7, #12]
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
  return mg_ota_write(buf, len);
 80176b8:	6879      	ldr	r1, [r7, #4]
 80176ba:	68b8      	ldr	r0, [r7, #8]
 80176bc:	f7f4 fc10 	bl	800bee0 <mg_ota_write>
 80176c0:	4603      	mov	r3, r0
}
 80176c2:	4618      	mov	r0, r3
 80176c4:	3710      	adds	r7, #16
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}
	...

080176cc <glue_file_open_file_upload>:

// file_upload
void  *glue_file_open_file_upload(char *file_name, size_t total_size) {
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b0a4      	sub	sp, #144	@ 0x90
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
 80176d4:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 80176d6:	2300      	movs	r3, #0
 80176d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 80176dc:	2300      	movs	r3, #0
 80176de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 80176e2:	212f      	movs	r1, #47	@ 0x2f
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f00a ff5c 	bl	80225a2 <strrchr>
 80176ea:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80176ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d102      	bne.n	80176fc <glue_file_open_file_upload+0x30>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 80176fc:	f107 0008 	add.w	r0, r7, #8
 8017700:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017704:	4a04      	ldr	r2, [pc, #16]	@ (8017718 <glue_file_open_file_upload+0x4c>)
 8017706:	2180      	movs	r1, #128	@ 0x80
 8017708:	f7f4 fd96 	bl	800c238 <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
  return fp;
 801770c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8017710:	4618      	mov	r0, r3
 8017712:	3790      	adds	r7, #144	@ 0x90
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	08025940 	.word	0x08025940

0801771c <glue_file_close_file_upload>:
bool  glue_file_close_file_upload(void *fp) {
 801771c:	b480      	push	{r7}
 801771e:	b083      	sub	sp, #12
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 8017724:	2300      	movs	r3, #0
#endif
}
 8017726:	4618      	mov	r0, r3
 8017728:	370c      	adds	r7, #12
 801772a:	46bd      	mov	sp, r7
 801772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017730:	4770      	bx	lr

08017732 <glue_file_write_file_upload>:
bool  glue_file_write_file_upload(void *fp, void *buf, size_t len) {
 8017732:	b480      	push	{r7}
 8017734:	b085      	sub	sp, #20
 8017736:	af00      	add	r7, sp, #0
 8017738:	60f8      	str	r0, [r7, #12]
 801773a:	60b9      	str	r1, [r7, #8]
 801773c:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 801773e:	2300      	movs	r3, #0
#endif
}
 8017740:	4618      	mov	r0, r3
 8017742:	3714      	adds	r7, #20
 8017744:	46bd      	mov	sp, r7
 8017746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774a:	4770      	bx	lr

0801774c <glue_graph_get_graph1>:

// graph1
size_t glue_graph_get_graph1(uint32_t from, uint32_t to,
                              uint32_t *x_values, double *y_values, size_t len) {
 801774c:	b5b0      	push	{r4, r5, r7, lr}
 801774e:	b0a4      	sub	sp, #144	@ 0x90
 8017750:	af00      	add	r7, sp, #0
 8017752:	60f8      	str	r0, [r7, #12]
 8017754:	60b9      	str	r1, [r7, #8]
 8017756:	607a      	str	r2, [r7, #4]
 8017758:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 801775a:	2300      	movs	r3, #0
 801775c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t timestamps[] = {1724576787,1724576847,1724576907,1724576967,1724577027,1724577087,1724577147,1724577207,1724577267,1724577327};  // Those are example values
 8017760:	4b25      	ldr	r3, [pc, #148]	@ (80177f8 <glue_graph_get_graph1+0xac>)
 8017762:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8017766:	461d      	mov	r5, r3
 8017768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801776a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801776c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801776e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017770:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017774:	e884 0003 	stmia.w	r4, {r0, r1}
  double values[] = {20.3,27.2,29.7,27.9,25.1,23.8,22.5,22.2,23.3,23.9};  // Use real device data
 8017778:	4a20      	ldr	r2, [pc, #128]	@ (80177fc <glue_graph_get_graph1+0xb0>)
 801777a:	f107 0310 	add.w	r3, r7, #16
 801777e:	4611      	mov	r1, r2
 8017780:	2250      	movs	r2, #80	@ 0x50
 8017782:	4618      	mov	r0, r3
 8017784:	f00b f877 	bl	8022876 <memcpy>
  for (i = 0; i < len; i++) {
 8017788:	2300      	movs	r3, #0
 801778a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801778e:	e024      	b.n	80177da <glue_graph_get_graph1+0x8e>
    if (i >= sizeof(values) / sizeof(values[0])) break;
 8017790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017794:	2b09      	cmp	r3, #9
 8017796:	d827      	bhi.n	80177e8 <glue_graph_get_graph1+0x9c>
    x_values[i] = timestamps[i];
 8017798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801779c:	009b      	lsls	r3, r3, #2
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	441a      	add	r2, r3
 80177a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80177a6:	009b      	lsls	r3, r3, #2
 80177a8:	3390      	adds	r3, #144	@ 0x90
 80177aa:	443b      	add	r3, r7
 80177ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80177b0:	6013      	str	r3, [r2, #0]
    y_values[i] = values[i];
 80177b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80177b6:	00db      	lsls	r3, r3, #3
 80177b8:	683a      	ldr	r2, [r7, #0]
 80177ba:	18d1      	adds	r1, r2, r3
 80177bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80177c0:	00db      	lsls	r3, r3, #3
 80177c2:	3390      	adds	r3, #144	@ 0x90
 80177c4:	443b      	add	r3, r7
 80177c6:	3b80      	subs	r3, #128	@ 0x80
 80177c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177cc:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < len; i++) {
 80177d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80177d4:	3301      	adds	r3, #1
 80177d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80177da:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80177de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80177e2:	429a      	cmp	r2, r3
 80177e4:	d3d4      	bcc.n	8017790 <glue_graph_get_graph1+0x44>
 80177e6:	e000      	b.n	80177ea <glue_graph_get_graph1+0x9e>
    if (i >= sizeof(values) / sizeof(values[0])) break;
 80177e8:	bf00      	nop
  }
  (void) from, (void) to;
  return i;
 80177ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3790      	adds	r7, #144	@ 0x90
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bdb0      	pop	{r4, r5, r7, pc}
 80177f6:	bf00      	nop
 80177f8:	08025948 	.word	0x08025948
 80177fc:	08025970 	.word	0x08025970

08017800 <glue_get_state>:

static struct state s_state = {42, 27, 70, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 8017800:	b4b0      	push	{r4, r5, r7}
 8017802:	b083      	sub	sp, #12
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	4a08      	ldr	r2, [pc, #32]	@ (801782c <glue_get_state+0x2c>)
 801780c:	461c      	mov	r4, r3
 801780e:	4615      	mov	r5, r2
 8017810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017818:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801781c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8017820:	bf00      	nop
 8017822:	370c      	adds	r7, #12
 8017824:	46bd      	mov	sp, r7
 8017826:	bcb0      	pop	{r4, r5, r7}
 8017828:	4770      	bx	lr
 801782a:	bf00      	nop
 801782c:	24000284 	.word	0x24000284

08017830 <glue_set_state>:
void glue_set_state(struct state *data) {
 8017830:	b4b0      	push	{r4, r5, r7}
 8017832:	b083      	sub	sp, #12
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
  s_state = *data; // Sync with your device
 8017838:	4a08      	ldr	r2, [pc, #32]	@ (801785c <glue_set_state+0x2c>)
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	4614      	mov	r4, r2
 801783e:	461d      	mov	r5, r3
 8017840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017848:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801784c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8017850:	bf00      	nop
 8017852:	370c      	adds	r7, #12
 8017854:	46bd      	mov	sp, r7
 8017856:	bcb0      	pop	{r4, r5, r7}
 8017858:	4770      	bx	lr
 801785a:	bf00      	nop
 801785c:	24000284 	.word	0x24000284

08017860 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 8017860:	b480      	push	{r7}
 8017862:	b083      	sub	sp, #12
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	4a05      	ldr	r2, [pc, #20]	@ (8017880 <glue_get_leds+0x20>)
 801786c:	8811      	ldrh	r1, [r2, #0]
 801786e:	7892      	ldrb	r2, [r2, #2]
 8017870:	8019      	strh	r1, [r3, #0]
 8017872:	709a      	strb	r2, [r3, #2]
}
 8017874:	bf00      	nop
 8017876:	370c      	adds	r7, #12
 8017878:	46bd      	mov	sp, r7
 801787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787e:	4770      	bx	lr
 8017880:	240002b0 	.word	0x240002b0

08017884 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 8017884:	b480      	push	{r7}
 8017886:	b083      	sub	sp, #12
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 801788c:	4b05      	ldr	r3, [pc, #20]	@ (80178a4 <glue_set_leds+0x20>)
 801788e:	687a      	ldr	r2, [r7, #4]
 8017890:	8811      	ldrh	r1, [r2, #0]
 8017892:	7892      	ldrb	r2, [r2, #2]
 8017894:	8019      	strh	r1, [r3, #0]
 8017896:	709a      	strb	r2, [r3, #2]
}
 8017898:	bf00      	nop
 801789a:	370c      	adds	r7, #12
 801789c:	46bd      	mov	sp, r7
 801789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a2:	4770      	bx	lr
 80178a4:	240002b0 	.word	0x240002b0

080178a8 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", 2, 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 80178a8:	b4b0      	push	{r4, r5, r7}
 80178aa:	b083      	sub	sp, #12
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	4a09      	ldr	r2, [pc, #36]	@ (80178d8 <glue_get_settings+0x30>)
 80178b4:	461c      	mov	r4, r3
 80178b6:	4615      	mov	r5, r2
 80178b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80178c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80178cc:	bf00      	nop
 80178ce:	370c      	adds	r7, #12
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bcb0      	pop	{r4, r5, r7}
 80178d4:	4770      	bx	lr
 80178d6:	bf00      	nop
 80178d8:	240002b8 	.word	0x240002b8

080178dc <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 80178dc:	b4b0      	push	{r4, r5, r7}
 80178de:	b083      	sub	sp, #12
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 80178e4:	4a09      	ldr	r2, [pc, #36]	@ (801790c <glue_set_settings+0x30>)
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	4614      	mov	r4, r2
 80178ea:	461d      	mov	r5, r3
 80178ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80178fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8017900:	bf00      	nop
 8017902:	370c      	adds	r7, #12
 8017904:	46bd      	mov	sp, r7
 8017906:	bcb0      	pop	{r4, r5, r7}
 8017908:	4770      	bx	lr
 801790a:	bf00      	nop
 801790c:	240002b8 	.word	0x240002b8

08017910 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 8017910:	b580      	push	{r7, lr}
 8017912:	b082      	sub	sp, #8
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	4a05      	ldr	r2, [pc, #20]	@ (8017930 <glue_get_security+0x20>)
 801791c:	4618      	mov	r0, r3
 801791e:	4611      	mov	r1, r2
 8017920:	2350      	movs	r3, #80	@ 0x50
 8017922:	461a      	mov	r2, r3
 8017924:	f00a ffa7 	bl	8022876 <memcpy>
}
 8017928:	bf00      	nop
 801792a:	3708      	adds	r7, #8
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}
 8017930:	240002f8 	.word	0x240002f8

08017934 <glue_set_security>:
void glue_set_security(struct security *data) {
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 801793c:	4a05      	ldr	r2, [pc, #20]	@ (8017954 <glue_set_security+0x20>)
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	4610      	mov	r0, r2
 8017942:	4619      	mov	r1, r3
 8017944:	2350      	movs	r3, #80	@ 0x50
 8017946:	461a      	mov	r2, r3
 8017948:	f00a ff95 	bl	8022876 <memcpy>
}
 801794c:	bf00      	nop
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}
 8017954:	240002f8 	.word	0x240002f8

08017958 <find_handler>:
  {"settings", "object", false, 3, 7, 0UL, s_settings_attributes, (void (*)(void *)) glue_get_settings, (void (*)(void *)) glue_set_settings, NULL, NULL, NULL, NULL, NULL, NULL, sizeof(struct settings)},
  {"security", "object", false, 7, 7, 0UL, s_security_attributes, (void (*)(void *)) glue_get_security, (void (*)(void *)) glue_set_security, NULL, NULL, NULL, NULL, NULL, NULL, sizeof(struct security)},
  {"events", "array", false, 0, 0, 0UL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0}
};

static struct apihandler *find_handler(struct mg_http_message *hm) {
 8017958:	b580      	push	{r7, lr}
 801795a:	b086      	sub	sp, #24
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
  size_t i;
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	68db      	ldr	r3, [r3, #12]
 8017964:	2b05      	cmp	r3, #5
 8017966:	d909      	bls.n	801797c <find_handler+0x24>
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	689b      	ldr	r3, [r3, #8]
 801796c:	2205      	movs	r2, #5
 801796e:	4924      	ldr	r1, [pc, #144]	@ (8017a00 <find_handler+0xa8>)
 8017970:	4618      	mov	r0, r3
 8017972:	f00a fdf1 	bl	8022558 <strncmp>
 8017976:	4603      	mov	r3, r0
 8017978:	2b00      	cmp	r3, #0
 801797a:	d001      	beq.n	8017980 <find_handler+0x28>
 801797c:	2300      	movs	r3, #0
 801797e:	e03b      	b.n	80179f8 <find_handler+0xa0>
  for (i = 0; i < sizeof(s_apihandlers) / sizeof(s_apihandlers[0]); i++) {
 8017980:	2300      	movs	r3, #0
 8017982:	617b      	str	r3, [r7, #20]
 8017984:	e034      	b.n	80179f0 <find_handler+0x98>
    struct apihandler *h = &s_apihandlers[i];
 8017986:	697b      	ldr	r3, [r7, #20]
 8017988:	019b      	lsls	r3, r3, #6
 801798a:	4a1e      	ldr	r2, [pc, #120]	@ (8017a04 <find_handler+0xac>)
 801798c:	4413      	add	r3, r2
 801798e:	613b      	str	r3, [r7, #16]
    size_t n = strlen(h->name);
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	4618      	mov	r0, r3
 8017996:	f7e8 fd03 	bl	80003a0 <strlen>
 801799a:	60f8      	str	r0, [r7, #12]
    if (n + 5 > hm->uri.len) continue;
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	1d5a      	adds	r2, r3, #5
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	68db      	ldr	r3, [r3, #12]
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d81b      	bhi.n	80179e0 <find_handler+0x88>
    if (strncmp(hm->uri.buf + 5, h->name, n) != 0) continue;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	689b      	ldr	r3, [r3, #8]
 80179ac:	1d58      	adds	r0, r3, #5
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	68fa      	ldr	r2, [r7, #12]
 80179b4:	4619      	mov	r1, r3
 80179b6:	f00a fdcf 	bl	8022558 <strncmp>
 80179ba:	4603      	mov	r3, r0
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d111      	bne.n	80179e4 <find_handler+0x8c>
    MG_INFO(("%.*s %s %lu %lu", hm->uri.len, hm->uri.buf, h->name, n + 5,
             hm->uri.len));
    if (n + 5 < hm->uri.len && hm->uri.buf[n + 5] != '/') continue;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	1d5a      	adds	r2, r3, #5
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	68db      	ldr	r3, [r3, #12]
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d207      	bcs.n	80179dc <find_handler+0x84>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	689a      	ldr	r2, [r3, #8]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	3305      	adds	r3, #5
 80179d4:	4413      	add	r3, r2
 80179d6:	781b      	ldrb	r3, [r3, #0]
 80179d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80179da:	d105      	bne.n	80179e8 <find_handler+0x90>
    return h;
 80179dc:	693b      	ldr	r3, [r7, #16]
 80179de:	e00b      	b.n	80179f8 <find_handler+0xa0>
    if (n + 5 > hm->uri.len) continue;
 80179e0:	bf00      	nop
 80179e2:	e002      	b.n	80179ea <find_handler+0x92>
    if (strncmp(hm->uri.buf + 5, h->name, n) != 0) continue;
 80179e4:	bf00      	nop
 80179e6:	e000      	b.n	80179ea <find_handler+0x92>
    if (n + 5 < hm->uri.len && hm->uri.buf[n + 5] != '/') continue;
 80179e8:	bf00      	nop
  for (i = 0; i < sizeof(s_apihandlers) / sizeof(s_apihandlers[0]); i++) {
 80179ea:	697b      	ldr	r3, [r7, #20]
 80179ec:	3301      	adds	r3, #1
 80179ee:	617b      	str	r3, [r7, #20]
 80179f0:	697b      	ldr	r3, [r7, #20]
 80179f2:	2b08      	cmp	r3, #8
 80179f4:	d9c7      	bls.n	8017986 <find_handler+0x2e>
  }
  return NULL;
 80179f6:	2300      	movs	r3, #0
}
 80179f8:	4618      	mov	r0, r3
 80179fa:	3718      	adds	r7, #24
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}
 8017a00:	08025b24 	.word	0x08025b24
 8017a04:	2400055c 	.word	0x2400055c

08017a08 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 8017a08:	b590      	push	{r4, r7, lr}
 8017a0a:	b089      	sub	sp, #36	@ 0x24
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	f107 0408 	add.w	r4, r7, #8
 8017a12:	e884 0003 	stmia.w	r4, {r0, r1}
 8017a16:	607a      	str	r2, [r7, #4]
 8017a18:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 8017a1a:	f107 0010 	add.w	r0, r7, #16
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	f107 0208 	add.w	r2, r7, #8
 8017a24:	ca06      	ldmia	r2, {r1, r2}
 8017a26:	f7ef fd41 	bl	80074ac <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 8017a2a:	697b      	ldr	r3, [r7, #20]
 8017a2c:	2b01      	cmp	r3, #1
 8017a2e:	d913      	bls.n	8017a58 <mg_json_get_str2+0x50>
 8017a30:	693b      	ldr	r3, [r7, #16]
 8017a32:	781b      	ldrb	r3, [r3, #0]
 8017a34:	2b22      	cmp	r3, #34	@ 0x22
 8017a36:	d10f      	bne.n	8017a58 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8017a38:	693b      	ldr	r3, [r7, #16]
 8017a3a:	1c59      	adds	r1, r3, #1
 8017a3c:	697b      	ldr	r3, [r7, #20]
 8017a3e:	1e9a      	subs	r2, r3, #2
 8017a40:	f107 0318 	add.w	r3, r7, #24
 8017a44:	4618      	mov	r0, r3
 8017a46:	f7f5 fd44 	bl	800d4d2 <mg_str_n>
 8017a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a4c:	683a      	ldr	r2, [r7, #0]
 8017a4e:	f107 0118 	add.w	r1, r7, #24
 8017a52:	c903      	ldmia	r1, {r0, r1}
 8017a54:	f7ef fdd0 	bl	80075f8 <mg_json_unescape>
  }
}
 8017a58:	bf00      	nop
 8017a5a:	3724      	adds	r7, #36	@ 0x24
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd90      	pop	{r4, r7, pc}

08017a60 <authenticate>:
};

static struct user *s_users;  // List of authenticated users

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b0ba      	sub	sp, #232	@ 0xe8
 8017a64:	af02      	add	r7, sp, #8
 8017a66:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 8017a6e:	f107 030c 	add.w	r3, r7, #12
 8017a72:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8017a76:	2264      	movs	r2, #100	@ 0x64
 8017a78:	9200      	str	r2, [sp, #0]
 8017a7a:	2264      	movs	r2, #100	@ 0x64
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7ee f8e3 	bl	8005c48 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 8017a82:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d05c      	beq.n	8017b44 <authenticate+0xe4>
 8017a8a:	7b3b      	ldrb	r3, [r7, #12]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d059      	beq.n	8017b44 <authenticate+0xe4>
    // Both user and password is set, auth by user/password via glue API
    int level = glue_authenticate(user, pass);
 8017a90:	f107 020c 	add.w	r2, r7, #12
 8017a94:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8017a98:	4611      	mov	r1, r2
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7ff fd78 	bl	8017590 <glue_authenticate>
 8017aa0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
    if (level > 0) {  // Proceed only if the firmware authenticated us
 8017aa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	dd75      	ble.n	8017b98 <authenticate+0x138>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8017aac:	4b3e      	ldr	r3, [pc, #248]	@ (8017ba8 <authenticate+0x148>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8017ab4:	e014      	b.n	8017ae0 <authenticate+0x80>
        if (strcmp(user, u->name) == 0) result = u;
 8017ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017aba:	1d1a      	adds	r2, r3, #4
 8017abc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8017ac0:	4611      	mov	r1, r2
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f7e8 fc0c 	bl	80002e0 <strcmp>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d103      	bne.n	8017ad6 <authenticate+0x76>
 8017ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8017ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8017ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d003      	beq.n	8017af0 <authenticate+0x90>
 8017ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d0e2      	beq.n	8017ab6 <authenticate+0x56>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 8017af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d14f      	bne.n	8017b98 <authenticate+0x138>
        result = (struct user *) calloc(1, sizeof(*result));
 8017af8:	2140      	movs	r1, #64	@ 0x40
 8017afa:	2001      	movs	r0, #1
 8017afc:	f00a fa0e 	bl	8021f1c <calloc>
 8017b00:	4603      	mov	r3, r0
 8017b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 8017b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017b0a:	1d18      	adds	r0, r3, #4
 8017b0c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8017b10:	4a26      	ldr	r2, [pc, #152]	@ (8017bac <authenticate+0x14c>)
 8017b12:	2120      	movs	r1, #32
 8017b14:	f7f4 fb90 	bl	800c238 <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 8017b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017b1c:	3324      	adds	r3, #36	@ 0x24
 8017b1e:	2114      	movs	r1, #20
 8017b20:	4618      	mov	r0, r3
 8017b22:	f7fe fa05 	bl	8015f30 <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 8017b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017b2a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8017b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8017b30:	4b1d      	ldr	r3, [pc, #116]	@ (8017ba8 <authenticate+0x148>)
 8017b32:	681a      	ldr	r2, [r3, #0]
 8017b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017b38:	601a      	str	r2, [r3, #0]
 8017b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8017ba8 <authenticate+0x148>)
 8017b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017b40:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 8017b42:	e029      	b.n	8017b98 <authenticate+0x138>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 8017b44:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d126      	bne.n	8017b9a <authenticate+0x13a>
 8017b4c:	7b3b      	ldrb	r3, [r7, #12]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d023      	beq.n	8017b9a <authenticate+0x13a>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8017b52:	4b15      	ldr	r3, [pc, #84]	@ (8017ba8 <authenticate+0x148>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8017b5a:	e014      	b.n	8017b86 <authenticate+0x126>
      if (strcmp(u->token, pass) == 0) result = u;
 8017b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017b60:	3324      	adds	r3, #36	@ 0x24
 8017b62:	f107 020c 	add.w	r2, r7, #12
 8017b66:	4611      	mov	r1, r2
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7e8 fbb9 	bl	80002e0 <strcmp>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d103      	bne.n	8017b7c <authenticate+0x11c>
 8017b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017b78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8017b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8017b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d005      	beq.n	8017b9a <authenticate+0x13a>
 8017b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d0e2      	beq.n	8017b5c <authenticate+0xfc>
 8017b96:	e000      	b.n	8017b9a <authenticate+0x13a>
  if (user[0] != '\0' && pass[0] != '\0') {
 8017b98:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
  return result;
 8017b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	37e0      	adds	r7, #224	@ 0xe0
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	bd80      	pop	{r7, pc}
 8017ba6:	bf00      	nop
 8017ba8:	24010bdc 	.word	0x24010bdc
 8017bac:	08025b2c 	.word	0x08025b2c

08017bb0 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b0cc      	sub	sp, #304	@ 0x130
 8017bb4:	af0a      	add	r7, sp, #40	@ 0x28
 8017bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017bbe:	6018      	str	r0, [r3, #0]
 8017bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8017bc8:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 8017bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8017bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017bea:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d001      	beq.n	8017bf4 <handle_login+0x44>
 8017bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8017c6c <handle_login+0xbc>)
 8017bf2:	e000      	b.n	8017bf6 <handle_login+0x46>
 8017bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8017c70 <handle_login+0xc0>)
 8017bf6:	f107 0008 	add.w	r0, r7, #8
 8017bfa:	491e      	ldr	r1, [pc, #120]	@ (8017c74 <handle_login+0xc4>)
 8017bfc:	9101      	str	r1, [sp, #4]
 8017bfe:	9300      	str	r3, [sp, #0]
 8017c00:	4613      	mov	r3, r2
 8017c02:	4a1d      	ldr	r2, [pc, #116]	@ (8017c78 <handle_login+0xc8>)
 8017c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017c08:	f7f4 fb16 	bl	800c238 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}",  //
                MG_ESC("user"), MG_ESC(u->name),  //
 8017c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}",  //
 8017c18:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8017c1c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8017c20:	6812      	ldr	r2, [r2, #0]
 8017c22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8017c24:	f107 0108 	add.w	r1, r7, #8
 8017c28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8017c2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8017c30:	9209      	str	r2, [sp, #36]	@ 0x24
 8017c32:	4a12      	ldr	r2, [pc, #72]	@ (8017c7c <handle_login+0xcc>)
 8017c34:	9208      	str	r2, [sp, #32]
 8017c36:	2200      	movs	r2, #0
 8017c38:	9207      	str	r2, [sp, #28]
 8017c3a:	4a11      	ldr	r2, [pc, #68]	@ (8017c80 <handle_login+0xd0>)
 8017c3c:	9206      	str	r2, [sp, #24]
 8017c3e:	9305      	str	r3, [sp, #20]
 8017c40:	2300      	movs	r3, #0
 8017c42:	9304      	str	r3, [sp, #16]
 8017c44:	4b0e      	ldr	r3, [pc, #56]	@ (8017c80 <handle_login+0xd0>)
 8017c46:	9303      	str	r3, [sp, #12]
 8017c48:	4b0e      	ldr	r3, [pc, #56]	@ (8017c84 <handle_login+0xd4>)
 8017c4a:	9302      	str	r3, [sp, #8]
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	9301      	str	r3, [sp, #4]
 8017c50:	4b0b      	ldr	r3, [pc, #44]	@ (8017c80 <handle_login+0xd0>)
 8017c52:	9300      	str	r3, [sp, #0]
 8017c54:	4b0c      	ldr	r3, [pc, #48]	@ (8017c88 <handle_login+0xd8>)
 8017c56:	460a      	mov	r2, r1
 8017c58:	21c8      	movs	r1, #200	@ 0xc8
 8017c5a:	6800      	ldr	r0, [r0, #0]
 8017c5c:	f7ed f8a2 	bl	8004da4 <mg_http_reply>
                MG_ESC("level"), u->level);
}
 8017c60:	bf00      	nop
 8017c62:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	08025b30 	.word	0x08025b30
 8017c70:	08025b3c 	.word	0x08025b3c
 8017c74:	00015180 	.word	0x00015180
 8017c78:	08025b40 	.word	0x08025b40
 8017c7c:	08025a14 	.word	0x08025a14
 8017c80:	0800c409 	.word	0x0800c409
 8017c84:	08025b9c 	.word	0x08025b9c
 8017c88:	08025b8c 	.word	0x08025b8c

08017c8c <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b0c2      	sub	sp, #264	@ 0x108
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017c9a:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 8017c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017cae:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d001      	beq.n	8017cb8 <handle_logout+0x2c>
 8017cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8017cec <handle_logout+0x60>)
 8017cb6:	e000      	b.n	8017cba <handle_logout+0x2e>
 8017cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8017cf0 <handle_logout+0x64>)
 8017cba:	f107 0008 	add.w	r0, r7, #8
 8017cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8017cf4 <handle_logout+0x68>)
 8017cc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017cc4:	f7f4 fab8 	bl	800c238 <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 8017cc8:	f107 0208 	add.w	r2, r7, #8
 8017ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017cd0:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8017cd4:	4b08      	ldr	r3, [pc, #32]	@ (8017cf8 <handle_logout+0x6c>)
 8017cd6:	f240 1191 	movw	r1, #401	@ 0x191
 8017cda:	6800      	ldr	r0, [r0, #0]
 8017cdc:	f7ed f862 	bl	8004da4 <mg_http_reply>
}
 8017ce0:	bf00      	nop
 8017ce2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}
 8017cea:	bf00      	nop
 8017cec:	08025b30 	.word	0x08025b30
 8017cf0:	08025b3c 	.word	0x08025b3c
 8017cf4:	08025ba4 	.word	0x08025ba4
 8017cf8:	08025c08 	.word	0x08025c08

08017cfc <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2200      	movs	r2, #0
 8017d08:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	691b      	ldr	r3, [r3, #16]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d00c      	beq.n	8017d2c <close_uploaded_file+0x30>
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	68db      	ldr	r3, [r3, #12]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d008      	beq.n	8017d2c <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	691b      	ldr	r3, [r3, #16]
 8017d1e:	687a      	ldr	r2, [r7, #4]
 8017d20:	68d2      	ldr	r2, [r2, #12]
 8017d22:	4610      	mov	r0, r2
 8017d24:	4798      	blx	r3
    us->fp = NULL;
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 8017d2c:	2218      	movs	r2, #24
 8017d2e:	2100      	movs	r1, #0
 8017d30:	6878      	ldr	r0, [r7, #4]
 8017d32:	f00a fbfc 	bl	802252e <memset>
}
 8017d36:	bf00      	nop
 8017d38:	3708      	adds	r7, #8
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}
	...

08017d40 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b08a      	sub	sp, #40	@ 0x28
 8017d44:	af02      	add	r7, sp, #8
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	3388      	adds	r3, #136	@ 0x88
 8017d50:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8017d52:	69fb      	ldr	r3, [r7, #28]
 8017d54:	781b      	ldrb	r3, [r3, #0]
 8017d56:	2b55      	cmp	r3, #85	@ 0x55
 8017d58:	d179      	bne.n	8017e4e <upload_handler+0x10e>
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	2b07      	cmp	r3, #7
 8017d5e:	d176      	bne.n	8017e4e <upload_handler+0x10e>
 8017d60:	69fb      	ldr	r3, [r7, #28]
 8017d62:	685b      	ldr	r3, [r3, #4]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d072      	beq.n	8017e4e <upload_handler+0x10e>
      c->recv.len > 0) {
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d06e      	beq.n	8017e4e <upload_handler+0x10e>
    size_t alignment = 128;  // Maximum flash write granularity (MCXN947 ROM)
 8017d70:	2380      	movs	r3, #128	@ 0x80
 8017d72:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 8017d74:	69fb      	ldr	r3, [r7, #28]
 8017d76:	689a      	ldr	r2, [r3, #8]
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017d7c:	441a      	add	r2, r3
 8017d7e:	69fb      	ldr	r3, [r7, #28]
 8017d80:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 8017d82:	429a      	cmp	r2, r3
 8017d84:	d210      	bcs.n	8017da8 <upload_handler+0x68>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 8017d86:	69bb      	ldr	r3, [r7, #24]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d102      	bne.n	8017d92 <upload_handler+0x52>
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017d90:	e007      	b.n	8017da2 <upload_handler+0x62>
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017d96:	69bb      	ldr	r3, [r7, #24]
 8017d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d9c:	69ba      	ldr	r2, [r7, #24]
 8017d9e:	fb02 f303 	mul.w	r3, r2, r3
 8017da2:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	e001      	b.n	8017dac <upload_handler+0x6c>
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 8017dac:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d00a      	beq.n	8017dca <upload_handler+0x8a>
 8017db4:	69fb      	ldr	r3, [r7, #28]
 8017db6:	695b      	ldr	r3, [r3, #20]
 8017db8:	69fa      	ldr	r2, [r7, #28]
 8017dba:	68d0      	ldr	r0, [r2, #12]
 8017dbc:	68fa      	ldr	r2, [r7, #12]
 8017dbe:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8017dc0:	697a      	ldr	r2, [r7, #20]
 8017dc2:	4798      	blx	r3
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d001      	beq.n	8017dce <upload_handler+0x8e>
 8017dca:	2301      	movs	r3, #1
 8017dcc:	e000      	b.n	8017dd0 <upload_handler+0x90>
 8017dce:	2300      	movs	r3, #0
 8017dd0:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 8017dd2:	69fb      	ldr	r3, [r7, #28]
 8017dd4:	689a      	ldr	r2, [r3, #8]
 8017dd6:	697b      	ldr	r3, [r7, #20]
 8017dd8:	441a      	add	r2, r3
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	3338      	adds	r3, #56	@ 0x38
 8017de2:	697a      	ldr	r2, [r7, #20]
 8017de4:	2100      	movs	r1, #0
 8017de6:	4618      	mov	r0, r3
 8017de8:	f7ee fdf9 	bl	80069de <mg_iobuf_del>
    if (ok == false) {
 8017dec:	7cfb      	ldrb	r3, [r7, #19]
 8017dee:	f083 0301 	eor.w	r3, r3, #1
 8017df2:	b2db      	uxtb	r3, r3
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d011      	beq.n	8017e1c <upload_handler+0xdc>
      mg_http_reply(c, 400, "", "Upload error\n");
 8017df8:	4b1b      	ldr	r3, [pc, #108]	@ (8017e68 <upload_handler+0x128>)
 8017dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8017e6c <upload_handler+0x12c>)
 8017dfc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8017e00:	68f8      	ldr	r0, [r7, #12]
 8017e02:	f7ec ffcf 	bl	8004da4 <mg_http_reply>
      close_uploaded_file(us);
 8017e06:	69f8      	ldr	r0, [r7, #28]
 8017e08:	f7ff ff78 	bl	8017cfc <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8017e0c:	68fa      	ldr	r2, [r7, #12]
 8017e0e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017e12:	f043 0310 	orr.w	r3, r3, #16
 8017e16:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 8017e1a:	e018      	b.n	8017e4e <upload_handler+0x10e>
    } else if (us->received >= us->expected) {
 8017e1c:	69fb      	ldr	r3, [r7, #28]
 8017e1e:	689a      	ldr	r2, [r3, #8]
 8017e20:	69fb      	ldr	r3, [r7, #28]
 8017e22:	685b      	ldr	r3, [r3, #4]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d312      	bcc.n	8017e4e <upload_handler+0x10e>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 8017e28:	69fb      	ldr	r3, [r7, #28]
 8017e2a:	689b      	ldr	r3, [r3, #8]
 8017e2c:	9300      	str	r3, [sp, #0]
 8017e2e:	4b10      	ldr	r3, [pc, #64]	@ (8017e70 <upload_handler+0x130>)
 8017e30:	2200      	movs	r2, #0
 8017e32:	21c8      	movs	r1, #200	@ 0xc8
 8017e34:	68f8      	ldr	r0, [r7, #12]
 8017e36:	f7ec ffb5 	bl	8004da4 <mg_http_reply>
      close_uploaded_file(us);
 8017e3a:	69f8      	ldr	r0, [r7, #28]
 8017e3c:	f7ff ff5e 	bl	8017cfc <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8017e40:	68fa      	ldr	r2, [r7, #12]
 8017e42:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017e46:	f043 0310 	orr.w	r3, r3, #16
 8017e4a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 8017e4e:	69fb      	ldr	r3, [r7, #28]
 8017e50:	781b      	ldrb	r3, [r3, #0]
 8017e52:	2b55      	cmp	r3, #85	@ 0x55
 8017e54:	d105      	bne.n	8017e62 <upload_handler+0x122>
 8017e56:	68bb      	ldr	r3, [r7, #8]
 8017e58:	2b09      	cmp	r3, #9
 8017e5a:	d102      	bne.n	8017e62 <upload_handler+0x122>
 8017e5c:	69f8      	ldr	r0, [r7, #28]
 8017e5e:	f7ff ff4d 	bl	8017cfc <close_uploaded_file>
  (void) ev_data;
}
 8017e62:	3720      	adds	r7, #32
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}
 8017e68:	08025c18 	.word	0x08025c18
 8017e6c:	08025b3c 	.word	0x08025b3c
 8017e70:	08025c28 	.word	0x08025c28

08017e74 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b0a8      	sub	sp, #160	@ 0xa0
 8017e78:	af02      	add	r7, sp, #8
 8017e7a:	60f8      	str	r0, [r7, #12]
 8017e7c:	60b9      	str	r1, [r7, #8]
 8017e7e:	607a      	str	r2, [r7, #4]
 8017e80:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	3388      	adds	r3, #136	@ 0x88
 8017e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  struct mg_str parts[3];
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));                    // Cleanup upload state
 8017e8a:	2218      	movs	r2, #24
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8017e92:	f00a fb4c 	bl	802252e <memset>
  memset(parts, 0, sizeof(parts));               // Init match parts
 8017e96:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8017e9a:	2218      	movs	r2, #24
 8017e9c:	2100      	movs	r1, #0
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f00a fb45 	bl	802252e <memset>
  mg_match(hm->uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8017ea4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8017ea8:	4933      	ldr	r1, [pc, #204]	@ (8017f78 <prep_upload+0x104>)
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7f5 faf4 	bl	800d498 <mg_str_s>
 8017eb0:	68b9      	ldr	r1, [r7, #8]
 8017eb2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8017eb6:	9300      	str	r3, [sp, #0]
 8017eb8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8017ebc:	cb0c      	ldmia	r3, {r2, r3}
 8017ebe:	3108      	adds	r1, #8
 8017ec0:	c903      	ldmia	r1, {r0, r1}
 8017ec2:	f7f5 fbf3 	bl	800d6ac <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, path, sizeof(path), 0);
 8017ec6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8017ec8:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8017ecc:	f107 0210 	add.w	r2, r7, #16
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	9300      	str	r3, [sp, #0]
 8017ed4:	2364      	movs	r3, #100	@ 0x64
 8017ed6:	f7eb fe4c 	bl	8003b72 <mg_url_decode>
  us->fp = fn_open(path, hm->body.len);
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8017ee0:	f107 0210 	add.w	r2, r7, #16
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	4610      	mov	r0, r2
 8017ee8:	4798      	blx	r3
 8017eea:	4602      	mov	r2, r0
 8017eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017ef0:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
  us->marker = 'U';  // Mark us as an upload connection
 8017ef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017ef6:	2255      	movs	r2, #85	@ 0x55
 8017ef8:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 8017efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017efe:	68db      	ldr	r3, [r3, #12]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d10e      	bne.n	8017f22 <prep_upload+0xae>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 8017f04:	4b1d      	ldr	r3, [pc, #116]	@ (8017f7c <prep_upload+0x108>)
 8017f06:	4a1e      	ldr	r2, [pc, #120]	@ (8017f80 <prep_upload+0x10c>)
 8017f08:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8017f0c:	68f8      	ldr	r0, [r7, #12]
 8017f0e:	f7ec ff49 	bl	8004da4 <mg_http_reply>
    c->is_draining = 1;
 8017f12:	68fa      	ldr	r2, [r7, #12]
 8017f14:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017f18:	f043 0310 	orr.w	r3, r3, #16
 8017f1c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8017f20:	e026      	b.n	8017f70 <prep_upload+0xfc>
    us->expected = hm->body.len;              // Store number of bytes we expect
 8017f22:	68bb      	ldr	r3, [r7, #8]
 8017f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017f2c:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 8017f2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017f32:	683a      	ldr	r2, [r7, #0]
 8017f34:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 8017f36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017f3a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8017f3e:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8017f46:	68bb      	ldr	r3, [r7, #8]
 8017f48:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	2100      	movs	r1, #0
 8017f50:	f7ee fd45 	bl	80069de <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	4a0b      	ldr	r2, [pc, #44]	@ (8017f84 <prep_upload+0x110>)
 8017f58:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	3340      	adds	r3, #64	@ 0x40
 8017f66:	461a      	mov	r2, r3
 8017f68:	2107      	movs	r1, #7
 8017f6a:	68f8      	ldr	r0, [r7, #12]
 8017f6c:	f7ea f9ca 	bl	8002304 <mg_call>
}
 8017f70:	bf00      	nop
 8017f72:	3798      	adds	r7, #152	@ 0x98
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}
 8017f78:	08025c30 	.word	0x08025c30
 8017f7c:	08025c3c 	.word	0x08025c3c
 8017f80:	08025c50 	.word	0x08025c50
 8017f84:	08017d41 	.word	0x08017d41

08017f88 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b08c      	sub	sp, #48	@ 0x30
 8017f8c:	af02      	add	r7, sp, #8
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	3388      	adds	r3, #136	@ 0x88
 8017f98:	627b      	str	r3, [r7, #36]	@ 0x24

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0) {
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	2b0a      	cmp	r3, #10
 8017f9e:	d160      	bne.n	8018062 <handle_uploads+0xda>
 8017fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d15c      	bne.n	8018062 <handle_uploads+0xda>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	623b      	str	r3, [r7, #32]
    struct apihandler *h = find_handler(hm);
 8017fac:	6a38      	ldr	r0, [r7, #32]
 8017fae:	f7ff fcd3 	bl	8017958 <find_handler>
 8017fb2:	61f8      	str	r0, [r7, #28]
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8017fb4:	6a38      	ldr	r0, [r7, #32]
 8017fb6:	f7ff fd53 	bl	8017a60 <authenticate>
 8017fba:	61b8      	str	r0, [r7, #24]
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) &&
 8017fbc:	f107 0310 	add.w	r3, r7, #16
 8017fc0:	492a      	ldr	r1, [pc, #168]	@ (801806c <handle_uploads+0xe4>)
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7f5 fa68 	bl	800d498 <mg_str_s>
 8017fc8:	6a39      	ldr	r1, [r7, #32]
 8017fca:	2300      	movs	r3, #0
 8017fcc:	9300      	str	r3, [sp, #0]
 8017fce:	f107 0310 	add.w	r3, r7, #16
 8017fd2:	cb0c      	ldmia	r3, {r2, r3}
 8017fd4:	3108      	adds	r1, #8
 8017fd6:	c903      	ldmia	r1, {r0, r1}
 8017fd8:	f7f5 fb68 	bl	800d6ac <mg_match>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d01e      	beq.n	8018020 <handle_uploads+0x98>
 8017fe2:	69bb      	ldr	r3, [r7, #24]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d013      	beq.n	8018010 <handle_uploads+0x88>
        (u == NULL ||
 8017fe8:	69fb      	ldr	r3, [r7, #28]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d018      	beq.n	8018020 <handle_uploads+0x98>
         (h != NULL && (u->level < h->read_level ||
 8017fee:	69bb      	ldr	r3, [r7, #24]
 8017ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	68db      	ldr	r3, [r3, #12]
 8017ff6:	429a      	cmp	r2, r3
 8017ff8:	db0a      	blt.n	8018010 <handle_uploads+0x88>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8017ffa:	6a3b      	ldr	r3, [r7, #32]
 8017ffc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
         (h != NULL && (u->level < h->read_level ||
 8018000:	2b00      	cmp	r3, #0
 8018002:	d00d      	beq.n	8018020 <handle_uploads+0x98>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8018004:	69bb      	ldr	r3, [r7, #24]
 8018006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018008:	69fb      	ldr	r3, [r7, #28]
 801800a:	691b      	ldr	r3, [r3, #16]
 801800c:	429a      	cmp	r2, r3
 801800e:	da07      	bge.n	8018020 <handle_uploads+0x98>
      // MG_INFO(("DENY: %d, %d %d", u->level, h->read_level, h->write_level));
      mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8018010:	4b17      	ldr	r3, [pc, #92]	@ (8018070 <handle_uploads+0xe8>)
 8018012:	4a18      	ldr	r2, [pc, #96]	@ (8018074 <handle_uploads+0xec>)
 8018014:	f240 1193 	movw	r1, #403	@ 0x193
 8018018:	68f8      	ldr	r0, [r7, #12]
 801801a:	f7ec fec3 	bl	8004da4 <mg_http_reply>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
      // OTA/upload endpoints
      prep_upload(c, hm, h->opener, h->closer, h->writer);
    }
  }
}
 801801e:	e020      	b.n	8018062 <handle_uploads+0xda>
        if (h != NULL &&
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d01d      	beq.n	8018062 <handle_uploads+0xda>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8018026:	69fb      	ldr	r3, [r7, #28]
 8018028:	685b      	ldr	r3, [r3, #4]
 801802a:	4913      	ldr	r1, [pc, #76]	@ (8018078 <handle_uploads+0xf0>)
 801802c:	4618      	mov	r0, r3
 801802e:	f7e8 f957 	bl	80002e0 <strcmp>
 8018032:	4603      	mov	r3, r0
        if (h != NULL &&
 8018034:	2b00      	cmp	r3, #0
 8018036:	d008      	beq.n	801804a <handle_uploads+0xc2>
            (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8018038:	69fb      	ldr	r3, [r7, #28]
 801803a:	685b      	ldr	r3, [r3, #4]
 801803c:	490f      	ldr	r1, [pc, #60]	@ (801807c <handle_uploads+0xf4>)
 801803e:	4618      	mov	r0, r3
 8018040:	f7e8 f94e 	bl	80002e0 <strcmp>
 8018044:	4603      	mov	r3, r0
 8018046:	2b00      	cmp	r3, #0
 8018048:	d10b      	bne.n	8018062 <handle_uploads+0xda>
      prep_upload(c, hm, h->opener, h->closer, h->writer);
 801804a:	69fb      	ldr	r3, [r7, #28]
 801804c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801804e:	69fb      	ldr	r3, [r7, #28]
 8018050:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018052:	69fb      	ldr	r3, [r7, #28]
 8018054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018056:	9300      	str	r3, [sp, #0]
 8018058:	460b      	mov	r3, r1
 801805a:	6a39      	ldr	r1, [r7, #32]
 801805c:	68f8      	ldr	r0, [r7, #12]
 801805e:	f7ff ff09 	bl	8017e74 <prep_upload>
}
 8018062:	bf00      	nop
 8018064:	3728      	adds	r7, #40	@ 0x28
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}
 801806a:	bf00      	nop
 801806c:	08025c8c 	.word	0x08025c8c
 8018070:	08025c94 	.word	0x08025c94
 8018074:	08025c50 	.word	0x08025c50
 8018078:	08025acc 	.word	0x08025acc
 801807c:	08025abc 	.word	0x08025abc

08018080 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void), void (*start_fn)(void)) {
 8018080:	b580      	push	{r7, lr}
 8018082:	b088      	sub	sp, #32
 8018084:	af02      	add	r7, sp, #8
 8018086:	60f8      	str	r0, [r7, #12]
 8018088:	60b9      	str	r1, [r7, #8]
 801808a:	607a      	str	r2, [r7, #4]
 801808c:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018094:	2b00      	cmp	r3, #0
 8018096:	d017      	beq.n	80180c8 <handle_action+0x48>
    start_fn();
 8018098:	683b      	ldr	r3, [r7, #0]
 801809a:	4798      	blx	r3
    if (check_fn()) {
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	4798      	blx	r3
 80180a0:	4603      	mov	r3, r0
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d009      	beq.n	80180ba <handle_action+0x3a>
      struct action_state *as = (struct action_state *) c->data;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	3388      	adds	r3, #136	@ 0x88
 80180aa:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 80180ac:	697b      	ldr	r3, [r7, #20]
 80180ae:	2241      	movs	r2, #65	@ 0x41
 80180b0:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	687a      	ldr	r2, [r7, #4]
 80180b6:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 80180b8:	e015      	b.n	80180e6 <handle_action+0x66>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 80180ba:	4b0d      	ldr	r3, [pc, #52]	@ (80180f0 <handle_action+0x70>)
 80180bc:	4a0d      	ldr	r2, [pc, #52]	@ (80180f4 <handle_action+0x74>)
 80180be:	21c8      	movs	r1, #200	@ 0xc8
 80180c0:	68f8      	ldr	r0, [r7, #12]
 80180c2:	f7ec fe6f 	bl	8004da4 <mg_http_reply>
}
 80180c6:	e00e      	b.n	80180e6 <handle_action+0x66>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	4798      	blx	r3
 80180cc:	4603      	mov	r3, r0
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d001      	beq.n	80180d6 <handle_action+0x56>
 80180d2:	4b09      	ldr	r3, [pc, #36]	@ (80180f8 <handle_action+0x78>)
 80180d4:	e000      	b.n	80180d8 <handle_action+0x58>
 80180d6:	4b06      	ldr	r3, [pc, #24]	@ (80180f0 <handle_action+0x70>)
 80180d8:	9300      	str	r3, [sp, #0]
 80180da:	4b08      	ldr	r3, [pc, #32]	@ (80180fc <handle_action+0x7c>)
 80180dc:	4a05      	ldr	r2, [pc, #20]	@ (80180f4 <handle_action+0x74>)
 80180de:	21c8      	movs	r1, #200	@ 0xc8
 80180e0:	68f8      	ldr	r0, [r7, #12]
 80180e2:	f7ec fe5f 	bl	8004da4 <mg_http_reply>
}
 80180e6:	bf00      	nop
 80180e8:	3718      	adds	r7, #24
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	08025ca4 	.word	0x08025ca4
 80180f4:	08025c50 	.word	0x08025c50
 80180f8:	08025cac 	.word	0x08025cac
 80180fc:	08025b2c 	.word	0x08025b2c

08018100 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 8018100:	b580      	push	{r7, lr}
 8018102:	b08e      	sub	sp, #56	@ 0x38
 8018104:	af04      	add	r7, sp, #16
 8018106:	60f8      	str	r0, [r7, #12]
 8018108:	60b9      	str	r1, [r7, #8]
 801810a:	607a      	str	r2, [r7, #4]
  struct apihandler *h = va_arg(*ap, struct apihandler *);
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	1d19      	adds	r1, r3, #4
 8018112:	687a      	ldr	r2, [r7, #4]
 8018114:	6011      	str	r1, [r2, #0]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	1d19      	adds	r1, r3, #4
 8018120:	687a      	ldr	r2, [r7, #4]
 8018122:	6011      	str	r1, [r2, #0]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8018128:	2300      	movs	r3, #0
 801812a:	623b      	str	r3, [r7, #32]
  for (i = 0; h->attributes[i].name != NULL; i++) {
 801812c:	2300      	movs	r3, #0
 801812e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018130:	e0bf      	b.n	80182b2 <print_struct+0x1b2>
    char *attrptr = data + h->attributes[i].offset;
 8018132:	69bb      	ldr	r3, [r7, #24]
 8018134:	6999      	ldr	r1, [r3, #24]
 8018136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018138:	4613      	mov	r3, r2
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	4413      	add	r3, r2
 801813e:	00db      	lsls	r3, r3, #3
 8018140:	440b      	add	r3, r1
 8018142:	68db      	ldr	r3, [r3, #12]
 8018144:	697a      	ldr	r2, [r7, #20]
 8018146:	4413      	add	r3, r2
 8018148:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",",
 801814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801814c:	2b00      	cmp	r3, #0
 801814e:	d101      	bne.n	8018154 <print_struct+0x54>
 8018150:	4860      	ldr	r0, [pc, #384]	@ (80182d4 <print_struct+0x1d4>)
 8018152:	e000      	b.n	8018156 <print_struct+0x56>
 8018154:	4860      	ldr	r0, [pc, #384]	@ (80182d8 <print_struct+0x1d8>)
                      MG_ESC(h->attributes[i].name));
 8018156:	69bb      	ldr	r3, [r7, #24]
 8018158:	6999      	ldr	r1, [r3, #24]
 801815a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801815c:	4613      	mov	r3, r2
 801815e:	005b      	lsls	r3, r3, #1
 8018160:	4413      	add	r3, r2
 8018162:	00db      	lsls	r3, r3, #3
 8018164:	440b      	add	r3, r1
 8018166:	681b      	ldr	r3, [r3, #0]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",",
 8018168:	9302      	str	r3, [sp, #8]
 801816a:	2300      	movs	r3, #0
 801816c:	9301      	str	r3, [sp, #4]
 801816e:	4b5b      	ldr	r3, [pc, #364]	@ (80182dc <print_struct+0x1dc>)
 8018170:	9300      	str	r3, [sp, #0]
 8018172:	4603      	mov	r3, r0
 8018174:	4a5a      	ldr	r2, [pc, #360]	@ (80182e0 <print_struct+0x1e0>)
 8018176:	68b9      	ldr	r1, [r7, #8]
 8018178:	68f8      	ldr	r0, [r7, #12]
 801817a:	f7ea fd5a 	bl	8002c32 <mg_xprintf>
 801817e:	4602      	mov	r2, r0
 8018180:	6a3b      	ldr	r3, [r7, #32]
 8018182:	4413      	add	r3, r2
 8018184:	623b      	str	r3, [r7, #32]
    if (strcmp(h->attributes[i].type, "int") == 0) {
 8018186:	69bb      	ldr	r3, [r7, #24]
 8018188:	6999      	ldr	r1, [r3, #24]
 801818a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801818c:	4613      	mov	r3, r2
 801818e:	005b      	lsls	r3, r3, #1
 8018190:	4413      	add	r3, r2
 8018192:	00db      	lsls	r3, r3, #3
 8018194:	440b      	add	r3, r1
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	4952      	ldr	r1, [pc, #328]	@ (80182e4 <print_struct+0x1e4>)
 801819a:	4618      	mov	r0, r3
 801819c:	f7e8 f8a0 	bl	80002e0 <strcmp>
 80181a0:	4603      	mov	r3, r0
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d10b      	bne.n	80181be <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 80181a6:	693b      	ldr	r3, [r7, #16]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	4a4f      	ldr	r2, [pc, #316]	@ (80182e8 <print_struct+0x1e8>)
 80181ac:	68b9      	ldr	r1, [r7, #8]
 80181ae:	68f8      	ldr	r0, [r7, #12]
 80181b0:	f7ea fd3f 	bl	8002c32 <mg_xprintf>
 80181b4:	4602      	mov	r2, r0
 80181b6:	6a3b      	ldr	r3, [r7, #32]
 80181b8:	4413      	add	r3, r2
 80181ba:	623b      	str	r3, [r7, #32]
 80181bc:	e076      	b.n	80182ac <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "double") == 0) {
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	6999      	ldr	r1, [r3, #24]
 80181c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80181c4:	4613      	mov	r3, r2
 80181c6:	005b      	lsls	r3, r3, #1
 80181c8:	4413      	add	r3, r2
 80181ca:	00db      	lsls	r3, r3, #3
 80181cc:	440b      	add	r3, r1
 80181ce:	685b      	ldr	r3, [r3, #4]
 80181d0:	4946      	ldr	r1, [pc, #280]	@ (80182ec <print_struct+0x1ec>)
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7e8 f884 	bl	80002e0 <strcmp>
 80181d8:	4603      	mov	r3, r0
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d11d      	bne.n	801821a <print_struct+0x11a>
      const char *fmt = h->attributes[i].format;
 80181de:	69bb      	ldr	r3, [r7, #24]
 80181e0:	6999      	ldr	r1, [r3, #24]
 80181e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80181e4:	4613      	mov	r3, r2
 80181e6:	005b      	lsls	r3, r3, #1
 80181e8:	4413      	add	r3, r2
 80181ea:	00db      	lsls	r3, r3, #3
 80181ec:	440b      	add	r3, r1
 80181ee:	689b      	ldr	r3, [r3, #8]
 80181f0:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 80181f2:	69fb      	ldr	r3, [r7, #28]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d101      	bne.n	80181fc <print_struct+0xfc>
 80181f8:	4b3d      	ldr	r3, [pc, #244]	@ (80182f0 <print_struct+0x1f0>)
 80181fa:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 80181fc:	693b      	ldr	r3, [r7, #16]
 80181fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018202:	e9cd 2300 	strd	r2, r3, [sp]
 8018206:	69fa      	ldr	r2, [r7, #28]
 8018208:	68b9      	ldr	r1, [r7, #8]
 801820a:	68f8      	ldr	r0, [r7, #12]
 801820c:	f7ea fd11 	bl	8002c32 <mg_xprintf>
 8018210:	4602      	mov	r2, r0
 8018212:	6a3b      	ldr	r3, [r7, #32]
 8018214:	4413      	add	r3, r2
 8018216:	623b      	str	r3, [r7, #32]
 8018218:	e048      	b.n	80182ac <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "bool") == 0) {
 801821a:	69bb      	ldr	r3, [r7, #24]
 801821c:	6999      	ldr	r1, [r3, #24]
 801821e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018220:	4613      	mov	r3, r2
 8018222:	005b      	lsls	r3, r3, #1
 8018224:	4413      	add	r3, r2
 8018226:	00db      	lsls	r3, r3, #3
 8018228:	440b      	add	r3, r1
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	4931      	ldr	r1, [pc, #196]	@ (80182f4 <print_struct+0x1f4>)
 801822e:	4618      	mov	r0, r3
 8018230:	f7e8 f856 	bl	80002e0 <strcmp>
 8018234:	4603      	mov	r3, r0
 8018236:	2b00      	cmp	r3, #0
 8018238:	d110      	bne.n	801825c <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d001      	beq.n	8018246 <print_struct+0x146>
 8018242:	4b2d      	ldr	r3, [pc, #180]	@ (80182f8 <print_struct+0x1f8>)
 8018244:	e000      	b.n	8018248 <print_struct+0x148>
 8018246:	4b2d      	ldr	r3, [pc, #180]	@ (80182fc <print_struct+0x1fc>)
 8018248:	4a2d      	ldr	r2, [pc, #180]	@ (8018300 <print_struct+0x200>)
 801824a:	68b9      	ldr	r1, [r7, #8]
 801824c:	68f8      	ldr	r0, [r7, #12]
 801824e:	f7ea fcf0 	bl	8002c32 <mg_xprintf>
 8018252:	4602      	mov	r2, r0
 8018254:	6a3b      	ldr	r3, [r7, #32]
 8018256:	4413      	add	r3, r2
 8018258:	623b      	str	r3, [r7, #32]
 801825a:	e027      	b.n	80182ac <print_struct+0x1ac>
    } else if (strcmp(h->attributes[i].type, "string") == 0) {
 801825c:	69bb      	ldr	r3, [r7, #24]
 801825e:	6999      	ldr	r1, [r3, #24]
 8018260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018262:	4613      	mov	r3, r2
 8018264:	005b      	lsls	r3, r3, #1
 8018266:	4413      	add	r3, r2
 8018268:	00db      	lsls	r3, r3, #3
 801826a:	440b      	add	r3, r1
 801826c:	685b      	ldr	r3, [r3, #4]
 801826e:	4925      	ldr	r1, [pc, #148]	@ (8018304 <print_struct+0x204>)
 8018270:	4618      	mov	r0, r3
 8018272:	f7e8 f835 	bl	80002e0 <strcmp>
 8018276:	4603      	mov	r3, r0
 8018278:	2b00      	cmp	r3, #0
 801827a:	d10e      	bne.n	801829a <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 801827c:	693b      	ldr	r3, [r7, #16]
 801827e:	9301      	str	r3, [sp, #4]
 8018280:	2300      	movs	r3, #0
 8018282:	9300      	str	r3, [sp, #0]
 8018284:	4b15      	ldr	r3, [pc, #84]	@ (80182dc <print_struct+0x1dc>)
 8018286:	4a20      	ldr	r2, [pc, #128]	@ (8018308 <print_struct+0x208>)
 8018288:	68b9      	ldr	r1, [r7, #8]
 801828a:	68f8      	ldr	r0, [r7, #12]
 801828c:	f7ea fcd1 	bl	8002c32 <mg_xprintf>
 8018290:	4602      	mov	r2, r0
 8018292:	6a3b      	ldr	r3, [r7, #32]
 8018294:	4413      	add	r3, r2
 8018296:	623b      	str	r3, [r7, #32]
 8018298:	e008      	b.n	80182ac <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 801829a:	4a1c      	ldr	r2, [pc, #112]	@ (801830c <print_struct+0x20c>)
 801829c:	68b9      	ldr	r1, [r7, #8]
 801829e:	68f8      	ldr	r0, [r7, #12]
 80182a0:	f7ea fcc7 	bl	8002c32 <mg_xprintf>
 80182a4:	4602      	mov	r2, r0
 80182a6:	6a3b      	ldr	r3, [r7, #32]
 80182a8:	4413      	add	r3, r2
 80182aa:	623b      	str	r3, [r7, #32]
  for (i = 0; h->attributes[i].name != NULL; i++) {
 80182ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182ae:	3301      	adds	r3, #1
 80182b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80182b2:	69bb      	ldr	r3, [r7, #24]
 80182b4:	6999      	ldr	r1, [r3, #24]
 80182b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80182b8:	4613      	mov	r3, r2
 80182ba:	005b      	lsls	r3, r3, #1
 80182bc:	4413      	add	r3, r2
 80182be:	00db      	lsls	r3, r3, #3
 80182c0:	440b      	add	r3, r1
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	f47f af34 	bne.w	8018132 <print_struct+0x32>
    }
  }
  return len;
 80182ca:	6a3b      	ldr	r3, [r7, #32]
}
 80182cc:	4618      	mov	r0, r3
 80182ce:	3728      	adds	r7, #40	@ 0x28
 80182d0:	46bd      	mov	sp, r7
 80182d2:	bd80      	pop	{r7, pc}
 80182d4:	08025b3c 	.word	0x08025b3c
 80182d8:	08025cb4 	.word	0x08025cb4
 80182dc:	0800c409 	.word	0x0800c409
 80182e0:	08025cb8 	.word	0x08025cb8
 80182e4:	080259c8 	.word	0x080259c8
 80182e8:	08025cc0 	.word	0x08025cc0
 80182ec:	08025a58 	.word	0x08025a58
 80182f0:	08025cc4 	.word	0x08025cc4
 80182f4:	08025a04 	.word	0x08025a04
 80182f8:	08025cac 	.word	0x08025cac
 80182fc:	08025ca4 	.word	0x08025ca4
 8018300:	08025b2c 	.word	0x08025b2c
 8018304:	080259f4 	.word	0x080259f4
 8018308:	08025cc8 	.word	0x08025cc8
 801830c:	08025ccc 	.word	0x08025ccc

08018310 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler *h) {
 8018310:	b580      	push	{r7, lr}
 8018312:	b0a8      	sub	sp, #160	@ 0xa0
 8018314:	af04      	add	r7, sp, #16
 8018316:	60f8      	str	r0, [r7, #12]
 8018318:	60b9      	str	r1, [r7, #8]
 801831a:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018320:	4619      	mov	r1, r3
 8018322:	2001      	movs	r0, #1
 8018324:	f009 fdfa 	bl	8021f1c <calloc>
 8018328:	4603      	mov	r3, r0
 801832a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	69db      	ldr	r3, [r3, #28]
 8018332:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8018336:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801833e:	2b00      	cmp	r3, #0
 8018340:	f000 80d6 	beq.w	80184f0 <handle_object+0x1e0>
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018348:	2b00      	cmp	r3, #0
 801834a:	f000 80d1 	beq.w	80184f0 <handle_object+0x1e0>
    char *tmp = calloc(1, h->data_size);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018352:	4619      	mov	r1, r3
 8018354:	2001      	movs	r0, #1
 8018356:	f009 fde1 	bl	8021f1c <calloc>
 801835a:	4603      	mov	r3, r0
 801835c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018364:	461a      	mov	r2, r3
 8018366:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801836a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801836e:	f00a fa82 	bl	8022876 <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8018372:	2300      	movs	r3, #0
 8018374:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8018378:	e08e      	b.n	8018498 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	6999      	ldr	r1, [r3, #24]
 801837e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8018382:	4613      	mov	r3, r2
 8018384:	005b      	lsls	r3, r3, #1
 8018386:	4413      	add	r3, r2
 8018388:	00db      	lsls	r3, r3, #3
 801838a:	440b      	add	r3, r1
 801838c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 8018390:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	f107 0010 	add.w	r0, r7, #16
 801839a:	4a60      	ldr	r2, [pc, #384]	@ (801851c <handle_object+0x20c>)
 801839c:	2164      	movs	r1, #100	@ 0x64
 801839e:	f7f3 ff4b 	bl	800c238 <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 80183a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	495d      	ldr	r1, [pc, #372]	@ (8018520 <handle_object+0x210>)
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7e7 ff98 	bl	80002e0 <strcmp>
 80183b0:	4603      	mov	r3, r0
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d11c      	bne.n	80183f0 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 80183b6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80183ba:	f107 0210 	add.w	r2, r7, #16
 80183be:	68b9      	ldr	r1, [r7, #8]
 80183c0:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80183c4:	c903      	ldmia	r1, {r0, r1}
 80183c6:	f7ef f896 	bl	80074f6 <mg_json_get_num>
 80183ca:	4603      	mov	r3, r0
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d05e      	beq.n	801848e <handle_object+0x17e>
          int v = (int) d;
 80183d0:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 80183d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80183d8:	ee17 3a90 	vmov	r3, s15
 80183dc:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 80183de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80183e2:	68db      	ldr	r3, [r3, #12]
 80183e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80183e8:	4413      	add	r3, r2
 80183ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80183ec:	601a      	str	r2, [r3, #0]
 80183ee:	e04e      	b.n	801848e <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 80183f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	494b      	ldr	r1, [pc, #300]	@ (8018524 <handle_object+0x214>)
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7e7 ff71 	bl	80002e0 <strcmp>
 80183fe:	4603      	mov	r3, r0
 8018400:	2b00      	cmp	r3, #0
 8018402:	d10e      	bne.n	8018422 <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 8018404:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018408:	68db      	ldr	r3, [r3, #12]
 801840a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801840e:	4413      	add	r3, r2
 8018410:	f107 0210 	add.w	r2, r7, #16
 8018414:	68b9      	ldr	r1, [r7, #8]
 8018416:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801841a:	c903      	ldmia	r1, {r0, r1}
 801841c:	f7ef f8b0 	bl	8007580 <mg_json_get_bool>
 8018420:	e035      	b.n	801848e <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 8018422:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018426:	685b      	ldr	r3, [r3, #4]
 8018428:	493f      	ldr	r1, [pc, #252]	@ (8018528 <handle_object+0x218>)
 801842a:	4618      	mov	r0, r3
 801842c:	f7e7 ff58 	bl	80002e0 <strcmp>
 8018430:	4603      	mov	r3, r0
 8018432:	2b00      	cmp	r3, #0
 8018434:	d10e      	bne.n	8018454 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 8018436:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801843a:	68db      	ldr	r3, [r3, #12]
 801843c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8018440:	4413      	add	r3, r2
 8018442:	f107 0210 	add.w	r2, r7, #16
 8018446:	68b9      	ldr	r1, [r7, #8]
 8018448:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801844c:	c903      	ldmia	r1, {r0, r1}
 801844e:	f7ef f852 	bl	80074f6 <mg_json_get_num>
 8018452:	e01c      	b.n	801848e <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 8018454:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	4934      	ldr	r1, [pc, #208]	@ (801852c <handle_object+0x21c>)
 801845c:	4618      	mov	r0, r3
 801845e:	f7e7 ff3f 	bl	80002e0 <strcmp>
 8018462:	4603      	mov	r3, r0
 8018464:	2b00      	cmp	r3, #0
 8018466:	d112      	bne.n	801848e <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8018468:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801846c:	68db      	ldr	r3, [r3, #12]
 801846e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8018472:	18d0      	adds	r0, r2, r3
 8018474:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018478:	691b      	ldr	r3, [r3, #16]
 801847a:	f107 0210 	add.w	r2, r7, #16
 801847e:	68b9      	ldr	r1, [r7, #8]
 8018480:	9300      	str	r3, [sp, #0]
 8018482:	4603      	mov	r3, r0
 8018484:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8018488:	c903      	ldmia	r1, {r0, r1}
 801848a:	f7ff fabd 	bl	8017a08 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 801848e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018492:	3301      	adds	r3, #1
 8018494:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	6999      	ldr	r1, [r3, #24]
 801849c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80184a0:	4613      	mov	r3, r2
 80184a2:	005b      	lsls	r3, r3, #1
 80184a4:	4413      	add	r3, r2
 80184a6:	00db      	lsls	r3, r3, #3
 80184a8:	440b      	add	r3, r1
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	f47f af64 	bne.w	801837a <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80184b6:	461a      	mov	r2, r3
 80184b8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80184bc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80184c0:	f00a f80b 	bl	80224da <memcmp>
 80184c4:	4603      	mov	r3, r0
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d004      	beq.n	80184d4 <handle_object+0x1c4>
 80184ca:	4b19      	ldr	r3, [pc, #100]	@ (8018530 <handle_object+0x220>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	3301      	adds	r3, #1
 80184d0:	4a17      	ldr	r2, [pc, #92]	@ (8018530 <handle_object+0x220>)
 80184d2:	6013      	str	r3, [r2, #0]
    h->setter(tmp);
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6a1b      	ldr	r3, [r3, #32]
 80184d8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80184dc:	4798      	blx	r3
    free(tmp);
 80184de:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80184e2:	f009 fd3f 	bl	8021f64 <free>
    h->getter(data);  // Re-sync again after setting
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	69db      	ldr	r3, [r3, #28]
 80184ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80184ee:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h, data);
 80184f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80184f4:	9302      	str	r3, [sp, #8]
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	9301      	str	r3, [sp, #4]
 80184fa:	4b0e      	ldr	r3, [pc, #56]	@ (8018534 <handle_object+0x224>)
 80184fc:	9300      	str	r3, [sp, #0]
 80184fe:	4b0e      	ldr	r3, [pc, #56]	@ (8018538 <handle_object+0x228>)
 8018500:	4a0e      	ldr	r2, [pc, #56]	@ (801853c <handle_object+0x22c>)
 8018502:	21c8      	movs	r1, #200	@ 0xc8
 8018504:	68f8      	ldr	r0, [r7, #12]
 8018506:	f7ec fc4d 	bl	8004da4 <mg_http_reply>
  free(data);
 801850a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801850e:	f009 fd29 	bl	8021f64 <free>
}
 8018512:	bf00      	nop
 8018514:	3790      	adds	r7, #144	@ 0x90
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}
 801851a:	bf00      	nop
 801851c:	08025cd4 	.word	0x08025cd4
 8018520:	080259c8 	.word	0x080259c8
 8018524:	08025a04 	.word	0x08025a04
 8018528:	08025a58 	.word	0x08025a58
 801852c:	080259f4 	.word	0x080259f4
 8018530:	24010bd8 	.word	0x24010bd8
 8018534:	08018101 	.word	0x08018101
 8018538:	08025cdc 	.word	0x08025cdc
 801853c:	08025c50 	.word	0x08025c50

08018540 <print_timeseries>:

size_t print_timeseries(void (*out)(char, void *), void *ptr, va_list *ap) {
 8018540:	b580      	push	{r7, lr}
 8018542:	b08e      	sub	sp, #56	@ 0x38
 8018544:	af04      	add	r7, sp, #16
 8018546:	60f8      	str	r0, [r7, #12]
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	607a      	str	r2, [r7, #4]
  uint32_t *timestamps = va_arg(*ap, uint32_t *);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	1d19      	adds	r1, r3, #4
 8018552:	687a      	ldr	r2, [r7, #4]
 8018554:	6011      	str	r1, [r2, #0]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	61fb      	str	r3, [r7, #28]
  double *values = va_arg(*ap, double *);
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	1d19      	adds	r1, r3, #4
 8018560:	687a      	ldr	r2, [r7, #4]
 8018562:	6011      	str	r1, [r2, #0]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	61bb      	str	r3, [r7, #24]
  size_t count = va_arg(*ap, size_t);
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	1d19      	adds	r1, r3, #4
 801856e:	687a      	ldr	r2, [r7, #4]
 8018570:	6011      	str	r1, [r2, #0]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8018576:	2300      	movs	r3, #0
 8018578:	623b      	str	r3, [r7, #32]
  for (i = 0; i < count; i++) {
 801857a:	2300      	movs	r3, #0
 801857c:	627b      	str	r3, [r7, #36]	@ 0x24
 801857e:	e021      	b.n	80185c4 <print_timeseries+0x84>
    const char *comma = i == 0 ? "" : ",";
 8018580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018582:	2b00      	cmp	r3, #0
 8018584:	d101      	bne.n	801858a <print_timeseries+0x4a>
 8018586:	4b14      	ldr	r3, [pc, #80]	@ (80185d8 <print_timeseries+0x98>)
 8018588:	e000      	b.n	801858c <print_timeseries+0x4c>
 801858a:	4b14      	ldr	r3, [pc, #80]	@ (80185dc <print_timeseries+0x9c>)
 801858c:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s[%lu,%g]", comma, timestamps[i], values[i]);
 801858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018590:	009b      	lsls	r3, r3, #2
 8018592:	69fa      	ldr	r2, [r7, #28]
 8018594:	4413      	add	r3, r2
 8018596:	6819      	ldr	r1, [r3, #0]
 8018598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801859a:	00db      	lsls	r3, r3, #3
 801859c:	69ba      	ldr	r2, [r7, #24]
 801859e:	4413      	add	r3, r2
 80185a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80185a8:	9100      	str	r1, [sp, #0]
 80185aa:	693b      	ldr	r3, [r7, #16]
 80185ac:	4a0c      	ldr	r2, [pc, #48]	@ (80185e0 <print_timeseries+0xa0>)
 80185ae:	68b9      	ldr	r1, [r7, #8]
 80185b0:	68f8      	ldr	r0, [r7, #12]
 80185b2:	f7ea fb3e 	bl	8002c32 <mg_xprintf>
 80185b6:	4602      	mov	r2, r0
 80185b8:	6a3b      	ldr	r3, [r7, #32]
 80185ba:	4413      	add	r3, r2
 80185bc:	623b      	str	r3, [r7, #32]
  for (i = 0; i < count; i++) {
 80185be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185c0:	3301      	adds	r3, #1
 80185c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80185c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	429a      	cmp	r2, r3
 80185ca:	d3d9      	bcc.n	8018580 <print_timeseries+0x40>
  }
  return len;
 80185cc:	6a3b      	ldr	r3, [r7, #32]
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	3728      	adds	r7, #40	@ 0x28
 80185d2:	46bd      	mov	sp, r7
 80185d4:	bd80      	pop	{r7, pc}
 80185d6:	bf00      	nop
 80185d8:	08025b3c 	.word	0x08025b3c
 80185dc:	08025cb4 	.word	0x08025cb4
 80185e0:	08025ce4 	.word	0x08025ce4

080185e4 <handle_graph>:

static void handle_graph(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler *h) {
 80185e4:	b5b0      	push	{r4, r5, r7, lr}
 80185e6:	b0c8      	sub	sp, #288	@ 0x120
 80185e8:	af04      	add	r7, sp, #16
 80185ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80185ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80185f2:	6018      	str	r0, [r3, #0]
 80185f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80185f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80185fc:	6019      	str	r1, [r3, #0]
 80185fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018602:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018606:	601a      	str	r2, [r3, #0]
  long from = mg_json_get_long(hm->body, "$.from", 0);
 8018608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801860c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8018610:	6819      	ldr	r1, [r3, #0]
 8018612:	2300      	movs	r3, #0
 8018614:	4a21      	ldr	r2, [pc, #132]	@ (801869c <handle_graph+0xb8>)
 8018616:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801861a:	c903      	ldmia	r1, {r0, r1}
 801861c:	f7ef f87a 	bl	8007714 <mg_json_get_long>
 8018620:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  long to = mg_json_get_long(hm->body, "$.to", 0);
 8018624:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801862c:	6819      	ldr	r1, [r3, #0]
 801862e:	2300      	movs	r3, #0
 8018630:	4a1b      	ldr	r2, [pc, #108]	@ (80186a0 <handle_graph+0xbc>)
 8018632:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8018636:	c903      	ldmia	r1, {r0, r1}
 8018638:	f7ef f86c 	bl	8007714 <mg_json_get_long>
 801863c:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  uint32_t timestamps[20];
  double values[sizeof(timestamps) / sizeof(timestamps[0])];
  size_t count = h->grapher(from, to, timestamps, values,
 8018640:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018644:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 801864c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8018650:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8018654:	f107 0310 	add.w	r3, r7, #16
 8018658:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 801865c:	2514      	movs	r5, #20
 801865e:	9500      	str	r5, [sp, #0]
 8018660:	47a0      	blx	r4
 8018662:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
                            sizeof(timestamps) / sizeof(timestamps[0]));
  mg_http_reply(c, 200, JSON_HEADERS, "[%M]\n", print_timeseries, timestamps,
 8018666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801866a:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 801866e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018672:	9303      	str	r3, [sp, #12]
 8018674:	f107 0310 	add.w	r3, r7, #16
 8018678:	9302      	str	r3, [sp, #8]
 801867a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 801867e:	9301      	str	r3, [sp, #4]
 8018680:	4b08      	ldr	r3, [pc, #32]	@ (80186a4 <handle_graph+0xc0>)
 8018682:	9300      	str	r3, [sp, #0]
 8018684:	4b08      	ldr	r3, [pc, #32]	@ (80186a8 <handle_graph+0xc4>)
 8018686:	4a09      	ldr	r2, [pc, #36]	@ (80186ac <handle_graph+0xc8>)
 8018688:	21c8      	movs	r1, #200	@ 0xc8
 801868a:	6800      	ldr	r0, [r0, #0]
 801868c:	f7ec fb8a 	bl	8004da4 <mg_http_reply>
                values, count);
}
 8018690:	bf00      	nop
 8018692:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8018696:	46bd      	mov	sp, r7
 8018698:	bdb0      	pop	{r4, r5, r7, pc}
 801869a:	bf00      	nop
 801869c:	08025cf0 	.word	0x08025cf0
 80186a0:	08025cf8 	.word	0x08025cf8
 80186a4:	08018541 	.word	0x08018541
 80186a8:	08025d00 	.word	0x08025d00
 80186ac:	08025c50 	.word	0x08025c50

080186b0 <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b086      	sub	sp, #24
 80186b4:	af02      	add	r7, sp, #8
 80186b6:	60f8      	str	r0, [r7, #12]
 80186b8:	60b9      	str	r1, [r7, #8]
 80186ba:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0) {
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	685b      	ldr	r3, [r3, #4]
 80186c0:	491d      	ldr	r1, [pc, #116]	@ (8018738 <handle_api_call+0x88>)
 80186c2:	4618      	mov	r0, r3
 80186c4:	f7e7 fe0c 	bl	80002e0 <strcmp>
 80186c8:	4603      	mov	r3, r0
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d105      	bne.n	80186da <handle_api_call+0x2a>
    handle_object(c, hm, h);
 80186ce:	687a      	ldr	r2, [r7, #4]
 80186d0:	68b9      	ldr	r1, [r7, #8]
 80186d2:	68f8      	ldr	r0, [r7, #12]
 80186d4:	f7ff fe1c 	bl	8018310 <handle_object>
  } else if (strcmp(h->type, "graph") == 0) {
    handle_graph(c, hm, h);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 80186d8:	e02a      	b.n	8018730 <handle_api_call+0x80>
  } else if (strcmp(h->type, "action") == 0) {
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	685b      	ldr	r3, [r3, #4]
 80186de:	4917      	ldr	r1, [pc, #92]	@ (801873c <handle_api_call+0x8c>)
 80186e0:	4618      	mov	r0, r3
 80186e2:	f7e7 fdfd 	bl	80002e0 <strcmp>
 80186e6:	4603      	mov	r3, r0
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d108      	bne.n	80186fe <handle_api_call+0x4e>
    handle_action(c, hm, h->checker, h->starter);
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80186f4:	68b9      	ldr	r1, [r7, #8]
 80186f6:	68f8      	ldr	r0, [r7, #12]
 80186f8:	f7ff fcc2 	bl	8018080 <handle_action>
}
 80186fc:	e018      	b.n	8018730 <handle_api_call+0x80>
  } else if (strcmp(h->type, "graph") == 0) {
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	685b      	ldr	r3, [r3, #4]
 8018702:	490f      	ldr	r1, [pc, #60]	@ (8018740 <handle_api_call+0x90>)
 8018704:	4618      	mov	r0, r3
 8018706:	f7e7 fdeb 	bl	80002e0 <strcmp>
 801870a:	4603      	mov	r3, r0
 801870c:	2b00      	cmp	r3, #0
 801870e:	d105      	bne.n	801871c <handle_api_call+0x6c>
    handle_graph(c, hm, h);
 8018710:	687a      	ldr	r2, [r7, #4]
 8018712:	68b9      	ldr	r1, [r7, #8]
 8018714:	68f8      	ldr	r0, [r7, #12]
 8018716:	f7ff ff65 	bl	80185e4 <handle_graph>
}
 801871a:	e009      	b.n	8018730 <handle_api_call+0x80>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	9300      	str	r3, [sp, #0]
 8018722:	4b08      	ldr	r3, [pc, #32]	@ (8018744 <handle_api_call+0x94>)
 8018724:	4a08      	ldr	r2, [pc, #32]	@ (8018748 <handle_api_call+0x98>)
 8018726:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801872a:	68f8      	ldr	r0, [r7, #12]
 801872c:	f7ec fb3a 	bl	8004da4 <mg_http_reply>
}
 8018730:	bf00      	nop
 8018732:	3710      	adds	r7, #16
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	08025aec 	.word	0x08025aec
 801873c:	08025aa4 	.word	0x08025aa4
 8018740:	08025adc 	.word	0x08025adc
 8018744:	08025d08 	.word	0x08025d08
 8018748:	08025c50 	.word	0x08025c50

0801874c <http_ev_handler>:
  s_device_change_version++;
}
#endif  // WIZARD_ENABLE_HTTP_UI

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801874c:	b580      	push	{r7, lr}
 801874e:	b0a8      	sub	sp, #160	@ 0xa0
 8018750:	af04      	add	r7, sp, #16
 8018752:	6178      	str	r0, [r7, #20]
 8018754:	6139      	str	r1, [r7, #16]
 8018756:	60fa      	str	r2, [r7, #12]
#if WIZARD_ENABLE_HTTP_UI
  handle_uploads(c, ev, ev_data);
 8018758:	68fa      	ldr	r2, [r7, #12]
 801875a:	6939      	ldr	r1, [r7, #16]
 801875c:	6978      	ldr	r0, [r7, #20]
 801875e:	f7ff fc13 	bl	8017f88 <handle_uploads>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 8018762:	693b      	ldr	r3, [r7, #16]
 8018764:	2b02      	cmp	r3, #2
 8018766:	d120      	bne.n	80187aa <http_ev_handler+0x5e>
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801876e:	2b41      	cmp	r3, #65	@ 0x41
 8018770:	d11b      	bne.n	80187aa <http_ev_handler+0x5e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	3388      	adds	r3, #136	@ 0x88
 8018776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (as->fn() == false) {
 801877a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801877e:	685b      	ldr	r3, [r3, #4]
 8018780:	4798      	blx	r3
 8018782:	4603      	mov	r3, r0
 8018784:	f083 0301 	eor.w	r3, r3, #1
 8018788:	b2db      	uxtb	r3, r3
 801878a:	2b00      	cmp	r3, #0
 801878c:	f000 8120 	beq.w	80189d0 <http_ev_handler+0x284>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 8018790:	4b92      	ldr	r3, [pc, #584]	@ (80189dc <http_ev_handler+0x290>)
 8018792:	4a93      	ldr	r2, [pc, #588]	@ (80189e0 <http_ev_handler+0x294>)
 8018794:	21c8      	movs	r1, #200	@ 0xc8
 8018796:	6978      	ldr	r0, [r7, #20]
 8018798:	f7ec fb04 	bl	8004da4 <mg_http_reply>
      memset(as, 0, sizeof(*as));
 801879c:	2208      	movs	r2, #8
 801879e:	2100      	movs	r1, #0
 80187a0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80187a4:	f009 fec3 	bl	802252e <memset>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 80187a8:	e112      	b.n	80189d0 <http_ev_handler+0x284>
    }
  } else
#endif
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	2b0b      	cmp	r3, #11
 80187ae:	f040 80e2 	bne.w	8018976 <http_ev_handler+0x22a>
 80187b2:	697b      	ldr	r3, [r7, #20]
 80187b4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80187b8:	2b55      	cmp	r3, #85	@ 0x55
 80187ba:	f000 80dc 	beq.w	8018976 <http_ev_handler+0x22a>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
#if WIZARD_ENABLE_HTTP_UI
    struct apihandler *h = find_handler(hm);
 80187c4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80187c8:	f7ff f8c6 	bl	8017958 <find_handler>
 80187cc:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 80187d0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80187d4:	f7ff f944 	bl	8017a60 <authenticate>
 80187d8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) &&
 80187dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80187e0:	4980      	ldr	r1, [pc, #512]	@ (80189e4 <http_ev_handler+0x298>)
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7f4 fe58 	bl	800d498 <mg_str_s>
 80187e8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80187ec:	2300      	movs	r3, #0
 80187ee:	9300      	str	r3, [sp, #0]
 80187f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80187f4:	cb0c      	ldmia	r3, {r2, r3}
 80187f6:	3108      	adds	r1, #8
 80187f8:	c903      	ldmia	r1, {r0, r1}
 80187fa:	f7f4 ff57 	bl	800d6ac <mg_match>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b00      	cmp	r3, #0
 8018802:	d025      	beq.n	8018850 <http_ev_handler+0x104>
 8018804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018808:	2b00      	cmp	r3, #0
 801880a:	d019      	beq.n	8018840 <http_ev_handler+0xf4>
        (u == NULL ||
 801880c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018810:	2b00      	cmp	r3, #0
 8018812:	d01d      	beq.n	8018850 <http_ev_handler+0x104>
         (h != NULL && (u->level < h->read_level ||
 8018814:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018818:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801881a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801881e:	68db      	ldr	r3, [r3, #12]
 8018820:	429a      	cmp	r2, r3
 8018822:	db0d      	blt.n	8018840 <http_ev_handler+0xf4>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8018824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018828:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
         (h != NULL && (u->level < h->read_level ||
 801882c:	2b00      	cmp	r3, #0
 801882e:	d00f      	beq.n	8018850 <http_ev_handler+0x104>
                        (hm->body.len > 0 && u->level < h->write_level))))) {
 8018830:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018836:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801883a:	691b      	ldr	r3, [r3, #16]
 801883c:	429a      	cmp	r2, r3
 801883e:	da07      	bge.n	8018850 <http_ev_handler+0x104>
      // MG_INFO(("DENY: %d, %d %d", u->level, h->read_level, h->write_level));
      mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8018840:	4b69      	ldr	r3, [pc, #420]	@ (80189e8 <http_ev_handler+0x29c>)
 8018842:	4a67      	ldr	r2, [pc, #412]	@ (80189e0 <http_ev_handler+0x294>)
 8018844:	f240 1193 	movw	r1, #403	@ 0x193
 8018848:	6978      	ldr	r0, [r7, #20]
 801884a:	f7ec faab 	bl	8004da4 <mg_http_reply>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 801884e:	e0c0      	b.n	80189d2 <http_ev_handler+0x286>
    } else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8018850:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8018854:	4965      	ldr	r1, [pc, #404]	@ (80189ec <http_ev_handler+0x2a0>)
 8018856:	4618      	mov	r0, r3
 8018858:	f7f4 fe1e 	bl	800d498 <mg_str_s>
 801885c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8018860:	2300      	movs	r3, #0
 8018862:	9300      	str	r3, [sp, #0]
 8018864:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8018868:	cb0c      	ldmia	r3, {r2, r3}
 801886a:	3108      	adds	r1, #8
 801886c:	c903      	ldmia	r1, {r0, r1}
 801886e:	f7f4 ff1d 	bl	800d6ac <mg_match>
 8018872:	4603      	mov	r3, r0
 8018874:	2b00      	cmp	r3, #0
 8018876:	d005      	beq.n	8018884 <http_ev_handler+0x138>
      handle_login(c, u);
 8018878:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801887c:	6978      	ldr	r0, [r7, #20]
 801887e:	f7ff f997 	bl	8017bb0 <handle_login>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 8018882:	e0a6      	b.n	80189d2 <http_ev_handler+0x286>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8018884:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8018888:	4959      	ldr	r1, [pc, #356]	@ (80189f0 <http_ev_handler+0x2a4>)
 801888a:	4618      	mov	r0, r3
 801888c:	f7f4 fe04 	bl	800d498 <mg_str_s>
 8018890:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8018894:	2300      	movs	r3, #0
 8018896:	9300      	str	r3, [sp, #0]
 8018898:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801889c:	cb0c      	ldmia	r3, {r2, r3}
 801889e:	3108      	adds	r1, #8
 80188a0:	c903      	ldmia	r1, {r0, r1}
 80188a2:	f7f4 ff03 	bl	800d6ac <mg_match>
 80188a6:	4603      	mov	r3, r0
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d003      	beq.n	80188b4 <http_ev_handler+0x168>
      handle_logout(c);
 80188ac:	6978      	ldr	r0, [r7, #20]
 80188ae:	f7ff f9ed 	bl	8017c8c <handle_logout>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 80188b2:	e08e      	b.n	80189d2 <http_ev_handler+0x286>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 80188b4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80188b8:	494e      	ldr	r1, [pc, #312]	@ (80189f4 <http_ev_handler+0x2a8>)
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7f4 fdec 	bl	800d498 <mg_str_s>
 80188c0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80188c4:	2300      	movs	r3, #0
 80188c6:	9300      	str	r3, [sp, #0]
 80188c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80188cc:	cb0c      	ldmia	r3, {r2, r3}
 80188ce:	3108      	adds	r1, #8
 80188d0:	c903      	ldmia	r1, {r0, r1}
 80188d2:	f7f4 feeb 	bl	800d6ac <mg_match>
 80188d6:	4603      	mov	r3, r0
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d006      	beq.n	80188ea <http_ev_handler+0x19e>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 80188dc:	4b46      	ldr	r3, [pc, #280]	@ (80189f8 <http_ev_handler+0x2ac>)
 80188de:	4a40      	ldr	r2, [pc, #256]	@ (80189e0 <http_ev_handler+0x294>)
 80188e0:	21c8      	movs	r1, #200	@ 0xc8
 80188e2:	6978      	ldr	r0, [r7, #20]
 80188e4:	f7ec fa5e 	bl	8004da4 <mg_http_reply>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 80188e8:	e073      	b.n	80189d2 <http_ev_handler+0x286>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 80188ea:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80188ee:	4943      	ldr	r1, [pc, #268]	@ (80189fc <http_ev_handler+0x2b0>)
 80188f0:	4618      	mov	r0, r3
 80188f2:	f7f4 fdd1 	bl	800d498 <mg_str_s>
 80188f6:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80188fa:	2300      	movs	r3, #0
 80188fc:	9300      	str	r3, [sp, #0]
 80188fe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018902:	cb0c      	ldmia	r3, {r2, r3}
 8018904:	3108      	adds	r1, #8
 8018906:	c903      	ldmia	r1, {r0, r1}
 8018908:	f7f4 fed0 	bl	800d6ac <mg_match>
 801890c:	4603      	mov	r3, r0
 801890e:	2b00      	cmp	r3, #0
 8018910:	d00f      	beq.n	8018932 <http_ev_handler+0x1e6>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 8018912:	4b3b      	ldr	r3, [pc, #236]	@ (8018a00 <http_ev_handler+0x2b4>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	9303      	str	r3, [sp, #12]
 8018918:	4b3a      	ldr	r3, [pc, #232]	@ (8018a04 <http_ev_handler+0x2b8>)
 801891a:	9302      	str	r3, [sp, #8]
 801891c:	2300      	movs	r3, #0
 801891e:	9301      	str	r3, [sp, #4]
 8018920:	4b39      	ldr	r3, [pc, #228]	@ (8018a08 <http_ev_handler+0x2bc>)
 8018922:	9300      	str	r3, [sp, #0]
 8018924:	4b39      	ldr	r3, [pc, #228]	@ (8018a0c <http_ev_handler+0x2c0>)
 8018926:	4a2e      	ldr	r2, [pc, #184]	@ (80189e0 <http_ev_handler+0x294>)
 8018928:	21c8      	movs	r1, #200	@ 0xc8
 801892a:	6978      	ldr	r0, [r7, #20]
 801892c:	f7ec fa3a 	bl	8004da4 <mg_http_reply>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 8018930:	e04f      	b.n	80189d2 <http_ev_handler+0x286>
                    s_device_change_version);
    } else if (h != NULL) {
 8018932:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018936:	2b00      	cmp	r3, #0
 8018938:	d007      	beq.n	801894a <http_ev_handler+0x1fe>
      handle_api_call(c, hm, h);
 801893a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801893e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8018942:	6978      	ldr	r0, [r7, #20]
 8018944:	f7ff feb4 	bl	80186b0 <handle_api_call>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 8018948:	e043      	b.n	80189d2 <http_ev_handler+0x286>
    } else
#endif  // WIZARD_ENABLE_HTTP_UI
    {
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 801894a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801894e:	2218      	movs	r2, #24
 8018950:	2100      	movs	r1, #0
 8018952:	4618      	mov	r0, r3
 8018954:	f009 fdeb 	bl	802252e <memset>
      opts.root_dir = "/web_root/";
 8018958:	4b2d      	ldr	r3, [pc, #180]	@ (8018a10 <http_ev_handler+0x2c4>)
 801895a:	643b      	str	r3, [r7, #64]	@ 0x40
      opts.fs = &mg_fs_packed;
 801895c:	4b2d      	ldr	r3, [pc, #180]	@ (8018a14 <http_ev_handler+0x2c8>)
 801895e:	657b      	str	r3, [r7, #84]	@ 0x54
      opts.extra_headers = NO_CACHE_HEADERS;
 8018960:	4b2d      	ldr	r3, [pc, #180]	@ (8018a18 <http_ev_handler+0x2cc>)
 8018962:	64bb      	str	r3, [r7, #72]	@ 0x48
      mg_http_serve_dir(c, hm, &opts);
 8018964:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018968:	461a      	mov	r2, r3
 801896a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801896e:	6978      	ldr	r0, [r7, #20]
 8018970:	f7ed f906 	bl	8005b80 <mg_http_serve_dir>
      if (ev == MG_EV_HTTP_MSG && c->data[0] != 'U') {
 8018974:	e02d      	b.n	80189d2 <http_ev_handler+0x286>
    }
    // Show this request
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s", c->id, hm->method.len,
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9]));
  } else if (ev == MG_EV_ACCEPT) {
 8018976:	693b      	ldr	r3, [r7, #16]
 8018978:	2b05      	cmp	r3, #5
 801897a:	d12a      	bne.n	80189d2 <http_ev_handler+0x286>
    if (c->fn_data != NULL) {  // TLS listener
 801897c:	697b      	ldr	r3, [r7, #20]
 801897e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018980:	2b00      	cmp	r3, #0
 8018982:	d026      	beq.n	80189d2 <http_ev_handler+0x286>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 8018984:	f107 031c 	add.w	r3, r7, #28
 8018988:	2224      	movs	r2, #36	@ 0x24
 801898a:	2100      	movs	r1, #0
 801898c:	4618      	mov	r0, r3
 801898e:	f009 fdce 	bl	802252e <memset>
      opts.cert = mg_str(TLS_CERT);
 8018992:	463b      	mov	r3, r7
 8018994:	4921      	ldr	r1, [pc, #132]	@ (8018a1c <http_ev_handler+0x2d0>)
 8018996:	4618      	mov	r0, r3
 8018998:	f7f4 fd7e 	bl	800d498 <mg_str_s>
 801899c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189a0:	463a      	mov	r2, r7
 80189a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189a6:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 80189aa:	463b      	mov	r3, r7
 80189ac:	491c      	ldr	r1, [pc, #112]	@ (8018a20 <http_ev_handler+0x2d4>)
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7f4 fd72 	bl	800d498 <mg_str_s>
 80189b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80189b8:	463a      	mov	r2, r7
 80189ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189be:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 80189c2:	f107 031c 	add.w	r3, r7, #28
 80189c6:	4619      	mov	r1, r3
 80189c8:	6978      	ldr	r0, [r7, #20]
 80189ca:	f7f7 feaf 	bl	801072c <mg_tls_init>
    }
  }
}
 80189ce:	e000      	b.n	80189d2 <http_ev_handler+0x286>
  if (ev == MG_EV_POLL && c->data[0] == 'A') {
 80189d0:	bf00      	nop
}
 80189d2:	bf00      	nop
 80189d4:	3790      	adds	r7, #144	@ 0x90
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	08025cac 	.word	0x08025cac
 80189e0:	08025c50 	.word	0x08025c50
 80189e4:	08025c8c 	.word	0x08025c8c
 80189e8:	08025c94 	.word	0x08025c94
 80189ec:	08025d20 	.word	0x08025d20
 80189f0:	08025d2c 	.word	0x08025d2c
 80189f4:	08025d38 	.word	0x08025d38
 80189f8:	08025d40 	.word	0x08025d40
 80189fc:	08025d48 	.word	0x08025d48
 8018a00:	24010bd8 	.word	0x24010bd8
 8018a04:	080259ec 	.word	0x080259ec
 8018a08:	0800c409 	.word	0x0800c409
 8018a0c:	08025d58 	.word	0x08025d58
 8018a10:	08025d64 	.word	0x08025d64
 8018a14:	24000008 	.word	0x24000008
 8018a18:	08025d70 	.word	0x08025d70
 8018a1c:	08025d8c 	.word	0x08025d8c
 8018a20:	08025f68 	.word	0x08025f68

08018a24 <sntp_ev_handler>:
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS

#if WIZARD_ENABLE_SNTP
static uint64_t s_sntp_timer = 0;
bool s_sntp_response_received = false;
static void sntp_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8018a24:	b5b0      	push	{r4, r5, r7, lr}
 8018a26:	b086      	sub	sp, #24
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	60f8      	str	r0, [r7, #12]
 8018a2c:	60b9      	str	r1, [r7, #8]
 8018a2e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 8018a30:	68bb      	ldr	r3, [r7, #8]
 8018a32:	2b12      	cmp	r3, #18
 8018a34:	d115      	bne.n	8018a62 <sntp_ev_handler+0x3e>
    uint64_t t = *(uint64_t *) ev_data;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    glue_sntp_on_time(t);
 8018a40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8018a44:	f7fe fd3c 	bl	80174c0 <glue_sntp_on_time>
    s_sntp_response_received = true;
 8018a48:	4b08      	ldr	r3, [pc, #32]	@ (8018a6c <sntp_ev_handler+0x48>)
 8018a4a:	2201      	movs	r2, #1
 8018a4c:	701a      	strb	r2, [r3, #0]
    s_sntp_timer += (WIZARD_SNTP_INTERVAL_SECONDS) * 1000;
 8018a4e:	4b08      	ldr	r3, [pc, #32]	@ (8018a70 <sntp_ev_handler+0x4c>)
 8018a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a54:	4907      	ldr	r1, [pc, #28]	@ (8018a74 <sntp_ev_handler+0x50>)
 8018a56:	1854      	adds	r4, r2, r1
 8018a58:	f143 0500 	adc.w	r5, r3, #0
 8018a5c:	4b04      	ldr	r3, [pc, #16]	@ (8018a70 <sntp_ev_handler+0x4c>)
 8018a5e:	e9c3 4500 	strd	r4, r5, [r3]
  }
  (void) c;
}
 8018a62:	bf00      	nop
 8018a64:	3718      	adds	r7, #24
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bdb0      	pop	{r4, r5, r7, pc}
 8018a6a:	bf00      	nop
 8018a6c:	24010be8 	.word	0x24010be8
 8018a70:	24010be0 	.word	0x24010be0
 8018a74:	0036ee80 	.word	0x0036ee80

08018a78 <sntp_timer>:

static void sntp_timer(void *param) {
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b086      	sub	sp, #24
 8018a7c:	af02      	add	r7, sp, #8
 8018a7e:	6078      	str	r0, [r7, #4]
  // uint64_t t1 = mg_now(), t2 = mg_millis();
  uint64_t timeout = (WIZARD_SNTP_INTERVAL_SECONDS) * 1000;
 8018a80:	4a14      	ldr	r2, [pc, #80]	@ (8018ad4 <sntp_timer+0x5c>)
 8018a82:	f04f 0300 	mov.w	r3, #0
 8018a86:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (s_sntp_response_received == false) timeout = 1000;
 8018a8a:	4b13      	ldr	r3, [pc, #76]	@ (8018ad8 <sntp_timer+0x60>)
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	f083 0301 	eor.w	r3, r3, #1
 8018a92:	b2db      	uxtb	r3, r3
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d005      	beq.n	8018aa4 <sntp_timer+0x2c>
 8018a98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018a9c:	f04f 0300 	mov.w	r3, #0
 8018aa0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // This function is called every second. Once we received a response,
  // trigger SNTP sync less frequently, as set by the define
  if (mg_timer_expired(&s_sntp_timer, timeout, mg_millis())) {
 8018aa4:	f7e8 f904 	bl	8000cb0 <mg_millis>
 8018aa8:	4602      	mov	r2, r0
 8018aaa:	460b      	mov	r3, r1
 8018aac:	e9cd 2300 	strd	r2, r3, [sp]
 8018ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018ab4:	4809      	ldr	r0, [pc, #36]	@ (8018adc <sntp_timer+0x64>)
 8018ab6:	f7f5 f9a9 	bl	800de0c <mg_timer_expired>
 8018aba:	4603      	mov	r3, r0
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d005      	beq.n	8018acc <sntp_timer+0x54>
    mg_sntp_connect(param, WIZARD_SNTP_URL, sntp_ev_handler, NULL);
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	4a07      	ldr	r2, [pc, #28]	@ (8018ae0 <sntp_timer+0x68>)
 8018ac4:	4907      	ldr	r1, [pc, #28]	@ (8018ae4 <sntp_timer+0x6c>)
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	f7f4 fca8 	bl	800d41c <mg_sntp_connect>
  }
}
 8018acc:	bf00      	nop
 8018ace:	3710      	adds	r7, #16
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd80      	pop	{r7, pc}
 8018ad4:	0036ee80 	.word	0x0036ee80
 8018ad8:	24010be8 	.word	0x24010be8
 8018adc:	24010be0 	.word	0x24010be0
 8018ae0:	08018a25 	.word	0x08018a25
 8018ae4:	0802604c 	.word	0x0802604c

08018ae8 <mqtt_event_handler>:
#endif  // WIZARD_ENABLE_SNTP

#if WIZARD_ENABLE_MQTT
struct mg_connection *g_mqtt_conn;  // MQTT client connection

static void mqtt_event_handler(struct mg_connection *c, int ev, void *ev_data) {
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b088      	sub	sp, #32
 8018aec:	af02      	add	r7, sp, #8
 8018aee:	60f8      	str	r0, [r7, #12]
 8018af0:	60b9      	str	r1, [r7, #8]
 8018af2:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_CONNECT) {
 8018af4:	68bb      	ldr	r3, [r7, #8]
 8018af6:	2b04      	cmp	r3, #4
 8018af8:	d103      	bne.n	8018b02 <mqtt_event_handler+0x1a>
    glue_mqtt_tls_init(c);
 8018afa:	68f8      	ldr	r0, [r7, #12]
 8018afc:	f7fe f8f0 	bl	8016ce0 <glue_mqtt_tls_init>
    glue_mqtt_on_message(c, mm->topic, mm->data);
  } else if (ev == MG_EV_CLOSE) {
    MG_DEBUG(("%lu Closing", c->id));
    g_mqtt_conn = NULL;
  }
}
 8018b00:	e026      	b.n	8018b50 <mqtt_event_handler+0x68>
  } else if (ev == MG_EV_MQTT_OPEN) {
 8018b02:	68bb      	ldr	r3, [r7, #8]
 8018b04:	2b11      	cmp	r3, #17
 8018b06:	d106      	bne.n	8018b16 <mqtt_event_handler+0x2e>
    glue_mqtt_on_connect(c, *(int *) ev_data);
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	4619      	mov	r1, r3
 8018b0e:	68f8      	ldr	r0, [r7, #12]
 8018b10:	f7fe f90c 	bl	8016d2c <glue_mqtt_on_connect>
}
 8018b14:	e01c      	b.n	8018b50 <mqtt_event_handler+0x68>
  } else if (ev == MG_EV_MQTT_CMD) {
 8018b16:	68bb      	ldr	r3, [r7, #8]
 8018b18:	2b0f      	cmp	r3, #15
 8018b1a:	d104      	bne.n	8018b26 <mqtt_event_handler+0x3e>
    glue_mqtt_on_cmd(c, ev_data);
 8018b1c:	6879      	ldr	r1, [r7, #4]
 8018b1e:	68f8      	ldr	r0, [r7, #12]
 8018b20:	f7fe fc84 	bl	801742c <glue_mqtt_on_cmd>
}
 8018b24:	e014      	b.n	8018b50 <mqtt_event_handler+0x68>
  } else if (ev == MG_EV_MQTT_MSG) {
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	2b10      	cmp	r3, #16
 8018b2a:	d10b      	bne.n	8018b44 <mqtt_event_handler+0x5c>
    struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	617b      	str	r3, [r7, #20]
    glue_mqtt_on_message(c, mm->topic, mm->data);
 8018b30:	697b      	ldr	r3, [r7, #20]
 8018b32:	697a      	ldr	r2, [r7, #20]
 8018b34:	68d9      	ldr	r1, [r3, #12]
 8018b36:	9100      	str	r1, [sp, #0]
 8018b38:	689b      	ldr	r3, [r3, #8]
 8018b3a:	ca06      	ldmia	r2, {r1, r2}
 8018b3c:	68f8      	ldr	r0, [r7, #12]
 8018b3e:	f7fe f94b 	bl	8016dd8 <glue_mqtt_on_message>
}
 8018b42:	e005      	b.n	8018b50 <mqtt_event_handler+0x68>
  } else if (ev == MG_EV_CLOSE) {
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	2b09      	cmp	r3, #9
 8018b48:	d102      	bne.n	8018b50 <mqtt_event_handler+0x68>
    g_mqtt_conn = NULL;
 8018b4a:	4b03      	ldr	r3, [pc, #12]	@ (8018b58 <mqtt_event_handler+0x70>)
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	601a      	str	r2, [r3, #0]
}
 8018b50:	bf00      	nop
 8018b52:	3718      	adds	r7, #24
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}
 8018b58:	24010bec 	.word	0x24010bec

08018b5c <mqtt_timer>:

static void mqtt_timer(void *arg) {
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b084      	sub	sp, #16
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	60fb      	str	r3, [r7, #12]
  if (g_mqtt_conn == NULL) {
 8018b68:	4b07      	ldr	r3, [pc, #28]	@ (8018b88 <mqtt_timer+0x2c>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d106      	bne.n	8018b7e <mqtt_timer+0x22>
    g_mqtt_conn = glue_mqtt_connect(mgr, mqtt_event_handler);
 8018b70:	4906      	ldr	r1, [pc, #24]	@ (8018b8c <mqtt_timer+0x30>)
 8018b72:	68f8      	ldr	r0, [r7, #12]
 8018b74:	f7fe fc66 	bl	8017444 <glue_mqtt_connect>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	4a03      	ldr	r2, [pc, #12]	@ (8018b88 <mqtt_timer+0x2c>)
 8018b7c:	6013      	str	r3, [r2, #0]
  }
}
 8018b7e:	bf00      	nop
 8018b80:	3710      	adds	r7, #16
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	bf00      	nop
 8018b88:	24010bec 	.word	0x24010bec
 8018b8c:	08018ae9 	.word	0x08018ae9

08018b90 <handle_modbus_pdu>:
#endif  // WIZARD_ENABLE_MQTT

#if WIZARD_ENABLE_MODBUS
static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 8018b90:	b590      	push	{r4, r7, lr}
 8018b92:	b0d1      	sub	sp, #324	@ 0x144
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018b9a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8018b9e:	6018      	str	r0, [r3, #0]
 8018ba0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018ba4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018ba8:	6019      	str	r1, [r3, #0]
 8018baa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018bae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8018bb2:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
  mg_hexdump(buf, len);
 8018bb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018bb8:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8018bbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018bc0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018bc4:	6811      	ldr	r1, [r2, #0]
 8018bc6:	6818      	ldr	r0, [r3, #0]
 8018bc8:	f7ee fe0c 	bl	80077e4 <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 8018bcc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018bd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	2b0b      	cmp	r3, #11
 8018bd8:	f240 8183 	bls.w	8018ee2 <handle_modbus_pdu+0x352>
    MG_ERROR(("PDU too small"));
  } else {
    uint8_t func = buf[7];  // Function
 8018bdc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018be0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	79db      	ldrb	r3, [r3, #7]
 8018be8:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 8018bec:	2300      	movs	r3, #0
 8018bee:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    uint8_t response[260];
    memcpy(response, buf, 8);
 8018bf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018bfc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018c00:	f107 0014 	add.w	r0, r7, #20
 8018c04:	2208      	movs	r2, #8
 8018c06:	6819      	ldr	r1, [r3, #0]
 8018c08:	f009 fe35 	bl	8022876 <memcpy>
    // uint16_t tid = mg_ntohs(*(uint16_t *) &buf[0]);  // Transaction ID
    // uint16_t pid = mg_ntohs(*(uint16_t *) &buf[0]);  // Protocol ID
    // uint16_t len = mg_ntohs(*(uint16_t *) &buf[4]);  // PDU length
    // uint8_t uid = buf[6];                            // Unit identifier
    if (func == 6) {  // write single holding register
 8018c0c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8018c10:	2b06      	cmp	r3, #6
 8018c12:	d13e      	bne.n	8018c92 <handle_modbus_pdu+0x102>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8018c14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018c18:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	3308      	adds	r3, #8
 8018c20:	881b      	ldrh	r3, [r3, #0]
 8018c22:	4618      	mov	r0, r3
 8018c24:	f7fd f9e3 	bl	8015fee <mg_ntohs>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 8018c2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018c32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	330a      	adds	r3, #10
 8018c3a:	881b      	ldrh	r3, [r3, #0]
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f7fd f9d6 	bl	8015fee <mg_ntohs>
 8018c42:	4603      	mov	r3, r0
 8018c44:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = glue_modbus_write_reg(start, value);
 8018c48:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8018c4c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8018c50:	4611      	mov	r1, r2
 8018c52:	4618      	mov	r0, r3
 8018c54:	f7fe fc6e 	bl	8017534 <glue_modbus_write_reg>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 8018c5e:	f107 0314 	add.w	r3, r7, #20
 8018c62:	f103 0408 	add.w	r4, r3, #8
 8018c66:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f7fd f9bf 	bl	8015fee <mg_ntohs>
 8018c70:	4603      	mov	r3, r0
 8018c72:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 8018c74:	f107 0314 	add.w	r3, r7, #20
 8018c78:	f103 040a 	add.w	r4, r3, #10
 8018c7c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7fd f9b4 	bl	8015fee <mg_ntohs>
 8018c86:	4603      	mov	r3, r0
 8018c88:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 8018c8a:	230c      	movs	r3, #12
 8018c8c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8018c90:	e0eb      	b.n	8018e6a <handle_modbus_pdu+0x2da>
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
    } else if (func == 16) {  // Write multiple
 8018c92:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8018c96:	2b10      	cmp	r3, #16
 8018c98:	d173      	bne.n	8018d82 <handle_modbus_pdu+0x1f2>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8018c9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018c9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	3308      	adds	r3, #8
 8018ca6:	881b      	ldrh	r3, [r3, #0]
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f7fd f9a0 	bl	8015fee <mg_ntohs>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8018cb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018cb8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	330a      	adds	r3, #10
 8018cc0:	881b      	ldrh	r3, [r3, #0]
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f7fd f993 	bl	8015fee <mg_ntohs>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 8018cce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018cd2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	330d      	adds	r3, #13
 8018cda:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 8018cde:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018ce2:	3305      	adds	r3, #5
 8018ce4:	005b      	lsls	r3, r3, #1
 8018ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018cea:	f080 80be 	bcs.w	8018e6a <handle_modbus_pdu+0x2da>
        for (i = 0; i < num; i++) {
 8018cee:	2300      	movs	r3, #0
 8018cf0:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8018cf4:	e023      	b.n	8018d3e <handle_modbus_pdu+0x1ae>
          success =
              glue_modbus_write_reg((uint16_t) (start + i), mg_htons(data[i]));
 8018cf6:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8018cfa:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8018cfe:	4413      	add	r3, r2
 8018d00:	b29c      	uxth	r4, r3
 8018d02:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8018d06:	005b      	lsls	r3, r3, #1
 8018d08:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8018d0c:	4413      	add	r3, r2
 8018d0e:	881b      	ldrh	r3, [r3, #0]
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7fd f96c 	bl	8015fee <mg_ntohs>
 8018d16:	4603      	mov	r3, r0
 8018d18:	4619      	mov	r1, r3
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	f7fe fc0a 	bl	8017534 <glue_modbus_write_reg>
 8018d20:	4603      	mov	r3, r0
 8018d22:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8018d26:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8018d2a:	f083 0301 	eor.w	r3, r3, #1
 8018d2e:	b2db      	uxtb	r3, r3
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d10b      	bne.n	8018d4c <handle_modbus_pdu+0x1bc>
        for (i = 0; i < num; i++) {
 8018d34:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8018d38:	3301      	adds	r3, #1
 8018d3a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8018d3e:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8018d42:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d3d5      	bcc.n	8018cf6 <handle_modbus_pdu+0x166>
 8018d4a:	e000      	b.n	8018d4e <handle_modbus_pdu+0x1be>
          if (success == false) break;
 8018d4c:	bf00      	nop
        }
        *(uint16_t *) &response[8] = mg_htons(start);
 8018d4e:	f107 0314 	add.w	r3, r7, #20
 8018d52:	f103 0408 	add.w	r4, r3, #8
 8018d56:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f7fd f947 	bl	8015fee <mg_ntohs>
 8018d60:	4603      	mov	r3, r0
 8018d62:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 8018d64:	f107 0314 	add.w	r3, r7, #20
 8018d68:	f103 040a 	add.w	r4, r3, #10
 8018d6c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018d70:	4618      	mov	r0, r3
 8018d72:	f7fd f93c 	bl	8015fee <mg_ntohs>
 8018d76:	4603      	mov	r3, r0
 8018d78:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 8018d7a:	230c      	movs	r3, #12
 8018d7c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8018d80:	e073      	b.n	8018e6a <handle_modbus_pdu+0x2da>
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
      }
    } else if (func == 3 || func == 4) {  // Read multiple
 8018d82:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8018d86:	2b03      	cmp	r3, #3
 8018d88:	d003      	beq.n	8018d92 <handle_modbus_pdu+0x202>
 8018d8a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8018d8e:	2b04      	cmp	r3, #4
 8018d90:	d16b      	bne.n	8018e6a <handle_modbus_pdu+0x2da>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8018d92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018d96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	3308      	adds	r3, #8
 8018d9e:	881b      	ldrh	r3, [r3, #0]
 8018da0:	4618      	mov	r0, r3
 8018da2:	f7fd f924 	bl	8015fee <mg_ntohs>
 8018da6:	4603      	mov	r3, r0
 8018da8:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8018dac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018db0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	330a      	adds	r3, #10
 8018db8:	881b      	ldrh	r3, [r3, #0]
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f7fd f917 	bl	8015fee <mg_ntohs>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 8018dc6:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8018dca:	005b      	lsls	r3, r3, #1
 8018dcc:	3309      	adds	r3, #9
 8018dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018dd2:	d24a      	bcs.n	8018e6a <handle_modbus_pdu+0x2da>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 8018dd4:	f107 0314 	add.w	r3, r7, #20
 8018dd8:	3309      	adds	r3, #9
 8018dda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 8018dde:	2300      	movs	r3, #0
 8018de0:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8018de4:	e027      	b.n	8018e36 <handle_modbus_pdu+0x2a6>
          success = glue_modbus_read_reg((uint16_t) (start + i), &val);
 8018de6:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 8018dea:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8018dee:	4413      	add	r3, r2
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	f507 728d 	add.w	r2, r7, #282	@ 0x11a
 8018df6:	4611      	mov	r1, r2
 8018df8:	4618      	mov	r0, r3
 8018dfa:	f7fe fb6d 	bl	80174d8 <glue_modbus_read_reg>
 8018dfe:	4603      	mov	r3, r0
 8018e00:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8018e04:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8018e08:	f083 0301 	eor.w	r3, r3, #1
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d118      	bne.n	8018e44 <handle_modbus_pdu+0x2b4>
          data[i] = mg_htons(val);
 8018e12:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 8018e16:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8018e1a:	005b      	lsls	r3, r3, #1
 8018e1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8018e20:	18d4      	adds	r4, r2, r3
 8018e22:	4608      	mov	r0, r1
 8018e24:	f7fd f8e3 	bl	8015fee <mg_ntohs>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 8018e2c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8018e30:	3301      	adds	r3, #1
 8018e32:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8018e36:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8018e3a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8018e3e:	429a      	cmp	r2, r3
 8018e40:	d3d1      	bcc.n	8018de6 <handle_modbus_pdu+0x256>
 8018e42:	e000      	b.n	8018e46 <handle_modbus_pdu+0x2b6>
          if (success == false) break;
 8018e44:	bf00      	nop
        }
        response[8] = (uint8_t) (num * 2);
 8018e46:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	005b      	lsls	r3, r3, #1
 8018e4e:	b2da      	uxtb	r2, r3
 8018e50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018e58:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 8018e5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018e62:	7a1b      	ldrb	r3, [r3, #8]
 8018e64:	3309      	adds	r3, #9
 8018e66:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
      }
    }
    if (success == false) {
 8018e6a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8018e6e:	f083 0301 	eor.w	r3, r3, #1
 8018e72:	b2db      	uxtb	r3, r3
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d015      	beq.n	8018ea4 <handle_modbus_pdu+0x314>
      response_len = 9;
 8018e78:	2309      	movs	r3, #9
 8018e7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 8018e7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018e86:	79db      	ldrb	r3, [r3, #7]
 8018e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018e8c:	b2da      	uxtb	r2, r3
 8018e8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018e96:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 8018e98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018e9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018ea0:	2204      	movs	r2, #4
 8018ea2:	721a      	strb	r2, [r3, #8]
    }
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 8018ea4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018ea8:	b29b      	uxth	r3, r3
 8018eaa:	3b06      	subs	r3, #6
 8018eac:	b29a      	uxth	r2, r3
 8018eae:	f107 0314 	add.w	r3, r7, #20
 8018eb2:	1d1c      	adds	r4, r3, #4
 8018eb4:	4610      	mov	r0, r2
 8018eb6:	f7fd f89a 	bl	8015fee <mg_ntohs>
 8018eba:	4603      	mov	r3, r0
 8018ebc:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
 8018ebe:	f107 0314 	add.w	r3, r7, #20
 8018ec2:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f7ee fc8c 	bl	80077e4 <mg_hexdump>
    mg_send(c, response, response_len);
 8018ecc:	f107 0114 	add.w	r1, r7, #20
 8018ed0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018ed4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8018ed8:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8018edc:	6818      	ldr	r0, [r3, #0]
 8018ede:	f7f2 ff53 	bl	800bd88 <mg_send>
  }
}
 8018ee2:	bf00      	nop
 8018ee4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd90      	pop	{r4, r7, pc}

08018eec <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b086      	sub	sp, #24
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	60f8      	str	r0, [r7, #12]
 8018ef4:	60b9      	str	r1, [r7, #8]
 8018ef6:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 8018ef8:	68bb      	ldr	r3, [r7, #8]
 8018efa:	2b07      	cmp	r3, #7
 8018efc:	d127      	bne.n	8018f4e <modbus_ev_handler+0x62>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018f02:	2b06      	cmp	r3, #6
 8018f04:	d920      	bls.n	8018f48 <modbus_ev_handler+0x5c>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f0a:	3304      	adds	r3, #4
 8018f0c:	881b      	ldrh	r3, [r3, #0]
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f7fd f86d 	bl	8015fee <mg_ntohs>
 8018f14:	4603      	mov	r3, r0
 8018f16:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018f1c:	8afb      	ldrh	r3, [r7, #22]
 8018f1e:	3306      	adds	r3, #6
 8018f20:	429a      	cmp	r2, r3
 8018f22:	d313      	bcc.n	8018f4c <modbus_ev_handler+0x60>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8018f28:	8afb      	ldrh	r3, [r7, #22]
 8018f2a:	3306      	adds	r3, #6
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	68f8      	ldr	r0, [r7, #12]
 8018f30:	f7ff fe2e 	bl	8018b90 <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8018f3a:	8afb      	ldrh	r3, [r7, #22]
 8018f3c:	3306      	adds	r3, #6
 8018f3e:	461a      	mov	r2, r3
 8018f40:	2100      	movs	r1, #0
 8018f42:	f7ed fd4c 	bl	80069de <mg_iobuf_del>
 8018f46:	e002      	b.n	8018f4e <modbus_ev_handler+0x62>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8018f48:	bf00      	nop
 8018f4a:	e000      	b.n	8018f4e <modbus_ev_handler+0x62>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 8018f4c:	bf00      	nop
  }
  (void) ev_data;
}
 8018f4e:	3718      	adds	r7, #24
 8018f50:	46bd      	mov	sp, r7
 8018f52:	bd80      	pop	{r7, pc}

08018f54 <mongoose_init>:
#endif  // WIZARD_ENABLE_MODBUS

void mongoose_init(void) {
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b09e      	sub	sp, #120	@ 0x78
 8018f58:	af04      	add	r7, sp, #16
  mg_mgr_init(&g_mgr);      // Initialise event manager
 8018f5a:	481f      	ldr	r0, [pc, #124]	@ (8018fd8 <mongoose_init+0x84>)
 8018f5c:	f7f0 f89c 	bl	8009098 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 8018f60:	4b1e      	ldr	r3, [pc, #120]	@ (8018fdc <mongoose_init+0x88>)
 8018f62:	2203      	movs	r2, #3
 8018f64:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 8018f66:	2300      	movs	r3, #0
 8018f68:	4a1d      	ldr	r2, [pc, #116]	@ (8018fe0 <mongoose_init+0x8c>)
 8018f6a:	491e      	ldr	r1, [pc, #120]	@ (8018fe4 <mongoose_init+0x90>)
 8018f6c:	481a      	ldr	r0, [pc, #104]	@ (8018fd8 <mongoose_init+0x84>)
 8018f6e:	f7ed fc47 	bl	8006800 <mg_http_listen>
#endif
#if WIZARD_ENABLE_HTTPS
  MG_INFO(("Starting HTTPS listener"));
  mg_http_listen(&g_mgr, HTTPS_URL, http_ev_handler, "");
 8018f72:	4b1d      	ldr	r3, [pc, #116]	@ (8018fe8 <mongoose_init+0x94>)
 8018f74:	4a1a      	ldr	r2, [pc, #104]	@ (8018fe0 <mongoose_init+0x8c>)
 8018f76:	491d      	ldr	r1, [pc, #116]	@ (8018fec <mongoose_init+0x98>)
 8018f78:	4817      	ldr	r0, [pc, #92]	@ (8018fd8 <mongoose_init+0x84>)
 8018f7a:	f7ed fc41 	bl	8006800 <mg_http_listen>
#endif

#if WIZARD_ENABLE_SNTP
  MG_INFO(("Starting SNTP timer"));
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, sntp_timer, &g_mgr);
 8018f7e:	4b16      	ldr	r3, [pc, #88]	@ (8018fd8 <mongoose_init+0x84>)
 8018f80:	9302      	str	r3, [sp, #8]
 8018f82:	4b1b      	ldr	r3, [pc, #108]	@ (8018ff0 <mongoose_init+0x9c>)
 8018f84:	9301      	str	r3, [sp, #4]
 8018f86:	2301      	movs	r3, #1
 8018f88:	9300      	str	r3, [sp, #0]
 8018f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018f8e:	f04f 0300 	mov.w	r3, #0
 8018f92:	4811      	ldr	r0, [pc, #68]	@ (8018fd8 <mongoose_init+0x84>)
 8018f94:	f7f0 f856 	bl	8009044 <mg_timer_add>
  g_mgr.dns4.url = WIZARD_DNS_URL;
#endif

#if WIZARD_ENABLE_MQTT
  MG_INFO(("Starting MQTT reconnection timer"));
  mg_timer_add(&g_mgr, 1000, MG_TIMER_REPEAT, mqtt_timer, &g_mgr);
 8018f98:	4b0f      	ldr	r3, [pc, #60]	@ (8018fd8 <mongoose_init+0x84>)
 8018f9a:	9302      	str	r3, [sp, #8]
 8018f9c:	4b15      	ldr	r3, [pc, #84]	@ (8018ff4 <mongoose_init+0xa0>)
 8018f9e:	9301      	str	r3, [sp, #4]
 8018fa0:	2301      	movs	r3, #1
 8018fa2:	9300      	str	r3, [sp, #0]
 8018fa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018fa8:	f04f 0300 	mov.w	r3, #0
 8018fac:	480a      	ldr	r0, [pc, #40]	@ (8018fd8 <mongoose_init+0x84>)
 8018fae:	f7f0 f849 	bl	8009044 <mg_timer_add>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 8018fb2:	1d38      	adds	r0, r7, #4
 8018fb4:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8018fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8018ff8 <mongoose_init+0xa4>)
 8018fba:	2164      	movs	r1, #100	@ 0x64
 8018fbc:	f7f3 f93c 	bl	800c238 <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 8018fc0:	1d39      	adds	r1, r7, #4
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8018ffc <mongoose_init+0xa8>)
 8018fc6:	4804      	ldr	r0, [pc, #16]	@ (8018fd8 <mongoose_init+0x84>)
 8018fc8:	f7ef ffdc 	bl	8008f84 <mg_listen>
  }
#endif

  MG_INFO(("Mongoose init complete, calling user init"));
  glue_init_1();
 8018fcc:	f7fd fe5e 	bl	8016c8c <glue_init_1>
}
 8018fd0:	bf00      	nop
 8018fd2:	3768      	adds	r7, #104	@ 0x68
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd80      	pop	{r7, pc}
 8018fd8:	24010b90 	.word	0x24010b90
 8018fdc:	24000240 	.word	0x24000240
 8018fe0:	0801874d 	.word	0x0801874d
 8018fe4:	08026068 	.word	0x08026068
 8018fe8:	08025b3c 	.word	0x08025b3c
 8018fec:	0802607c 	.word	0x0802607c
 8018ff0:	08018a79 	.word	0x08018a79
 8018ff4:	08018b5d 	.word	0x08018b5d
 8018ff8:	08026090 	.word	0x08026090
 8018ffc:	08018eed 	.word	0x08018eed

08019000 <mongoose_poll>:

void mongoose_poll(void) {
 8019000:	b580      	push	{r7, lr}
 8019002:	af00      	add	r7, sp, #0
  glue_lock();
 8019004:	f7fd fe5e 	bl	8016cc4 <glue_lock>
  mg_mgr_poll(&g_mgr, 50);
 8019008:	2132      	movs	r1, #50	@ 0x32
 801900a:	4803      	ldr	r0, [pc, #12]	@ (8019018 <mongoose_poll+0x18>)
 801900c:	f7f2 fe44 	bl	800bc98 <mg_mgr_poll>
  glue_unlock();
 8019010:	f7fd fe5f 	bl	8016cd2 <glue_unlock>
}
 8019014:	bf00      	nop
 8019016:	bd80      	pop	{r7, pc}
 8019018:	24010b90 	.word	0x24010b90

0801901c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b082      	sub	sp, #8
 8019020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019022:	4b0c      	ldr	r3, [pc, #48]	@ (8019054 <HAL_MspInit+0x38>)
 8019024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8019028:	4a0a      	ldr	r2, [pc, #40]	@ (8019054 <HAL_MspInit+0x38>)
 801902a:	f043 0302 	orr.w	r3, r3, #2
 801902e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8019032:	4b08      	ldr	r3, [pc, #32]	@ (8019054 <HAL_MspInit+0x38>)
 8019034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8019038:	f003 0302 	and.w	r3, r3, #2
 801903c:	607b      	str	r3, [r7, #4]
 801903e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8019040:	2200      	movs	r2, #0
 8019042:	210f      	movs	r1, #15
 8019044:	f06f 0001 	mvn.w	r0, #1
 8019048:	f000 fc8e 	bl	8019968 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801904c:	bf00      	nop
 801904e:	3708      	adds	r7, #8
 8019050:	46bd      	mov	sp, r7
 8019052:	bd80      	pop	{r7, pc}
 8019054:	58024400 	.word	0x58024400

08019058 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b08e      	sub	sp, #56	@ 0x38
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019064:	2200      	movs	r2, #0
 8019066:	601a      	str	r2, [r3, #0]
 8019068:	605a      	str	r2, [r3, #4]
 801906a:	609a      	str	r2, [r3, #8]
 801906c:	60da      	str	r2, [r3, #12]
 801906e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	4a5d      	ldr	r2, [pc, #372]	@ (80191ec <HAL_ETH_MspInit+0x194>)
 8019076:	4293      	cmp	r3, r2
 8019078:	f040 80b3 	bne.w	80191e2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 801907c:	4b5c      	ldr	r3, [pc, #368]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 801907e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8019082:	4a5b      	ldr	r2, [pc, #364]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 8019084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8019088:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801908c:	4b58      	ldr	r3, [pc, #352]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 801908e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8019092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8019096:	623b      	str	r3, [r7, #32]
 8019098:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 801909a:	4b55      	ldr	r3, [pc, #340]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 801909c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80190a0:	4a53      	ldr	r2, [pc, #332]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80190a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80190aa:	4b51      	ldr	r3, [pc, #324]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80190b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80190b4:	61fb      	str	r3, [r7, #28]
 80190b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80190b8:	4b4d      	ldr	r3, [pc, #308]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80190be:	4a4c      	ldr	r2, [pc, #304]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80190c4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80190c8:	4b49      	ldr	r3, [pc, #292]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80190ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80190d2:	61bb      	str	r3, [r7, #24]
 80190d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80190d6:	4b46      	ldr	r3, [pc, #280]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80190dc:	4a44      	ldr	r2, [pc, #272]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190de:	f043 0304 	orr.w	r3, r3, #4
 80190e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80190e6:	4b42      	ldr	r3, [pc, #264]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80190ec:	f003 0304 	and.w	r3, r3, #4
 80190f0:	617b      	str	r3, [r7, #20]
 80190f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80190f4:	4b3e      	ldr	r3, [pc, #248]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80190fa:	4a3d      	ldr	r2, [pc, #244]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 80190fc:	f043 0301 	orr.w	r3, r3, #1
 8019100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8019104:	4b3a      	ldr	r3, [pc, #232]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 8019106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801910a:	f003 0301 	and.w	r3, r3, #1
 801910e:	613b      	str	r3, [r7, #16]
 8019110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019112:	4b37      	ldr	r3, [pc, #220]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 8019114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019118:	4a35      	ldr	r2, [pc, #212]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 801911a:	f043 0302 	orr.w	r3, r3, #2
 801911e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8019122:	4b33      	ldr	r3, [pc, #204]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 8019124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019128:	f003 0302 	and.w	r3, r3, #2
 801912c:	60fb      	str	r3, [r7, #12]
 801912e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8019130:	4b2f      	ldr	r3, [pc, #188]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 8019132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019136:	4a2e      	ldr	r2, [pc, #184]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 8019138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801913c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8019140:	4b2b      	ldr	r3, [pc, #172]	@ (80191f0 <HAL_ETH_MspInit+0x198>)
 8019142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801914a:	60bb      	str	r3, [r7, #8]
 801914c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801914e:	2332      	movs	r3, #50	@ 0x32
 8019150:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019152:	2302      	movs	r3, #2
 8019154:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019156:	2300      	movs	r3, #0
 8019158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801915a:	2300      	movs	r3, #0
 801915c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801915e:	230b      	movs	r3, #11
 8019160:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8019162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019166:	4619      	mov	r1, r3
 8019168:	4822      	ldr	r0, [pc, #136]	@ (80191f4 <HAL_ETH_MspInit+0x19c>)
 801916a:	f001 fb5d 	bl	801a828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801916e:	2386      	movs	r3, #134	@ 0x86
 8019170:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019172:	2302      	movs	r3, #2
 8019174:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019176:	2300      	movs	r3, #0
 8019178:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801917a:	2300      	movs	r3, #0
 801917c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801917e:	230b      	movs	r3, #11
 8019180:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019186:	4619      	mov	r1, r3
 8019188:	481b      	ldr	r0, [pc, #108]	@ (80191f8 <HAL_ETH_MspInit+0x1a0>)
 801918a:	f001 fb4d 	bl	801a828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 801918e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019192:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019194:	2302      	movs	r3, #2
 8019196:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019198:	2300      	movs	r3, #0
 801919a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801919c:	2300      	movs	r3, #0
 801919e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80191a0:	230b      	movs	r3, #11
 80191a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80191a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80191a8:	4619      	mov	r1, r3
 80191aa:	4814      	ldr	r0, [pc, #80]	@ (80191fc <HAL_ETH_MspInit+0x1a4>)
 80191ac:	f001 fb3c 	bl	801a828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80191b0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80191b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80191b6:	2302      	movs	r3, #2
 80191b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80191ba:	2300      	movs	r3, #0
 80191bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80191be:	2300      	movs	r3, #0
 80191c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80191c2:	230b      	movs	r3, #11
 80191c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80191c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80191ca:	4619      	mov	r1, r3
 80191cc:	480c      	ldr	r0, [pc, #48]	@ (8019200 <HAL_ETH_MspInit+0x1a8>)
 80191ce:	f001 fb2b 	bl	801a828 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80191d2:	2200      	movs	r2, #0
 80191d4:	2105      	movs	r1, #5
 80191d6:	203d      	movs	r0, #61	@ 0x3d
 80191d8:	f000 fbc6 	bl	8019968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80191dc:	203d      	movs	r0, #61	@ 0x3d
 80191de:	f000 fbdd 	bl	801999c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80191e2:	bf00      	nop
 80191e4:	3738      	adds	r7, #56	@ 0x38
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd80      	pop	{r7, pc}
 80191ea:	bf00      	nop
 80191ec:	40028000 	.word	0x40028000
 80191f0:	58024400 	.word	0x58024400
 80191f4:	58020800 	.word	0x58020800
 80191f8:	58020000 	.word	0x58020000
 80191fc:	58020400 	.word	0x58020400
 8019200:	58021800 	.word	0x58021800

08019204 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b0b4      	sub	sp, #208	@ 0xd0
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801920c:	f107 0310 	add.w	r3, r7, #16
 8019210:	22c0      	movs	r2, #192	@ 0xc0
 8019212:	2100      	movs	r1, #0
 8019214:	4618      	mov	r0, r3
 8019216:	f009 f98a 	bl	802252e <memset>
  if(hrng->Instance==RNG)
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	4a14      	ldr	r2, [pc, #80]	@ (8019270 <HAL_RNG_MspInit+0x6c>)
 8019220:	4293      	cmp	r3, r2
 8019222:	d121      	bne.n	8019268 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8019224:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8019228:	f04f 0300 	mov.w	r3, #0
 801922c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8019230:	2300      	movs	r3, #0
 8019232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019236:	f107 0310 	add.w	r3, r7, #16
 801923a:	4618      	mov	r0, r3
 801923c:	f002 fd40 	bl	801bcc0 <HAL_RCCEx_PeriphCLKConfig>
 8019240:	4603      	mov	r3, r0
 8019242:	2b00      	cmp	r3, #0
 8019244:	d001      	beq.n	801924a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8019246:	f7e7 ff9b 	bl	8001180 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 801924a:	4b0a      	ldr	r3, [pc, #40]	@ (8019274 <HAL_RNG_MspInit+0x70>)
 801924c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8019250:	4a08      	ldr	r2, [pc, #32]	@ (8019274 <HAL_RNG_MspInit+0x70>)
 8019252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019256:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 801925a:	4b06      	ldr	r3, [pc, #24]	@ (8019274 <HAL_RNG_MspInit+0x70>)
 801925c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8019260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019264:	60fb      	str	r3, [r7, #12]
 8019266:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8019268:	bf00      	nop
 801926a:	37d0      	adds	r7, #208	@ 0xd0
 801926c:	46bd      	mov	sp, r7
 801926e:	bd80      	pop	{r7, pc}
 8019270:	48021800 	.word	0x48021800
 8019274:	58024400 	.word	0x58024400

08019278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b0be      	sub	sp, #248	@ 0xf8
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019280:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8019284:	2200      	movs	r2, #0
 8019286:	601a      	str	r2, [r3, #0]
 8019288:	605a      	str	r2, [r3, #4]
 801928a:	609a      	str	r2, [r3, #8]
 801928c:	60da      	str	r2, [r3, #12]
 801928e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8019290:	f107 0320 	add.w	r3, r7, #32
 8019294:	22c0      	movs	r2, #192	@ 0xc0
 8019296:	2100      	movs	r1, #0
 8019298:	4618      	mov	r0, r3
 801929a:	f009 f948 	bl	802252e <memset>
  if(huart->Instance==USART2)
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	4a5f      	ldr	r2, [pc, #380]	@ (8019420 <HAL_UART_MspInit+0x1a8>)
 80192a4:	4293      	cmp	r3, r2
 80192a6:	d16a      	bne.n	801937e <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80192a8:	f04f 0202 	mov.w	r2, #2
 80192ac:	f04f 0300 	mov.w	r3, #0
 80192b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80192b4:	2300      	movs	r3, #0
 80192b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80192ba:	f107 0320 	add.w	r3, r7, #32
 80192be:	4618      	mov	r0, r3
 80192c0:	f002 fcfe 	bl	801bcc0 <HAL_RCCEx_PeriphCLKConfig>
 80192c4:	4603      	mov	r3, r0
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d001      	beq.n	80192ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80192ca:	f7e7 ff59 	bl	8001180 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80192ce:	4b55      	ldr	r3, [pc, #340]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80192d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80192d4:	4a53      	ldr	r2, [pc, #332]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80192d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80192da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80192de:	4b51      	ldr	r3, [pc, #324]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80192e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80192e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80192e8:	61fb      	str	r3, [r7, #28]
 80192ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80192ec:	4b4d      	ldr	r3, [pc, #308]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80192ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80192f2:	4a4c      	ldr	r2, [pc, #304]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80192f4:	f043 0301 	orr.w	r3, r3, #1
 80192f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80192fc:	4b49      	ldr	r3, [pc, #292]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80192fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019302:	f003 0301 	and.w	r3, r3, #1
 8019306:	61bb      	str	r3, [r7, #24]
 8019308:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801930a:	4b46      	ldr	r3, [pc, #280]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 801930c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019310:	4a44      	ldr	r2, [pc, #272]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 8019312:	f043 0308 	orr.w	r3, r3, #8
 8019316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801931a:	4b42      	ldr	r3, [pc, #264]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 801931c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019320:	f003 0308 	and.w	r3, r3, #8
 8019324:	617b      	str	r3, [r7, #20]
 8019326:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8019328:	2308      	movs	r3, #8
 801932a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801932e:	2302      	movs	r3, #2
 8019330:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019334:	2300      	movs	r3, #0
 8019336:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801933a:	2300      	movs	r3, #0
 801933c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8019340:	2307      	movs	r3, #7
 8019342:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019346:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801934a:	4619      	mov	r1, r3
 801934c:	4836      	ldr	r0, [pc, #216]	@ (8019428 <HAL_UART_MspInit+0x1b0>)
 801934e:	f001 fa6b 	bl	801a828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8019352:	2320      	movs	r3, #32
 8019354:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019358:	2302      	movs	r3, #2
 801935a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801935e:	2300      	movs	r3, #0
 8019360:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019364:	2300      	movs	r3, #0
 8019366:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801936a:	2307      	movs	r3, #7
 801936c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8019370:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8019374:	4619      	mov	r1, r3
 8019376:	482d      	ldr	r0, [pc, #180]	@ (801942c <HAL_UART_MspInit+0x1b4>)
 8019378:	f001 fa56 	bl	801a828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 801937c:	e04b      	b.n	8019416 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	4a2b      	ldr	r2, [pc, #172]	@ (8019430 <HAL_UART_MspInit+0x1b8>)
 8019384:	4293      	cmp	r3, r2
 8019386:	d146      	bne.n	8019416 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8019388:	f04f 0202 	mov.w	r2, #2
 801938c:	f04f 0300 	mov.w	r3, #0
 8019390:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8019394:	2300      	movs	r3, #0
 8019396:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801939a:	f107 0320 	add.w	r3, r7, #32
 801939e:	4618      	mov	r0, r3
 80193a0:	f002 fc8e 	bl	801bcc0 <HAL_RCCEx_PeriphCLKConfig>
 80193a4:	4603      	mov	r3, r0
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d001      	beq.n	80193ae <HAL_UART_MspInit+0x136>
      Error_Handler();
 80193aa:	f7e7 fee9 	bl	8001180 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80193ae:	4b1d      	ldr	r3, [pc, #116]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80193b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80193b4:	4a1b      	ldr	r2, [pc, #108]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80193b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80193ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80193be:	4b19      	ldr	r3, [pc, #100]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80193c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80193c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80193c8:	613b      	str	r3, [r7, #16]
 80193ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80193cc:	4b15      	ldr	r3, [pc, #84]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80193ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80193d2:	4a14      	ldr	r2, [pc, #80]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80193d4:	f043 0308 	orr.w	r3, r3, #8
 80193d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80193dc:	4b11      	ldr	r3, [pc, #68]	@ (8019424 <HAL_UART_MspInit+0x1ac>)
 80193de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80193e2:	f003 0308 	and.w	r3, r3, #8
 80193e6:	60fb      	str	r3, [r7, #12]
 80193e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80193ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80193ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80193f2:	2302      	movs	r3, #2
 80193f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80193f8:	2300      	movs	r3, #0
 80193fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80193fe:	2300      	movs	r3, #0
 8019400:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8019404:	2307      	movs	r3, #7
 8019406:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801940a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 801940e:	4619      	mov	r1, r3
 8019410:	4806      	ldr	r0, [pc, #24]	@ (801942c <HAL_UART_MspInit+0x1b4>)
 8019412:	f001 fa09 	bl	801a828 <HAL_GPIO_Init>
}
 8019416:	bf00      	nop
 8019418:	37f8      	adds	r7, #248	@ 0xf8
 801941a:	46bd      	mov	sp, r7
 801941c:	bd80      	pop	{r7, pc}
 801941e:	bf00      	nop
 8019420:	40004400 	.word	0x40004400
 8019424:	58024400 	.word	0x58024400
 8019428:	58020000 	.word	0x58020000
 801942c:	58020c00 	.word	0x58020c00
 8019430:	40004800 	.word	0x40004800

08019434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b090      	sub	sp, #64	@ 0x40
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	2b0f      	cmp	r3, #15
 8019440:	d827      	bhi.n	8019492 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8019442:	2200      	movs	r2, #0
 8019444:	6879      	ldr	r1, [r7, #4]
 8019446:	2036      	movs	r0, #54	@ 0x36
 8019448:	f000 fa8e 	bl	8019968 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801944c:	2036      	movs	r0, #54	@ 0x36
 801944e:	f000 faa5 	bl	801999c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8019452:	4a29      	ldr	r2, [pc, #164]	@ (80194f8 <HAL_InitTick+0xc4>)
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8019458:	4b28      	ldr	r3, [pc, #160]	@ (80194fc <HAL_InitTick+0xc8>)
 801945a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801945e:	4a27      	ldr	r2, [pc, #156]	@ (80194fc <HAL_InitTick+0xc8>)
 8019460:	f043 0310 	orr.w	r3, r3, #16
 8019464:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8019468:	4b24      	ldr	r3, [pc, #144]	@ (80194fc <HAL_InitTick+0xc8>)
 801946a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801946e:	f003 0310 	and.w	r3, r3, #16
 8019472:	60fb      	str	r3, [r7, #12]
 8019474:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8019476:	f107 0210 	add.w	r2, r7, #16
 801947a:	f107 0314 	add.w	r3, r7, #20
 801947e:	4611      	mov	r1, r2
 8019480:	4618      	mov	r0, r3
 8019482:	f002 fbdb 	bl	801bc3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8019486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019488:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801948a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801948c:	2b00      	cmp	r3, #0
 801948e:	d106      	bne.n	801949e <HAL_InitTick+0x6a>
 8019490:	e001      	b.n	8019496 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8019492:	2301      	movs	r3, #1
 8019494:	e02b      	b.n	80194ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8019496:	f002 fba5 	bl	801bbe4 <HAL_RCC_GetPCLK1Freq>
 801949a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801949c:	e004      	b.n	80194a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 801949e:	f002 fba1 	bl	801bbe4 <HAL_RCC_GetPCLK1Freq>
 80194a2:	4603      	mov	r3, r0
 80194a4:	005b      	lsls	r3, r3, #1
 80194a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80194a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194aa:	4a15      	ldr	r2, [pc, #84]	@ (8019500 <HAL_InitTick+0xcc>)
 80194ac:	fba2 2303 	umull	r2, r3, r2, r3
 80194b0:	0c9b      	lsrs	r3, r3, #18
 80194b2:	3b01      	subs	r3, #1
 80194b4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80194b6:	4b13      	ldr	r3, [pc, #76]	@ (8019504 <HAL_InitTick+0xd0>)
 80194b8:	4a13      	ldr	r2, [pc, #76]	@ (8019508 <HAL_InitTick+0xd4>)
 80194ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80194bc:	4b11      	ldr	r3, [pc, #68]	@ (8019504 <HAL_InitTick+0xd0>)
 80194be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80194c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80194c4:	4a0f      	ldr	r2, [pc, #60]	@ (8019504 <HAL_InitTick+0xd0>)
 80194c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80194ca:	4b0e      	ldr	r3, [pc, #56]	@ (8019504 <HAL_InitTick+0xd0>)
 80194cc:	2200      	movs	r2, #0
 80194ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80194d0:	4b0c      	ldr	r3, [pc, #48]	@ (8019504 <HAL_InitTick+0xd0>)
 80194d2:	2200      	movs	r2, #0
 80194d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80194d6:	480b      	ldr	r0, [pc, #44]	@ (8019504 <HAL_InitTick+0xd0>)
 80194d8:	f004 fad6 	bl	801da88 <HAL_TIM_Base_Init>
 80194dc:	4603      	mov	r3, r0
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d104      	bne.n	80194ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80194e2:	4808      	ldr	r0, [pc, #32]	@ (8019504 <HAL_InitTick+0xd0>)
 80194e4:	f004 fb32 	bl	801db4c <HAL_TIM_Base_Start_IT>
 80194e8:	4603      	mov	r3, r0
 80194ea:	e000      	b.n	80194ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80194ec:	2301      	movs	r3, #1
}
 80194ee:	4618      	mov	r0, r3
 80194f0:	3740      	adds	r7, #64	@ 0x40
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}
 80194f6:	bf00      	nop
 80194f8:	2400079c 	.word	0x2400079c
 80194fc:	58024400 	.word	0x58024400
 8019500:	431bde83 	.word	0x431bde83
 8019504:	24010bf0 	.word	0x24010bf0
 8019508:	40001000 	.word	0x40001000

0801950c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801950c:	b480      	push	{r7}
 801950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8019510:	bf00      	nop
 8019512:	e7fd      	b.n	8019510 <NMI_Handler+0x4>

08019514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8019514:	b480      	push	{r7}
 8019516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8019518:	bf00      	nop
 801951a:	e7fd      	b.n	8019518 <HardFault_Handler+0x4>

0801951c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801951c:	b480      	push	{r7}
 801951e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8019520:	bf00      	nop
 8019522:	e7fd      	b.n	8019520 <MemManage_Handler+0x4>

08019524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8019524:	b480      	push	{r7}
 8019526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8019528:	bf00      	nop
 801952a:	e7fd      	b.n	8019528 <BusFault_Handler+0x4>

0801952c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801952c:	b480      	push	{r7}
 801952e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8019530:	bf00      	nop
 8019532:	e7fd      	b.n	8019530 <UsageFault_Handler+0x4>

08019534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8019534:	b480      	push	{r7}
 8019536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8019538:	bf00      	nop
 801953a:	46bd      	mov	sp, r7
 801953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019540:	4770      	bx	lr
	...

08019544 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8019548:	4802      	ldr	r0, [pc, #8]	@ (8019554 <TIM6_DAC_IRQHandler+0x10>)
 801954a:	f004 fb77 	bl	801dc3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801954e:	bf00      	nop
 8019550:	bd80      	pop	{r7, pc}
 8019552:	bf00      	nop
 8019554:	24010bf0 	.word	0x24010bf0

08019558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8019558:	b480      	push	{r7}
 801955a:	af00      	add	r7, sp, #0
  return 1;
 801955c:	2301      	movs	r3, #1
}
 801955e:	4618      	mov	r0, r3
 8019560:	46bd      	mov	sp, r7
 8019562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019566:	4770      	bx	lr

08019568 <_kill>:

int _kill(int pid, int sig)
{
 8019568:	b580      	push	{r7, lr}
 801956a:	b082      	sub	sp, #8
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
 8019570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8019572:	f009 f94b 	bl	802280c <__errno>
 8019576:	4603      	mov	r3, r0
 8019578:	2216      	movs	r2, #22
 801957a:	601a      	str	r2, [r3, #0]
  return -1;
 801957c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019580:	4618      	mov	r0, r3
 8019582:	3708      	adds	r7, #8
 8019584:	46bd      	mov	sp, r7
 8019586:	bd80      	pop	{r7, pc}

08019588 <_exit>:

void _exit (int status)
{
 8019588:	b580      	push	{r7, lr}
 801958a:	b082      	sub	sp, #8
 801958c:	af00      	add	r7, sp, #0
 801958e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8019590:	f04f 31ff 	mov.w	r1, #4294967295
 8019594:	6878      	ldr	r0, [r7, #4]
 8019596:	f7ff ffe7 	bl	8019568 <_kill>
  while (1) {}    /* Make sure we hang here */
 801959a:	bf00      	nop
 801959c:	e7fd      	b.n	801959a <_exit+0x12>

0801959e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801959e:	b580      	push	{r7, lr}
 80195a0:	b086      	sub	sp, #24
 80195a2:	af00      	add	r7, sp, #0
 80195a4:	60f8      	str	r0, [r7, #12]
 80195a6:	60b9      	str	r1, [r7, #8]
 80195a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80195aa:	2300      	movs	r3, #0
 80195ac:	617b      	str	r3, [r7, #20]
 80195ae:	e00a      	b.n	80195c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80195b0:	f3af 8000 	nop.w
 80195b4:	4601      	mov	r1, r0
 80195b6:	68bb      	ldr	r3, [r7, #8]
 80195b8:	1c5a      	adds	r2, r3, #1
 80195ba:	60ba      	str	r2, [r7, #8]
 80195bc:	b2ca      	uxtb	r2, r1
 80195be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80195c0:	697b      	ldr	r3, [r7, #20]
 80195c2:	3301      	adds	r3, #1
 80195c4:	617b      	str	r3, [r7, #20]
 80195c6:	697a      	ldr	r2, [r7, #20]
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	429a      	cmp	r2, r3
 80195cc:	dbf0      	blt.n	80195b0 <_read+0x12>
  }

  return len;
 80195ce:	687b      	ldr	r3, [r7, #4]
}
 80195d0:	4618      	mov	r0, r3
 80195d2:	3718      	adds	r7, #24
 80195d4:	46bd      	mov	sp, r7
 80195d6:	bd80      	pop	{r7, pc}

080195d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80195d8:	b480      	push	{r7}
 80195da:	b083      	sub	sp, #12
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80195e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80195e4:	4618      	mov	r0, r3
 80195e6:	370c      	adds	r7, #12
 80195e8:	46bd      	mov	sp, r7
 80195ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ee:	4770      	bx	lr

080195f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80195f0:	b480      	push	{r7}
 80195f2:	b083      	sub	sp, #12
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	6078      	str	r0, [r7, #4]
 80195f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8019600:	605a      	str	r2, [r3, #4]
  return 0;
 8019602:	2300      	movs	r3, #0
}
 8019604:	4618      	mov	r0, r3
 8019606:	370c      	adds	r7, #12
 8019608:	46bd      	mov	sp, r7
 801960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960e:	4770      	bx	lr

08019610 <_isatty>:

int _isatty(int file)
{
 8019610:	b480      	push	{r7}
 8019612:	b083      	sub	sp, #12
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8019618:	2301      	movs	r3, #1
}
 801961a:	4618      	mov	r0, r3
 801961c:	370c      	adds	r7, #12
 801961e:	46bd      	mov	sp, r7
 8019620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019624:	4770      	bx	lr

08019626 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8019626:	b480      	push	{r7}
 8019628:	b085      	sub	sp, #20
 801962a:	af00      	add	r7, sp, #0
 801962c:	60f8      	str	r0, [r7, #12]
 801962e:	60b9      	str	r1, [r7, #8]
 8019630:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8019632:	2300      	movs	r3, #0
}
 8019634:	4618      	mov	r0, r3
 8019636:	3714      	adds	r7, #20
 8019638:	46bd      	mov	sp, r7
 801963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801963e:	4770      	bx	lr

08019640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b086      	sub	sp, #24
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8019648:	4a14      	ldr	r2, [pc, #80]	@ (801969c <_sbrk+0x5c>)
 801964a:	4b15      	ldr	r3, [pc, #84]	@ (80196a0 <_sbrk+0x60>)
 801964c:	1ad3      	subs	r3, r2, r3
 801964e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8019654:	4b13      	ldr	r3, [pc, #76]	@ (80196a4 <_sbrk+0x64>)
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d102      	bne.n	8019662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801965c:	4b11      	ldr	r3, [pc, #68]	@ (80196a4 <_sbrk+0x64>)
 801965e:	4a12      	ldr	r2, [pc, #72]	@ (80196a8 <_sbrk+0x68>)
 8019660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8019662:	4b10      	ldr	r3, [pc, #64]	@ (80196a4 <_sbrk+0x64>)
 8019664:	681a      	ldr	r2, [r3, #0]
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	4413      	add	r3, r2
 801966a:	693a      	ldr	r2, [r7, #16]
 801966c:	429a      	cmp	r2, r3
 801966e:	d207      	bcs.n	8019680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8019670:	f009 f8cc 	bl	802280c <__errno>
 8019674:	4603      	mov	r3, r0
 8019676:	220c      	movs	r2, #12
 8019678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801967a:	f04f 33ff 	mov.w	r3, #4294967295
 801967e:	e009      	b.n	8019694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8019680:	4b08      	ldr	r3, [pc, #32]	@ (80196a4 <_sbrk+0x64>)
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8019686:	4b07      	ldr	r3, [pc, #28]	@ (80196a4 <_sbrk+0x64>)
 8019688:	681a      	ldr	r2, [r3, #0]
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	4413      	add	r3, r2
 801968e:	4a05      	ldr	r2, [pc, #20]	@ (80196a4 <_sbrk+0x64>)
 8019690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8019692:	68fb      	ldr	r3, [r7, #12]
}
 8019694:	4618      	mov	r0, r3
 8019696:	3718      	adds	r7, #24
 8019698:	46bd      	mov	sp, r7
 801969a:	bd80      	pop	{r7, pc}
 801969c:	24080000 	.word	0x24080000
 80196a0:	00000400 	.word	0x00000400
 80196a4:	24010c3c 	.word	0x24010c3c
 80196a8:	240190c8 	.word	0x240190c8

080196ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80196ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80196e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80196b0:	f7e7 fa3a 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80196b4:	480c      	ldr	r0, [pc, #48]	@ (80196e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80196b6:	490d      	ldr	r1, [pc, #52]	@ (80196ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80196b8:	4a0d      	ldr	r2, [pc, #52]	@ (80196f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80196ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80196bc:	e002      	b.n	80196c4 <LoopCopyDataInit>

080196be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80196be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80196c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80196c2:	3304      	adds	r3, #4

080196c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80196c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80196c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80196c8:	d3f9      	bcc.n	80196be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80196ca:	4a0a      	ldr	r2, [pc, #40]	@ (80196f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80196cc:	4c0a      	ldr	r4, [pc, #40]	@ (80196f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80196ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80196d0:	e001      	b.n	80196d6 <LoopFillZerobss>

080196d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80196d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80196d4:	3204      	adds	r2, #4

080196d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80196d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80196d8:	d3fb      	bcc.n	80196d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80196da:	f009 f89d 	bl	8022818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80196de:	f7e7 fb11 	bl	8000d04 <main>
  bx  lr
 80196e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80196e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80196e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80196ec:	24000804 	.word	0x24000804
  ldr r2, =_sidata
 80196f0:	08032444 	.word	0x08032444
  ldr r2, =_sbss
 80196f4:	240008c8 	.word	0x240008c8
  ldr r4, =_ebss
 80196f8:	240190c4 	.word	0x240190c4

080196fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80196fc:	e7fe      	b.n	80196fc <ADC3_IRQHandler>
	...

08019700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019706:	2003      	movs	r0, #3
 8019708:	f000 f923 	bl	8019952 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801970c:	f002 f8c0 	bl	801b890 <HAL_RCC_GetSysClockFreq>
 8019710:	4602      	mov	r2, r0
 8019712:	4b15      	ldr	r3, [pc, #84]	@ (8019768 <HAL_Init+0x68>)
 8019714:	699b      	ldr	r3, [r3, #24]
 8019716:	0a1b      	lsrs	r3, r3, #8
 8019718:	f003 030f 	and.w	r3, r3, #15
 801971c:	4913      	ldr	r1, [pc, #76]	@ (801976c <HAL_Init+0x6c>)
 801971e:	5ccb      	ldrb	r3, [r1, r3]
 8019720:	f003 031f 	and.w	r3, r3, #31
 8019724:	fa22 f303 	lsr.w	r3, r2, r3
 8019728:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801972a:	4b0f      	ldr	r3, [pc, #60]	@ (8019768 <HAL_Init+0x68>)
 801972c:	699b      	ldr	r3, [r3, #24]
 801972e:	f003 030f 	and.w	r3, r3, #15
 8019732:	4a0e      	ldr	r2, [pc, #56]	@ (801976c <HAL_Init+0x6c>)
 8019734:	5cd3      	ldrb	r3, [r2, r3]
 8019736:	f003 031f 	and.w	r3, r3, #31
 801973a:	687a      	ldr	r2, [r7, #4]
 801973c:	fa22 f303 	lsr.w	r3, r2, r3
 8019740:	4a0b      	ldr	r2, [pc, #44]	@ (8019770 <HAL_Init+0x70>)
 8019742:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8019744:	4a0b      	ldr	r2, [pc, #44]	@ (8019774 <HAL_Init+0x74>)
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801974a:	200f      	movs	r0, #15
 801974c:	f7ff fe72 	bl	8019434 <HAL_InitTick>
 8019750:	4603      	mov	r3, r0
 8019752:	2b00      	cmp	r3, #0
 8019754:	d001      	beq.n	801975a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8019756:	2301      	movs	r3, #1
 8019758:	e002      	b.n	8019760 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801975a:	f7ff fc5f 	bl	801901c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801975e:	2300      	movs	r3, #0
}
 8019760:	4618      	mov	r0, r3
 8019762:	3708      	adds	r7, #8
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}
 8019768:	58024400 	.word	0x58024400
 801976c:	080260bc 	.word	0x080260bc
 8019770:	24000004 	.word	0x24000004
 8019774:	24000000 	.word	0x24000000

08019778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019778:	b480      	push	{r7}
 801977a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801977c:	4b06      	ldr	r3, [pc, #24]	@ (8019798 <HAL_IncTick+0x20>)
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	461a      	mov	r2, r3
 8019782:	4b06      	ldr	r3, [pc, #24]	@ (801979c <HAL_IncTick+0x24>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	4413      	add	r3, r2
 8019788:	4a04      	ldr	r2, [pc, #16]	@ (801979c <HAL_IncTick+0x24>)
 801978a:	6013      	str	r3, [r2, #0]
}
 801978c:	bf00      	nop
 801978e:	46bd      	mov	sp, r7
 8019790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019794:	4770      	bx	lr
 8019796:	bf00      	nop
 8019798:	240007a0 	.word	0x240007a0
 801979c:	24010c40 	.word	0x24010c40

080197a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80197a0:	b480      	push	{r7}
 80197a2:	af00      	add	r7, sp, #0
  return uwTick;
 80197a4:	4b03      	ldr	r3, [pc, #12]	@ (80197b4 <HAL_GetTick+0x14>)
 80197a6:	681b      	ldr	r3, [r3, #0]
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	46bd      	mov	sp, r7
 80197ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b0:	4770      	bx	lr
 80197b2:	bf00      	nop
 80197b4:	24010c40 	.word	0x24010c40

080197b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80197b8:	b480      	push	{r7}
 80197ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80197bc:	4b03      	ldr	r3, [pc, #12]	@ (80197cc <HAL_GetREVID+0x14>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	0c1b      	lsrs	r3, r3, #16
}
 80197c2:	4618      	mov	r0, r3
 80197c4:	46bd      	mov	sp, r7
 80197c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ca:	4770      	bx	lr
 80197cc:	5c001000 	.word	0x5c001000

080197d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80197d0:	b480      	push	{r7}
 80197d2:	b083      	sub	sp, #12
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80197d8:	4b06      	ldr	r3, [pc, #24]	@ (80197f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80197da:	685b      	ldr	r3, [r3, #4]
 80197dc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80197e0:	4904      	ldr	r1, [pc, #16]	@ (80197f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	4313      	orrs	r3, r2
 80197e6:	604b      	str	r3, [r1, #4]
}
 80197e8:	bf00      	nop
 80197ea:	370c      	adds	r7, #12
 80197ec:	46bd      	mov	sp, r7
 80197ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f2:	4770      	bx	lr
 80197f4:	58000400 	.word	0x58000400

080197f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80197f8:	b480      	push	{r7}
 80197fa:	b085      	sub	sp, #20
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	f003 0307 	and.w	r3, r3, #7
 8019806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019808:	4b0b      	ldr	r3, [pc, #44]	@ (8019838 <__NVIC_SetPriorityGrouping+0x40>)
 801980a:	68db      	ldr	r3, [r3, #12]
 801980c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801980e:	68ba      	ldr	r2, [r7, #8]
 8019810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019814:	4013      	ands	r3, r2
 8019816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801981c:	68bb      	ldr	r3, [r7, #8]
 801981e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019820:	4b06      	ldr	r3, [pc, #24]	@ (801983c <__NVIC_SetPriorityGrouping+0x44>)
 8019822:	4313      	orrs	r3, r2
 8019824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019826:	4a04      	ldr	r2, [pc, #16]	@ (8019838 <__NVIC_SetPriorityGrouping+0x40>)
 8019828:	68bb      	ldr	r3, [r7, #8]
 801982a:	60d3      	str	r3, [r2, #12]
}
 801982c:	bf00      	nop
 801982e:	3714      	adds	r7, #20
 8019830:	46bd      	mov	sp, r7
 8019832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019836:	4770      	bx	lr
 8019838:	e000ed00 	.word	0xe000ed00
 801983c:	05fa0000 	.word	0x05fa0000

08019840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8019840:	b480      	push	{r7}
 8019842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019844:	4b04      	ldr	r3, [pc, #16]	@ (8019858 <__NVIC_GetPriorityGrouping+0x18>)
 8019846:	68db      	ldr	r3, [r3, #12]
 8019848:	0a1b      	lsrs	r3, r3, #8
 801984a:	f003 0307 	and.w	r3, r3, #7
}
 801984e:	4618      	mov	r0, r3
 8019850:	46bd      	mov	sp, r7
 8019852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019856:	4770      	bx	lr
 8019858:	e000ed00 	.word	0xe000ed00

0801985c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801985c:	b480      	push	{r7}
 801985e:	b083      	sub	sp, #12
 8019860:	af00      	add	r7, sp, #0
 8019862:	4603      	mov	r3, r0
 8019864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801986a:	2b00      	cmp	r3, #0
 801986c:	db0b      	blt.n	8019886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801986e:	88fb      	ldrh	r3, [r7, #6]
 8019870:	f003 021f 	and.w	r2, r3, #31
 8019874:	4907      	ldr	r1, [pc, #28]	@ (8019894 <__NVIC_EnableIRQ+0x38>)
 8019876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801987a:	095b      	lsrs	r3, r3, #5
 801987c:	2001      	movs	r0, #1
 801987e:	fa00 f202 	lsl.w	r2, r0, r2
 8019882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8019886:	bf00      	nop
 8019888:	370c      	adds	r7, #12
 801988a:	46bd      	mov	sp, r7
 801988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019890:	4770      	bx	lr
 8019892:	bf00      	nop
 8019894:	e000e100 	.word	0xe000e100

08019898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8019898:	b480      	push	{r7}
 801989a:	b083      	sub	sp, #12
 801989c:	af00      	add	r7, sp, #0
 801989e:	4603      	mov	r3, r0
 80198a0:	6039      	str	r1, [r7, #0]
 80198a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80198a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	db0a      	blt.n	80198c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80198ac:	683b      	ldr	r3, [r7, #0]
 80198ae:	b2da      	uxtb	r2, r3
 80198b0:	490c      	ldr	r1, [pc, #48]	@ (80198e4 <__NVIC_SetPriority+0x4c>)
 80198b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80198b6:	0112      	lsls	r2, r2, #4
 80198b8:	b2d2      	uxtb	r2, r2
 80198ba:	440b      	add	r3, r1
 80198bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80198c0:	e00a      	b.n	80198d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80198c2:	683b      	ldr	r3, [r7, #0]
 80198c4:	b2da      	uxtb	r2, r3
 80198c6:	4908      	ldr	r1, [pc, #32]	@ (80198e8 <__NVIC_SetPriority+0x50>)
 80198c8:	88fb      	ldrh	r3, [r7, #6]
 80198ca:	f003 030f 	and.w	r3, r3, #15
 80198ce:	3b04      	subs	r3, #4
 80198d0:	0112      	lsls	r2, r2, #4
 80198d2:	b2d2      	uxtb	r2, r2
 80198d4:	440b      	add	r3, r1
 80198d6:	761a      	strb	r2, [r3, #24]
}
 80198d8:	bf00      	nop
 80198da:	370c      	adds	r7, #12
 80198dc:	46bd      	mov	sp, r7
 80198de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e2:	4770      	bx	lr
 80198e4:	e000e100 	.word	0xe000e100
 80198e8:	e000ed00 	.word	0xe000ed00

080198ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80198ec:	b480      	push	{r7}
 80198ee:	b089      	sub	sp, #36	@ 0x24
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	60f8      	str	r0, [r7, #12]
 80198f4:	60b9      	str	r1, [r7, #8]
 80198f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	f003 0307 	and.w	r3, r3, #7
 80198fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019900:	69fb      	ldr	r3, [r7, #28]
 8019902:	f1c3 0307 	rsb	r3, r3, #7
 8019906:	2b04      	cmp	r3, #4
 8019908:	bf28      	it	cs
 801990a:	2304      	movcs	r3, #4
 801990c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801990e:	69fb      	ldr	r3, [r7, #28]
 8019910:	3304      	adds	r3, #4
 8019912:	2b06      	cmp	r3, #6
 8019914:	d902      	bls.n	801991c <NVIC_EncodePriority+0x30>
 8019916:	69fb      	ldr	r3, [r7, #28]
 8019918:	3b03      	subs	r3, #3
 801991a:	e000      	b.n	801991e <NVIC_EncodePriority+0x32>
 801991c:	2300      	movs	r3, #0
 801991e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019920:	f04f 32ff 	mov.w	r2, #4294967295
 8019924:	69bb      	ldr	r3, [r7, #24]
 8019926:	fa02 f303 	lsl.w	r3, r2, r3
 801992a:	43da      	mvns	r2, r3
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	401a      	ands	r2, r3
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019934:	f04f 31ff 	mov.w	r1, #4294967295
 8019938:	697b      	ldr	r3, [r7, #20]
 801993a:	fa01 f303 	lsl.w	r3, r1, r3
 801993e:	43d9      	mvns	r1, r3
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019944:	4313      	orrs	r3, r2
         );
}
 8019946:	4618      	mov	r0, r3
 8019948:	3724      	adds	r7, #36	@ 0x24
 801994a:	46bd      	mov	sp, r7
 801994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019950:	4770      	bx	lr

08019952 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019952:	b580      	push	{r7, lr}
 8019954:	b082      	sub	sp, #8
 8019956:	af00      	add	r7, sp, #0
 8019958:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801995a:	6878      	ldr	r0, [r7, #4]
 801995c:	f7ff ff4c 	bl	80197f8 <__NVIC_SetPriorityGrouping>
}
 8019960:	bf00      	nop
 8019962:	3708      	adds	r7, #8
 8019964:	46bd      	mov	sp, r7
 8019966:	bd80      	pop	{r7, pc}

08019968 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b086      	sub	sp, #24
 801996c:	af00      	add	r7, sp, #0
 801996e:	4603      	mov	r3, r0
 8019970:	60b9      	str	r1, [r7, #8]
 8019972:	607a      	str	r2, [r7, #4]
 8019974:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019976:	f7ff ff63 	bl	8019840 <__NVIC_GetPriorityGrouping>
 801997a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801997c:	687a      	ldr	r2, [r7, #4]
 801997e:	68b9      	ldr	r1, [r7, #8]
 8019980:	6978      	ldr	r0, [r7, #20]
 8019982:	f7ff ffb3 	bl	80198ec <NVIC_EncodePriority>
 8019986:	4602      	mov	r2, r0
 8019988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801998c:	4611      	mov	r1, r2
 801998e:	4618      	mov	r0, r3
 8019990:	f7ff ff82 	bl	8019898 <__NVIC_SetPriority>
}
 8019994:	bf00      	nop
 8019996:	3718      	adds	r7, #24
 8019998:	46bd      	mov	sp, r7
 801999a:	bd80      	pop	{r7, pc}

0801999c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b082      	sub	sp, #8
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	4603      	mov	r3, r0
 80199a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80199a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80199aa:	4618      	mov	r0, r3
 80199ac:	f7ff ff56 	bl	801985c <__NVIC_EnableIRQ>
}
 80199b0:	bf00      	nop
 80199b2:	3708      	adds	r7, #8
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}

080199b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b084      	sub	sp, #16
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d101      	bne.n	80199ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80199c6:	2301      	movs	r3, #1
 80199c8:	e0e3      	b.n	8019b92 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d106      	bne.n	80199e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2220      	movs	r2, #32
 80199d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80199dc:	6878      	ldr	r0, [r7, #4]
 80199de:	f7ff fb3b 	bl	8019058 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80199e2:	4b6e      	ldr	r3, [pc, #440]	@ (8019b9c <HAL_ETH_Init+0x1e4>)
 80199e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80199e8:	4a6c      	ldr	r2, [pc, #432]	@ (8019b9c <HAL_ETH_Init+0x1e4>)
 80199ea:	f043 0302 	orr.w	r3, r3, #2
 80199ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80199f2:	4b6a      	ldr	r3, [pc, #424]	@ (8019b9c <HAL_ETH_Init+0x1e4>)
 80199f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80199f8:	f003 0302 	and.w	r3, r3, #2
 80199fc:	60bb      	str	r3, [r7, #8]
 80199fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	7a1b      	ldrb	r3, [r3, #8]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d103      	bne.n	8019a10 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8019a08:	2000      	movs	r0, #0
 8019a0a:	f7ff fee1 	bl	80197d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8019a0e:	e003      	b.n	8019a18 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8019a10:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8019a14:	f7ff fedc 	bl	80197d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8019a18:	4b61      	ldr	r3, [pc, #388]	@ (8019ba0 <HAL_ETH_Init+0x1e8>)
 8019a1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	687a      	ldr	r2, [r7, #4]
 8019a28:	6812      	ldr	r2, [r2, #0]
 8019a2a:	f043 0301 	orr.w	r3, r3, #1
 8019a2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019a32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019a34:	f7ff feb4 	bl	80197a0 <HAL_GetTick>
 8019a38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8019a3a:	e011      	b.n	8019a60 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8019a3c:	f7ff feb0 	bl	80197a0 <HAL_GetTick>
 8019a40:	4602      	mov	r2, r0
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	1ad3      	subs	r3, r2, r3
 8019a46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8019a4a:	d909      	bls.n	8019a60 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	2204      	movs	r2, #4
 8019a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	22e0      	movs	r2, #224	@ 0xe0
 8019a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	e098      	b.n	8019b92 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	f003 0301 	and.w	r3, r3, #1
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d1e4      	bne.n	8019a3c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8019a72:	6878      	ldr	r0, [r7, #4]
 8019a74:	f000 f89e 	bl	8019bb4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8019a78:	f002 f884 	bl	801bb84 <HAL_RCC_GetHCLKFreq>
 8019a7c:	4603      	mov	r3, r0
 8019a7e:	4a49      	ldr	r2, [pc, #292]	@ (8019ba4 <HAL_ETH_Init+0x1ec>)
 8019a80:	fba2 2303 	umull	r2, r3, r2, r3
 8019a84:	0c9a      	lsrs	r2, r3, #18
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	3a01      	subs	r2, #1
 8019a8c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8019a90:	6878      	ldr	r0, [r7, #4]
 8019a92:	f000 fa81 	bl	8019f98 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019a9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8019aa2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8019aa6:	687a      	ldr	r2, [r7, #4]
 8019aa8:	6812      	ldr	r2, [r2, #0]
 8019aaa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8019aae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019ab2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	695b      	ldr	r3, [r3, #20]
 8019aba:	f003 0303 	and.w	r3, r3, #3
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d009      	beq.n	8019ad6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	22e0      	movs	r2, #224	@ 0xe0
 8019ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8019ad2:	2301      	movs	r3, #1
 8019ad4:	e05d      	b.n	8019b92 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019ade:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8019ae2:	4b31      	ldr	r3, [pc, #196]	@ (8019ba8 <HAL_ETH_Init+0x1f0>)
 8019ae4:	4013      	ands	r3, r2
 8019ae6:	687a      	ldr	r2, [r7, #4]
 8019ae8:	6952      	ldr	r2, [r2, #20]
 8019aea:	0051      	lsls	r1, r2, #1
 8019aec:	687a      	ldr	r2, [r7, #4]
 8019aee:	6812      	ldr	r2, [r2, #0]
 8019af0:	430b      	orrs	r3, r1
 8019af2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019af6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8019afa:	6878      	ldr	r0, [r7, #4]
 8019afc:	f000 fae9 	bl	801a0d2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8019b00:	6878      	ldr	r0, [r7, #4]
 8019b02:	f000 fb2f 	bl	801a164 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	685b      	ldr	r3, [r3, #4]
 8019b0a:	3305      	adds	r3, #5
 8019b0c:	781b      	ldrb	r3, [r3, #0]
 8019b0e:	021a      	lsls	r2, r3, #8
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	685b      	ldr	r3, [r3, #4]
 8019b14:	3304      	adds	r3, #4
 8019b16:	781b      	ldrb	r3, [r3, #0]
 8019b18:	4619      	mov	r1, r3
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	430a      	orrs	r2, r1
 8019b20:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	685b      	ldr	r3, [r3, #4]
 8019b28:	3303      	adds	r3, #3
 8019b2a:	781b      	ldrb	r3, [r3, #0]
 8019b2c:	061a      	lsls	r2, r3, #24
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	685b      	ldr	r3, [r3, #4]
 8019b32:	3302      	adds	r3, #2
 8019b34:	781b      	ldrb	r3, [r3, #0]
 8019b36:	041b      	lsls	r3, r3, #16
 8019b38:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	685b      	ldr	r3, [r3, #4]
 8019b3e:	3301      	adds	r3, #1
 8019b40:	781b      	ldrb	r3, [r3, #0]
 8019b42:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8019b44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	685b      	ldr	r3, [r3, #4]
 8019b4a:	781b      	ldrb	r3, [r3, #0]
 8019b4c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8019b52:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8019b54:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	681a      	ldr	r2, [r3, #0]
 8019b64:	4b11      	ldr	r3, [pc, #68]	@ (8019bac <HAL_ETH_Init+0x1f4>)
 8019b66:	430b      	orrs	r3, r1
 8019b68:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	681a      	ldr	r2, [r3, #0]
 8019b78:	4b0d      	ldr	r3, [pc, #52]	@ (8019bb0 <HAL_ETH_Init+0x1f8>)
 8019b7a:	430b      	orrs	r3, r1
 8019b7c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	2200      	movs	r2, #0
 8019b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	2210      	movs	r2, #16
 8019b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019b90:	2300      	movs	r3, #0
}
 8019b92:	4618      	mov	r0, r3
 8019b94:	3710      	adds	r7, #16
 8019b96:	46bd      	mov	sp, r7
 8019b98:	bd80      	pop	{r7, pc}
 8019b9a:	bf00      	nop
 8019b9c:	58024400 	.word	0x58024400
 8019ba0:	58000400 	.word	0x58000400
 8019ba4:	431bde83 	.word	0x431bde83
 8019ba8:	ffff8001 	.word	0xffff8001
 8019bac:	0c020060 	.word	0x0c020060
 8019bb0:	0c20c000 	.word	0x0c20c000

08019bb4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b084      	sub	sp, #16
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019bc4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8019bcc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8019bce:	f001 ffd9 	bl	801bb84 <HAL_RCC_GetHCLKFreq>
 8019bd2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8019bd4:	68bb      	ldr	r3, [r7, #8]
 8019bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8019c40 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8019bd8:	4293      	cmp	r3, r2
 8019bda:	d804      	bhi.n	8019be6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8019be2:	60fb      	str	r3, [r7, #12]
 8019be4:	e022      	b.n	8019c2c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	4a16      	ldr	r2, [pc, #88]	@ (8019c44 <HAL_ETH_SetMDIOClockRange+0x90>)
 8019bea:	4293      	cmp	r3, r2
 8019bec:	d204      	bcs.n	8019bf8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8019bf4:	60fb      	str	r3, [r7, #12]
 8019bf6:	e019      	b.n	8019c2c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	4a13      	ldr	r2, [pc, #76]	@ (8019c48 <HAL_ETH_SetMDIOClockRange+0x94>)
 8019bfc:	4293      	cmp	r3, r2
 8019bfe:	d915      	bls.n	8019c2c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	4a12      	ldr	r2, [pc, #72]	@ (8019c4c <HAL_ETH_SetMDIOClockRange+0x98>)
 8019c04:	4293      	cmp	r3, r2
 8019c06:	d804      	bhi.n	8019c12 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019c0e:	60fb      	str	r3, [r7, #12]
 8019c10:	e00c      	b.n	8019c2c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	4a0e      	ldr	r2, [pc, #56]	@ (8019c50 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8019c16:	4293      	cmp	r3, r2
 8019c18:	d804      	bhi.n	8019c24 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019c20:	60fb      	str	r3, [r7, #12]
 8019c22:	e003      	b.n	8019c2c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8019c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	68fa      	ldr	r2, [r7, #12]
 8019c32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8019c36:	bf00      	nop
 8019c38:	3710      	adds	r7, #16
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}
 8019c3e:	bf00      	nop
 8019c40:	02160ebf 	.word	0x02160ebf
 8019c44:	03938700 	.word	0x03938700
 8019c48:	05f5e0ff 	.word	0x05f5e0ff
 8019c4c:	08f0d17f 	.word	0x08f0d17f
 8019c50:	0ee6b27f 	.word	0x0ee6b27f

08019c54 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8019c54:	b480      	push	{r7}
 8019c56:	b085      	sub	sp, #20
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
 8019c5c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8019c5e:	683b      	ldr	r3, [r7, #0]
 8019c60:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8019c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8019c68:	683b      	ldr	r3, [r7, #0]
 8019c6a:	791b      	ldrb	r3, [r3, #4]
 8019c6c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8019c6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8019c70:	683b      	ldr	r3, [r7, #0]
 8019c72:	7b1b      	ldrb	r3, [r3, #12]
 8019c74:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8019c76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8019c78:	683b      	ldr	r3, [r7, #0]
 8019c7a:	7b5b      	ldrb	r3, [r3, #13]
 8019c7c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8019c7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8019c80:	683b      	ldr	r3, [r7, #0]
 8019c82:	7b9b      	ldrb	r3, [r3, #14]
 8019c84:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8019c86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8019c88:	683b      	ldr	r3, [r7, #0]
 8019c8a:	7bdb      	ldrb	r3, [r3, #15]
 8019c8c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8019c8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8019c90:	683a      	ldr	r2, [r7, #0]
 8019c92:	7c12      	ldrb	r2, [r2, #16]
 8019c94:	2a00      	cmp	r2, #0
 8019c96:	d102      	bne.n	8019c9e <ETH_SetMACConfig+0x4a>
 8019c98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8019c9c:	e000      	b.n	8019ca0 <ETH_SetMACConfig+0x4c>
 8019c9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8019ca0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8019ca2:	683a      	ldr	r2, [r7, #0]
 8019ca4:	7c52      	ldrb	r2, [r2, #17]
 8019ca6:	2a00      	cmp	r2, #0
 8019ca8:	d102      	bne.n	8019cb0 <ETH_SetMACConfig+0x5c>
 8019caa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8019cae:	e000      	b.n	8019cb2 <ETH_SetMACConfig+0x5e>
 8019cb0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8019cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	7c9b      	ldrb	r3, [r3, #18]
 8019cb8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8019cba:	431a      	orrs	r2, r3
               macconf->Speed |
 8019cbc:	683b      	ldr	r3, [r7, #0]
 8019cbe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8019cc0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8019cc2:	683b      	ldr	r3, [r7, #0]
 8019cc4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8019cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	7f1b      	ldrb	r3, [r3, #28]
 8019ccc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8019cce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8019cd0:	683b      	ldr	r3, [r7, #0]
 8019cd2:	7f5b      	ldrb	r3, [r3, #29]
 8019cd4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8019cd6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8019cd8:	683a      	ldr	r2, [r7, #0]
 8019cda:	7f92      	ldrb	r2, [r2, #30]
 8019cdc:	2a00      	cmp	r2, #0
 8019cde:	d102      	bne.n	8019ce6 <ETH_SetMACConfig+0x92>
 8019ce0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019ce4:	e000      	b.n	8019ce8 <ETH_SetMACConfig+0x94>
 8019ce6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8019ce8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	7fdb      	ldrb	r3, [r3, #31]
 8019cee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8019cf0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8019cf2:	683a      	ldr	r2, [r7, #0]
 8019cf4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019cf8:	2a00      	cmp	r2, #0
 8019cfa:	d102      	bne.n	8019d02 <ETH_SetMACConfig+0xae>
 8019cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019d00:	e000      	b.n	8019d04 <ETH_SetMACConfig+0xb0>
 8019d02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8019d04:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8019d06:	683b      	ldr	r3, [r7, #0]
 8019d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8019d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019d12:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8019d14:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8019d1a:	4313      	orrs	r3, r2
 8019d1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	681a      	ldr	r2, [r3, #0]
 8019d24:	4b56      	ldr	r3, [pc, #344]	@ (8019e80 <ETH_SetMACConfig+0x22c>)
 8019d26:	4013      	ands	r3, r2
 8019d28:	687a      	ldr	r2, [r7, #4]
 8019d2a:	6812      	ldr	r2, [r2, #0]
 8019d2c:	68f9      	ldr	r1, [r7, #12]
 8019d2e:	430b      	orrs	r3, r1
 8019d30:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8019d32:	683b      	ldr	r3, [r7, #0]
 8019d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d36:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8019d38:	683b      	ldr	r3, [r7, #0]
 8019d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019d3e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8019d40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8019d42:	683b      	ldr	r3, [r7, #0]
 8019d44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019d48:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8019d4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019d52:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8019d54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8019d56:	683a      	ldr	r2, [r7, #0]
 8019d58:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019d5c:	2a00      	cmp	r2, #0
 8019d5e:	d102      	bne.n	8019d66 <ETH_SetMACConfig+0x112>
 8019d60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019d64:	e000      	b.n	8019d68 <ETH_SetMACConfig+0x114>
 8019d66:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8019d68:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8019d6a:	683b      	ldr	r3, [r7, #0]
 8019d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8019d6e:	4313      	orrs	r3, r2
 8019d70:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	685a      	ldr	r2, [r3, #4]
 8019d78:	4b42      	ldr	r3, [pc, #264]	@ (8019e84 <ETH_SetMACConfig+0x230>)
 8019d7a:	4013      	ands	r3, r2
 8019d7c:	687a      	ldr	r2, [r7, #4]
 8019d7e:	6812      	ldr	r2, [r2, #0]
 8019d80:	68f9      	ldr	r1, [r7, #12]
 8019d82:	430b      	orrs	r3, r1
 8019d84:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8019d86:	683b      	ldr	r3, [r7, #0]
 8019d88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019d8c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8019d8e:	683b      	ldr	r3, [r7, #0]
 8019d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8019d92:	4313      	orrs	r3, r2
 8019d94:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	68da      	ldr	r2, [r3, #12]
 8019d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8019e88 <ETH_SetMACConfig+0x234>)
 8019d9e:	4013      	ands	r3, r2
 8019da0:	687a      	ldr	r2, [r7, #4]
 8019da2:	6812      	ldr	r2, [r2, #0]
 8019da4:	68f9      	ldr	r1, [r7, #12]
 8019da6:	430b      	orrs	r3, r1
 8019da8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8019daa:	683b      	ldr	r3, [r7, #0]
 8019dac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8019db0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8019db2:	683b      	ldr	r3, [r7, #0]
 8019db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8019db6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8019db8:	683a      	ldr	r2, [r7, #0]
 8019dba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8019dbe:	2a00      	cmp	r2, #0
 8019dc0:	d101      	bne.n	8019dc6 <ETH_SetMACConfig+0x172>
 8019dc2:	2280      	movs	r2, #128	@ 0x80
 8019dc4:	e000      	b.n	8019dc8 <ETH_SetMACConfig+0x174>
 8019dc6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8019dc8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019dce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8019dd0:	4313      	orrs	r3, r2
 8019dd2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019dda:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8019dde:	4013      	ands	r3, r2
 8019de0:	687a      	ldr	r2, [r7, #4]
 8019de2:	6812      	ldr	r2, [r2, #0]
 8019de4:	68f9      	ldr	r1, [r7, #12]
 8019de6:	430b      	orrs	r3, r1
 8019de8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8019dea:	683b      	ldr	r3, [r7, #0]
 8019dec:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019df0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8019df2:	683b      	ldr	r3, [r7, #0]
 8019df4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019df8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8019dfa:	4313      	orrs	r3, r2
 8019dfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019e06:	f023 0103 	bic.w	r1, r3, #3
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	68fa      	ldr	r2, [r7, #12]
 8019e10:	430a      	orrs	r2, r1
 8019e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019e1e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	430a      	orrs	r2, r1
 8019e2c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8019e30:	683b      	ldr	r3, [r7, #0]
 8019e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8019e34:	683a      	ldr	r2, [r7, #0]
 8019e36:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8019e3a:	2a00      	cmp	r2, #0
 8019e3c:	d101      	bne.n	8019e42 <ETH_SetMACConfig+0x1ee>
 8019e3e:	2240      	movs	r2, #64	@ 0x40
 8019e40:	e000      	b.n	8019e44 <ETH_SetMACConfig+0x1f0>
 8019e42:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8019e44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8019e4c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8019e4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8019e50:	683b      	ldr	r3, [r7, #0]
 8019e52:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8019e56:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8019e58:	4313      	orrs	r3, r2
 8019e5a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019e64:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	68fa      	ldr	r2, [r7, #12]
 8019e6e:	430a      	orrs	r2, r1
 8019e70:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8019e74:	bf00      	nop
 8019e76:	3714      	adds	r7, #20
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7e:	4770      	bx	lr
 8019e80:	00048083 	.word	0x00048083
 8019e84:	c0f88000 	.word	0xc0f88000
 8019e88:	fffffef0 	.word	0xfffffef0

08019e8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8019e8c:	b480      	push	{r7}
 8019e8e:	b085      	sub	sp, #20
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
 8019e94:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019e9e:	681a      	ldr	r2, [r3, #0]
 8019ea0:	4b38      	ldr	r3, [pc, #224]	@ (8019f84 <ETH_SetDMAConfig+0xf8>)
 8019ea2:	4013      	ands	r3, r2
 8019ea4:	683a      	ldr	r2, [r7, #0]
 8019ea6:	6811      	ldr	r1, [r2, #0]
 8019ea8:	687a      	ldr	r2, [r7, #4]
 8019eaa:	6812      	ldr	r2, [r2, #0]
 8019eac:	430b      	orrs	r3, r1
 8019eae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019eb2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8019eb4:	683b      	ldr	r3, [r7, #0]
 8019eb6:	791b      	ldrb	r3, [r3, #4]
 8019eb8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8019eba:	683b      	ldr	r3, [r7, #0]
 8019ebc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8019ebe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8019ec0:	683b      	ldr	r3, [r7, #0]
 8019ec2:	7b1b      	ldrb	r3, [r3, #12]
 8019ec4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8019ec6:	4313      	orrs	r3, r2
 8019ec8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019ed2:	685a      	ldr	r2, [r3, #4]
 8019ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8019f88 <ETH_SetDMAConfig+0xfc>)
 8019ed6:	4013      	ands	r3, r2
 8019ed8:	687a      	ldr	r2, [r7, #4]
 8019eda:	6812      	ldr	r2, [r2, #0]
 8019edc:	68f9      	ldr	r1, [r7, #12]
 8019ede:	430b      	orrs	r3, r1
 8019ee0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019ee4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	7b5b      	ldrb	r3, [r3, #13]
 8019eea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8019eec:	683b      	ldr	r3, [r7, #0]
 8019eee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8019ef0:	4313      	orrs	r3, r2
 8019ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019efc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8019f00:	4b22      	ldr	r3, [pc, #136]	@ (8019f8c <ETH_SetDMAConfig+0x100>)
 8019f02:	4013      	ands	r3, r2
 8019f04:	687a      	ldr	r2, [r7, #4]
 8019f06:	6812      	ldr	r2, [r2, #0]
 8019f08:	68f9      	ldr	r1, [r7, #12]
 8019f0a:	430b      	orrs	r3, r1
 8019f0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f10:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8019f14:	683b      	ldr	r3, [r7, #0]
 8019f16:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	7d1b      	ldrb	r3, [r3, #20]
 8019f1c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8019f1e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	7f5b      	ldrb	r3, [r3, #29]
 8019f24:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8019f26:	4313      	orrs	r3, r2
 8019f28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019f32:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8019f36:	4b16      	ldr	r3, [pc, #88]	@ (8019f90 <ETH_SetDMAConfig+0x104>)
 8019f38:	4013      	ands	r3, r2
 8019f3a:	687a      	ldr	r2, [r7, #4]
 8019f3c:	6812      	ldr	r2, [r2, #0]
 8019f3e:	68f9      	ldr	r1, [r7, #12]
 8019f40:	430b      	orrs	r3, r1
 8019f42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f46:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8019f4a:	683b      	ldr	r3, [r7, #0]
 8019f4c:	7f1b      	ldrb	r3, [r3, #28]
 8019f4e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8019f50:	683b      	ldr	r3, [r7, #0]
 8019f52:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8019f54:	4313      	orrs	r3, r2
 8019f56:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019f60:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8019f64:	4b0b      	ldr	r3, [pc, #44]	@ (8019f94 <ETH_SetDMAConfig+0x108>)
 8019f66:	4013      	ands	r3, r2
 8019f68:	687a      	ldr	r2, [r7, #4]
 8019f6a:	6812      	ldr	r2, [r2, #0]
 8019f6c:	68f9      	ldr	r1, [r7, #12]
 8019f6e:	430b      	orrs	r3, r1
 8019f70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019f74:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8019f78:	bf00      	nop
 8019f7a:	3714      	adds	r7, #20
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f82:	4770      	bx	lr
 8019f84:	ffff87fd 	.word	0xffff87fd
 8019f88:	ffff2ffe 	.word	0xffff2ffe
 8019f8c:	fffec000 	.word	0xfffec000
 8019f90:	ffc0efef 	.word	0xffc0efef
 8019f94:	7fc0ffff 	.word	0x7fc0ffff

08019f98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b0a4      	sub	sp, #144	@ 0x90
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8019fa0:	2301      	movs	r3, #1
 8019fa2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8019faa:	2300      	movs	r3, #0
 8019fac:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8019fbc:	2301      	movs	r3, #1
 8019fbe:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8019fc8:	2300      	movs	r3, #0
 8019fca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8019fce:	2301      	movs	r3, #1
 8019fd0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8019fd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8019fda:	2300      	movs	r3, #0
 8019fdc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8019fea:	2300      	movs	r3, #0
 8019fec:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8019ff0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8019ff4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 801a000:	2301      	movs	r3, #1
 801a002:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 801a006:	2300      	movs	r3, #0
 801a008:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 801a00c:	2300      	movs	r3, #0
 801a00e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801a012:	2300      	movs	r3, #0
 801a014:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 801a016:	2300      	movs	r3, #0
 801a018:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801a01a:	2300      	movs	r3, #0
 801a01c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 801a01e:	2300      	movs	r3, #0
 801a020:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801a024:	2300      	movs	r3, #0
 801a026:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 801a02a:	2301      	movs	r3, #1
 801a02c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801a030:	2320      	movs	r3, #32
 801a032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 801a036:	2301      	movs	r3, #1
 801a038:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 801a03c:	2300      	movs	r3, #0
 801a03e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801a042:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801a046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 801a048:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a04c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 801a04e:	2300      	movs	r3, #0
 801a050:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801a054:	2302      	movs	r3, #2
 801a056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 801a05a:	2300      	movs	r3, #0
 801a05c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801a060:	2300      	movs	r3, #0
 801a062:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801a066:	2300      	movs	r3, #0
 801a068:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 801a06c:	2301      	movs	r3, #1
 801a06e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 801a072:	2300      	movs	r3, #0
 801a074:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 801a076:	2301      	movs	r3, #1
 801a078:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801a07c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a080:	4619      	mov	r1, r3
 801a082:	6878      	ldr	r0, [r7, #4]
 801a084:	f7ff fde6 	bl	8019c54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801a088:	2301      	movs	r3, #1
 801a08a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801a08c:	2301      	movs	r3, #1
 801a08e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801a090:	2300      	movs	r3, #0
 801a092:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 801a094:	2300      	movs	r3, #0
 801a096:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 801a09a:	2300      	movs	r3, #0
 801a09c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801a09e:	2300      	movs	r3, #0
 801a0a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801a0a2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a0a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801a0ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a0b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 801a0b8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801a0bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801a0be:	f107 0308 	add.w	r3, r7, #8
 801a0c2:	4619      	mov	r1, r3
 801a0c4:	6878      	ldr	r0, [r7, #4]
 801a0c6:	f7ff fee1 	bl	8019e8c <ETH_SetDMAConfig>
}
 801a0ca:	bf00      	nop
 801a0cc:	3790      	adds	r7, #144	@ 0x90
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	bd80      	pop	{r7, pc}

0801a0d2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801a0d2:	b480      	push	{r7}
 801a0d4:	b085      	sub	sp, #20
 801a0d6:	af00      	add	r7, sp, #0
 801a0d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801a0da:	2300      	movs	r3, #0
 801a0dc:	60fb      	str	r3, [r7, #12]
 801a0de:	e01d      	b.n	801a11c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	68d9      	ldr	r1, [r3, #12]
 801a0e4:	68fa      	ldr	r2, [r7, #12]
 801a0e6:	4613      	mov	r3, r2
 801a0e8:	005b      	lsls	r3, r3, #1
 801a0ea:	4413      	add	r3, r2
 801a0ec:	00db      	lsls	r3, r3, #3
 801a0ee:	440b      	add	r3, r1
 801a0f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 801a0fe:	68bb      	ldr	r3, [r7, #8]
 801a100:	2200      	movs	r2, #0
 801a102:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 801a104:	68bb      	ldr	r3, [r7, #8]
 801a106:	2200      	movs	r2, #0
 801a108:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801a10a:	68b9      	ldr	r1, [r7, #8]
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	68fa      	ldr	r2, [r7, #12]
 801a110:	3206      	adds	r2, #6
 801a112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	3301      	adds	r3, #1
 801a11a:	60fb      	str	r3, [r7, #12]
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	2b03      	cmp	r3, #3
 801a120:	d9de      	bls.n	801a0e0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	2200      	movs	r2, #0
 801a126:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a130:	461a      	mov	r2, r3
 801a132:	2303      	movs	r3, #3
 801a134:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	68da      	ldr	r2, [r3, #12]
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a144:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	68da      	ldr	r2, [r3, #12]
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a154:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 801a158:	bf00      	nop
 801a15a:	3714      	adds	r7, #20
 801a15c:	46bd      	mov	sp, r7
 801a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a162:	4770      	bx	lr

0801a164 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801a164:	b480      	push	{r7}
 801a166:	b085      	sub	sp, #20
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801a16c:	2300      	movs	r3, #0
 801a16e:	60fb      	str	r3, [r7, #12]
 801a170:	e023      	b.n	801a1ba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	6919      	ldr	r1, [r3, #16]
 801a176:	68fa      	ldr	r2, [r7, #12]
 801a178:	4613      	mov	r3, r2
 801a17a:	005b      	lsls	r3, r3, #1
 801a17c:	4413      	add	r3, r2
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	440b      	add	r3, r1
 801a182:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	2200      	movs	r2, #0
 801a188:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 801a18a:	68bb      	ldr	r3, [r7, #8]
 801a18c:	2200      	movs	r2, #0
 801a18e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 801a190:	68bb      	ldr	r3, [r7, #8]
 801a192:	2200      	movs	r2, #0
 801a194:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 801a196:	68bb      	ldr	r3, [r7, #8]
 801a198:	2200      	movs	r2, #0
 801a19a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	2200      	movs	r2, #0
 801a1a0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 801a1a2:	68bb      	ldr	r3, [r7, #8]
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801a1a8:	68b9      	ldr	r1, [r7, #8]
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	68fa      	ldr	r2, [r7, #12]
 801a1ae:	3212      	adds	r2, #18
 801a1b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	3301      	adds	r3, #1
 801a1b8:	60fb      	str	r3, [r7, #12]
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	2b03      	cmp	r3, #3
 801a1be:	d9d8      	bls.n	801a172 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	2200      	movs	r2, #0
 801a1dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a1e6:	461a      	mov	r2, r3
 801a1e8:	2303      	movs	r3, #3
 801a1ea:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	691a      	ldr	r2, [r3, #16]
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a1fa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	691b      	ldr	r3, [r3, #16]
 801a202:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a20e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 801a212:	bf00      	nop
 801a214:	3714      	adds	r7, #20
 801a216:	46bd      	mov	sp, r7
 801a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a21c:	4770      	bx	lr
	...

0801a220 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b08a      	sub	sp, #40	@ 0x28
 801a224:	af00      	add	r7, sp, #0
 801a226:	60f8      	str	r0, [r7, #12]
 801a228:	60b9      	str	r1, [r7, #8]
 801a22a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 801a22c:	68bb      	ldr	r3, [r7, #8]
 801a22e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 801a234:	2308      	movs	r3, #8
 801a236:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a238:	4b40      	ldr	r3, [pc, #256]	@ (801a33c <HAL_FLASH_Program+0x11c>)
 801a23a:	7d1b      	ldrb	r3, [r3, #20]
 801a23c:	2b01      	cmp	r3, #1
 801a23e:	d101      	bne.n	801a244 <HAL_FLASH_Program+0x24>
 801a240:	2302      	movs	r3, #2
 801a242:	e076      	b.n	801a332 <HAL_FLASH_Program+0x112>
 801a244:	4b3d      	ldr	r3, [pc, #244]	@ (801a33c <HAL_FLASH_Program+0x11c>)
 801a246:	2201      	movs	r2, #1
 801a248:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801a250:	d306      	bcc.n	801a260 <HAL_FLASH_Program+0x40>
 801a252:	68bb      	ldr	r3, [r7, #8]
 801a254:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 801a258:	d202      	bcs.n	801a260 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 801a25a:	2301      	movs	r3, #1
 801a25c:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 801a25e:	e00c      	b.n	801a27a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 801a266:	d306      	bcc.n	801a276 <HAL_FLASH_Program+0x56>
 801a268:	68bb      	ldr	r3, [r7, #8]
 801a26a:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 801a26e:	d202      	bcs.n	801a276 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 801a270:	2302      	movs	r3, #2
 801a272:	61bb      	str	r3, [r7, #24]
 801a274:	e001      	b.n	801a27a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 801a276:	2301      	movs	r3, #1
 801a278:	e05b      	b.n	801a332 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a27a:	4b30      	ldr	r3, [pc, #192]	@ (801a33c <HAL_FLASH_Program+0x11c>)
 801a27c:	2200      	movs	r2, #0
 801a27e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 801a280:	69b9      	ldr	r1, [r7, #24]
 801a282:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801a286:	f000 f8c1 	bl	801a40c <FLASH_WaitForLastOperation>
 801a28a:	4603      	mov	r3, r0
 801a28c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 801a290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a294:	2b00      	cmp	r3, #0
 801a296:	d147      	bne.n	801a328 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 801a298:	69bb      	ldr	r3, [r7, #24]
 801a29a:	2b01      	cmp	r3, #1
 801a29c:	d106      	bne.n	801a2ac <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 801a29e:	4b28      	ldr	r3, [pc, #160]	@ (801a340 <HAL_FLASH_Program+0x120>)
 801a2a0:	68db      	ldr	r3, [r3, #12]
 801a2a2:	4a27      	ldr	r2, [pc, #156]	@ (801a340 <HAL_FLASH_Program+0x120>)
 801a2a4:	f043 0302 	orr.w	r3, r3, #2
 801a2a8:	60d3      	str	r3, [r2, #12]
 801a2aa:	e007      	b.n	801a2bc <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 801a2ac:	4b24      	ldr	r3, [pc, #144]	@ (801a340 <HAL_FLASH_Program+0x120>)
 801a2ae:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a2b2:	4a23      	ldr	r2, [pc, #140]	@ (801a340 <HAL_FLASH_Program+0x120>)
 801a2b4:	f043 0302 	orr.w	r3, r3, #2
 801a2b8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 801a2bc:	f3bf 8f6f 	isb	sy
}
 801a2c0:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801a2c2:	f3bf 8f4f 	dsb	sy
}
 801a2c6:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 801a2c8:	69fb      	ldr	r3, [r7, #28]
 801a2ca:	681a      	ldr	r2, [r3, #0]
 801a2cc:	6a3b      	ldr	r3, [r7, #32]
 801a2ce:	601a      	str	r2, [r3, #0]
        dest_addr++;
 801a2d0:	6a3b      	ldr	r3, [r7, #32]
 801a2d2:	3304      	adds	r3, #4
 801a2d4:	623b      	str	r3, [r7, #32]
        src_addr++;
 801a2d6:	69fb      	ldr	r3, [r7, #28]
 801a2d8:	3304      	adds	r3, #4
 801a2da:	61fb      	str	r3, [r7, #28]
        row_index--;
 801a2dc:	7dfb      	ldrb	r3, [r7, #23]
 801a2de:	3b01      	subs	r3, #1
 801a2e0:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 801a2e2:	7dfb      	ldrb	r3, [r7, #23]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d1ef      	bne.n	801a2c8 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 801a2e8:	f3bf 8f6f 	isb	sy
}
 801a2ec:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 801a2ee:	f3bf 8f4f 	dsb	sy
}
 801a2f2:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 801a2f4:	69b9      	ldr	r1, [r7, #24]
 801a2f6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801a2fa:	f000 f887 	bl	801a40c <FLASH_WaitForLastOperation>
 801a2fe:	4603      	mov	r3, r0
 801a300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 801a304:	69bb      	ldr	r3, [r7, #24]
 801a306:	2b01      	cmp	r3, #1
 801a308:	d106      	bne.n	801a318 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 801a30a:	4b0d      	ldr	r3, [pc, #52]	@ (801a340 <HAL_FLASH_Program+0x120>)
 801a30c:	68db      	ldr	r3, [r3, #12]
 801a30e:	4a0c      	ldr	r2, [pc, #48]	@ (801a340 <HAL_FLASH_Program+0x120>)
 801a310:	f023 0302 	bic.w	r3, r3, #2
 801a314:	60d3      	str	r3, [r2, #12]
 801a316:	e007      	b.n	801a328 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 801a318:	4b09      	ldr	r3, [pc, #36]	@ (801a340 <HAL_FLASH_Program+0x120>)
 801a31a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a31e:	4a08      	ldr	r2, [pc, #32]	@ (801a340 <HAL_FLASH_Program+0x120>)
 801a320:	f023 0302 	bic.w	r3, r3, #2
 801a324:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a328:	4b04      	ldr	r3, [pc, #16]	@ (801a33c <HAL_FLASH_Program+0x11c>)
 801a32a:	2200      	movs	r2, #0
 801a32c:	751a      	strb	r2, [r3, #20]

  return status;
 801a32e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801a332:	4618      	mov	r0, r3
 801a334:	3728      	adds	r7, #40	@ 0x28
 801a336:	46bd      	mov	sp, r7
 801a338:	bd80      	pop	{r7, pc}
 801a33a:	bf00      	nop
 801a33c:	24010c44 	.word	0x24010c44
 801a340:	52002000 	.word	0x52002000

0801a344 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801a344:	b480      	push	{r7}
 801a346:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 801a348:	4b18      	ldr	r3, [pc, #96]	@ (801a3ac <HAL_FLASH_Unlock+0x68>)
 801a34a:	68db      	ldr	r3, [r3, #12]
 801a34c:	f003 0301 	and.w	r3, r3, #1
 801a350:	2b00      	cmp	r3, #0
 801a352:	d00d      	beq.n	801a370 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 801a354:	4b15      	ldr	r3, [pc, #84]	@ (801a3ac <HAL_FLASH_Unlock+0x68>)
 801a356:	4a16      	ldr	r2, [pc, #88]	@ (801a3b0 <HAL_FLASH_Unlock+0x6c>)
 801a358:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 801a35a:	4b14      	ldr	r3, [pc, #80]	@ (801a3ac <HAL_FLASH_Unlock+0x68>)
 801a35c:	4a15      	ldr	r2, [pc, #84]	@ (801a3b4 <HAL_FLASH_Unlock+0x70>)
 801a35e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 801a360:	4b12      	ldr	r3, [pc, #72]	@ (801a3ac <HAL_FLASH_Unlock+0x68>)
 801a362:	68db      	ldr	r3, [r3, #12]
 801a364:	f003 0301 	and.w	r3, r3, #1
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d001      	beq.n	801a370 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 801a36c:	2301      	movs	r3, #1
 801a36e:	e018      	b.n	801a3a2 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 801a370:	4b0e      	ldr	r3, [pc, #56]	@ (801a3ac <HAL_FLASH_Unlock+0x68>)
 801a372:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a376:	f003 0301 	and.w	r3, r3, #1
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d010      	beq.n	801a3a0 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 801a37e:	4b0b      	ldr	r3, [pc, #44]	@ (801a3ac <HAL_FLASH_Unlock+0x68>)
 801a380:	4a0b      	ldr	r2, [pc, #44]	@ (801a3b0 <HAL_FLASH_Unlock+0x6c>)
 801a382:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 801a386:	4b09      	ldr	r3, [pc, #36]	@ (801a3ac <HAL_FLASH_Unlock+0x68>)
 801a388:	4a0a      	ldr	r2, [pc, #40]	@ (801a3b4 <HAL_FLASH_Unlock+0x70>)
 801a38a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 801a38e:	4b07      	ldr	r3, [pc, #28]	@ (801a3ac <HAL_FLASH_Unlock+0x68>)
 801a390:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a394:	f003 0301 	and.w	r3, r3, #1
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d001      	beq.n	801a3a0 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 801a39c:	2301      	movs	r3, #1
 801a39e:	e000      	b.n	801a3a2 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 801a3a0:	2300      	movs	r3, #0
}
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3aa:	4770      	bx	lr
 801a3ac:	52002000 	.word	0x52002000
 801a3b0:	45670123 	.word	0x45670123
 801a3b4:	cdef89ab 	.word	0xcdef89ab

0801a3b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801a3b8:	b480      	push	{r7}
 801a3ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 801a3bc:	4b12      	ldr	r3, [pc, #72]	@ (801a408 <HAL_FLASH_Lock+0x50>)
 801a3be:	68db      	ldr	r3, [r3, #12]
 801a3c0:	4a11      	ldr	r2, [pc, #68]	@ (801a408 <HAL_FLASH_Lock+0x50>)
 801a3c2:	f043 0301 	orr.w	r3, r3, #1
 801a3c6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 801a3c8:	4b0f      	ldr	r3, [pc, #60]	@ (801a408 <HAL_FLASH_Lock+0x50>)
 801a3ca:	68db      	ldr	r3, [r3, #12]
 801a3cc:	f003 0301 	and.w	r3, r3, #1
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d101      	bne.n	801a3d8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 801a3d4:	2301      	movs	r3, #1
 801a3d6:	e011      	b.n	801a3fc <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 801a3d8:	4b0b      	ldr	r3, [pc, #44]	@ (801a408 <HAL_FLASH_Lock+0x50>)
 801a3da:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a3de:	4a0a      	ldr	r2, [pc, #40]	@ (801a408 <HAL_FLASH_Lock+0x50>)
 801a3e0:	f043 0301 	orr.w	r3, r3, #1
 801a3e4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 801a3e8:	4b07      	ldr	r3, [pc, #28]	@ (801a408 <HAL_FLASH_Lock+0x50>)
 801a3ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a3ee:	f003 0301 	and.w	r3, r3, #1
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d101      	bne.n	801a3fa <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 801a3f6:	2301      	movs	r3, #1
 801a3f8:	e000      	b.n	801a3fc <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 801a3fa:	2300      	movs	r3, #0
}
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	46bd      	mov	sp, r7
 801a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a404:	4770      	bx	lr
 801a406:	bf00      	nop
 801a408:	52002000 	.word	0x52002000

0801a40c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b086      	sub	sp, #24
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
 801a414:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 801a416:	2304      	movs	r3, #4
 801a418:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 801a41a:	2300      	movs	r3, #0
 801a41c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 801a41e:	f7ff f9bf 	bl	80197a0 <HAL_GetTick>
 801a422:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 801a424:	683b      	ldr	r3, [r7, #0]
 801a426:	2b02      	cmp	r3, #2
 801a428:	d113      	bne.n	801a452 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 801a42a:	4b41      	ldr	r3, [pc, #260]	@ (801a530 <FLASH_WaitForLastOperation+0x124>)
 801a42c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 801a42e:	e010      	b.n	801a452 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a436:	d00c      	beq.n	801a452 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a438:	f7ff f9b2 	bl	80197a0 <HAL_GetTick>
 801a43c:	4602      	mov	r2, r0
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	1ad3      	subs	r3, r2, r3
 801a442:	687a      	ldr	r2, [r7, #4]
 801a444:	429a      	cmp	r2, r3
 801a446:	d302      	bcc.n	801a44e <FLASH_WaitForLastOperation+0x42>
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d101      	bne.n	801a452 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 801a44e:	2303      	movs	r3, #3
 801a450:	e06a      	b.n	801a528 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 801a452:	697a      	ldr	r2, [r7, #20]
 801a454:	4b37      	ldr	r3, [pc, #220]	@ (801a534 <FLASH_WaitForLastOperation+0x128>)
 801a456:	4013      	ands	r3, r2
 801a458:	697a      	ldr	r2, [r7, #20]
 801a45a:	429a      	cmp	r2, r3
 801a45c:	d10a      	bne.n	801a474 <FLASH_WaitForLastOperation+0x68>
 801a45e:	4b36      	ldr	r3, [pc, #216]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a460:	691a      	ldr	r2, [r3, #16]
 801a462:	697b      	ldr	r3, [r7, #20]
 801a464:	4013      	ands	r3, r2
 801a466:	697a      	ldr	r2, [r7, #20]
 801a468:	429a      	cmp	r2, r3
 801a46a:	bf0c      	ite	eq
 801a46c:	2301      	moveq	r3, #1
 801a46e:	2300      	movne	r3, #0
 801a470:	b2db      	uxtb	r3, r3
 801a472:	e00c      	b.n	801a48e <FLASH_WaitForLastOperation+0x82>
 801a474:	4b30      	ldr	r3, [pc, #192]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a476:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801a47a:	43da      	mvns	r2, r3
 801a47c:	697b      	ldr	r3, [r7, #20]
 801a47e:	4013      	ands	r3, r2
 801a480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a484:	2b00      	cmp	r3, #0
 801a486:	bf0c      	ite	eq
 801a488:	2301      	moveq	r3, #1
 801a48a:	2300      	movne	r3, #0
 801a48c:	b2db      	uxtb	r3, r3
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d1ce      	bne.n	801a430 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 801a492:	683b      	ldr	r3, [r7, #0]
 801a494:	2b01      	cmp	r3, #1
 801a496:	d105      	bne.n	801a4a4 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 801a498:	4b27      	ldr	r3, [pc, #156]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a49a:	691a      	ldr	r2, [r3, #16]
 801a49c:	4b27      	ldr	r3, [pc, #156]	@ (801a53c <FLASH_WaitForLastOperation+0x130>)
 801a49e:	4013      	ands	r3, r2
 801a4a0:	613b      	str	r3, [r7, #16]
 801a4a2:	e007      	b.n	801a4b4 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 801a4a4:	4b24      	ldr	r3, [pc, #144]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a4a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 801a4aa:	4b24      	ldr	r3, [pc, #144]	@ (801a53c <FLASH_WaitForLastOperation+0x130>)
 801a4ac:	4013      	ands	r3, r2
 801a4ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a4b2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 801a4b4:	693b      	ldr	r3, [r7, #16]
 801a4b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d017      	beq.n	801a4ee <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 801a4be:	4b20      	ldr	r3, [pc, #128]	@ (801a540 <FLASH_WaitForLastOperation+0x134>)
 801a4c0:	699a      	ldr	r2, [r3, #24]
 801a4c2:	693b      	ldr	r3, [r7, #16]
 801a4c4:	4313      	orrs	r3, r2
 801a4c6:	4a1e      	ldr	r2, [pc, #120]	@ (801a540 <FLASH_WaitForLastOperation+0x134>)
 801a4c8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 801a4ca:	693a      	ldr	r2, [r7, #16]
 801a4cc:	4b19      	ldr	r3, [pc, #100]	@ (801a534 <FLASH_WaitForLastOperation+0x128>)
 801a4ce:	4013      	ands	r3, r2
 801a4d0:	693a      	ldr	r2, [r7, #16]
 801a4d2:	429a      	cmp	r2, r3
 801a4d4:	d103      	bne.n	801a4de <FLASH_WaitForLastOperation+0xd2>
 801a4d6:	4a18      	ldr	r2, [pc, #96]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a4d8:	693b      	ldr	r3, [r7, #16]
 801a4da:	6153      	str	r3, [r2, #20]
 801a4dc:	e005      	b.n	801a4ea <FLASH_WaitForLastOperation+0xde>
 801a4de:	4a16      	ldr	r2, [pc, #88]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a4e0:	693b      	ldr	r3, [r7, #16]
 801a4e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a4e6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    return HAL_ERROR;
 801a4ea:	2301      	movs	r3, #1
 801a4ec:	e01c      	b.n	801a528 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	2b01      	cmp	r3, #1
 801a4f2:	d10b      	bne.n	801a50c <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 801a4f4:	4b10      	ldr	r3, [pc, #64]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a4f6:	691b      	ldr	r3, [r3, #16]
 801a4f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a4fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a500:	d111      	bne.n	801a526 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 801a502:	4b0d      	ldr	r3, [pc, #52]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a504:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a508:	615a      	str	r2, [r3, #20]
 801a50a:	e00c      	b.n	801a526 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 801a50c:	4b0a      	ldr	r3, [pc, #40]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a50e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801a512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a51a:	d104      	bne.n	801a526 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 801a51c:	4b06      	ldr	r3, [pc, #24]	@ (801a538 <FLASH_WaitForLastOperation+0x12c>)
 801a51e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a522:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 801a526:	2300      	movs	r3, #0
}
 801a528:	4618      	mov	r0, r3
 801a52a:	3718      	adds	r7, #24
 801a52c:	46bd      	mov	sp, r7
 801a52e:	bd80      	pop	{r7, pc}
 801a530:	80000004 	.word	0x80000004
 801a534:	1fef000f 	.word	0x1fef000f
 801a538:	52002000 	.word	0x52002000
 801a53c:	17ee0000 	.word	0x17ee0000
 801a540:	24010c44 	.word	0x24010c44

0801a544 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801a544:	b580      	push	{r7, lr}
 801a546:	b084      	sub	sp, #16
 801a548:	af00      	add	r7, sp, #0
 801a54a:	6078      	str	r0, [r7, #4]
 801a54c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a54e:	2300      	movs	r3, #0
 801a550:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a552:	4b5e      	ldr	r3, [pc, #376]	@ (801a6cc <HAL_FLASHEx_Erase+0x188>)
 801a554:	7d1b      	ldrb	r3, [r3, #20]
 801a556:	2b01      	cmp	r3, #1
 801a558:	d101      	bne.n	801a55e <HAL_FLASHEx_Erase+0x1a>
 801a55a:	2302      	movs	r3, #2
 801a55c:	e0b2      	b.n	801a6c4 <HAL_FLASHEx_Erase+0x180>
 801a55e:	4b5b      	ldr	r3, [pc, #364]	@ (801a6cc <HAL_FLASHEx_Erase+0x188>)
 801a560:	2201      	movs	r2, #1
 801a562:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a564:	4b59      	ldr	r3, [pc, #356]	@ (801a6cc <HAL_FLASHEx_Erase+0x188>)
 801a566:	2200      	movs	r2, #0
 801a568:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	685b      	ldr	r3, [r3, #4]
 801a56e:	f003 0301 	and.w	r3, r3, #1
 801a572:	2b00      	cmp	r3, #0
 801a574:	d009      	beq.n	801a58a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 801a576:	2101      	movs	r1, #1
 801a578:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801a57c:	f7ff ff46 	bl	801a40c <FLASH_WaitForLastOperation>
 801a580:	4603      	mov	r3, r0
 801a582:	2b00      	cmp	r3, #0
 801a584:	d001      	beq.n	801a58a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 801a586:	2301      	movs	r3, #1
 801a588:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	685b      	ldr	r3, [r3, #4]
 801a58e:	f003 0302 	and.w	r3, r3, #2
 801a592:	2b00      	cmp	r3, #0
 801a594:	d009      	beq.n	801a5aa <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 801a596:	2102      	movs	r1, #2
 801a598:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801a59c:	f7ff ff36 	bl	801a40c <FLASH_WaitForLastOperation>
 801a5a0:	4603      	mov	r3, r0
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d001      	beq.n	801a5aa <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 801a5a6:	2301      	movs	r3, #1
 801a5a8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 801a5aa:	7bfb      	ldrb	r3, [r7, #15]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	f040 8085 	bne.w	801a6bc <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	2b01      	cmp	r3, #1
 801a5b8:	d136      	bne.n	801a628 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	691a      	ldr	r2, [r3, #16]
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	685b      	ldr	r3, [r3, #4]
 801a5c2:	4619      	mov	r1, r3
 801a5c4:	4610      	mov	r0, r2
 801a5c6:	f000 f887 	bl	801a6d8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	685b      	ldr	r3, [r3, #4]
 801a5ce:	f003 0301 	and.w	r3, r3, #1
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d00f      	beq.n	801a5f6 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 801a5d6:	2101      	movs	r1, #1
 801a5d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801a5dc:	f7ff ff16 	bl	801a40c <FLASH_WaitForLastOperation>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d001      	beq.n	801a5ea <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 801a5e6:	2301      	movs	r3, #1
 801a5e8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 801a5ea:	4b39      	ldr	r3, [pc, #228]	@ (801a6d0 <HAL_FLASHEx_Erase+0x18c>)
 801a5ec:	68db      	ldr	r3, [r3, #12]
 801a5ee:	4a38      	ldr	r2, [pc, #224]	@ (801a6d0 <HAL_FLASHEx_Erase+0x18c>)
 801a5f0:	f023 0308 	bic.w	r3, r3, #8
 801a5f4:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	f003 0302 	and.w	r3, r3, #2
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d05c      	beq.n	801a6bc <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 801a602:	2102      	movs	r1, #2
 801a604:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801a608:	f7ff ff00 	bl	801a40c <FLASH_WaitForLastOperation>
 801a60c:	4603      	mov	r3, r0
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d001      	beq.n	801a616 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 801a612:	2301      	movs	r3, #1
 801a614:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 801a616:	4b2e      	ldr	r3, [pc, #184]	@ (801a6d0 <HAL_FLASHEx_Erase+0x18c>)
 801a618:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a61c:	4a2c      	ldr	r2, [pc, #176]	@ (801a6d0 <HAL_FLASHEx_Erase+0x18c>)
 801a61e:	f023 0308 	bic.w	r3, r3, #8
 801a622:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 801a626:	e049      	b.n	801a6bc <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	f04f 32ff 	mov.w	r2, #4294967295
 801a62e:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	689b      	ldr	r3, [r3, #8]
 801a634:	60bb      	str	r3, [r7, #8]
 801a636:	e039      	b.n	801a6ac <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	6859      	ldr	r1, [r3, #4]
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	691b      	ldr	r3, [r3, #16]
 801a640:	461a      	mov	r2, r3
 801a642:	68b8      	ldr	r0, [r7, #8]
 801a644:	f000 f8b2 	bl	801a7ac <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	685b      	ldr	r3, [r3, #4]
 801a64c:	f003 0301 	and.w	r3, r3, #1
 801a650:	2b00      	cmp	r3, #0
 801a652:	d00c      	beq.n	801a66e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 801a654:	2101      	movs	r1, #1
 801a656:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801a65a:	f7ff fed7 	bl	801a40c <FLASH_WaitForLastOperation>
 801a65e:	4603      	mov	r3, r0
 801a660:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 801a662:	4b1b      	ldr	r3, [pc, #108]	@ (801a6d0 <HAL_FLASHEx_Erase+0x18c>)
 801a664:	68da      	ldr	r2, [r3, #12]
 801a666:	491a      	ldr	r1, [pc, #104]	@ (801a6d0 <HAL_FLASHEx_Erase+0x18c>)
 801a668:	4b1a      	ldr	r3, [pc, #104]	@ (801a6d4 <HAL_FLASHEx_Erase+0x190>)
 801a66a:	4013      	ands	r3, r2
 801a66c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	685b      	ldr	r3, [r3, #4]
 801a672:	f003 0302 	and.w	r3, r3, #2
 801a676:	2b00      	cmp	r3, #0
 801a678:	d00e      	beq.n	801a698 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 801a67a:	2102      	movs	r1, #2
 801a67c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 801a680:	f7ff fec4 	bl	801a40c <FLASH_WaitForLastOperation>
 801a684:	4603      	mov	r3, r0
 801a686:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 801a688:	4b11      	ldr	r3, [pc, #68]	@ (801a6d0 <HAL_FLASHEx_Erase+0x18c>)
 801a68a:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 801a68e:	4910      	ldr	r1, [pc, #64]	@ (801a6d0 <HAL_FLASHEx_Erase+0x18c>)
 801a690:	4b10      	ldr	r3, [pc, #64]	@ (801a6d4 <HAL_FLASHEx_Erase+0x190>)
 801a692:	4013      	ands	r3, r2
 801a694:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 801a698:	7bfb      	ldrb	r3, [r7, #15]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d003      	beq.n	801a6a6 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 801a69e:	683b      	ldr	r3, [r7, #0]
 801a6a0:	68ba      	ldr	r2, [r7, #8]
 801a6a2:	601a      	str	r2, [r3, #0]
          break;
 801a6a4:	e00a      	b.n	801a6bc <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 801a6a6:	68bb      	ldr	r3, [r7, #8]
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	60bb      	str	r3, [r7, #8]
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	68da      	ldr	r2, [r3, #12]
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	689b      	ldr	r3, [r3, #8]
 801a6b4:	4413      	add	r3, r2
 801a6b6:	68ba      	ldr	r2, [r7, #8]
 801a6b8:	429a      	cmp	r2, r3
 801a6ba:	d3bd      	bcc.n	801a638 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a6bc:	4b03      	ldr	r3, [pc, #12]	@ (801a6cc <HAL_FLASHEx_Erase+0x188>)
 801a6be:	2200      	movs	r2, #0
 801a6c0:	751a      	strb	r2, [r3, #20]

  return status;
 801a6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	3710      	adds	r7, #16
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	bd80      	pop	{r7, pc}
 801a6cc:	24010c44 	.word	0x24010c44
 801a6d0:	52002000 	.word	0x52002000
 801a6d4:	fffff8fb 	.word	0xfffff8fb

0801a6d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 801a6d8:	b480      	push	{r7}
 801a6da:	b083      	sub	sp, #12
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
 801a6e0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	f003 0303 	and.w	r3, r3, #3
 801a6e8:	2b03      	cmp	r3, #3
 801a6ea:	d122      	bne.n	801a732 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 801a6ec:	4b2e      	ldr	r3, [pc, #184]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a6ee:	68db      	ldr	r3, [r3, #12]
 801a6f0:	4a2d      	ldr	r2, [pc, #180]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a6f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 801a6f6:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 801a6f8:	4b2b      	ldr	r3, [pc, #172]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a6fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a6fe:	4a2a      	ldr	r2, [pc, #168]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a700:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 801a704:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 801a708:	4b27      	ldr	r3, [pc, #156]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a70a:	68da      	ldr	r2, [r3, #12]
 801a70c:	4926      	ldr	r1, [pc, #152]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	4313      	orrs	r3, r2
 801a712:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 801a714:	4b24      	ldr	r3, [pc, #144]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a716:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 801a71a:	4923      	ldr	r1, [pc, #140]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	4313      	orrs	r3, r2
 801a720:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 801a724:	4b20      	ldr	r3, [pc, #128]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a726:	699b      	ldr	r3, [r3, #24]
 801a728:	4a1f      	ldr	r2, [pc, #124]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a72a:	f043 0310 	orr.w	r3, r3, #16
 801a72e:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 801a730:	e033      	b.n	801a79a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801a732:	683b      	ldr	r3, [r7, #0]
 801a734:	f003 0301 	and.w	r3, r3, #1
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d011      	beq.n	801a760 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 801a73c:	4b1a      	ldr	r3, [pc, #104]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a73e:	68db      	ldr	r3, [r3, #12]
 801a740:	4a19      	ldr	r2, [pc, #100]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a742:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 801a746:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 801a748:	4b17      	ldr	r3, [pc, #92]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a74a:	68da      	ldr	r2, [r3, #12]
 801a74c:	4916      	ldr	r1, [pc, #88]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	4313      	orrs	r3, r2
 801a752:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 801a754:	4b14      	ldr	r3, [pc, #80]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a756:	68db      	ldr	r3, [r3, #12]
 801a758:	4a13      	ldr	r2, [pc, #76]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a75a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 801a75e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 801a760:	683b      	ldr	r3, [r7, #0]
 801a762:	f003 0302 	and.w	r3, r3, #2
 801a766:	2b00      	cmp	r3, #0
 801a768:	d017      	beq.n	801a79a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 801a76a:	4b0f      	ldr	r3, [pc, #60]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a76c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a770:	4a0d      	ldr	r2, [pc, #52]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a772:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 801a776:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
      FLASH->CR2 |= VoltageRange;
 801a77a:	4b0b      	ldr	r3, [pc, #44]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a77c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 801a780:	4909      	ldr	r1, [pc, #36]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	4313      	orrs	r3, r2
 801a786:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 801a78a:	4b07      	ldr	r3, [pc, #28]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a78c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a790:	4a05      	ldr	r2, [pc, #20]	@ (801a7a8 <FLASH_MassErase+0xd0>)
 801a792:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 801a796:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 801a79a:	bf00      	nop
 801a79c:	370c      	adds	r7, #12
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a4:	4770      	bx	lr
 801a7a6:	bf00      	nop
 801a7a8:	52002000 	.word	0x52002000

0801a7ac <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 801a7ac:	b480      	push	{r7}
 801a7ae:	b085      	sub	sp, #20
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	60f8      	str	r0, [r7, #12]
 801a7b4:	60b9      	str	r1, [r7, #8]
 801a7b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	f003 0301 	and.w	r3, r3, #1
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d010      	beq.n	801a7e4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 801a7c2:	4b18      	ldr	r3, [pc, #96]	@ (801a824 <FLASH_Erase_Sector+0x78>)
 801a7c4:	68db      	ldr	r3, [r3, #12]
 801a7c6:	4a17      	ldr	r2, [pc, #92]	@ (801a824 <FLASH_Erase_Sector+0x78>)
 801a7c8:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 801a7cc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 801a7ce:	4b15      	ldr	r3, [pc, #84]	@ (801a824 <FLASH_Erase_Sector+0x78>)
 801a7d0:	68da      	ldr	r2, [r3, #12]
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	0219      	lsls	r1, r3, #8
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	430b      	orrs	r3, r1
 801a7da:	4313      	orrs	r3, r2
 801a7dc:	4a11      	ldr	r2, [pc, #68]	@ (801a824 <FLASH_Erase_Sector+0x78>)
 801a7de:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 801a7e2:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	f003 0302 	and.w	r3, r3, #2
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d014      	beq.n	801a818 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 801a7ee:	4b0d      	ldr	r3, [pc, #52]	@ (801a824 <FLASH_Erase_Sector+0x78>)
 801a7f0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801a7f4:	4a0b      	ldr	r2, [pc, #44]	@ (801a824 <FLASH_Erase_Sector+0x78>)
 801a7f6:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 801a7fa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 801a7fe:	4b09      	ldr	r3, [pc, #36]	@ (801a824 <FLASH_Erase_Sector+0x78>)
 801a800:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	0219      	lsls	r1, r3, #8
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	430b      	orrs	r3, r1
 801a80c:	4313      	orrs	r3, r2
 801a80e:	4a05      	ldr	r2, [pc, #20]	@ (801a824 <FLASH_Erase_Sector+0x78>)
 801a810:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 801a814:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 801a818:	bf00      	nop
 801a81a:	3714      	adds	r7, #20
 801a81c:	46bd      	mov	sp, r7
 801a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a822:	4770      	bx	lr
 801a824:	52002000 	.word	0x52002000

0801a828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 801a828:	b480      	push	{r7}
 801a82a:	b089      	sub	sp, #36	@ 0x24
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
 801a830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801a832:	2300      	movs	r3, #0
 801a834:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801a836:	4b89      	ldr	r3, [pc, #548]	@ (801aa5c <HAL_GPIO_Init+0x234>)
 801a838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801a83a:	e194      	b.n	801ab66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801a83c:	683b      	ldr	r3, [r7, #0]
 801a83e:	681a      	ldr	r2, [r3, #0]
 801a840:	2101      	movs	r1, #1
 801a842:	69fb      	ldr	r3, [r7, #28]
 801a844:	fa01 f303 	lsl.w	r3, r1, r3
 801a848:	4013      	ands	r3, r2
 801a84a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801a84c:	693b      	ldr	r3, [r7, #16]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	f000 8186 	beq.w	801ab60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a854:	683b      	ldr	r3, [r7, #0]
 801a856:	685b      	ldr	r3, [r3, #4]
 801a858:	f003 0303 	and.w	r3, r3, #3
 801a85c:	2b01      	cmp	r3, #1
 801a85e:	d005      	beq.n	801a86c <HAL_GPIO_Init+0x44>
 801a860:	683b      	ldr	r3, [r7, #0]
 801a862:	685b      	ldr	r3, [r3, #4]
 801a864:	f003 0303 	and.w	r3, r3, #3
 801a868:	2b02      	cmp	r3, #2
 801a86a:	d130      	bne.n	801a8ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	689b      	ldr	r3, [r3, #8]
 801a870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801a872:	69fb      	ldr	r3, [r7, #28]
 801a874:	005b      	lsls	r3, r3, #1
 801a876:	2203      	movs	r2, #3
 801a878:	fa02 f303 	lsl.w	r3, r2, r3
 801a87c:	43db      	mvns	r3, r3
 801a87e:	69ba      	ldr	r2, [r7, #24]
 801a880:	4013      	ands	r3, r2
 801a882:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801a884:	683b      	ldr	r3, [r7, #0]
 801a886:	68da      	ldr	r2, [r3, #12]
 801a888:	69fb      	ldr	r3, [r7, #28]
 801a88a:	005b      	lsls	r3, r3, #1
 801a88c:	fa02 f303 	lsl.w	r3, r2, r3
 801a890:	69ba      	ldr	r2, [r7, #24]
 801a892:	4313      	orrs	r3, r2
 801a894:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	69ba      	ldr	r2, [r7, #24]
 801a89a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	685b      	ldr	r3, [r3, #4]
 801a8a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801a8a2:	2201      	movs	r2, #1
 801a8a4:	69fb      	ldr	r3, [r7, #28]
 801a8a6:	fa02 f303 	lsl.w	r3, r2, r3
 801a8aa:	43db      	mvns	r3, r3
 801a8ac:	69ba      	ldr	r2, [r7, #24]
 801a8ae:	4013      	ands	r3, r2
 801a8b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801a8b2:	683b      	ldr	r3, [r7, #0]
 801a8b4:	685b      	ldr	r3, [r3, #4]
 801a8b6:	091b      	lsrs	r3, r3, #4
 801a8b8:	f003 0201 	and.w	r2, r3, #1
 801a8bc:	69fb      	ldr	r3, [r7, #28]
 801a8be:	fa02 f303 	lsl.w	r3, r2, r3
 801a8c2:	69ba      	ldr	r2, [r7, #24]
 801a8c4:	4313      	orrs	r3, r2
 801a8c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	69ba      	ldr	r2, [r7, #24]
 801a8cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	685b      	ldr	r3, [r3, #4]
 801a8d2:	f003 0303 	and.w	r3, r3, #3
 801a8d6:	2b03      	cmp	r3, #3
 801a8d8:	d017      	beq.n	801a90a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	68db      	ldr	r3, [r3, #12]
 801a8de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801a8e0:	69fb      	ldr	r3, [r7, #28]
 801a8e2:	005b      	lsls	r3, r3, #1
 801a8e4:	2203      	movs	r2, #3
 801a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 801a8ea:	43db      	mvns	r3, r3
 801a8ec:	69ba      	ldr	r2, [r7, #24]
 801a8ee:	4013      	ands	r3, r2
 801a8f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	689a      	ldr	r2, [r3, #8]
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	005b      	lsls	r3, r3, #1
 801a8fa:	fa02 f303 	lsl.w	r3, r2, r3
 801a8fe:	69ba      	ldr	r2, [r7, #24]
 801a900:	4313      	orrs	r3, r2
 801a902:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	69ba      	ldr	r2, [r7, #24]
 801a908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a90a:	683b      	ldr	r3, [r7, #0]
 801a90c:	685b      	ldr	r3, [r3, #4]
 801a90e:	f003 0303 	and.w	r3, r3, #3
 801a912:	2b02      	cmp	r3, #2
 801a914:	d123      	bne.n	801a95e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801a916:	69fb      	ldr	r3, [r7, #28]
 801a918:	08da      	lsrs	r2, r3, #3
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	3208      	adds	r2, #8
 801a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801a924:	69fb      	ldr	r3, [r7, #28]
 801a926:	f003 0307 	and.w	r3, r3, #7
 801a92a:	009b      	lsls	r3, r3, #2
 801a92c:	220f      	movs	r2, #15
 801a92e:	fa02 f303 	lsl.w	r3, r2, r3
 801a932:	43db      	mvns	r3, r3
 801a934:	69ba      	ldr	r2, [r7, #24]
 801a936:	4013      	ands	r3, r2
 801a938:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	691a      	ldr	r2, [r3, #16]
 801a93e:	69fb      	ldr	r3, [r7, #28]
 801a940:	f003 0307 	and.w	r3, r3, #7
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	fa02 f303 	lsl.w	r3, r2, r3
 801a94a:	69ba      	ldr	r2, [r7, #24]
 801a94c:	4313      	orrs	r3, r2
 801a94e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801a950:	69fb      	ldr	r3, [r7, #28]
 801a952:	08da      	lsrs	r2, r3, #3
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	3208      	adds	r2, #8
 801a958:	69b9      	ldr	r1, [r7, #24]
 801a95a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801a964:	69fb      	ldr	r3, [r7, #28]
 801a966:	005b      	lsls	r3, r3, #1
 801a968:	2203      	movs	r2, #3
 801a96a:	fa02 f303 	lsl.w	r3, r2, r3
 801a96e:	43db      	mvns	r3, r3
 801a970:	69ba      	ldr	r2, [r7, #24]
 801a972:	4013      	ands	r3, r2
 801a974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801a976:	683b      	ldr	r3, [r7, #0]
 801a978:	685b      	ldr	r3, [r3, #4]
 801a97a:	f003 0203 	and.w	r2, r3, #3
 801a97e:	69fb      	ldr	r3, [r7, #28]
 801a980:	005b      	lsls	r3, r3, #1
 801a982:	fa02 f303 	lsl.w	r3, r2, r3
 801a986:	69ba      	ldr	r2, [r7, #24]
 801a988:	4313      	orrs	r3, r2
 801a98a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	69ba      	ldr	r2, [r7, #24]
 801a990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801a992:	683b      	ldr	r3, [r7, #0]
 801a994:	685b      	ldr	r3, [r3, #4]
 801a996:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	f000 80e0 	beq.w	801ab60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a9a0:	4b2f      	ldr	r3, [pc, #188]	@ (801aa60 <HAL_GPIO_Init+0x238>)
 801a9a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801a9a6:	4a2e      	ldr	r2, [pc, #184]	@ (801aa60 <HAL_GPIO_Init+0x238>)
 801a9a8:	f043 0302 	orr.w	r3, r3, #2
 801a9ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801a9b0:	4b2b      	ldr	r3, [pc, #172]	@ (801aa60 <HAL_GPIO_Init+0x238>)
 801a9b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801a9b6:	f003 0302 	and.w	r3, r3, #2
 801a9ba:	60fb      	str	r3, [r7, #12]
 801a9bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801a9be:	4a29      	ldr	r2, [pc, #164]	@ (801aa64 <HAL_GPIO_Init+0x23c>)
 801a9c0:	69fb      	ldr	r3, [r7, #28]
 801a9c2:	089b      	lsrs	r3, r3, #2
 801a9c4:	3302      	adds	r3, #2
 801a9c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a9ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801a9cc:	69fb      	ldr	r3, [r7, #28]
 801a9ce:	f003 0303 	and.w	r3, r3, #3
 801a9d2:	009b      	lsls	r3, r3, #2
 801a9d4:	220f      	movs	r2, #15
 801a9d6:	fa02 f303 	lsl.w	r3, r2, r3
 801a9da:	43db      	mvns	r3, r3
 801a9dc:	69ba      	ldr	r2, [r7, #24]
 801a9de:	4013      	ands	r3, r2
 801a9e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	4a20      	ldr	r2, [pc, #128]	@ (801aa68 <HAL_GPIO_Init+0x240>)
 801a9e6:	4293      	cmp	r3, r2
 801a9e8:	d052      	beq.n	801aa90 <HAL_GPIO_Init+0x268>
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	4a1f      	ldr	r2, [pc, #124]	@ (801aa6c <HAL_GPIO_Init+0x244>)
 801a9ee:	4293      	cmp	r3, r2
 801a9f0:	d031      	beq.n	801aa56 <HAL_GPIO_Init+0x22e>
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	4a1e      	ldr	r2, [pc, #120]	@ (801aa70 <HAL_GPIO_Init+0x248>)
 801a9f6:	4293      	cmp	r3, r2
 801a9f8:	d02b      	beq.n	801aa52 <HAL_GPIO_Init+0x22a>
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	4a1d      	ldr	r2, [pc, #116]	@ (801aa74 <HAL_GPIO_Init+0x24c>)
 801a9fe:	4293      	cmp	r3, r2
 801aa00:	d025      	beq.n	801aa4e <HAL_GPIO_Init+0x226>
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	4a1c      	ldr	r2, [pc, #112]	@ (801aa78 <HAL_GPIO_Init+0x250>)
 801aa06:	4293      	cmp	r3, r2
 801aa08:	d01f      	beq.n	801aa4a <HAL_GPIO_Init+0x222>
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	4a1b      	ldr	r2, [pc, #108]	@ (801aa7c <HAL_GPIO_Init+0x254>)
 801aa0e:	4293      	cmp	r3, r2
 801aa10:	d019      	beq.n	801aa46 <HAL_GPIO_Init+0x21e>
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	4a1a      	ldr	r2, [pc, #104]	@ (801aa80 <HAL_GPIO_Init+0x258>)
 801aa16:	4293      	cmp	r3, r2
 801aa18:	d013      	beq.n	801aa42 <HAL_GPIO_Init+0x21a>
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	4a19      	ldr	r2, [pc, #100]	@ (801aa84 <HAL_GPIO_Init+0x25c>)
 801aa1e:	4293      	cmp	r3, r2
 801aa20:	d00d      	beq.n	801aa3e <HAL_GPIO_Init+0x216>
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	4a18      	ldr	r2, [pc, #96]	@ (801aa88 <HAL_GPIO_Init+0x260>)
 801aa26:	4293      	cmp	r3, r2
 801aa28:	d007      	beq.n	801aa3a <HAL_GPIO_Init+0x212>
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	4a17      	ldr	r2, [pc, #92]	@ (801aa8c <HAL_GPIO_Init+0x264>)
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	d101      	bne.n	801aa36 <HAL_GPIO_Init+0x20e>
 801aa32:	2309      	movs	r3, #9
 801aa34:	e02d      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa36:	230a      	movs	r3, #10
 801aa38:	e02b      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa3a:	2308      	movs	r3, #8
 801aa3c:	e029      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa3e:	2307      	movs	r3, #7
 801aa40:	e027      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa42:	2306      	movs	r3, #6
 801aa44:	e025      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa46:	2305      	movs	r3, #5
 801aa48:	e023      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa4a:	2304      	movs	r3, #4
 801aa4c:	e021      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa4e:	2303      	movs	r3, #3
 801aa50:	e01f      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa52:	2302      	movs	r3, #2
 801aa54:	e01d      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa56:	2301      	movs	r3, #1
 801aa58:	e01b      	b.n	801aa92 <HAL_GPIO_Init+0x26a>
 801aa5a:	bf00      	nop
 801aa5c:	58000080 	.word	0x58000080
 801aa60:	58024400 	.word	0x58024400
 801aa64:	58000400 	.word	0x58000400
 801aa68:	58020000 	.word	0x58020000
 801aa6c:	58020400 	.word	0x58020400
 801aa70:	58020800 	.word	0x58020800
 801aa74:	58020c00 	.word	0x58020c00
 801aa78:	58021000 	.word	0x58021000
 801aa7c:	58021400 	.word	0x58021400
 801aa80:	58021800 	.word	0x58021800
 801aa84:	58021c00 	.word	0x58021c00
 801aa88:	58022000 	.word	0x58022000
 801aa8c:	58022400 	.word	0x58022400
 801aa90:	2300      	movs	r3, #0
 801aa92:	69fa      	ldr	r2, [r7, #28]
 801aa94:	f002 0203 	and.w	r2, r2, #3
 801aa98:	0092      	lsls	r2, r2, #2
 801aa9a:	4093      	lsls	r3, r2
 801aa9c:	69ba      	ldr	r2, [r7, #24]
 801aa9e:	4313      	orrs	r3, r2
 801aaa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801aaa2:	4938      	ldr	r1, [pc, #224]	@ (801ab84 <HAL_GPIO_Init+0x35c>)
 801aaa4:	69fb      	ldr	r3, [r7, #28]
 801aaa6:	089b      	lsrs	r3, r3, #2
 801aaa8:	3302      	adds	r3, #2
 801aaaa:	69ba      	ldr	r2, [r7, #24]
 801aaac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801aab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801aab8:	693b      	ldr	r3, [r7, #16]
 801aaba:	43db      	mvns	r3, r3
 801aabc:	69ba      	ldr	r2, [r7, #24]
 801aabe:	4013      	ands	r3, r2
 801aac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801aac2:	683b      	ldr	r3, [r7, #0]
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d003      	beq.n	801aad6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801aace:	69ba      	ldr	r2, [r7, #24]
 801aad0:	693b      	ldr	r3, [r7, #16]
 801aad2:	4313      	orrs	r3, r2
 801aad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801aad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801aada:	69bb      	ldr	r3, [r7, #24]
 801aadc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801aade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801aae2:	685b      	ldr	r3, [r3, #4]
 801aae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801aae6:	693b      	ldr	r3, [r7, #16]
 801aae8:	43db      	mvns	r3, r3
 801aaea:	69ba      	ldr	r2, [r7, #24]
 801aaec:	4013      	ands	r3, r2
 801aaee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801aaf0:	683b      	ldr	r3, [r7, #0]
 801aaf2:	685b      	ldr	r3, [r3, #4]
 801aaf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d003      	beq.n	801ab04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801aafc:	69ba      	ldr	r2, [r7, #24]
 801aafe:	693b      	ldr	r3, [r7, #16]
 801ab00:	4313      	orrs	r3, r2
 801ab02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801ab04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801ab08:	69bb      	ldr	r3, [r7, #24]
 801ab0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801ab0c:	697b      	ldr	r3, [r7, #20]
 801ab0e:	685b      	ldr	r3, [r3, #4]
 801ab10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ab12:	693b      	ldr	r3, [r7, #16]
 801ab14:	43db      	mvns	r3, r3
 801ab16:	69ba      	ldr	r2, [r7, #24]
 801ab18:	4013      	ands	r3, r2
 801ab1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	685b      	ldr	r3, [r3, #4]
 801ab20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d003      	beq.n	801ab30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801ab28:	69ba      	ldr	r2, [r7, #24]
 801ab2a:	693b      	ldr	r3, [r7, #16]
 801ab2c:	4313      	orrs	r3, r2
 801ab2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	69ba      	ldr	r2, [r7, #24]
 801ab34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801ab36:	697b      	ldr	r3, [r7, #20]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ab3c:	693b      	ldr	r3, [r7, #16]
 801ab3e:	43db      	mvns	r3, r3
 801ab40:	69ba      	ldr	r2, [r7, #24]
 801ab42:	4013      	ands	r3, r2
 801ab44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	685b      	ldr	r3, [r3, #4]
 801ab4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d003      	beq.n	801ab5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801ab52:	69ba      	ldr	r2, [r7, #24]
 801ab54:	693b      	ldr	r3, [r7, #16]
 801ab56:	4313      	orrs	r3, r2
 801ab58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801ab5a:	697b      	ldr	r3, [r7, #20]
 801ab5c:	69ba      	ldr	r2, [r7, #24]
 801ab5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801ab60:	69fb      	ldr	r3, [r7, #28]
 801ab62:	3301      	adds	r3, #1
 801ab64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ab66:	683b      	ldr	r3, [r7, #0]
 801ab68:	681a      	ldr	r2, [r3, #0]
 801ab6a:	69fb      	ldr	r3, [r7, #28]
 801ab6c:	fa22 f303 	lsr.w	r3, r2, r3
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	f47f ae63 	bne.w	801a83c <HAL_GPIO_Init+0x14>
  }
}
 801ab76:	bf00      	nop
 801ab78:	bf00      	nop
 801ab7a:	3724      	adds	r7, #36	@ 0x24
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab82:	4770      	bx	lr
 801ab84:	58000400 	.word	0x58000400

0801ab88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ab88:	b480      	push	{r7}
 801ab8a:	b083      	sub	sp, #12
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	6078      	str	r0, [r7, #4]
 801ab90:	460b      	mov	r3, r1
 801ab92:	807b      	strh	r3, [r7, #2]
 801ab94:	4613      	mov	r3, r2
 801ab96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ab98:	787b      	ldrb	r3, [r7, #1]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d003      	beq.n	801aba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ab9e:	887a      	ldrh	r2, [r7, #2]
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801aba4:	e003      	b.n	801abae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801aba6:	887b      	ldrh	r3, [r7, #2]
 801aba8:	041a      	lsls	r2, r3, #16
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	619a      	str	r2, [r3, #24]
}
 801abae:	bf00      	nop
 801abb0:	370c      	adds	r7, #12
 801abb2:	46bd      	mov	sp, r7
 801abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb8:	4770      	bx	lr
	...

0801abbc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	b084      	sub	sp, #16
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801abc4:	4b29      	ldr	r3, [pc, #164]	@ (801ac6c <HAL_PWREx_ConfigSupply+0xb0>)
 801abc6:	68db      	ldr	r3, [r3, #12]
 801abc8:	f003 0307 	and.w	r3, r3, #7
 801abcc:	2b06      	cmp	r3, #6
 801abce:	d00a      	beq.n	801abe6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801abd0:	4b26      	ldr	r3, [pc, #152]	@ (801ac6c <HAL_PWREx_ConfigSupply+0xb0>)
 801abd2:	68db      	ldr	r3, [r3, #12]
 801abd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801abd8:	687a      	ldr	r2, [r7, #4]
 801abda:	429a      	cmp	r2, r3
 801abdc:	d001      	beq.n	801abe2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801abde:	2301      	movs	r3, #1
 801abe0:	e040      	b.n	801ac64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801abe2:	2300      	movs	r3, #0
 801abe4:	e03e      	b.n	801ac64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801abe6:	4b21      	ldr	r3, [pc, #132]	@ (801ac6c <HAL_PWREx_ConfigSupply+0xb0>)
 801abe8:	68db      	ldr	r3, [r3, #12]
 801abea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801abee:	491f      	ldr	r1, [pc, #124]	@ (801ac6c <HAL_PWREx_ConfigSupply+0xb0>)
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	4313      	orrs	r3, r2
 801abf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801abf6:	f7fe fdd3 	bl	80197a0 <HAL_GetTick>
 801abfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801abfc:	e009      	b.n	801ac12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801abfe:	f7fe fdcf 	bl	80197a0 <HAL_GetTick>
 801ac02:	4602      	mov	r2, r0
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	1ad3      	subs	r3, r2, r3
 801ac08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ac0c:	d901      	bls.n	801ac12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801ac0e:	2301      	movs	r3, #1
 801ac10:	e028      	b.n	801ac64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ac12:	4b16      	ldr	r3, [pc, #88]	@ (801ac6c <HAL_PWREx_ConfigSupply+0xb0>)
 801ac14:	685b      	ldr	r3, [r3, #4]
 801ac16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ac1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ac1e:	d1ee      	bne.n	801abfe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2b1e      	cmp	r3, #30
 801ac24:	d008      	beq.n	801ac38 <HAL_PWREx_ConfigSupply+0x7c>
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac2a:	d005      	beq.n	801ac38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	2b1d      	cmp	r3, #29
 801ac30:	d002      	beq.n	801ac38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	2b2d      	cmp	r3, #45	@ 0x2d
 801ac36:	d114      	bne.n	801ac62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 801ac38:	f7fe fdb2 	bl	80197a0 <HAL_GetTick>
 801ac3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801ac3e:	e009      	b.n	801ac54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801ac40:	f7fe fdae 	bl	80197a0 <HAL_GetTick>
 801ac44:	4602      	mov	r2, r0
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	1ad3      	subs	r3, r2, r3
 801ac4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ac4e:	d901      	bls.n	801ac54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801ac50:	2301      	movs	r3, #1
 801ac52:	e007      	b.n	801ac64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801ac54:	4b05      	ldr	r3, [pc, #20]	@ (801ac6c <HAL_PWREx_ConfigSupply+0xb0>)
 801ac56:	68db      	ldr	r3, [r3, #12]
 801ac58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ac5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ac60:	d1ee      	bne.n	801ac40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801ac62:	2300      	movs	r3, #0
}
 801ac64:	4618      	mov	r0, r3
 801ac66:	3710      	adds	r7, #16
 801ac68:	46bd      	mov	sp, r7
 801ac6a:	bd80      	pop	{r7, pc}
 801ac6c:	58024800 	.word	0x58024800

0801ac70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b08c      	sub	sp, #48	@ 0x30
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d102      	bne.n	801ac84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801ac7e:	2301      	movs	r3, #1
 801ac80:	f000 bc48 	b.w	801b514 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	f003 0301 	and.w	r3, r3, #1
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	f000 8088 	beq.w	801ada2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ac92:	4b99      	ldr	r3, [pc, #612]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ac94:	691b      	ldr	r3, [r3, #16]
 801ac96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ac9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ac9c:	4b96      	ldr	r3, [pc, #600]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ac9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801aca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aca4:	2b10      	cmp	r3, #16
 801aca6:	d007      	beq.n	801acb8 <HAL_RCC_OscConfig+0x48>
 801aca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acaa:	2b18      	cmp	r3, #24
 801acac:	d111      	bne.n	801acd2 <HAL_RCC_OscConfig+0x62>
 801acae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801acb0:	f003 0303 	and.w	r3, r3, #3
 801acb4:	2b02      	cmp	r3, #2
 801acb6:	d10c      	bne.n	801acd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801acb8:	4b8f      	ldr	r3, [pc, #572]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d06d      	beq.n	801ada0 <HAL_RCC_OscConfig+0x130>
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	685b      	ldr	r3, [r3, #4]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d169      	bne.n	801ada0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801accc:	2301      	movs	r3, #1
 801acce:	f000 bc21 	b.w	801b514 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	685b      	ldr	r3, [r3, #4]
 801acd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801acda:	d106      	bne.n	801acea <HAL_RCC_OscConfig+0x7a>
 801acdc:	4b86      	ldr	r3, [pc, #536]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	4a85      	ldr	r2, [pc, #532]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ace2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ace6:	6013      	str	r3, [r2, #0]
 801ace8:	e02e      	b.n	801ad48 <HAL_RCC_OscConfig+0xd8>
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	685b      	ldr	r3, [r3, #4]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d10c      	bne.n	801ad0c <HAL_RCC_OscConfig+0x9c>
 801acf2:	4b81      	ldr	r3, [pc, #516]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	4a80      	ldr	r2, [pc, #512]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801acf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801acfc:	6013      	str	r3, [r2, #0]
 801acfe:	4b7e      	ldr	r3, [pc, #504]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	4a7d      	ldr	r2, [pc, #500]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ad08:	6013      	str	r3, [r2, #0]
 801ad0a:	e01d      	b.n	801ad48 <HAL_RCC_OscConfig+0xd8>
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	685b      	ldr	r3, [r3, #4]
 801ad10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ad14:	d10c      	bne.n	801ad30 <HAL_RCC_OscConfig+0xc0>
 801ad16:	4b78      	ldr	r3, [pc, #480]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	4a77      	ldr	r2, [pc, #476]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ad20:	6013      	str	r3, [r2, #0]
 801ad22:	4b75      	ldr	r3, [pc, #468]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	4a74      	ldr	r2, [pc, #464]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ad2c:	6013      	str	r3, [r2, #0]
 801ad2e:	e00b      	b.n	801ad48 <HAL_RCC_OscConfig+0xd8>
 801ad30:	4b71      	ldr	r3, [pc, #452]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	4a70      	ldr	r2, [pc, #448]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ad3a:	6013      	str	r3, [r2, #0]
 801ad3c:	4b6e      	ldr	r3, [pc, #440]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	4a6d      	ldr	r2, [pc, #436]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ad46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	685b      	ldr	r3, [r3, #4]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d013      	beq.n	801ad78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ad50:	f7fe fd26 	bl	80197a0 <HAL_GetTick>
 801ad54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ad56:	e008      	b.n	801ad6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ad58:	f7fe fd22 	bl	80197a0 <HAL_GetTick>
 801ad5c:	4602      	mov	r2, r0
 801ad5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad60:	1ad3      	subs	r3, r2, r3
 801ad62:	2b64      	cmp	r3, #100	@ 0x64
 801ad64:	d901      	bls.n	801ad6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801ad66:	2303      	movs	r3, #3
 801ad68:	e3d4      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ad6a:	4b63      	ldr	r3, [pc, #396]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d0f0      	beq.n	801ad58 <HAL_RCC_OscConfig+0xe8>
 801ad76:	e014      	b.n	801ada2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ad78:	f7fe fd12 	bl	80197a0 <HAL_GetTick>
 801ad7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ad7e:	e008      	b.n	801ad92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ad80:	f7fe fd0e 	bl	80197a0 <HAL_GetTick>
 801ad84:	4602      	mov	r2, r0
 801ad86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad88:	1ad3      	subs	r3, r2, r3
 801ad8a:	2b64      	cmp	r3, #100	@ 0x64
 801ad8c:	d901      	bls.n	801ad92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801ad8e:	2303      	movs	r3, #3
 801ad90:	e3c0      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ad92:	4b59      	ldr	r3, [pc, #356]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d1f0      	bne.n	801ad80 <HAL_RCC_OscConfig+0x110>
 801ad9e:	e000      	b.n	801ada2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ada0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	f003 0302 	and.w	r3, r3, #2
 801adaa:	2b00      	cmp	r3, #0
 801adac:	f000 80ca 	beq.w	801af44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801adb0:	4b51      	ldr	r3, [pc, #324]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801adb2:	691b      	ldr	r3, [r3, #16]
 801adb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801adb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801adba:	4b4f      	ldr	r3, [pc, #316]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801adbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801adbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801adc0:	6a3b      	ldr	r3, [r7, #32]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d007      	beq.n	801add6 <HAL_RCC_OscConfig+0x166>
 801adc6:	6a3b      	ldr	r3, [r7, #32]
 801adc8:	2b18      	cmp	r3, #24
 801adca:	d156      	bne.n	801ae7a <HAL_RCC_OscConfig+0x20a>
 801adcc:	69fb      	ldr	r3, [r7, #28]
 801adce:	f003 0303 	and.w	r3, r3, #3
 801add2:	2b00      	cmp	r3, #0
 801add4:	d151      	bne.n	801ae7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801add6:	4b48      	ldr	r3, [pc, #288]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	f003 0304 	and.w	r3, r3, #4
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d005      	beq.n	801adee <HAL_RCC_OscConfig+0x17e>
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	68db      	ldr	r3, [r3, #12]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d101      	bne.n	801adee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801adea:	2301      	movs	r3, #1
 801adec:	e392      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801adee:	4b42      	ldr	r3, [pc, #264]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	f023 0219 	bic.w	r2, r3, #25
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	68db      	ldr	r3, [r3, #12]
 801adfa:	493f      	ldr	r1, [pc, #252]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801adfc:	4313      	orrs	r3, r2
 801adfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ae00:	f7fe fcce 	bl	80197a0 <HAL_GetTick>
 801ae04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ae06:	e008      	b.n	801ae1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ae08:	f7fe fcca 	bl	80197a0 <HAL_GetTick>
 801ae0c:	4602      	mov	r2, r0
 801ae0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae10:	1ad3      	subs	r3, r2, r3
 801ae12:	2b02      	cmp	r3, #2
 801ae14:	d901      	bls.n	801ae1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801ae16:	2303      	movs	r3, #3
 801ae18:	e37c      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ae1a:	4b37      	ldr	r3, [pc, #220]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	f003 0304 	and.w	r3, r3, #4
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d0f0      	beq.n	801ae08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ae26:	f7fe fcc7 	bl	80197b8 <HAL_GetREVID>
 801ae2a:	4603      	mov	r3, r0
 801ae2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ae30:	4293      	cmp	r3, r2
 801ae32:	d817      	bhi.n	801ae64 <HAL_RCC_OscConfig+0x1f4>
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	691b      	ldr	r3, [r3, #16]
 801ae38:	2b40      	cmp	r3, #64	@ 0x40
 801ae3a:	d108      	bne.n	801ae4e <HAL_RCC_OscConfig+0x1de>
 801ae3c:	4b2e      	ldr	r3, [pc, #184]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae3e:	685b      	ldr	r3, [r3, #4]
 801ae40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801ae44:	4a2c      	ldr	r2, [pc, #176]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ae4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ae4c:	e07a      	b.n	801af44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ae4e:	4b2a      	ldr	r3, [pc, #168]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae50:	685b      	ldr	r3, [r3, #4]
 801ae52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	691b      	ldr	r3, [r3, #16]
 801ae5a:	031b      	lsls	r3, r3, #12
 801ae5c:	4926      	ldr	r1, [pc, #152]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae5e:	4313      	orrs	r3, r2
 801ae60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ae62:	e06f      	b.n	801af44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ae64:	4b24      	ldr	r3, [pc, #144]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae66:	685b      	ldr	r3, [r3, #4]
 801ae68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	691b      	ldr	r3, [r3, #16]
 801ae70:	061b      	lsls	r3, r3, #24
 801ae72:	4921      	ldr	r1, [pc, #132]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae74:	4313      	orrs	r3, r2
 801ae76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ae78:	e064      	b.n	801af44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	68db      	ldr	r3, [r3, #12]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d047      	beq.n	801af12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801ae82:	4b1d      	ldr	r3, [pc, #116]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	f023 0219 	bic.w	r2, r3, #25
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	68db      	ldr	r3, [r3, #12]
 801ae8e:	491a      	ldr	r1, [pc, #104]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801ae90:	4313      	orrs	r3, r2
 801ae92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ae94:	f7fe fc84 	bl	80197a0 <HAL_GetTick>
 801ae98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ae9a:	e008      	b.n	801aeae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ae9c:	f7fe fc80 	bl	80197a0 <HAL_GetTick>
 801aea0:	4602      	mov	r2, r0
 801aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aea4:	1ad3      	subs	r3, r2, r3
 801aea6:	2b02      	cmp	r3, #2
 801aea8:	d901      	bls.n	801aeae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801aeaa:	2303      	movs	r3, #3
 801aeac:	e332      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801aeae:	4b12      	ldr	r3, [pc, #72]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	f003 0304 	and.w	r3, r3, #4
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d0f0      	beq.n	801ae9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aeba:	f7fe fc7d 	bl	80197b8 <HAL_GetREVID>
 801aebe:	4603      	mov	r3, r0
 801aec0:	f241 0203 	movw	r2, #4099	@ 0x1003
 801aec4:	4293      	cmp	r3, r2
 801aec6:	d819      	bhi.n	801aefc <HAL_RCC_OscConfig+0x28c>
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	691b      	ldr	r3, [r3, #16]
 801aecc:	2b40      	cmp	r3, #64	@ 0x40
 801aece:	d108      	bne.n	801aee2 <HAL_RCC_OscConfig+0x272>
 801aed0:	4b09      	ldr	r3, [pc, #36]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801aed2:	685b      	ldr	r3, [r3, #4]
 801aed4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801aed8:	4a07      	ldr	r2, [pc, #28]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801aeda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801aede:	6053      	str	r3, [r2, #4]
 801aee0:	e030      	b.n	801af44 <HAL_RCC_OscConfig+0x2d4>
 801aee2:	4b05      	ldr	r3, [pc, #20]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801aee4:	685b      	ldr	r3, [r3, #4]
 801aee6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	691b      	ldr	r3, [r3, #16]
 801aeee:	031b      	lsls	r3, r3, #12
 801aef0:	4901      	ldr	r1, [pc, #4]	@ (801aef8 <HAL_RCC_OscConfig+0x288>)
 801aef2:	4313      	orrs	r3, r2
 801aef4:	604b      	str	r3, [r1, #4]
 801aef6:	e025      	b.n	801af44 <HAL_RCC_OscConfig+0x2d4>
 801aef8:	58024400 	.word	0x58024400
 801aefc:	4b9a      	ldr	r3, [pc, #616]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801aefe:	685b      	ldr	r3, [r3, #4]
 801af00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	691b      	ldr	r3, [r3, #16]
 801af08:	061b      	lsls	r3, r3, #24
 801af0a:	4997      	ldr	r1, [pc, #604]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801af0c:	4313      	orrs	r3, r2
 801af0e:	604b      	str	r3, [r1, #4]
 801af10:	e018      	b.n	801af44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801af12:	4b95      	ldr	r3, [pc, #596]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	4a94      	ldr	r2, [pc, #592]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801af18:	f023 0301 	bic.w	r3, r3, #1
 801af1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af1e:	f7fe fc3f 	bl	80197a0 <HAL_GetTick>
 801af22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801af24:	e008      	b.n	801af38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801af26:	f7fe fc3b 	bl	80197a0 <HAL_GetTick>
 801af2a:	4602      	mov	r2, r0
 801af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af2e:	1ad3      	subs	r3, r2, r3
 801af30:	2b02      	cmp	r3, #2
 801af32:	d901      	bls.n	801af38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801af34:	2303      	movs	r3, #3
 801af36:	e2ed      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801af38:	4b8b      	ldr	r3, [pc, #556]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	f003 0304 	and.w	r3, r3, #4
 801af40:	2b00      	cmp	r3, #0
 801af42:	d1f0      	bne.n	801af26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	f003 0310 	and.w	r3, r3, #16
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	f000 80a9 	beq.w	801b0a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801af52:	4b85      	ldr	r3, [pc, #532]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801af54:	691b      	ldr	r3, [r3, #16]
 801af56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801af5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801af5c:	4b82      	ldr	r3, [pc, #520]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801af5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801af62:	69bb      	ldr	r3, [r7, #24]
 801af64:	2b08      	cmp	r3, #8
 801af66:	d007      	beq.n	801af78 <HAL_RCC_OscConfig+0x308>
 801af68:	69bb      	ldr	r3, [r7, #24]
 801af6a:	2b18      	cmp	r3, #24
 801af6c:	d13a      	bne.n	801afe4 <HAL_RCC_OscConfig+0x374>
 801af6e:	697b      	ldr	r3, [r7, #20]
 801af70:	f003 0303 	and.w	r3, r3, #3
 801af74:	2b01      	cmp	r3, #1
 801af76:	d135      	bne.n	801afe4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801af78:	4b7b      	ldr	r3, [pc, #492]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801af80:	2b00      	cmp	r3, #0
 801af82:	d005      	beq.n	801af90 <HAL_RCC_OscConfig+0x320>
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	69db      	ldr	r3, [r3, #28]
 801af88:	2b80      	cmp	r3, #128	@ 0x80
 801af8a:	d001      	beq.n	801af90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801af8c:	2301      	movs	r3, #1
 801af8e:	e2c1      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801af90:	f7fe fc12 	bl	80197b8 <HAL_GetREVID>
 801af94:	4603      	mov	r3, r0
 801af96:	f241 0203 	movw	r2, #4099	@ 0x1003
 801af9a:	4293      	cmp	r3, r2
 801af9c:	d817      	bhi.n	801afce <HAL_RCC_OscConfig+0x35e>
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	6a1b      	ldr	r3, [r3, #32]
 801afa2:	2b20      	cmp	r3, #32
 801afa4:	d108      	bne.n	801afb8 <HAL_RCC_OscConfig+0x348>
 801afa6:	4b70      	ldr	r3, [pc, #448]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801afa8:	685b      	ldr	r3, [r3, #4]
 801afaa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801afae:	4a6e      	ldr	r2, [pc, #440]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801afb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801afb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801afb6:	e075      	b.n	801b0a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801afb8:	4b6b      	ldr	r3, [pc, #428]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801afba:	685b      	ldr	r3, [r3, #4]
 801afbc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	6a1b      	ldr	r3, [r3, #32]
 801afc4:	069b      	lsls	r3, r3, #26
 801afc6:	4968      	ldr	r1, [pc, #416]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801afc8:	4313      	orrs	r3, r2
 801afca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801afcc:	e06a      	b.n	801b0a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801afce:	4b66      	ldr	r3, [pc, #408]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801afd0:	68db      	ldr	r3, [r3, #12]
 801afd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	6a1b      	ldr	r3, [r3, #32]
 801afda:	061b      	lsls	r3, r3, #24
 801afdc:	4962      	ldr	r1, [pc, #392]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801afde:	4313      	orrs	r3, r2
 801afe0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801afe2:	e05f      	b.n	801b0a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	69db      	ldr	r3, [r3, #28]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d042      	beq.n	801b072 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801afec:	4b5e      	ldr	r3, [pc, #376]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	4a5d      	ldr	r2, [pc, #372]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801aff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aff8:	f7fe fbd2 	bl	80197a0 <HAL_GetTick>
 801affc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801affe:	e008      	b.n	801b012 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b000:	f7fe fbce 	bl	80197a0 <HAL_GetTick>
 801b004:	4602      	mov	r2, r0
 801b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b008:	1ad3      	subs	r3, r2, r3
 801b00a:	2b02      	cmp	r3, #2
 801b00c:	d901      	bls.n	801b012 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801b00e:	2303      	movs	r3, #3
 801b010:	e280      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b012:	4b55      	ldr	r3, [pc, #340]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d0f0      	beq.n	801b000 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b01e:	f7fe fbcb 	bl	80197b8 <HAL_GetREVID>
 801b022:	4603      	mov	r3, r0
 801b024:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b028:	4293      	cmp	r3, r2
 801b02a:	d817      	bhi.n	801b05c <HAL_RCC_OscConfig+0x3ec>
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	6a1b      	ldr	r3, [r3, #32]
 801b030:	2b20      	cmp	r3, #32
 801b032:	d108      	bne.n	801b046 <HAL_RCC_OscConfig+0x3d6>
 801b034:	4b4c      	ldr	r3, [pc, #304]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b036:	685b      	ldr	r3, [r3, #4]
 801b038:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801b03c:	4a4a      	ldr	r2, [pc, #296]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b03e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b042:	6053      	str	r3, [r2, #4]
 801b044:	e02e      	b.n	801b0a4 <HAL_RCC_OscConfig+0x434>
 801b046:	4b48      	ldr	r3, [pc, #288]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b048:	685b      	ldr	r3, [r3, #4]
 801b04a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	6a1b      	ldr	r3, [r3, #32]
 801b052:	069b      	lsls	r3, r3, #26
 801b054:	4944      	ldr	r1, [pc, #272]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b056:	4313      	orrs	r3, r2
 801b058:	604b      	str	r3, [r1, #4]
 801b05a:	e023      	b.n	801b0a4 <HAL_RCC_OscConfig+0x434>
 801b05c:	4b42      	ldr	r3, [pc, #264]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b05e:	68db      	ldr	r3, [r3, #12]
 801b060:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	6a1b      	ldr	r3, [r3, #32]
 801b068:	061b      	lsls	r3, r3, #24
 801b06a:	493f      	ldr	r1, [pc, #252]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b06c:	4313      	orrs	r3, r2
 801b06e:	60cb      	str	r3, [r1, #12]
 801b070:	e018      	b.n	801b0a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b072:	4b3d      	ldr	r3, [pc, #244]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	4a3c      	ldr	r2, [pc, #240]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b07c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b07e:	f7fe fb8f 	bl	80197a0 <HAL_GetTick>
 801b082:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b084:	e008      	b.n	801b098 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b086:	f7fe fb8b 	bl	80197a0 <HAL_GetTick>
 801b08a:	4602      	mov	r2, r0
 801b08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b08e:	1ad3      	subs	r3, r2, r3
 801b090:	2b02      	cmp	r3, #2
 801b092:	d901      	bls.n	801b098 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801b094:	2303      	movs	r3, #3
 801b096:	e23d      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b098:	4b33      	ldr	r3, [pc, #204]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d1f0      	bne.n	801b086 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	f003 0308 	and.w	r3, r3, #8
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d036      	beq.n	801b11e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	695b      	ldr	r3, [r3, #20]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d019      	beq.n	801b0ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b0b8:	4b2b      	ldr	r3, [pc, #172]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b0ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0bc:	4a2a      	ldr	r2, [pc, #168]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b0be:	f043 0301 	orr.w	r3, r3, #1
 801b0c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b0c4:	f7fe fb6c 	bl	80197a0 <HAL_GetTick>
 801b0c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b0ca:	e008      	b.n	801b0de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b0cc:	f7fe fb68 	bl	80197a0 <HAL_GetTick>
 801b0d0:	4602      	mov	r2, r0
 801b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0d4:	1ad3      	subs	r3, r2, r3
 801b0d6:	2b02      	cmp	r3, #2
 801b0d8:	d901      	bls.n	801b0de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801b0da:	2303      	movs	r3, #3
 801b0dc:	e21a      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b0de:	4b22      	ldr	r3, [pc, #136]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b0e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0e2:	f003 0302 	and.w	r3, r3, #2
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d0f0      	beq.n	801b0cc <HAL_RCC_OscConfig+0x45c>
 801b0ea:	e018      	b.n	801b11e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b0ec:	4b1e      	ldr	r3, [pc, #120]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0f0:	4a1d      	ldr	r2, [pc, #116]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b0f2:	f023 0301 	bic.w	r3, r3, #1
 801b0f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b0f8:	f7fe fb52 	bl	80197a0 <HAL_GetTick>
 801b0fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b0fe:	e008      	b.n	801b112 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b100:	f7fe fb4e 	bl	80197a0 <HAL_GetTick>
 801b104:	4602      	mov	r2, r0
 801b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b108:	1ad3      	subs	r3, r2, r3
 801b10a:	2b02      	cmp	r3, #2
 801b10c:	d901      	bls.n	801b112 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801b10e:	2303      	movs	r3, #3
 801b110:	e200      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b112:	4b15      	ldr	r3, [pc, #84]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b116:	f003 0302 	and.w	r3, r3, #2
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d1f0      	bne.n	801b100 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	f003 0320 	and.w	r3, r3, #32
 801b126:	2b00      	cmp	r3, #0
 801b128:	d039      	beq.n	801b19e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	699b      	ldr	r3, [r3, #24]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d01c      	beq.n	801b16c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b132:	4b0d      	ldr	r3, [pc, #52]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	4a0c      	ldr	r2, [pc, #48]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b138:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801b13c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b13e:	f7fe fb2f 	bl	80197a0 <HAL_GetTick>
 801b142:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b144:	e008      	b.n	801b158 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b146:	f7fe fb2b 	bl	80197a0 <HAL_GetTick>
 801b14a:	4602      	mov	r2, r0
 801b14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b14e:	1ad3      	subs	r3, r2, r3
 801b150:	2b02      	cmp	r3, #2
 801b152:	d901      	bls.n	801b158 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801b154:	2303      	movs	r3, #3
 801b156:	e1dd      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b158:	4b03      	ldr	r3, [pc, #12]	@ (801b168 <HAL_RCC_OscConfig+0x4f8>)
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b160:	2b00      	cmp	r3, #0
 801b162:	d0f0      	beq.n	801b146 <HAL_RCC_OscConfig+0x4d6>
 801b164:	e01b      	b.n	801b19e <HAL_RCC_OscConfig+0x52e>
 801b166:	bf00      	nop
 801b168:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b16c:	4b9b      	ldr	r3, [pc, #620]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	4a9a      	ldr	r2, [pc, #616]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b176:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b178:	f7fe fb12 	bl	80197a0 <HAL_GetTick>
 801b17c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b17e:	e008      	b.n	801b192 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b180:	f7fe fb0e 	bl	80197a0 <HAL_GetTick>
 801b184:	4602      	mov	r2, r0
 801b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b188:	1ad3      	subs	r3, r2, r3
 801b18a:	2b02      	cmp	r3, #2
 801b18c:	d901      	bls.n	801b192 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801b18e:	2303      	movs	r3, #3
 801b190:	e1c0      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b192:	4b92      	ldr	r3, [pc, #584]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d1f0      	bne.n	801b180 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	f003 0304 	and.w	r3, r3, #4
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	f000 8081 	beq.w	801b2ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b1ac:	4b8c      	ldr	r3, [pc, #560]	@ (801b3e0 <HAL_RCC_OscConfig+0x770>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	4a8b      	ldr	r2, [pc, #556]	@ (801b3e0 <HAL_RCC_OscConfig+0x770>)
 801b1b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801b1b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b1b8:	f7fe faf2 	bl	80197a0 <HAL_GetTick>
 801b1bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b1be:	e008      	b.n	801b1d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b1c0:	f7fe faee 	bl	80197a0 <HAL_GetTick>
 801b1c4:	4602      	mov	r2, r0
 801b1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1c8:	1ad3      	subs	r3, r2, r3
 801b1ca:	2b64      	cmp	r3, #100	@ 0x64
 801b1cc:	d901      	bls.n	801b1d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801b1ce:	2303      	movs	r3, #3
 801b1d0:	e1a0      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b1d2:	4b83      	ldr	r3, [pc, #524]	@ (801b3e0 <HAL_RCC_OscConfig+0x770>)
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d0f0      	beq.n	801b1c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	689b      	ldr	r3, [r3, #8]
 801b1e2:	2b01      	cmp	r3, #1
 801b1e4:	d106      	bne.n	801b1f4 <HAL_RCC_OscConfig+0x584>
 801b1e6:	4b7d      	ldr	r3, [pc, #500]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b1e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b1ea:	4a7c      	ldr	r2, [pc, #496]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b1ec:	f043 0301 	orr.w	r3, r3, #1
 801b1f0:	6713      	str	r3, [r2, #112]	@ 0x70
 801b1f2:	e02d      	b.n	801b250 <HAL_RCC_OscConfig+0x5e0>
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	689b      	ldr	r3, [r3, #8]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d10c      	bne.n	801b216 <HAL_RCC_OscConfig+0x5a6>
 801b1fc:	4b77      	ldr	r3, [pc, #476]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b1fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b200:	4a76      	ldr	r2, [pc, #472]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b202:	f023 0301 	bic.w	r3, r3, #1
 801b206:	6713      	str	r3, [r2, #112]	@ 0x70
 801b208:	4b74      	ldr	r3, [pc, #464]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b20c:	4a73      	ldr	r2, [pc, #460]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b20e:	f023 0304 	bic.w	r3, r3, #4
 801b212:	6713      	str	r3, [r2, #112]	@ 0x70
 801b214:	e01c      	b.n	801b250 <HAL_RCC_OscConfig+0x5e0>
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	689b      	ldr	r3, [r3, #8]
 801b21a:	2b05      	cmp	r3, #5
 801b21c:	d10c      	bne.n	801b238 <HAL_RCC_OscConfig+0x5c8>
 801b21e:	4b6f      	ldr	r3, [pc, #444]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b222:	4a6e      	ldr	r2, [pc, #440]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b224:	f043 0304 	orr.w	r3, r3, #4
 801b228:	6713      	str	r3, [r2, #112]	@ 0x70
 801b22a:	4b6c      	ldr	r3, [pc, #432]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b22e:	4a6b      	ldr	r2, [pc, #428]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b230:	f043 0301 	orr.w	r3, r3, #1
 801b234:	6713      	str	r3, [r2, #112]	@ 0x70
 801b236:	e00b      	b.n	801b250 <HAL_RCC_OscConfig+0x5e0>
 801b238:	4b68      	ldr	r3, [pc, #416]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b23a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b23c:	4a67      	ldr	r2, [pc, #412]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b23e:	f023 0301 	bic.w	r3, r3, #1
 801b242:	6713      	str	r3, [r2, #112]	@ 0x70
 801b244:	4b65      	ldr	r3, [pc, #404]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b248:	4a64      	ldr	r2, [pc, #400]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b24a:	f023 0304 	bic.w	r3, r3, #4
 801b24e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	689b      	ldr	r3, [r3, #8]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d015      	beq.n	801b284 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b258:	f7fe faa2 	bl	80197a0 <HAL_GetTick>
 801b25c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b25e:	e00a      	b.n	801b276 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b260:	f7fe fa9e 	bl	80197a0 <HAL_GetTick>
 801b264:	4602      	mov	r2, r0
 801b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b268:	1ad3      	subs	r3, r2, r3
 801b26a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b26e:	4293      	cmp	r3, r2
 801b270:	d901      	bls.n	801b276 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801b272:	2303      	movs	r3, #3
 801b274:	e14e      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b276:	4b59      	ldr	r3, [pc, #356]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b27a:	f003 0302 	and.w	r3, r3, #2
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d0ee      	beq.n	801b260 <HAL_RCC_OscConfig+0x5f0>
 801b282:	e014      	b.n	801b2ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b284:	f7fe fa8c 	bl	80197a0 <HAL_GetTick>
 801b288:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b28a:	e00a      	b.n	801b2a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b28c:	f7fe fa88 	bl	80197a0 <HAL_GetTick>
 801b290:	4602      	mov	r2, r0
 801b292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b294:	1ad3      	subs	r3, r2, r3
 801b296:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b29a:	4293      	cmp	r3, r2
 801b29c:	d901      	bls.n	801b2a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801b29e:	2303      	movs	r3, #3
 801b2a0:	e138      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b2a2:	4b4e      	ldr	r3, [pc, #312]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b2a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b2a6:	f003 0302 	and.w	r3, r3, #2
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d1ee      	bne.n	801b28c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	f000 812d 	beq.w	801b512 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801b2b8:	4b48      	ldr	r3, [pc, #288]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b2ba:	691b      	ldr	r3, [r3, #16]
 801b2bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b2c0:	2b18      	cmp	r3, #24
 801b2c2:	f000 80bd 	beq.w	801b440 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b2ca:	2b02      	cmp	r3, #2
 801b2cc:	f040 809e 	bne.w	801b40c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b2d0:	4b42      	ldr	r3, [pc, #264]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	4a41      	ldr	r2, [pc, #260]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b2d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b2da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b2dc:	f7fe fa60 	bl	80197a0 <HAL_GetTick>
 801b2e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b2e2:	e008      	b.n	801b2f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b2e4:	f7fe fa5c 	bl	80197a0 <HAL_GetTick>
 801b2e8:	4602      	mov	r2, r0
 801b2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ec:	1ad3      	subs	r3, r2, r3
 801b2ee:	2b02      	cmp	r3, #2
 801b2f0:	d901      	bls.n	801b2f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801b2f2:	2303      	movs	r3, #3
 801b2f4:	e10e      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b2f6:	4b39      	ldr	r3, [pc, #228]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d1f0      	bne.n	801b2e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b302:	4b36      	ldr	r3, [pc, #216]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b304:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b306:	4b37      	ldr	r3, [pc, #220]	@ (801b3e4 <HAL_RCC_OscConfig+0x774>)
 801b308:	4013      	ands	r3, r2
 801b30a:	687a      	ldr	r2, [r7, #4]
 801b30c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801b30e:	687a      	ldr	r2, [r7, #4]
 801b310:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801b312:	0112      	lsls	r2, r2, #4
 801b314:	430a      	orrs	r2, r1
 801b316:	4931      	ldr	r1, [pc, #196]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b318:	4313      	orrs	r3, r2
 801b31a:	628b      	str	r3, [r1, #40]	@ 0x28
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b320:	3b01      	subs	r3, #1
 801b322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b32a:	3b01      	subs	r3, #1
 801b32c:	025b      	lsls	r3, r3, #9
 801b32e:	b29b      	uxth	r3, r3
 801b330:	431a      	orrs	r2, r3
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b336:	3b01      	subs	r3, #1
 801b338:	041b      	lsls	r3, r3, #16
 801b33a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801b33e:	431a      	orrs	r2, r3
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b344:	3b01      	subs	r3, #1
 801b346:	061b      	lsls	r3, r3, #24
 801b348:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801b34c:	4923      	ldr	r1, [pc, #140]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b34e:	4313      	orrs	r3, r2
 801b350:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801b352:	4b22      	ldr	r3, [pc, #136]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b356:	4a21      	ldr	r2, [pc, #132]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b358:	f023 0301 	bic.w	r3, r3, #1
 801b35c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b35e:	4b1f      	ldr	r3, [pc, #124]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b362:	4b21      	ldr	r3, [pc, #132]	@ (801b3e8 <HAL_RCC_OscConfig+0x778>)
 801b364:	4013      	ands	r3, r2
 801b366:	687a      	ldr	r2, [r7, #4]
 801b368:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801b36a:	00d2      	lsls	r2, r2, #3
 801b36c:	491b      	ldr	r1, [pc, #108]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b36e:	4313      	orrs	r3, r2
 801b370:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801b372:	4b1a      	ldr	r3, [pc, #104]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b376:	f023 020c 	bic.w	r2, r3, #12
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b37e:	4917      	ldr	r1, [pc, #92]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b380:	4313      	orrs	r3, r2
 801b382:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801b384:	4b15      	ldr	r3, [pc, #84]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b388:	f023 0202 	bic.w	r2, r3, #2
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b390:	4912      	ldr	r1, [pc, #72]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b392:	4313      	orrs	r3, r2
 801b394:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801b396:	4b11      	ldr	r3, [pc, #68]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b39a:	4a10      	ldr	r2, [pc, #64]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b39c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b3a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b3a2:	4b0e      	ldr	r3, [pc, #56]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3a6:	4a0d      	ldr	r2, [pc, #52]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b3a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b3ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801b3ae:	4b0b      	ldr	r3, [pc, #44]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3b2:	4a0a      	ldr	r2, [pc, #40]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b3b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b3b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801b3ba:	4b08      	ldr	r3, [pc, #32]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3be:	4a07      	ldr	r2, [pc, #28]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b3c0:	f043 0301 	orr.w	r3, r3, #1
 801b3c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b3c6:	4b05      	ldr	r3, [pc, #20]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	4a04      	ldr	r2, [pc, #16]	@ (801b3dc <HAL_RCC_OscConfig+0x76c>)
 801b3cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801b3d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b3d2:	f7fe f9e5 	bl	80197a0 <HAL_GetTick>
 801b3d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b3d8:	e011      	b.n	801b3fe <HAL_RCC_OscConfig+0x78e>
 801b3da:	bf00      	nop
 801b3dc:	58024400 	.word	0x58024400
 801b3e0:	58024800 	.word	0x58024800
 801b3e4:	fffffc0c 	.word	0xfffffc0c
 801b3e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b3ec:	f7fe f9d8 	bl	80197a0 <HAL_GetTick>
 801b3f0:	4602      	mov	r2, r0
 801b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3f4:	1ad3      	subs	r3, r2, r3
 801b3f6:	2b02      	cmp	r3, #2
 801b3f8:	d901      	bls.n	801b3fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801b3fa:	2303      	movs	r3, #3
 801b3fc:	e08a      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b3fe:	4b47      	ldr	r3, [pc, #284]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801b406:	2b00      	cmp	r3, #0
 801b408:	d0f0      	beq.n	801b3ec <HAL_RCC_OscConfig+0x77c>
 801b40a:	e082      	b.n	801b512 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b40c:	4b43      	ldr	r3, [pc, #268]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	4a42      	ldr	r2, [pc, #264]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b418:	f7fe f9c2 	bl	80197a0 <HAL_GetTick>
 801b41c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b41e:	e008      	b.n	801b432 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b420:	f7fe f9be 	bl	80197a0 <HAL_GetTick>
 801b424:	4602      	mov	r2, r0
 801b426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b428:	1ad3      	subs	r3, r2, r3
 801b42a:	2b02      	cmp	r3, #2
 801b42c:	d901      	bls.n	801b432 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801b42e:	2303      	movs	r3, #3
 801b430:	e070      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b432:	4b3a      	ldr	r3, [pc, #232]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d1f0      	bne.n	801b420 <HAL_RCC_OscConfig+0x7b0>
 801b43e:	e068      	b.n	801b512 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801b440:	4b36      	ldr	r3, [pc, #216]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b444:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801b446:	4b35      	ldr	r3, [pc, #212]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b44a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b450:	2b01      	cmp	r3, #1
 801b452:	d031      	beq.n	801b4b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b454:	693b      	ldr	r3, [r7, #16]
 801b456:	f003 0203 	and.w	r2, r3, #3
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b45e:	429a      	cmp	r2, r3
 801b460:	d12a      	bne.n	801b4b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b462:	693b      	ldr	r3, [r7, #16]
 801b464:	091b      	lsrs	r3, r3, #4
 801b466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b46e:	429a      	cmp	r2, r3
 801b470:	d122      	bne.n	801b4b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b47c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b47e:	429a      	cmp	r2, r3
 801b480:	d11a      	bne.n	801b4b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	0a5b      	lsrs	r3, r3, #9
 801b486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b48e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b490:	429a      	cmp	r2, r3
 801b492:	d111      	bne.n	801b4b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	0c1b      	lsrs	r3, r3, #16
 801b498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b4a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b4a2:	429a      	cmp	r2, r3
 801b4a4:	d108      	bne.n	801b4b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	0e1b      	lsrs	r3, r3, #24
 801b4aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b4b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b4b4:	429a      	cmp	r2, r3
 801b4b6:	d001      	beq.n	801b4bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801b4b8:	2301      	movs	r3, #1
 801b4ba:	e02b      	b.n	801b514 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801b4bc:	4b17      	ldr	r3, [pc, #92]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b4be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4c0:	08db      	lsrs	r3, r3, #3
 801b4c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b4c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b4cc:	693a      	ldr	r2, [r7, #16]
 801b4ce:	429a      	cmp	r2, r3
 801b4d0:	d01f      	beq.n	801b512 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801b4d2:	4b12      	ldr	r3, [pc, #72]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b4d6:	4a11      	ldr	r2, [pc, #68]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b4d8:	f023 0301 	bic.w	r3, r3, #1
 801b4dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b4de:	f7fe f95f 	bl	80197a0 <HAL_GetTick>
 801b4e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801b4e4:	bf00      	nop
 801b4e6:	f7fe f95b 	bl	80197a0 <HAL_GetTick>
 801b4ea:	4602      	mov	r2, r0
 801b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4ee:	4293      	cmp	r3, r2
 801b4f0:	d0f9      	beq.n	801b4e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b4f2:	4b0a      	ldr	r3, [pc, #40]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b4f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b4f6:	4b0a      	ldr	r3, [pc, #40]	@ (801b520 <HAL_RCC_OscConfig+0x8b0>)
 801b4f8:	4013      	ands	r3, r2
 801b4fa:	687a      	ldr	r2, [r7, #4]
 801b4fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801b4fe:	00d2      	lsls	r2, r2, #3
 801b500:	4906      	ldr	r1, [pc, #24]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b502:	4313      	orrs	r3, r2
 801b504:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801b506:	4b05      	ldr	r3, [pc, #20]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b50a:	4a04      	ldr	r2, [pc, #16]	@ (801b51c <HAL_RCC_OscConfig+0x8ac>)
 801b50c:	f043 0301 	orr.w	r3, r3, #1
 801b510:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801b512:	2300      	movs	r3, #0
}
 801b514:	4618      	mov	r0, r3
 801b516:	3730      	adds	r7, #48	@ 0x30
 801b518:	46bd      	mov	sp, r7
 801b51a:	bd80      	pop	{r7, pc}
 801b51c:	58024400 	.word	0x58024400
 801b520:	ffff0007 	.word	0xffff0007

0801b524 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b086      	sub	sp, #24
 801b528:	af00      	add	r7, sp, #0
 801b52a:	6078      	str	r0, [r7, #4]
 801b52c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d101      	bne.n	801b538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b534:	2301      	movs	r3, #1
 801b536:	e19c      	b.n	801b872 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b538:	4b8a      	ldr	r3, [pc, #552]	@ (801b764 <HAL_RCC_ClockConfig+0x240>)
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	f003 030f 	and.w	r3, r3, #15
 801b540:	683a      	ldr	r2, [r7, #0]
 801b542:	429a      	cmp	r2, r3
 801b544:	d910      	bls.n	801b568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b546:	4b87      	ldr	r3, [pc, #540]	@ (801b764 <HAL_RCC_ClockConfig+0x240>)
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	f023 020f 	bic.w	r2, r3, #15
 801b54e:	4985      	ldr	r1, [pc, #532]	@ (801b764 <HAL_RCC_ClockConfig+0x240>)
 801b550:	683b      	ldr	r3, [r7, #0]
 801b552:	4313      	orrs	r3, r2
 801b554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b556:	4b83      	ldr	r3, [pc, #524]	@ (801b764 <HAL_RCC_ClockConfig+0x240>)
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	f003 030f 	and.w	r3, r3, #15
 801b55e:	683a      	ldr	r2, [r7, #0]
 801b560:	429a      	cmp	r2, r3
 801b562:	d001      	beq.n	801b568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801b564:	2301      	movs	r3, #1
 801b566:	e184      	b.n	801b872 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	f003 0304 	and.w	r3, r3, #4
 801b570:	2b00      	cmp	r3, #0
 801b572:	d010      	beq.n	801b596 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	691a      	ldr	r2, [r3, #16]
 801b578:	4b7b      	ldr	r3, [pc, #492]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b57a:	699b      	ldr	r3, [r3, #24]
 801b57c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801b580:	429a      	cmp	r2, r3
 801b582:	d908      	bls.n	801b596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b584:	4b78      	ldr	r3, [pc, #480]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b586:	699b      	ldr	r3, [r3, #24]
 801b588:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	691b      	ldr	r3, [r3, #16]
 801b590:	4975      	ldr	r1, [pc, #468]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b592:	4313      	orrs	r3, r2
 801b594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	f003 0308 	and.w	r3, r3, #8
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d010      	beq.n	801b5c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	695a      	ldr	r2, [r3, #20]
 801b5a6:	4b70      	ldr	r3, [pc, #448]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b5a8:	69db      	ldr	r3, [r3, #28]
 801b5aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	d908      	bls.n	801b5c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b5b2:	4b6d      	ldr	r3, [pc, #436]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b5b4:	69db      	ldr	r3, [r3, #28]
 801b5b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	695b      	ldr	r3, [r3, #20]
 801b5be:	496a      	ldr	r1, [pc, #424]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b5c0:	4313      	orrs	r3, r2
 801b5c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	f003 0310 	and.w	r3, r3, #16
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d010      	beq.n	801b5f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	699a      	ldr	r2, [r3, #24]
 801b5d4:	4b64      	ldr	r3, [pc, #400]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b5d6:	69db      	ldr	r3, [r3, #28]
 801b5d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801b5dc:	429a      	cmp	r2, r3
 801b5de:	d908      	bls.n	801b5f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b5e0:	4b61      	ldr	r3, [pc, #388]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b5e2:	69db      	ldr	r3, [r3, #28]
 801b5e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	699b      	ldr	r3, [r3, #24]
 801b5ec:	495e      	ldr	r1, [pc, #376]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b5ee:	4313      	orrs	r3, r2
 801b5f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	f003 0320 	and.w	r3, r3, #32
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d010      	beq.n	801b620 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	69da      	ldr	r2, [r3, #28]
 801b602:	4b59      	ldr	r3, [pc, #356]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b604:	6a1b      	ldr	r3, [r3, #32]
 801b606:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801b60a:	429a      	cmp	r2, r3
 801b60c:	d908      	bls.n	801b620 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b60e:	4b56      	ldr	r3, [pc, #344]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b610:	6a1b      	ldr	r3, [r3, #32]
 801b612:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	69db      	ldr	r3, [r3, #28]
 801b61a:	4953      	ldr	r1, [pc, #332]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b61c:	4313      	orrs	r3, r2
 801b61e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	f003 0302 	and.w	r3, r3, #2
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d010      	beq.n	801b64e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	68da      	ldr	r2, [r3, #12]
 801b630:	4b4d      	ldr	r3, [pc, #308]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b632:	699b      	ldr	r3, [r3, #24]
 801b634:	f003 030f 	and.w	r3, r3, #15
 801b638:	429a      	cmp	r2, r3
 801b63a:	d908      	bls.n	801b64e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b63c:	4b4a      	ldr	r3, [pc, #296]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b63e:	699b      	ldr	r3, [r3, #24]
 801b640:	f023 020f 	bic.w	r2, r3, #15
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	68db      	ldr	r3, [r3, #12]
 801b648:	4947      	ldr	r1, [pc, #284]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b64a:	4313      	orrs	r3, r2
 801b64c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	f003 0301 	and.w	r3, r3, #1
 801b656:	2b00      	cmp	r3, #0
 801b658:	d055      	beq.n	801b706 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801b65a:	4b43      	ldr	r3, [pc, #268]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b65c:	699b      	ldr	r3, [r3, #24]
 801b65e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	689b      	ldr	r3, [r3, #8]
 801b666:	4940      	ldr	r1, [pc, #256]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b668:	4313      	orrs	r3, r2
 801b66a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	685b      	ldr	r3, [r3, #4]
 801b670:	2b02      	cmp	r3, #2
 801b672:	d107      	bne.n	801b684 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b674:	4b3c      	ldr	r3, [pc, #240]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d121      	bne.n	801b6c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b680:	2301      	movs	r3, #1
 801b682:	e0f6      	b.n	801b872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	685b      	ldr	r3, [r3, #4]
 801b688:	2b03      	cmp	r3, #3
 801b68a:	d107      	bne.n	801b69c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b68c:	4b36      	ldr	r3, [pc, #216]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801b694:	2b00      	cmp	r3, #0
 801b696:	d115      	bne.n	801b6c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b698:	2301      	movs	r3, #1
 801b69a:	e0ea      	b.n	801b872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	685b      	ldr	r3, [r3, #4]
 801b6a0:	2b01      	cmp	r3, #1
 801b6a2:	d107      	bne.n	801b6b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b6a4:	4b30      	ldr	r3, [pc, #192]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d109      	bne.n	801b6c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b6b0:	2301      	movs	r3, #1
 801b6b2:	e0de      	b.n	801b872 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b6b4:	4b2c      	ldr	r3, [pc, #176]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	f003 0304 	and.w	r3, r3, #4
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d101      	bne.n	801b6c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b6c0:	2301      	movs	r3, #1
 801b6c2:	e0d6      	b.n	801b872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b6c4:	4b28      	ldr	r3, [pc, #160]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b6c6:	691b      	ldr	r3, [r3, #16]
 801b6c8:	f023 0207 	bic.w	r2, r3, #7
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	685b      	ldr	r3, [r3, #4]
 801b6d0:	4925      	ldr	r1, [pc, #148]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b6d2:	4313      	orrs	r3, r2
 801b6d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b6d6:	f7fe f863 	bl	80197a0 <HAL_GetTick>
 801b6da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b6dc:	e00a      	b.n	801b6f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b6de:	f7fe f85f 	bl	80197a0 <HAL_GetTick>
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	697b      	ldr	r3, [r7, #20]
 801b6e6:	1ad3      	subs	r3, r2, r3
 801b6e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	d901      	bls.n	801b6f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801b6f0:	2303      	movs	r3, #3
 801b6f2:	e0be      	b.n	801b872 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b6f4:	4b1c      	ldr	r3, [pc, #112]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b6f6:	691b      	ldr	r3, [r3, #16]
 801b6f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	685b      	ldr	r3, [r3, #4]
 801b700:	00db      	lsls	r3, r3, #3
 801b702:	429a      	cmp	r2, r3
 801b704:	d1eb      	bne.n	801b6de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	f003 0302 	and.w	r3, r3, #2
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d010      	beq.n	801b734 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	68da      	ldr	r2, [r3, #12]
 801b716:	4b14      	ldr	r3, [pc, #80]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b718:	699b      	ldr	r3, [r3, #24]
 801b71a:	f003 030f 	and.w	r3, r3, #15
 801b71e:	429a      	cmp	r2, r3
 801b720:	d208      	bcs.n	801b734 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b722:	4b11      	ldr	r3, [pc, #68]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b724:	699b      	ldr	r3, [r3, #24]
 801b726:	f023 020f 	bic.w	r2, r3, #15
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	68db      	ldr	r3, [r3, #12]
 801b72e:	490e      	ldr	r1, [pc, #56]	@ (801b768 <HAL_RCC_ClockConfig+0x244>)
 801b730:	4313      	orrs	r3, r2
 801b732:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b734:	4b0b      	ldr	r3, [pc, #44]	@ (801b764 <HAL_RCC_ClockConfig+0x240>)
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	f003 030f 	and.w	r3, r3, #15
 801b73c:	683a      	ldr	r2, [r7, #0]
 801b73e:	429a      	cmp	r2, r3
 801b740:	d214      	bcs.n	801b76c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b742:	4b08      	ldr	r3, [pc, #32]	@ (801b764 <HAL_RCC_ClockConfig+0x240>)
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	f023 020f 	bic.w	r2, r3, #15
 801b74a:	4906      	ldr	r1, [pc, #24]	@ (801b764 <HAL_RCC_ClockConfig+0x240>)
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	4313      	orrs	r3, r2
 801b750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b752:	4b04      	ldr	r3, [pc, #16]	@ (801b764 <HAL_RCC_ClockConfig+0x240>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	f003 030f 	and.w	r3, r3, #15
 801b75a:	683a      	ldr	r2, [r7, #0]
 801b75c:	429a      	cmp	r2, r3
 801b75e:	d005      	beq.n	801b76c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801b760:	2301      	movs	r3, #1
 801b762:	e086      	b.n	801b872 <HAL_RCC_ClockConfig+0x34e>
 801b764:	52002000 	.word	0x52002000
 801b768:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	f003 0304 	and.w	r3, r3, #4
 801b774:	2b00      	cmp	r3, #0
 801b776:	d010      	beq.n	801b79a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	691a      	ldr	r2, [r3, #16]
 801b77c:	4b3f      	ldr	r3, [pc, #252]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b77e:	699b      	ldr	r3, [r3, #24]
 801b780:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801b784:	429a      	cmp	r2, r3
 801b786:	d208      	bcs.n	801b79a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b788:	4b3c      	ldr	r3, [pc, #240]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b78a:	699b      	ldr	r3, [r3, #24]
 801b78c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	691b      	ldr	r3, [r3, #16]
 801b794:	4939      	ldr	r1, [pc, #228]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b796:	4313      	orrs	r3, r2
 801b798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	f003 0308 	and.w	r3, r3, #8
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d010      	beq.n	801b7c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	695a      	ldr	r2, [r3, #20]
 801b7aa:	4b34      	ldr	r3, [pc, #208]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b7ac:	69db      	ldr	r3, [r3, #28]
 801b7ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801b7b2:	429a      	cmp	r2, r3
 801b7b4:	d208      	bcs.n	801b7c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b7b6:	4b31      	ldr	r3, [pc, #196]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b7b8:	69db      	ldr	r3, [r3, #28]
 801b7ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	695b      	ldr	r3, [r3, #20]
 801b7c2:	492e      	ldr	r1, [pc, #184]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b7c4:	4313      	orrs	r3, r2
 801b7c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	f003 0310 	and.w	r3, r3, #16
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d010      	beq.n	801b7f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	699a      	ldr	r2, [r3, #24]
 801b7d8:	4b28      	ldr	r3, [pc, #160]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b7da:	69db      	ldr	r3, [r3, #28]
 801b7dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801b7e0:	429a      	cmp	r2, r3
 801b7e2:	d208      	bcs.n	801b7f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b7e4:	4b25      	ldr	r3, [pc, #148]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b7e6:	69db      	ldr	r3, [r3, #28]
 801b7e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	699b      	ldr	r3, [r3, #24]
 801b7f0:	4922      	ldr	r1, [pc, #136]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b7f2:	4313      	orrs	r3, r2
 801b7f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	f003 0320 	and.w	r3, r3, #32
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d010      	beq.n	801b824 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	69da      	ldr	r2, [r3, #28]
 801b806:	4b1d      	ldr	r3, [pc, #116]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b808:	6a1b      	ldr	r3, [r3, #32]
 801b80a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801b80e:	429a      	cmp	r2, r3
 801b810:	d208      	bcs.n	801b824 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b812:	4b1a      	ldr	r3, [pc, #104]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b814:	6a1b      	ldr	r3, [r3, #32]
 801b816:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	69db      	ldr	r3, [r3, #28]
 801b81e:	4917      	ldr	r1, [pc, #92]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b820:	4313      	orrs	r3, r2
 801b822:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b824:	f000 f834 	bl	801b890 <HAL_RCC_GetSysClockFreq>
 801b828:	4602      	mov	r2, r0
 801b82a:	4b14      	ldr	r3, [pc, #80]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b82c:	699b      	ldr	r3, [r3, #24]
 801b82e:	0a1b      	lsrs	r3, r3, #8
 801b830:	f003 030f 	and.w	r3, r3, #15
 801b834:	4912      	ldr	r1, [pc, #72]	@ (801b880 <HAL_RCC_ClockConfig+0x35c>)
 801b836:	5ccb      	ldrb	r3, [r1, r3]
 801b838:	f003 031f 	and.w	r3, r3, #31
 801b83c:	fa22 f303 	lsr.w	r3, r2, r3
 801b840:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b842:	4b0e      	ldr	r3, [pc, #56]	@ (801b87c <HAL_RCC_ClockConfig+0x358>)
 801b844:	699b      	ldr	r3, [r3, #24]
 801b846:	f003 030f 	and.w	r3, r3, #15
 801b84a:	4a0d      	ldr	r2, [pc, #52]	@ (801b880 <HAL_RCC_ClockConfig+0x35c>)
 801b84c:	5cd3      	ldrb	r3, [r2, r3]
 801b84e:	f003 031f 	and.w	r3, r3, #31
 801b852:	693a      	ldr	r2, [r7, #16]
 801b854:	fa22 f303 	lsr.w	r3, r2, r3
 801b858:	4a0a      	ldr	r2, [pc, #40]	@ (801b884 <HAL_RCC_ClockConfig+0x360>)
 801b85a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b85c:	4a0a      	ldr	r2, [pc, #40]	@ (801b888 <HAL_RCC_ClockConfig+0x364>)
 801b85e:	693b      	ldr	r3, [r7, #16]
 801b860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801b862:	4b0a      	ldr	r3, [pc, #40]	@ (801b88c <HAL_RCC_ClockConfig+0x368>)
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	4618      	mov	r0, r3
 801b868:	f7fd fde4 	bl	8019434 <HAL_InitTick>
 801b86c:	4603      	mov	r3, r0
 801b86e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801b870:	7bfb      	ldrb	r3, [r7, #15]
}
 801b872:	4618      	mov	r0, r3
 801b874:	3718      	adds	r7, #24
 801b876:	46bd      	mov	sp, r7
 801b878:	bd80      	pop	{r7, pc}
 801b87a:	bf00      	nop
 801b87c:	58024400 	.word	0x58024400
 801b880:	080260bc 	.word	0x080260bc
 801b884:	24000004 	.word	0x24000004
 801b888:	24000000 	.word	0x24000000
 801b88c:	2400079c 	.word	0x2400079c

0801b890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b890:	b480      	push	{r7}
 801b892:	b089      	sub	sp, #36	@ 0x24
 801b894:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b896:	4bb3      	ldr	r3, [pc, #716]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b898:	691b      	ldr	r3, [r3, #16]
 801b89a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b89e:	2b18      	cmp	r3, #24
 801b8a0:	f200 8155 	bhi.w	801bb4e <HAL_RCC_GetSysClockFreq+0x2be>
 801b8a4:	a201      	add	r2, pc, #4	@ (adr r2, 801b8ac <HAL_RCC_GetSysClockFreq+0x1c>)
 801b8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8aa:	bf00      	nop
 801b8ac:	0801b911 	.word	0x0801b911
 801b8b0:	0801bb4f 	.word	0x0801bb4f
 801b8b4:	0801bb4f 	.word	0x0801bb4f
 801b8b8:	0801bb4f 	.word	0x0801bb4f
 801b8bc:	0801bb4f 	.word	0x0801bb4f
 801b8c0:	0801bb4f 	.word	0x0801bb4f
 801b8c4:	0801bb4f 	.word	0x0801bb4f
 801b8c8:	0801bb4f 	.word	0x0801bb4f
 801b8cc:	0801b937 	.word	0x0801b937
 801b8d0:	0801bb4f 	.word	0x0801bb4f
 801b8d4:	0801bb4f 	.word	0x0801bb4f
 801b8d8:	0801bb4f 	.word	0x0801bb4f
 801b8dc:	0801bb4f 	.word	0x0801bb4f
 801b8e0:	0801bb4f 	.word	0x0801bb4f
 801b8e4:	0801bb4f 	.word	0x0801bb4f
 801b8e8:	0801bb4f 	.word	0x0801bb4f
 801b8ec:	0801b93d 	.word	0x0801b93d
 801b8f0:	0801bb4f 	.word	0x0801bb4f
 801b8f4:	0801bb4f 	.word	0x0801bb4f
 801b8f8:	0801bb4f 	.word	0x0801bb4f
 801b8fc:	0801bb4f 	.word	0x0801bb4f
 801b900:	0801bb4f 	.word	0x0801bb4f
 801b904:	0801bb4f 	.word	0x0801bb4f
 801b908:	0801bb4f 	.word	0x0801bb4f
 801b90c:	0801b943 	.word	0x0801b943
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b910:	4b94      	ldr	r3, [pc, #592]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	f003 0320 	and.w	r3, r3, #32
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d009      	beq.n	801b930 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801b91c:	4b91      	ldr	r3, [pc, #580]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	08db      	lsrs	r3, r3, #3
 801b922:	f003 0303 	and.w	r3, r3, #3
 801b926:	4a90      	ldr	r2, [pc, #576]	@ (801bb68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801b928:	fa22 f303 	lsr.w	r3, r2, r3
 801b92c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801b92e:	e111      	b.n	801bb54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801b930:	4b8d      	ldr	r3, [pc, #564]	@ (801bb68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801b932:	61bb      	str	r3, [r7, #24]
      break;
 801b934:	e10e      	b.n	801bb54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801b936:	4b8d      	ldr	r3, [pc, #564]	@ (801bb6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801b938:	61bb      	str	r3, [r7, #24]
      break;
 801b93a:	e10b      	b.n	801bb54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801b93c:	4b8c      	ldr	r3, [pc, #560]	@ (801bb70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801b93e:	61bb      	str	r3, [r7, #24]
      break;
 801b940:	e108      	b.n	801bb54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801b942:	4b88      	ldr	r3, [pc, #544]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b946:	f003 0303 	and.w	r3, r3, #3
 801b94a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801b94c:	4b85      	ldr	r3, [pc, #532]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b950:	091b      	lsrs	r3, r3, #4
 801b952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b956:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801b958:	4b82      	ldr	r3, [pc, #520]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b95c:	f003 0301 	and.w	r3, r3, #1
 801b960:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801b962:	4b80      	ldr	r3, [pc, #512]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b966:	08db      	lsrs	r3, r3, #3
 801b968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b96c:	68fa      	ldr	r2, [r7, #12]
 801b96e:	fb02 f303 	mul.w	r3, r2, r3
 801b972:	ee07 3a90 	vmov	s15, r3
 801b976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b97a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801b97e:	693b      	ldr	r3, [r7, #16]
 801b980:	2b00      	cmp	r3, #0
 801b982:	f000 80e1 	beq.w	801bb48 <HAL_RCC_GetSysClockFreq+0x2b8>
 801b986:	697b      	ldr	r3, [r7, #20]
 801b988:	2b02      	cmp	r3, #2
 801b98a:	f000 8083 	beq.w	801ba94 <HAL_RCC_GetSysClockFreq+0x204>
 801b98e:	697b      	ldr	r3, [r7, #20]
 801b990:	2b02      	cmp	r3, #2
 801b992:	f200 80a1 	bhi.w	801bad8 <HAL_RCC_GetSysClockFreq+0x248>
 801b996:	697b      	ldr	r3, [r7, #20]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d003      	beq.n	801b9a4 <HAL_RCC_GetSysClockFreq+0x114>
 801b99c:	697b      	ldr	r3, [r7, #20]
 801b99e:	2b01      	cmp	r3, #1
 801b9a0:	d056      	beq.n	801ba50 <HAL_RCC_GetSysClockFreq+0x1c0>
 801b9a2:	e099      	b.n	801bad8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b9a4:	4b6f      	ldr	r3, [pc, #444]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	f003 0320 	and.w	r3, r3, #32
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d02d      	beq.n	801ba0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801b9b0:	4b6c      	ldr	r3, [pc, #432]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	08db      	lsrs	r3, r3, #3
 801b9b6:	f003 0303 	and.w	r3, r3, #3
 801b9ba:	4a6b      	ldr	r2, [pc, #428]	@ (801bb68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801b9bc:	fa22 f303 	lsr.w	r3, r2, r3
 801b9c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	ee07 3a90 	vmov	s15, r3
 801b9c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b9cc:	693b      	ldr	r3, [r7, #16]
 801b9ce:	ee07 3a90 	vmov	s15, r3
 801b9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b9da:	4b62      	ldr	r3, [pc, #392]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b9e2:	ee07 3a90 	vmov	s15, r3
 801b9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b9ea:	ed97 6a02 	vldr	s12, [r7, #8]
 801b9ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801bb74 <HAL_RCC_GetSysClockFreq+0x2e4>
 801b9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b9fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ba02:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ba06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801ba0a:	e087      	b.n	801bb1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ba0c:	693b      	ldr	r3, [r7, #16]
 801ba0e:	ee07 3a90 	vmov	s15, r3
 801ba12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ba16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801bb78 <HAL_RCC_GetSysClockFreq+0x2e8>
 801ba1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ba1e:	4b51      	ldr	r3, [pc, #324]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ba22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba26:	ee07 3a90 	vmov	s15, r3
 801ba2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ba2e:	ed97 6a02 	vldr	s12, [r7, #8]
 801ba32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801bb74 <HAL_RCC_GetSysClockFreq+0x2e4>
 801ba36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ba3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ba3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ba42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ba46:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ba4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ba4e:	e065      	b.n	801bb1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	ee07 3a90 	vmov	s15, r3
 801ba56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ba5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801bb7c <HAL_RCC_GetSysClockFreq+0x2ec>
 801ba5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ba62:	4b40      	ldr	r3, [pc, #256]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ba66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba6a:	ee07 3a90 	vmov	s15, r3
 801ba6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ba72:	ed97 6a02 	vldr	s12, [r7, #8]
 801ba76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801bb74 <HAL_RCC_GetSysClockFreq+0x2e4>
 801ba7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ba7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ba82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ba86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ba8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ba8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ba92:	e043      	b.n	801bb1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ba94:	693b      	ldr	r3, [r7, #16]
 801ba96:	ee07 3a90 	vmov	s15, r3
 801ba9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ba9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801bb80 <HAL_RCC_GetSysClockFreq+0x2f0>
 801baa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801baa6:	4b2f      	ldr	r3, [pc, #188]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801baa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801baaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801baae:	ee07 3a90 	vmov	s15, r3
 801bab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bab6:	ed97 6a02 	vldr	s12, [r7, #8]
 801baba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801bb74 <HAL_RCC_GetSysClockFreq+0x2e4>
 801babe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801baca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bace:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bad6:	e021      	b.n	801bb1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bad8:	693b      	ldr	r3, [r7, #16]
 801bada:	ee07 3a90 	vmov	s15, r3
 801bade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bae2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801bb7c <HAL_RCC_GetSysClockFreq+0x2ec>
 801bae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801baea:	4b1e      	ldr	r3, [pc, #120]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801baec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801baee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801baf2:	ee07 3a90 	vmov	s15, r3
 801baf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bafa:	ed97 6a02 	vldr	s12, [r7, #8]
 801bafe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801bb74 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bb02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bb06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bb0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bb0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bb16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bb1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801bb1c:	4b11      	ldr	r3, [pc, #68]	@ (801bb64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb20:	0a5b      	lsrs	r3, r3, #9
 801bb22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bb26:	3301      	adds	r3, #1
 801bb28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801bb2a:	683b      	ldr	r3, [r7, #0]
 801bb2c:	ee07 3a90 	vmov	s15, r3
 801bb30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bb34:	edd7 6a07 	vldr	s13, [r7, #28]
 801bb38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bb3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bb40:	ee17 3a90 	vmov	r3, s15
 801bb44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801bb46:	e005      	b.n	801bb54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801bb48:	2300      	movs	r3, #0
 801bb4a:	61bb      	str	r3, [r7, #24]
      break;
 801bb4c:	e002      	b.n	801bb54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801bb4e:	4b07      	ldr	r3, [pc, #28]	@ (801bb6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bb50:	61bb      	str	r3, [r7, #24]
      break;
 801bb52:	bf00      	nop
  }

  return sysclockfreq;
 801bb54:	69bb      	ldr	r3, [r7, #24]
}
 801bb56:	4618      	mov	r0, r3
 801bb58:	3724      	adds	r7, #36	@ 0x24
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb60:	4770      	bx	lr
 801bb62:	bf00      	nop
 801bb64:	58024400 	.word	0x58024400
 801bb68:	03d09000 	.word	0x03d09000
 801bb6c:	003d0900 	.word	0x003d0900
 801bb70:	007a1200 	.word	0x007a1200
 801bb74:	46000000 	.word	0x46000000
 801bb78:	4c742400 	.word	0x4c742400
 801bb7c:	4a742400 	.word	0x4a742400
 801bb80:	4af42400 	.word	0x4af42400

0801bb84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bb84:	b580      	push	{r7, lr}
 801bb86:	b082      	sub	sp, #8
 801bb88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801bb8a:	f7ff fe81 	bl	801b890 <HAL_RCC_GetSysClockFreq>
 801bb8e:	4602      	mov	r2, r0
 801bb90:	4b10      	ldr	r3, [pc, #64]	@ (801bbd4 <HAL_RCC_GetHCLKFreq+0x50>)
 801bb92:	699b      	ldr	r3, [r3, #24]
 801bb94:	0a1b      	lsrs	r3, r3, #8
 801bb96:	f003 030f 	and.w	r3, r3, #15
 801bb9a:	490f      	ldr	r1, [pc, #60]	@ (801bbd8 <HAL_RCC_GetHCLKFreq+0x54>)
 801bb9c:	5ccb      	ldrb	r3, [r1, r3]
 801bb9e:	f003 031f 	and.w	r3, r3, #31
 801bba2:	fa22 f303 	lsr.w	r3, r2, r3
 801bba6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bba8:	4b0a      	ldr	r3, [pc, #40]	@ (801bbd4 <HAL_RCC_GetHCLKFreq+0x50>)
 801bbaa:	699b      	ldr	r3, [r3, #24]
 801bbac:	f003 030f 	and.w	r3, r3, #15
 801bbb0:	4a09      	ldr	r2, [pc, #36]	@ (801bbd8 <HAL_RCC_GetHCLKFreq+0x54>)
 801bbb2:	5cd3      	ldrb	r3, [r2, r3]
 801bbb4:	f003 031f 	and.w	r3, r3, #31
 801bbb8:	687a      	ldr	r2, [r7, #4]
 801bbba:	fa22 f303 	lsr.w	r3, r2, r3
 801bbbe:	4a07      	ldr	r2, [pc, #28]	@ (801bbdc <HAL_RCC_GetHCLKFreq+0x58>)
 801bbc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bbc2:	4a07      	ldr	r2, [pc, #28]	@ (801bbe0 <HAL_RCC_GetHCLKFreq+0x5c>)
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801bbc8:	4b04      	ldr	r3, [pc, #16]	@ (801bbdc <HAL_RCC_GetHCLKFreq+0x58>)
 801bbca:	681b      	ldr	r3, [r3, #0]
}
 801bbcc:	4618      	mov	r0, r3
 801bbce:	3708      	adds	r7, #8
 801bbd0:	46bd      	mov	sp, r7
 801bbd2:	bd80      	pop	{r7, pc}
 801bbd4:	58024400 	.word	0x58024400
 801bbd8:	080260bc 	.word	0x080260bc
 801bbdc:	24000004 	.word	0x24000004
 801bbe0:	24000000 	.word	0x24000000

0801bbe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801bbe8:	f7ff ffcc 	bl	801bb84 <HAL_RCC_GetHCLKFreq>
 801bbec:	4602      	mov	r2, r0
 801bbee:	4b06      	ldr	r3, [pc, #24]	@ (801bc08 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bbf0:	69db      	ldr	r3, [r3, #28]
 801bbf2:	091b      	lsrs	r3, r3, #4
 801bbf4:	f003 0307 	and.w	r3, r3, #7
 801bbf8:	4904      	ldr	r1, [pc, #16]	@ (801bc0c <HAL_RCC_GetPCLK1Freq+0x28>)
 801bbfa:	5ccb      	ldrb	r3, [r1, r3]
 801bbfc:	f003 031f 	and.w	r3, r3, #31
 801bc00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801bc04:	4618      	mov	r0, r3
 801bc06:	bd80      	pop	{r7, pc}
 801bc08:	58024400 	.word	0x58024400
 801bc0c:	080260bc 	.word	0x080260bc

0801bc10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bc10:	b580      	push	{r7, lr}
 801bc12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801bc14:	f7ff ffb6 	bl	801bb84 <HAL_RCC_GetHCLKFreq>
 801bc18:	4602      	mov	r2, r0
 801bc1a:	4b06      	ldr	r3, [pc, #24]	@ (801bc34 <HAL_RCC_GetPCLK2Freq+0x24>)
 801bc1c:	69db      	ldr	r3, [r3, #28]
 801bc1e:	0a1b      	lsrs	r3, r3, #8
 801bc20:	f003 0307 	and.w	r3, r3, #7
 801bc24:	4904      	ldr	r1, [pc, #16]	@ (801bc38 <HAL_RCC_GetPCLK2Freq+0x28>)
 801bc26:	5ccb      	ldrb	r3, [r1, r3]
 801bc28:	f003 031f 	and.w	r3, r3, #31
 801bc2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801bc30:	4618      	mov	r0, r3
 801bc32:	bd80      	pop	{r7, pc}
 801bc34:	58024400 	.word	0x58024400
 801bc38:	080260bc 	.word	0x080260bc

0801bc3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801bc3c:	b480      	push	{r7}
 801bc3e:	b083      	sub	sp, #12
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
 801bc44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	223f      	movs	r2, #63	@ 0x3f
 801bc4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801bc4c:	4b1a      	ldr	r3, [pc, #104]	@ (801bcb8 <HAL_RCC_GetClockConfig+0x7c>)
 801bc4e:	691b      	ldr	r3, [r3, #16]
 801bc50:	f003 0207 	and.w	r2, r3, #7
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801bc58:	4b17      	ldr	r3, [pc, #92]	@ (801bcb8 <HAL_RCC_GetClockConfig+0x7c>)
 801bc5a:	699b      	ldr	r3, [r3, #24]
 801bc5c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801bc64:	4b14      	ldr	r3, [pc, #80]	@ (801bcb8 <HAL_RCC_GetClockConfig+0x7c>)
 801bc66:	699b      	ldr	r3, [r3, #24]
 801bc68:	f003 020f 	and.w	r2, r3, #15
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801bc70:	4b11      	ldr	r3, [pc, #68]	@ (801bcb8 <HAL_RCC_GetClockConfig+0x7c>)
 801bc72:	699b      	ldr	r3, [r3, #24]
 801bc74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801bc7c:	4b0e      	ldr	r3, [pc, #56]	@ (801bcb8 <HAL_RCC_GetClockConfig+0x7c>)
 801bc7e:	69db      	ldr	r3, [r3, #28]
 801bc80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801bc88:	4b0b      	ldr	r3, [pc, #44]	@ (801bcb8 <HAL_RCC_GetClockConfig+0x7c>)
 801bc8a:	69db      	ldr	r3, [r3, #28]
 801bc8c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801bc94:	4b08      	ldr	r3, [pc, #32]	@ (801bcb8 <HAL_RCC_GetClockConfig+0x7c>)
 801bc96:	6a1b      	ldr	r3, [r3, #32]
 801bc98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801bca0:	4b06      	ldr	r3, [pc, #24]	@ (801bcbc <HAL_RCC_GetClockConfig+0x80>)
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	f003 020f 	and.w	r2, r3, #15
 801bca8:	683b      	ldr	r3, [r7, #0]
 801bcaa:	601a      	str	r2, [r3, #0]
}
 801bcac:	bf00      	nop
 801bcae:	370c      	adds	r7, #12
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb6:	4770      	bx	lr
 801bcb8:	58024400 	.word	0x58024400
 801bcbc:	52002000 	.word	0x52002000

0801bcc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bcc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bcc4:	b0ca      	sub	sp, #296	@ 0x128
 801bcc6:	af00      	add	r7, sp, #0
 801bcc8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801bccc:	2300      	movs	r3, #0
 801bcce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801bcd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801bce4:	2500      	movs	r5, #0
 801bce6:	ea54 0305 	orrs.w	r3, r4, r5
 801bcea:	d049      	beq.n	801bd80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801bcec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bcf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801bcf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801bcf6:	d02f      	beq.n	801bd58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801bcf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801bcfc:	d828      	bhi.n	801bd50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801bcfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bd02:	d01a      	beq.n	801bd3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801bd04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bd08:	d822      	bhi.n	801bd50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d003      	beq.n	801bd16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801bd0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801bd12:	d007      	beq.n	801bd24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801bd14:	e01c      	b.n	801bd50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bd16:	4bb8      	ldr	r3, [pc, #736]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd1a:	4ab7      	ldr	r2, [pc, #732]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bd1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bd20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bd22:	e01a      	b.n	801bd5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801bd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd28:	3308      	adds	r3, #8
 801bd2a:	2102      	movs	r1, #2
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	f001 fc8f 	bl	801d650 <RCCEx_PLL2_Config>
 801bd32:	4603      	mov	r3, r0
 801bd34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bd38:	e00f      	b.n	801bd5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801bd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd3e:	3328      	adds	r3, #40	@ 0x28
 801bd40:	2102      	movs	r1, #2
 801bd42:	4618      	mov	r0, r3
 801bd44:	f001 fd36 	bl	801d7b4 <RCCEx_PLL3_Config>
 801bd48:	4603      	mov	r3, r0
 801bd4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bd4e:	e004      	b.n	801bd5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bd50:	2301      	movs	r3, #1
 801bd52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801bd56:	e000      	b.n	801bd5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801bd58:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bd5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d10a      	bne.n	801bd78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801bd62:	4ba5      	ldr	r3, [pc, #660]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bd64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bd66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801bd6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801bd70:	4aa1      	ldr	r2, [pc, #644]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bd72:	430b      	orrs	r3, r1
 801bd74:	6513      	str	r3, [r2, #80]	@ 0x50
 801bd76:	e003      	b.n	801bd80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bd78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bd7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801bd80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801bd8c:	f04f 0900 	mov.w	r9, #0
 801bd90:	ea58 0309 	orrs.w	r3, r8, r9
 801bd94:	d047      	beq.n	801be26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801bd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bd9c:	2b04      	cmp	r3, #4
 801bd9e:	d82a      	bhi.n	801bdf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801bda0:	a201      	add	r2, pc, #4	@ (adr r2, 801bda8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bda6:	bf00      	nop
 801bda8:	0801bdbd 	.word	0x0801bdbd
 801bdac:	0801bdcb 	.word	0x0801bdcb
 801bdb0:	0801bde1 	.word	0x0801bde1
 801bdb4:	0801bdff 	.word	0x0801bdff
 801bdb8:	0801bdff 	.word	0x0801bdff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bdbc:	4b8e      	ldr	r3, [pc, #568]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bdc0:	4a8d      	ldr	r2, [pc, #564]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bdc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bdc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bdc8:	e01a      	b.n	801be00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bdca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bdce:	3308      	adds	r3, #8
 801bdd0:	2100      	movs	r1, #0
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	f001 fc3c 	bl	801d650 <RCCEx_PLL2_Config>
 801bdd8:	4603      	mov	r3, r0
 801bdda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bdde:	e00f      	b.n	801be00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bde0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bde4:	3328      	adds	r3, #40	@ 0x28
 801bde6:	2100      	movs	r1, #0
 801bde8:	4618      	mov	r0, r3
 801bdea:	f001 fce3 	bl	801d7b4 <RCCEx_PLL3_Config>
 801bdee:	4603      	mov	r3, r0
 801bdf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bdf4:	e004      	b.n	801be00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bdf6:	2301      	movs	r3, #1
 801bdf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801bdfc:	e000      	b.n	801be00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801bdfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 801be00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801be04:	2b00      	cmp	r3, #0
 801be06:	d10a      	bne.n	801be1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801be08:	4b7b      	ldr	r3, [pc, #492]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801be0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801be0c:	f023 0107 	bic.w	r1, r3, #7
 801be10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801be16:	4a78      	ldr	r2, [pc, #480]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801be18:	430b      	orrs	r3, r1
 801be1a:	6513      	str	r3, [r2, #80]	@ 0x50
 801be1c:	e003      	b.n	801be26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801be1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801be22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801be26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be2e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801be32:	f04f 0b00 	mov.w	fp, #0
 801be36:	ea5a 030b 	orrs.w	r3, sl, fp
 801be3a:	d04c      	beq.n	801bed6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801be3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801be42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801be46:	d030      	beq.n	801beaa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801be48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801be4c:	d829      	bhi.n	801bea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801be4e:	2bc0      	cmp	r3, #192	@ 0xc0
 801be50:	d02d      	beq.n	801beae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801be52:	2bc0      	cmp	r3, #192	@ 0xc0
 801be54:	d825      	bhi.n	801bea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801be56:	2b80      	cmp	r3, #128	@ 0x80
 801be58:	d018      	beq.n	801be8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801be5a:	2b80      	cmp	r3, #128	@ 0x80
 801be5c:	d821      	bhi.n	801bea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d002      	beq.n	801be68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801be62:	2b40      	cmp	r3, #64	@ 0x40
 801be64:	d007      	beq.n	801be76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801be66:	e01c      	b.n	801bea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801be68:	4b63      	ldr	r3, [pc, #396]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801be6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be6c:	4a62      	ldr	r2, [pc, #392]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801be6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801be72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801be74:	e01c      	b.n	801beb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801be76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be7a:	3308      	adds	r3, #8
 801be7c:	2100      	movs	r1, #0
 801be7e:	4618      	mov	r0, r3
 801be80:	f001 fbe6 	bl	801d650 <RCCEx_PLL2_Config>
 801be84:	4603      	mov	r3, r0
 801be86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801be8a:	e011      	b.n	801beb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801be8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be90:	3328      	adds	r3, #40	@ 0x28
 801be92:	2100      	movs	r1, #0
 801be94:	4618      	mov	r0, r3
 801be96:	f001 fc8d 	bl	801d7b4 <RCCEx_PLL3_Config>
 801be9a:	4603      	mov	r3, r0
 801be9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801bea0:	e006      	b.n	801beb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bea2:	2301      	movs	r3, #1
 801bea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801bea8:	e002      	b.n	801beb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801beaa:	bf00      	nop
 801beac:	e000      	b.n	801beb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801beae:	bf00      	nop
    }

    if (ret == HAL_OK)
 801beb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d10a      	bne.n	801bece <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801beb8:	4b4f      	ldr	r3, [pc, #316]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801beba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bebc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801bec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bec6:	4a4c      	ldr	r2, [pc, #304]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bec8:	430b      	orrs	r3, r1
 801beca:	6513      	str	r3, [r2, #80]	@ 0x50
 801becc:	e003      	b.n	801bed6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801bed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bede:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801bee2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801bee6:	2300      	movs	r3, #0
 801bee8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801beec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801bef0:	460b      	mov	r3, r1
 801bef2:	4313      	orrs	r3, r2
 801bef4:	d053      	beq.n	801bf9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801bef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801befa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801befe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801bf02:	d035      	beq.n	801bf70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801bf04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801bf08:	d82e      	bhi.n	801bf68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801bf0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801bf0e:	d031      	beq.n	801bf74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801bf10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801bf14:	d828      	bhi.n	801bf68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801bf16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801bf1a:	d01a      	beq.n	801bf52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801bf1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801bf20:	d822      	bhi.n	801bf68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d003      	beq.n	801bf2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801bf26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bf2a:	d007      	beq.n	801bf3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801bf2c:	e01c      	b.n	801bf68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bf2e:	4b32      	ldr	r3, [pc, #200]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bf30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bf32:	4a31      	ldr	r2, [pc, #196]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bf34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bf38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf3a:	e01c      	b.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bf3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bf40:	3308      	adds	r3, #8
 801bf42:	2100      	movs	r1, #0
 801bf44:	4618      	mov	r0, r3
 801bf46:	f001 fb83 	bl	801d650 <RCCEx_PLL2_Config>
 801bf4a:	4603      	mov	r3, r0
 801bf4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801bf50:	e011      	b.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bf52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bf56:	3328      	adds	r3, #40	@ 0x28
 801bf58:	2100      	movs	r1, #0
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	f001 fc2a 	bl	801d7b4 <RCCEx_PLL3_Config>
 801bf60:	4603      	mov	r3, r0
 801bf62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf66:	e006      	b.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801bf68:	2301      	movs	r3, #1
 801bf6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801bf6e:	e002      	b.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801bf70:	bf00      	nop
 801bf72:	e000      	b.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801bf74:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d10b      	bne.n	801bf96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801bf7e:	4b1e      	ldr	r3, [pc, #120]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bf80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bf82:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801bf86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bf8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801bf8e:	4a1a      	ldr	r2, [pc, #104]	@ (801bff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bf90:	430b      	orrs	r3, r1
 801bf92:	6593      	str	r3, [r2, #88]	@ 0x58
 801bf94:	e003      	b.n	801bf9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bf96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bf9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801bf9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfa6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801bfaa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801bfae:	2300      	movs	r3, #0
 801bfb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801bfb4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801bfb8:	460b      	mov	r3, r1
 801bfba:	4313      	orrs	r3, r2
 801bfbc:	d056      	beq.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801bfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bfc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801bfc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801bfca:	d038      	beq.n	801c03e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801bfcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801bfd0:	d831      	bhi.n	801c036 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801bfd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801bfd6:	d034      	beq.n	801c042 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801bfd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801bfdc:	d82b      	bhi.n	801c036 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801bfde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801bfe2:	d01d      	beq.n	801c020 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801bfe4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801bfe8:	d825      	bhi.n	801c036 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d006      	beq.n	801bffc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801bfee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bff2:	d00a      	beq.n	801c00a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801bff4:	e01f      	b.n	801c036 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801bff6:	bf00      	nop
 801bff8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bffc:	4ba2      	ldr	r3, [pc, #648]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c000:	4aa1      	ldr	r2, [pc, #644]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c008:	e01c      	b.n	801c044 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c00e:	3308      	adds	r3, #8
 801c010:	2100      	movs	r1, #0
 801c012:	4618      	mov	r0, r3
 801c014:	f001 fb1c 	bl	801d650 <RCCEx_PLL2_Config>
 801c018:	4603      	mov	r3, r0
 801c01a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c01e:	e011      	b.n	801c044 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c024:	3328      	adds	r3, #40	@ 0x28
 801c026:	2100      	movs	r1, #0
 801c028:	4618      	mov	r0, r3
 801c02a:	f001 fbc3 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c02e:	4603      	mov	r3, r0
 801c030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c034:	e006      	b.n	801c044 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c036:	2301      	movs	r3, #1
 801c038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c03c:	e002      	b.n	801c044 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801c03e:	bf00      	nop
 801c040:	e000      	b.n	801c044 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801c042:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d10b      	bne.n	801c064 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c04c:	4b8e      	ldr	r3, [pc, #568]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c04e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c050:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801c054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c058:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801c05c:	4a8a      	ldr	r2, [pc, #552]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c05e:	430b      	orrs	r3, r1
 801c060:	6593      	str	r3, [r2, #88]	@ 0x58
 801c062:	e003      	b.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801c06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c074:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801c078:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801c07c:	2300      	movs	r3, #0
 801c07e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801c082:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801c086:	460b      	mov	r3, r1
 801c088:	4313      	orrs	r3, r2
 801c08a:	d03a      	beq.n	801c102 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801c08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c092:	2b30      	cmp	r3, #48	@ 0x30
 801c094:	d01f      	beq.n	801c0d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801c096:	2b30      	cmp	r3, #48	@ 0x30
 801c098:	d819      	bhi.n	801c0ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801c09a:	2b20      	cmp	r3, #32
 801c09c:	d00c      	beq.n	801c0b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801c09e:	2b20      	cmp	r3, #32
 801c0a0:	d815      	bhi.n	801c0ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d019      	beq.n	801c0da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801c0a6:	2b10      	cmp	r3, #16
 801c0a8:	d111      	bne.n	801c0ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c0aa:	4b77      	ldr	r3, [pc, #476]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0ae:	4a76      	ldr	r2, [pc, #472]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c0b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c0b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801c0b6:	e011      	b.n	801c0dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c0bc:	3308      	adds	r3, #8
 801c0be:	2102      	movs	r1, #2
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	f001 fac5 	bl	801d650 <RCCEx_PLL2_Config>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801c0cc:	e006      	b.n	801c0dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c0ce:	2301      	movs	r3, #1
 801c0d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c0d4:	e002      	b.n	801c0dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801c0d6:	bf00      	nop
 801c0d8:	e000      	b.n	801c0dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801c0da:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c0dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d10a      	bne.n	801c0fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801c0e4:	4b68      	ldr	r3, [pc, #416]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c0e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801c0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c0f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c0f2:	4a65      	ldr	r2, [pc, #404]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c0f4:	430b      	orrs	r3, r1
 801c0f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801c0f8:	e003      	b.n	801c102 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c0fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c0fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c10a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801c10e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801c112:	2300      	movs	r3, #0
 801c114:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801c118:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801c11c:	460b      	mov	r3, r1
 801c11e:	4313      	orrs	r3, r2
 801c120:	d051      	beq.n	801c1c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801c122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c12c:	d035      	beq.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801c12e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c132:	d82e      	bhi.n	801c192 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801c134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801c138:	d031      	beq.n	801c19e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801c13a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801c13e:	d828      	bhi.n	801c192 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801c140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c144:	d01a      	beq.n	801c17c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801c146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c14a:	d822      	bhi.n	801c192 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d003      	beq.n	801c158 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801c150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c154:	d007      	beq.n	801c166 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801c156:	e01c      	b.n	801c192 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c158:	4b4b      	ldr	r3, [pc, #300]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c15c:	4a4a      	ldr	r2, [pc, #296]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c15e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c164:	e01c      	b.n	801c1a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c16a:	3308      	adds	r3, #8
 801c16c:	2100      	movs	r1, #0
 801c16e:	4618      	mov	r0, r3
 801c170:	f001 fa6e 	bl	801d650 <RCCEx_PLL2_Config>
 801c174:	4603      	mov	r3, r0
 801c176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c17a:	e011      	b.n	801c1a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c180:	3328      	adds	r3, #40	@ 0x28
 801c182:	2100      	movs	r1, #0
 801c184:	4618      	mov	r0, r3
 801c186:	f001 fb15 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c18a:	4603      	mov	r3, r0
 801c18c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c190:	e006      	b.n	801c1a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c192:	2301      	movs	r3, #1
 801c194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c198:	e002      	b.n	801c1a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801c19a:	bf00      	nop
 801c19c:	e000      	b.n	801c1a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801c19e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c1a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d10a      	bne.n	801c1be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c1a8:	4b37      	ldr	r3, [pc, #220]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c1ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801c1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c1b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c1b6:	4a34      	ldr	r2, [pc, #208]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c1b8:	430b      	orrs	r3, r1
 801c1ba:	6513      	str	r3, [r2, #80]	@ 0x50
 801c1bc:	e003      	b.n	801c1c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c1be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c1c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801c1d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801c1dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801c1e0:	460b      	mov	r3, r1
 801c1e2:	4313      	orrs	r3, r2
 801c1e4:	d056      	beq.n	801c294 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801c1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c1ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801c1ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c1f0:	d033      	beq.n	801c25a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801c1f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c1f6:	d82c      	bhi.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801c1f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801c1fc:	d02f      	beq.n	801c25e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801c1fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801c202:	d826      	bhi.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801c204:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801c208:	d02b      	beq.n	801c262 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801c20a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801c20e:	d820      	bhi.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801c210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c214:	d012      	beq.n	801c23c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801c216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c21a:	d81a      	bhi.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d022      	beq.n	801c266 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801c220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c224:	d115      	bne.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c22a:	3308      	adds	r3, #8
 801c22c:	2101      	movs	r1, #1
 801c22e:	4618      	mov	r0, r3
 801c230:	f001 fa0e 	bl	801d650 <RCCEx_PLL2_Config>
 801c234:	4603      	mov	r3, r0
 801c236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c23a:	e015      	b.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c240:	3328      	adds	r3, #40	@ 0x28
 801c242:	2101      	movs	r1, #1
 801c244:	4618      	mov	r0, r3
 801c246:	f001 fab5 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c24a:	4603      	mov	r3, r0
 801c24c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c250:	e00a      	b.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c252:	2301      	movs	r3, #1
 801c254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c258:	e006      	b.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801c25a:	bf00      	nop
 801c25c:	e004      	b.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801c25e:	bf00      	nop
 801c260:	e002      	b.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801c262:	bf00      	nop
 801c264:	e000      	b.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801c266:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d10d      	bne.n	801c28c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c270:	4b05      	ldr	r3, [pc, #20]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c274:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801c278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c27c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801c27e:	4a02      	ldr	r2, [pc, #8]	@ (801c288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c280:	430b      	orrs	r3, r1
 801c282:	6513      	str	r3, [r2, #80]	@ 0x50
 801c284:	e006      	b.n	801c294 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801c286:	bf00      	nop
 801c288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c28c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c29c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801c2a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801c2a4:	2300      	movs	r3, #0
 801c2a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801c2aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801c2ae:	460b      	mov	r3, r1
 801c2b0:	4313      	orrs	r3, r2
 801c2b2:	d055      	beq.n	801c360 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801c2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801c2bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801c2c0:	d033      	beq.n	801c32a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801c2c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801c2c6:	d82c      	bhi.n	801c322 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801c2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c2cc:	d02f      	beq.n	801c32e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801c2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c2d2:	d826      	bhi.n	801c322 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801c2d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801c2d8:	d02b      	beq.n	801c332 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801c2da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801c2de:	d820      	bhi.n	801c322 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801c2e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c2e4:	d012      	beq.n	801c30c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801c2e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c2ea:	d81a      	bhi.n	801c322 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d022      	beq.n	801c336 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801c2f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c2f4:	d115      	bne.n	801c322 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2fa:	3308      	adds	r3, #8
 801c2fc:	2101      	movs	r1, #1
 801c2fe:	4618      	mov	r0, r3
 801c300:	f001 f9a6 	bl	801d650 <RCCEx_PLL2_Config>
 801c304:	4603      	mov	r3, r0
 801c306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c30a:	e015      	b.n	801c338 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c310:	3328      	adds	r3, #40	@ 0x28
 801c312:	2101      	movs	r1, #1
 801c314:	4618      	mov	r0, r3
 801c316:	f001 fa4d 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c31a:	4603      	mov	r3, r0
 801c31c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c320:	e00a      	b.n	801c338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801c322:	2301      	movs	r3, #1
 801c324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c328:	e006      	b.n	801c338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801c32a:	bf00      	nop
 801c32c:	e004      	b.n	801c338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801c32e:	bf00      	nop
 801c330:	e002      	b.n	801c338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801c332:	bf00      	nop
 801c334:	e000      	b.n	801c338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801c336:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d10b      	bne.n	801c358 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c340:	4ba3      	ldr	r3, [pc, #652]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c344:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801c348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c34c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801c350:	4a9f      	ldr	r2, [pc, #636]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c352:	430b      	orrs	r3, r1
 801c354:	6593      	str	r3, [r2, #88]	@ 0x58
 801c356:	e003      	b.n	801c360 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c35c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c368:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801c36c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801c370:	2300      	movs	r3, #0
 801c372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801c376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801c37a:	460b      	mov	r3, r1
 801c37c:	4313      	orrs	r3, r2
 801c37e:	d037      	beq.n	801c3f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801c380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c38a:	d00e      	beq.n	801c3aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801c38c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c390:	d816      	bhi.n	801c3c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801c392:	2b00      	cmp	r3, #0
 801c394:	d018      	beq.n	801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801c396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c39a:	d111      	bne.n	801c3c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c39c:	4b8c      	ldr	r3, [pc, #560]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c3a0:	4a8b      	ldr	r2, [pc, #556]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c3a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c3a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c3a8:	e00f      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c3ae:	3308      	adds	r3, #8
 801c3b0:	2101      	movs	r1, #1
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	f001 f94c 	bl	801d650 <RCCEx_PLL2_Config>
 801c3b8:	4603      	mov	r3, r0
 801c3ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c3be:	e004      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c3c0:	2301      	movs	r3, #1
 801c3c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c3c6:	e000      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801c3c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d10a      	bne.n	801c3e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801c3d2:	4b7f      	ldr	r3, [pc, #508]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c3d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c3d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801c3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c3de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c3e0:	4a7b      	ldr	r2, [pc, #492]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c3e2:	430b      	orrs	r3, r1
 801c3e4:	6513      	str	r3, [r2, #80]	@ 0x50
 801c3e6:	e003      	b.n	801c3f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c3e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c3ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801c3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801c3fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801c400:	2300      	movs	r3, #0
 801c402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801c406:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801c40a:	460b      	mov	r3, r1
 801c40c:	4313      	orrs	r3, r2
 801c40e:	d039      	beq.n	801c484 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801c410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c416:	2b03      	cmp	r3, #3
 801c418:	d81c      	bhi.n	801c454 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801c41a:	a201      	add	r2, pc, #4	@ (adr r2, 801c420 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801c41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c420:	0801c45d 	.word	0x0801c45d
 801c424:	0801c431 	.word	0x0801c431
 801c428:	0801c43f 	.word	0x0801c43f
 801c42c:	0801c45d 	.word	0x0801c45d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c430:	4b67      	ldr	r3, [pc, #412]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c434:	4a66      	ldr	r2, [pc, #408]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c43a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c43c:	e00f      	b.n	801c45e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c442:	3308      	adds	r3, #8
 801c444:	2102      	movs	r1, #2
 801c446:	4618      	mov	r0, r3
 801c448:	f001 f902 	bl	801d650 <RCCEx_PLL2_Config>
 801c44c:	4603      	mov	r3, r0
 801c44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c452:	e004      	b.n	801c45e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c454:	2301      	movs	r3, #1
 801c456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c45a:	e000      	b.n	801c45e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801c45c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c45e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c462:	2b00      	cmp	r3, #0
 801c464:	d10a      	bne.n	801c47c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c466:	4b5a      	ldr	r3, [pc, #360]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c46a:	f023 0103 	bic.w	r1, r3, #3
 801c46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c474:	4a56      	ldr	r2, [pc, #344]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c476:	430b      	orrs	r3, r1
 801c478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801c47a:	e003      	b.n	801c484 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c47c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c48c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801c490:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801c494:	2300      	movs	r3, #0
 801c496:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801c49a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801c49e:	460b      	mov	r3, r1
 801c4a0:	4313      	orrs	r3, r2
 801c4a2:	f000 809f 	beq.w	801c5e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c4a6:	4b4b      	ldr	r3, [pc, #300]	@ (801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	4a4a      	ldr	r2, [pc, #296]	@ (801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801c4ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c4b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c4b2:	f7fd f975 	bl	80197a0 <HAL_GetTick>
 801c4b6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c4ba:	e00b      	b.n	801c4d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c4bc:	f7fd f970 	bl	80197a0 <HAL_GetTick>
 801c4c0:	4602      	mov	r2, r0
 801c4c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801c4c6:	1ad3      	subs	r3, r2, r3
 801c4c8:	2b64      	cmp	r3, #100	@ 0x64
 801c4ca:	d903      	bls.n	801c4d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801c4cc:	2303      	movs	r3, #3
 801c4ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c4d2:	e005      	b.n	801c4e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c4d4:	4b3f      	ldr	r3, [pc, #252]	@ (801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d0ed      	beq.n	801c4bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801c4e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d179      	bne.n	801c5dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c4e8:	4b39      	ldr	r3, [pc, #228]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c4ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801c4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c4f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801c4f4:	4053      	eors	r3, r2
 801c4f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d015      	beq.n	801c52a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c4fe:	4b34      	ldr	r3, [pc, #208]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801c506:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c50a:	4b31      	ldr	r3, [pc, #196]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c50c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c50e:	4a30      	ldr	r2, [pc, #192]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c514:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c516:	4b2e      	ldr	r3, [pc, #184]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c51a:	4a2d      	ldr	r2, [pc, #180]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c51c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c520:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c522:	4a2b      	ldr	r2, [pc, #172]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c528:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801c52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c52e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801c532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c536:	d118      	bne.n	801c56a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c538:	f7fd f932 	bl	80197a0 <HAL_GetTick>
 801c53c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c540:	e00d      	b.n	801c55e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c542:	f7fd f92d 	bl	80197a0 <HAL_GetTick>
 801c546:	4602      	mov	r2, r0
 801c548:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801c54c:	1ad2      	subs	r2, r2, r3
 801c54e:	f241 3388 	movw	r3, #5000	@ 0x1388
 801c552:	429a      	cmp	r2, r3
 801c554:	d903      	bls.n	801c55e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801c556:	2303      	movs	r3, #3
 801c558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801c55c:	e005      	b.n	801c56a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c55e:	4b1c      	ldr	r3, [pc, #112]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c562:	f003 0302 	and.w	r3, r3, #2
 801c566:	2b00      	cmp	r3, #0
 801c568:	d0eb      	beq.n	801c542 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801c56a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d129      	bne.n	801c5c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801c57a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801c57e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c582:	d10e      	bne.n	801c5a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801c584:	4b12      	ldr	r3, [pc, #72]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c586:	691b      	ldr	r3, [r3, #16]
 801c588:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801c58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c590:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801c594:	091a      	lsrs	r2, r3, #4
 801c596:	4b10      	ldr	r3, [pc, #64]	@ (801c5d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801c598:	4013      	ands	r3, r2
 801c59a:	4a0d      	ldr	r2, [pc, #52]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c59c:	430b      	orrs	r3, r1
 801c59e:	6113      	str	r3, [r2, #16]
 801c5a0:	e005      	b.n	801c5ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801c5a2:	4b0b      	ldr	r3, [pc, #44]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c5a4:	691b      	ldr	r3, [r3, #16]
 801c5a6:	4a0a      	ldr	r2, [pc, #40]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c5a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801c5ac:	6113      	str	r3, [r2, #16]
 801c5ae:	4b08      	ldr	r3, [pc, #32]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c5b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801c5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c5b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801c5ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c5be:	4a04      	ldr	r2, [pc, #16]	@ (801c5d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c5c0:	430b      	orrs	r3, r1
 801c5c2:	6713      	str	r3, [r2, #112]	@ 0x70
 801c5c4:	e00e      	b.n	801c5e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c5ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801c5ce:	e009      	b.n	801c5e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801c5d0:	58024400 	.word	0x58024400
 801c5d4:	58024800 	.word	0x58024800
 801c5d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c5dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c5e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801c5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5ec:	f002 0301 	and.w	r3, r2, #1
 801c5f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801c5fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801c5fe:	460b      	mov	r3, r1
 801c600:	4313      	orrs	r3, r2
 801c602:	f000 8089 	beq.w	801c718 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801c606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c60a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c60c:	2b28      	cmp	r3, #40	@ 0x28
 801c60e:	d86b      	bhi.n	801c6e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801c610:	a201      	add	r2, pc, #4	@ (adr r2, 801c618 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c616:	bf00      	nop
 801c618:	0801c6f1 	.word	0x0801c6f1
 801c61c:	0801c6e9 	.word	0x0801c6e9
 801c620:	0801c6e9 	.word	0x0801c6e9
 801c624:	0801c6e9 	.word	0x0801c6e9
 801c628:	0801c6e9 	.word	0x0801c6e9
 801c62c:	0801c6e9 	.word	0x0801c6e9
 801c630:	0801c6e9 	.word	0x0801c6e9
 801c634:	0801c6e9 	.word	0x0801c6e9
 801c638:	0801c6bd 	.word	0x0801c6bd
 801c63c:	0801c6e9 	.word	0x0801c6e9
 801c640:	0801c6e9 	.word	0x0801c6e9
 801c644:	0801c6e9 	.word	0x0801c6e9
 801c648:	0801c6e9 	.word	0x0801c6e9
 801c64c:	0801c6e9 	.word	0x0801c6e9
 801c650:	0801c6e9 	.word	0x0801c6e9
 801c654:	0801c6e9 	.word	0x0801c6e9
 801c658:	0801c6d3 	.word	0x0801c6d3
 801c65c:	0801c6e9 	.word	0x0801c6e9
 801c660:	0801c6e9 	.word	0x0801c6e9
 801c664:	0801c6e9 	.word	0x0801c6e9
 801c668:	0801c6e9 	.word	0x0801c6e9
 801c66c:	0801c6e9 	.word	0x0801c6e9
 801c670:	0801c6e9 	.word	0x0801c6e9
 801c674:	0801c6e9 	.word	0x0801c6e9
 801c678:	0801c6f1 	.word	0x0801c6f1
 801c67c:	0801c6e9 	.word	0x0801c6e9
 801c680:	0801c6e9 	.word	0x0801c6e9
 801c684:	0801c6e9 	.word	0x0801c6e9
 801c688:	0801c6e9 	.word	0x0801c6e9
 801c68c:	0801c6e9 	.word	0x0801c6e9
 801c690:	0801c6e9 	.word	0x0801c6e9
 801c694:	0801c6e9 	.word	0x0801c6e9
 801c698:	0801c6f1 	.word	0x0801c6f1
 801c69c:	0801c6e9 	.word	0x0801c6e9
 801c6a0:	0801c6e9 	.word	0x0801c6e9
 801c6a4:	0801c6e9 	.word	0x0801c6e9
 801c6a8:	0801c6e9 	.word	0x0801c6e9
 801c6ac:	0801c6e9 	.word	0x0801c6e9
 801c6b0:	0801c6e9 	.word	0x0801c6e9
 801c6b4:	0801c6e9 	.word	0x0801c6e9
 801c6b8:	0801c6f1 	.word	0x0801c6f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c6c0:	3308      	adds	r3, #8
 801c6c2:	2101      	movs	r1, #1
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	f000 ffc3 	bl	801d650 <RCCEx_PLL2_Config>
 801c6ca:	4603      	mov	r3, r0
 801c6cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c6d0:	e00f      	b.n	801c6f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c6d6:	3328      	adds	r3, #40	@ 0x28
 801c6d8:	2101      	movs	r1, #1
 801c6da:	4618      	mov	r0, r3
 801c6dc:	f001 f86a 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c6e6:	e004      	b.n	801c6f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c6e8:	2301      	movs	r3, #1
 801c6ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c6ee:	e000      	b.n	801c6f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801c6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d10a      	bne.n	801c710 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801c6fa:	4bbf      	ldr	r3, [pc, #764]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c6fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801c702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c706:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c708:	4abb      	ldr	r2, [pc, #748]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c70a:	430b      	orrs	r3, r1
 801c70c:	6553      	str	r3, [r2, #84]	@ 0x54
 801c70e:	e003      	b.n	801c718 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801c718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c720:	f002 0302 	and.w	r3, r2, #2
 801c724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801c728:	2300      	movs	r3, #0
 801c72a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801c72e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801c732:	460b      	mov	r3, r1
 801c734:	4313      	orrs	r3, r2
 801c736:	d041      	beq.n	801c7bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801c738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c73c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c73e:	2b05      	cmp	r3, #5
 801c740:	d824      	bhi.n	801c78c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801c742:	a201      	add	r2, pc, #4	@ (adr r2, 801c748 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801c744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c748:	0801c795 	.word	0x0801c795
 801c74c:	0801c761 	.word	0x0801c761
 801c750:	0801c777 	.word	0x0801c777
 801c754:	0801c795 	.word	0x0801c795
 801c758:	0801c795 	.word	0x0801c795
 801c75c:	0801c795 	.word	0x0801c795
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c764:	3308      	adds	r3, #8
 801c766:	2101      	movs	r1, #1
 801c768:	4618      	mov	r0, r3
 801c76a:	f000 ff71 	bl	801d650 <RCCEx_PLL2_Config>
 801c76e:	4603      	mov	r3, r0
 801c770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c774:	e00f      	b.n	801c796 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c77a:	3328      	adds	r3, #40	@ 0x28
 801c77c:	2101      	movs	r1, #1
 801c77e:	4618      	mov	r0, r3
 801c780:	f001 f818 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c784:	4603      	mov	r3, r0
 801c786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c78a:	e004      	b.n	801c796 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c78c:	2301      	movs	r3, #1
 801c78e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c792:	e000      	b.n	801c796 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801c794:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d10a      	bne.n	801c7b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801c79e:	4b96      	ldr	r3, [pc, #600]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c7a2:	f023 0107 	bic.w	r1, r3, #7
 801c7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c7aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c7ac:	4a92      	ldr	r2, [pc, #584]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c7ae:	430b      	orrs	r3, r1
 801c7b0:	6553      	str	r3, [r2, #84]	@ 0x54
 801c7b2:	e003      	b.n	801c7bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c7b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c7b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c4:	f002 0304 	and.w	r3, r2, #4
 801c7c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801c7cc:	2300      	movs	r3, #0
 801c7ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801c7d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801c7d6:	460b      	mov	r3, r1
 801c7d8:	4313      	orrs	r3, r2
 801c7da:	d044      	beq.n	801c866 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801c7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c7e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801c7e4:	2b05      	cmp	r3, #5
 801c7e6:	d825      	bhi.n	801c834 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801c7e8:	a201      	add	r2, pc, #4	@ (adr r2, 801c7f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801c7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c7ee:	bf00      	nop
 801c7f0:	0801c83d 	.word	0x0801c83d
 801c7f4:	0801c809 	.word	0x0801c809
 801c7f8:	0801c81f 	.word	0x0801c81f
 801c7fc:	0801c83d 	.word	0x0801c83d
 801c800:	0801c83d 	.word	0x0801c83d
 801c804:	0801c83d 	.word	0x0801c83d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c80c:	3308      	adds	r3, #8
 801c80e:	2101      	movs	r1, #1
 801c810:	4618      	mov	r0, r3
 801c812:	f000 ff1d 	bl	801d650 <RCCEx_PLL2_Config>
 801c816:	4603      	mov	r3, r0
 801c818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c81c:	e00f      	b.n	801c83e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c822:	3328      	adds	r3, #40	@ 0x28
 801c824:	2101      	movs	r1, #1
 801c826:	4618      	mov	r0, r3
 801c828:	f000 ffc4 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c82c:	4603      	mov	r3, r0
 801c82e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c832:	e004      	b.n	801c83e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c834:	2301      	movs	r3, #1
 801c836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c83a:	e000      	b.n	801c83e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801c83c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c83e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c842:	2b00      	cmp	r3, #0
 801c844:	d10b      	bne.n	801c85e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c846:	4b6c      	ldr	r3, [pc, #432]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c84a:	f023 0107 	bic.w	r1, r3, #7
 801c84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801c856:	4a68      	ldr	r2, [pc, #416]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c858:	430b      	orrs	r3, r1
 801c85a:	6593      	str	r3, [r2, #88]	@ 0x58
 801c85c:	e003      	b.n	801c866 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c85e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c86e:	f002 0320 	and.w	r3, r2, #32
 801c872:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801c876:	2300      	movs	r3, #0
 801c878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801c87c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801c880:	460b      	mov	r3, r1
 801c882:	4313      	orrs	r3, r2
 801c884:	d055      	beq.n	801c932 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801c886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c88e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801c892:	d033      	beq.n	801c8fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801c894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801c898:	d82c      	bhi.n	801c8f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801c89a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c89e:	d02f      	beq.n	801c900 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801c8a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c8a4:	d826      	bhi.n	801c8f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801c8a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801c8aa:	d02b      	beq.n	801c904 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801c8ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801c8b0:	d820      	bhi.n	801c8f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801c8b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c8b6:	d012      	beq.n	801c8de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801c8b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c8bc:	d81a      	bhi.n	801c8f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d022      	beq.n	801c908 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801c8c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c8c6:	d115      	bne.n	801c8f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c8cc:	3308      	adds	r3, #8
 801c8ce:	2100      	movs	r1, #0
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	f000 febd 	bl	801d650 <RCCEx_PLL2_Config>
 801c8d6:	4603      	mov	r3, r0
 801c8d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c8dc:	e015      	b.n	801c90a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c8e2:	3328      	adds	r3, #40	@ 0x28
 801c8e4:	2102      	movs	r1, #2
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f000 ff64 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c8f2:	e00a      	b.n	801c90a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c8fa:	e006      	b.n	801c90a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801c8fc:	bf00      	nop
 801c8fe:	e004      	b.n	801c90a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801c900:	bf00      	nop
 801c902:	e002      	b.n	801c90a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801c904:	bf00      	nop
 801c906:	e000      	b.n	801c90a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801c908:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c90a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d10b      	bne.n	801c92a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c912:	4b39      	ldr	r3, [pc, #228]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c916:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801c91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c922:	4a35      	ldr	r2, [pc, #212]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c924:	430b      	orrs	r3, r1
 801c926:	6553      	str	r3, [r2, #84]	@ 0x54
 801c928:	e003      	b.n	801c932 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c92a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c92e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801c932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c93a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801c93e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801c942:	2300      	movs	r3, #0
 801c944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801c948:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801c94c:	460b      	mov	r3, r1
 801c94e:	4313      	orrs	r3, r2
 801c950:	d058      	beq.n	801ca04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801c952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c95a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801c95e:	d033      	beq.n	801c9c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801c960:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801c964:	d82c      	bhi.n	801c9c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801c966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c96a:	d02f      	beq.n	801c9cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801c96c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c970:	d826      	bhi.n	801c9c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801c972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801c976:	d02b      	beq.n	801c9d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801c978:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801c97c:	d820      	bhi.n	801c9c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801c97e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801c982:	d012      	beq.n	801c9aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801c984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801c988:	d81a      	bhi.n	801c9c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d022      	beq.n	801c9d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801c98e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c992:	d115      	bne.n	801c9c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c998:	3308      	adds	r3, #8
 801c99a:	2100      	movs	r1, #0
 801c99c:	4618      	mov	r0, r3
 801c99e:	f000 fe57 	bl	801d650 <RCCEx_PLL2_Config>
 801c9a2:	4603      	mov	r3, r0
 801c9a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801c9a8:	e015      	b.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c9ae:	3328      	adds	r3, #40	@ 0x28
 801c9b0:	2102      	movs	r1, #2
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	f000 fefe 	bl	801d7b4 <RCCEx_PLL3_Config>
 801c9b8:	4603      	mov	r3, r0
 801c9ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801c9be:	e00a      	b.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c9c0:	2301      	movs	r3, #1
 801c9c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c9c6:	e006      	b.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801c9c8:	bf00      	nop
 801c9ca:	e004      	b.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801c9cc:	bf00      	nop
 801c9ce:	e002      	b.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801c9d0:	bf00      	nop
 801c9d2:	e000      	b.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801c9d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c9d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d10e      	bne.n	801c9fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c9de:	4b06      	ldr	r3, [pc, #24]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c9e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c9e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801c9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c9ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c9ee:	4a02      	ldr	r2, [pc, #8]	@ (801c9f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c9f0:	430b      	orrs	r3, r1
 801c9f2:	6593      	str	r3, [r2, #88]	@ 0x58
 801c9f4:	e006      	b.n	801ca04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801c9f6:	bf00      	nop
 801c9f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ca00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ca04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801ca10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ca14:	2300      	movs	r3, #0
 801ca16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801ca1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801ca1e:	460b      	mov	r3, r1
 801ca20:	4313      	orrs	r3, r2
 801ca22:	d055      	beq.n	801cad0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ca24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ca2c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801ca30:	d033      	beq.n	801ca9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801ca32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801ca36:	d82c      	bhi.n	801ca92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ca38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ca3c:	d02f      	beq.n	801ca9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801ca3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ca42:	d826      	bhi.n	801ca92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ca44:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ca48:	d02b      	beq.n	801caa2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801ca4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ca4e:	d820      	bhi.n	801ca92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ca50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ca54:	d012      	beq.n	801ca7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801ca56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ca5a:	d81a      	bhi.n	801ca92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d022      	beq.n	801caa6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801ca60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ca64:	d115      	bne.n	801ca92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ca66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca6a:	3308      	adds	r3, #8
 801ca6c:	2100      	movs	r1, #0
 801ca6e:	4618      	mov	r0, r3
 801ca70:	f000 fdee 	bl	801d650 <RCCEx_PLL2_Config>
 801ca74:	4603      	mov	r3, r0
 801ca76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ca7a:	e015      	b.n	801caa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ca7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca80:	3328      	adds	r3, #40	@ 0x28
 801ca82:	2102      	movs	r1, #2
 801ca84:	4618      	mov	r0, r3
 801ca86:	f000 fe95 	bl	801d7b4 <RCCEx_PLL3_Config>
 801ca8a:	4603      	mov	r3, r0
 801ca8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ca90:	e00a      	b.n	801caa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ca92:	2301      	movs	r3, #1
 801ca94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ca98:	e006      	b.n	801caa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ca9a:	bf00      	nop
 801ca9c:	e004      	b.n	801caa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ca9e:	bf00      	nop
 801caa0:	e002      	b.n	801caa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801caa2:	bf00      	nop
 801caa4:	e000      	b.n	801caa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801caa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801caa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801caac:	2b00      	cmp	r3, #0
 801caae:	d10b      	bne.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801cab0:	4ba1      	ldr	r3, [pc, #644]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cab4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801cab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cabc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801cac0:	4a9d      	ldr	r2, [pc, #628]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cac2:	430b      	orrs	r3, r1
 801cac4:	6593      	str	r3, [r2, #88]	@ 0x58
 801cac6:	e003      	b.n	801cad0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cacc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801cad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad8:	f002 0308 	and.w	r3, r2, #8
 801cadc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801cae0:	2300      	movs	r3, #0
 801cae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801cae6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801caea:	460b      	mov	r3, r1
 801caec:	4313      	orrs	r3, r2
 801caee:	d01e      	beq.n	801cb2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801caf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801caf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801caf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cafc:	d10c      	bne.n	801cb18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb02:	3328      	adds	r3, #40	@ 0x28
 801cb04:	2102      	movs	r1, #2
 801cb06:	4618      	mov	r0, r3
 801cb08:	f000 fe54 	bl	801d7b4 <RCCEx_PLL3_Config>
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d002      	beq.n	801cb18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801cb12:	2301      	movs	r3, #1
 801cb14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801cb18:	4b87      	ldr	r3, [pc, #540]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cb1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cb1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801cb20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cb28:	4a83      	ldr	r2, [pc, #524]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cb2a:	430b      	orrs	r3, r1
 801cb2c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801cb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb36:	f002 0310 	and.w	r3, r2, #16
 801cb3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801cb3e:	2300      	movs	r3, #0
 801cb40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801cb44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801cb48:	460b      	mov	r3, r1
 801cb4a:	4313      	orrs	r3, r2
 801cb4c:	d01e      	beq.n	801cb8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801cb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801cb56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cb5a:	d10c      	bne.n	801cb76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb60:	3328      	adds	r3, #40	@ 0x28
 801cb62:	2102      	movs	r1, #2
 801cb64:	4618      	mov	r0, r3
 801cb66:	f000 fe25 	bl	801d7b4 <RCCEx_PLL3_Config>
 801cb6a:	4603      	mov	r3, r0
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d002      	beq.n	801cb76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801cb70:	2301      	movs	r3, #1
 801cb72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801cb76:	4b70      	ldr	r3, [pc, #448]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cb78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cb7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801cb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801cb86:	4a6c      	ldr	r2, [pc, #432]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cb88:	430b      	orrs	r3, r1
 801cb8a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801cb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb94:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801cb98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801cb9c:	2300      	movs	r3, #0
 801cb9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801cba2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801cba6:	460b      	mov	r3, r1
 801cba8:	4313      	orrs	r3, r2
 801cbaa:	d03e      	beq.n	801cc2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801cbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801cbb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cbb8:	d022      	beq.n	801cc00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801cbba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cbbe:	d81b      	bhi.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d003      	beq.n	801cbcc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801cbc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cbc8:	d00b      	beq.n	801cbe2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801cbca:	e015      	b.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbd0:	3308      	adds	r3, #8
 801cbd2:	2100      	movs	r1, #0
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	f000 fd3b 	bl	801d650 <RCCEx_PLL2_Config>
 801cbda:	4603      	mov	r3, r0
 801cbdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cbe0:	e00f      	b.n	801cc02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbe6:	3328      	adds	r3, #40	@ 0x28
 801cbe8:	2102      	movs	r1, #2
 801cbea:	4618      	mov	r0, r3
 801cbec:	f000 fde2 	bl	801d7b4 <RCCEx_PLL3_Config>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cbf6:	e004      	b.n	801cc02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cbf8:	2301      	movs	r3, #1
 801cbfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cbfe:	e000      	b.n	801cc02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801cc00:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d10b      	bne.n	801cc22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cc0a:	4b4b      	ldr	r3, [pc, #300]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cc0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cc0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801cc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801cc1a:	4a47      	ldr	r2, [pc, #284]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cc1c:	430b      	orrs	r3, r1
 801cc1e:	6593      	str	r3, [r2, #88]	@ 0x58
 801cc20:	e003      	b.n	801cc2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801cc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801cc36:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cc38:	2300      	movs	r3, #0
 801cc3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801cc3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801cc40:	460b      	mov	r3, r1
 801cc42:	4313      	orrs	r3, r2
 801cc44:	d03b      	beq.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801cc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801cc4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801cc52:	d01f      	beq.n	801cc94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801cc54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801cc58:	d818      	bhi.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801cc5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801cc5e:	d003      	beq.n	801cc68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801cc60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cc64:	d007      	beq.n	801cc76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801cc66:	e011      	b.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cc68:	4b33      	ldr	r3, [pc, #204]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc6c:	4a32      	ldr	r2, [pc, #200]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cc6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cc72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801cc74:	e00f      	b.n	801cc96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc7a:	3328      	adds	r3, #40	@ 0x28
 801cc7c:	2101      	movs	r1, #1
 801cc7e:	4618      	mov	r0, r3
 801cc80:	f000 fd98 	bl	801d7b4 <RCCEx_PLL3_Config>
 801cc84:	4603      	mov	r3, r0
 801cc86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801cc8a:	e004      	b.n	801cc96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cc8c:	2301      	movs	r3, #1
 801cc8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cc92:	e000      	b.n	801cc96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801cc94:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d10b      	bne.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cc9e:	4b26      	ldr	r3, [pc, #152]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cca2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801cca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ccae:	4a22      	ldr	r2, [pc, #136]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ccb0:	430b      	orrs	r3, r1
 801ccb2:	6553      	str	r3, [r2, #84]	@ 0x54
 801ccb4:	e003      	b.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ccb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ccba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801ccbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccc6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801ccca:	673b      	str	r3, [r7, #112]	@ 0x70
 801cccc:	2300      	movs	r3, #0
 801ccce:	677b      	str	r3, [r7, #116]	@ 0x74
 801ccd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801ccd4:	460b      	mov	r3, r1
 801ccd6:	4313      	orrs	r3, r2
 801ccd8:	d034      	beq.n	801cd44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801ccda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d003      	beq.n	801ccec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801cce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cce8:	d007      	beq.n	801ccfa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801ccea:	e011      	b.n	801cd10 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ccec:	4b12      	ldr	r3, [pc, #72]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ccee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ccf0:	4a11      	ldr	r2, [pc, #68]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ccf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ccf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801ccf8:	e00e      	b.n	801cd18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ccfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccfe:	3308      	adds	r3, #8
 801cd00:	2102      	movs	r1, #2
 801cd02:	4618      	mov	r0, r3
 801cd04:	f000 fca4 	bl	801d650 <RCCEx_PLL2_Config>
 801cd08:	4603      	mov	r3, r0
 801cd0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cd0e:	e003      	b.n	801cd18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801cd10:	2301      	movs	r3, #1
 801cd12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cd16:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d10d      	bne.n	801cd3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801cd20:	4b05      	ldr	r3, [pc, #20]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cd22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cd24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801cd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cd2e:	4a02      	ldr	r2, [pc, #8]	@ (801cd38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801cd30:	430b      	orrs	r3, r1
 801cd32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801cd34:	e006      	b.n	801cd44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801cd36:	bf00      	nop
 801cd38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801cd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801cd50:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cd52:	2300      	movs	r3, #0
 801cd54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801cd56:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801cd5a:	460b      	mov	r3, r1
 801cd5c:	4313      	orrs	r3, r2
 801cd5e:	d00c      	beq.n	801cd7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd64:	3328      	adds	r3, #40	@ 0x28
 801cd66:	2102      	movs	r1, #2
 801cd68:	4618      	mov	r0, r3
 801cd6a:	f000 fd23 	bl	801d7b4 <RCCEx_PLL3_Config>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d002      	beq.n	801cd7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801cd74:	2301      	movs	r3, #1
 801cd76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801cd7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801cd86:	663b      	str	r3, [r7, #96]	@ 0x60
 801cd88:	2300      	movs	r3, #0
 801cd8a:	667b      	str	r3, [r7, #100]	@ 0x64
 801cd8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801cd90:	460b      	mov	r3, r1
 801cd92:	4313      	orrs	r3, r2
 801cd94:	d038      	beq.n	801ce08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801cd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cd9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801cda2:	d018      	beq.n	801cdd6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801cda4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801cda8:	d811      	bhi.n	801cdce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801cdaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cdae:	d014      	beq.n	801cdda <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801cdb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cdb4:	d80b      	bhi.n	801cdce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d011      	beq.n	801cdde <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801cdba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cdbe:	d106      	bne.n	801cdce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cdc0:	4bc3      	ldr	r3, [pc, #780]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cdc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdc4:	4ac2      	ldr	r2, [pc, #776]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cdc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cdca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801cdcc:	e008      	b.n	801cde0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cdce:	2301      	movs	r3, #1
 801cdd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cdd4:	e004      	b.n	801cde0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801cdd6:	bf00      	nop
 801cdd8:	e002      	b.n	801cde0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801cdda:	bf00      	nop
 801cddc:	e000      	b.n	801cde0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801cdde:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cde0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d10b      	bne.n	801ce00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cde8:	4bb9      	ldr	r3, [pc, #740]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cdea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cdec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801cdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cdf8:	4ab5      	ldr	r2, [pc, #724]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cdfa:	430b      	orrs	r3, r1
 801cdfc:	6553      	str	r3, [r2, #84]	@ 0x54
 801cdfe:	e003      	b.n	801ce08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ce08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce10:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801ce14:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ce16:	2300      	movs	r3, #0
 801ce18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ce1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801ce1e:	460b      	mov	r3, r1
 801ce20:	4313      	orrs	r3, r2
 801ce22:	d009      	beq.n	801ce38 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801ce24:	4baa      	ldr	r3, [pc, #680]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ce26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ce28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ce2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ce32:	4aa7      	ldr	r2, [pc, #668]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ce34:	430b      	orrs	r3, r1
 801ce36:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801ce38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce40:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801ce44:	653b      	str	r3, [r7, #80]	@ 0x50
 801ce46:	2300      	movs	r3, #0
 801ce48:	657b      	str	r3, [r7, #84]	@ 0x54
 801ce4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801ce4e:	460b      	mov	r3, r1
 801ce50:	4313      	orrs	r3, r2
 801ce52:	d00a      	beq.n	801ce6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801ce54:	4b9e      	ldr	r3, [pc, #632]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ce56:	691b      	ldr	r3, [r3, #16]
 801ce58:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801ce5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ce64:	4a9a      	ldr	r2, [pc, #616]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ce66:	430b      	orrs	r3, r1
 801ce68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801ce6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce72:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801ce76:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ce78:	2300      	movs	r3, #0
 801ce7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ce7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801ce80:	460b      	mov	r3, r1
 801ce82:	4313      	orrs	r3, r2
 801ce84:	d009      	beq.n	801ce9a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801ce86:	4b92      	ldr	r3, [pc, #584]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ce88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ce8a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801ce8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ce94:	4a8e      	ldr	r2, [pc, #568]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ce96:	430b      	orrs	r3, r1
 801ce98:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801ce9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cea2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801cea6:	643b      	str	r3, [r7, #64]	@ 0x40
 801cea8:	2300      	movs	r3, #0
 801ceaa:	647b      	str	r3, [r7, #68]	@ 0x44
 801ceac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801ceb0:	460b      	mov	r3, r1
 801ceb2:	4313      	orrs	r3, r2
 801ceb4:	d00e      	beq.n	801ced4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801ceb6:	4b86      	ldr	r3, [pc, #536]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ceb8:	691b      	ldr	r3, [r3, #16]
 801ceba:	4a85      	ldr	r2, [pc, #532]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cebc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801cec0:	6113      	str	r3, [r2, #16]
 801cec2:	4b83      	ldr	r3, [pc, #524]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cec4:	6919      	ldr	r1, [r3, #16]
 801cec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ceca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801cece:	4a80      	ldr	r2, [pc, #512]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ced0:	430b      	orrs	r3, r1
 801ced2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801ced4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cedc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801cee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cee2:	2300      	movs	r3, #0
 801cee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cee6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801ceea:	460b      	mov	r3, r1
 801ceec:	4313      	orrs	r3, r2
 801ceee:	d009      	beq.n	801cf04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801cef0:	4b77      	ldr	r3, [pc, #476]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cef4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801cef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cefc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cefe:	4a74      	ldr	r2, [pc, #464]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cf00:	430b      	orrs	r3, r1
 801cf02:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801cf04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf0c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801cf10:	633b      	str	r3, [r7, #48]	@ 0x30
 801cf12:	2300      	movs	r3, #0
 801cf14:	637b      	str	r3, [r7, #52]	@ 0x34
 801cf16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801cf1a:	460b      	mov	r3, r1
 801cf1c:	4313      	orrs	r3, r2
 801cf1e:	d00a      	beq.n	801cf36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801cf20:	4b6b      	ldr	r3, [pc, #428]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cf22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cf24:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801cf28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801cf30:	4a67      	ldr	r2, [pc, #412]	@ (801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cf32:	430b      	orrs	r3, r1
 801cf34:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801cf36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf3e:	2100      	movs	r1, #0
 801cf40:	62b9      	str	r1, [r7, #40]	@ 0x28
 801cf42:	f003 0301 	and.w	r3, r3, #1
 801cf46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cf48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801cf4c:	460b      	mov	r3, r1
 801cf4e:	4313      	orrs	r3, r2
 801cf50:	d011      	beq.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cf52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf56:	3308      	adds	r3, #8
 801cf58:	2100      	movs	r1, #0
 801cf5a:	4618      	mov	r0, r3
 801cf5c:	f000 fb78 	bl	801d650 <RCCEx_PLL2_Config>
 801cf60:	4603      	mov	r3, r0
 801cf62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801cf66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d003      	beq.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cf72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801cf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf7e:	2100      	movs	r1, #0
 801cf80:	6239      	str	r1, [r7, #32]
 801cf82:	f003 0302 	and.w	r3, r3, #2
 801cf86:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801cf8c:	460b      	mov	r3, r1
 801cf8e:	4313      	orrs	r3, r2
 801cf90:	d011      	beq.n	801cfb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cf92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf96:	3308      	adds	r3, #8
 801cf98:	2101      	movs	r1, #1
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	f000 fb58 	bl	801d650 <RCCEx_PLL2_Config>
 801cfa0:	4603      	mov	r3, r0
 801cfa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801cfa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	d003      	beq.n	801cfb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801cfb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfbe:	2100      	movs	r1, #0
 801cfc0:	61b9      	str	r1, [r7, #24]
 801cfc2:	f003 0304 	and.w	r3, r3, #4
 801cfc6:	61fb      	str	r3, [r7, #28]
 801cfc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801cfcc:	460b      	mov	r3, r1
 801cfce:	4313      	orrs	r3, r2
 801cfd0:	d011      	beq.n	801cff6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cfd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfd6:	3308      	adds	r3, #8
 801cfd8:	2102      	movs	r1, #2
 801cfda:	4618      	mov	r0, r3
 801cfdc:	f000 fb38 	bl	801d650 <RCCEx_PLL2_Config>
 801cfe0:	4603      	mov	r3, r0
 801cfe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801cfe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d003      	beq.n	801cff6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801cff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cffe:	2100      	movs	r1, #0
 801d000:	6139      	str	r1, [r7, #16]
 801d002:	f003 0308 	and.w	r3, r3, #8
 801d006:	617b      	str	r3, [r7, #20]
 801d008:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d00c:	460b      	mov	r3, r1
 801d00e:	4313      	orrs	r3, r2
 801d010:	d011      	beq.n	801d036 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d016:	3328      	adds	r3, #40	@ 0x28
 801d018:	2100      	movs	r1, #0
 801d01a:	4618      	mov	r0, r3
 801d01c:	f000 fbca 	bl	801d7b4 <RCCEx_PLL3_Config>
 801d020:	4603      	mov	r3, r0
 801d022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801d026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d003      	beq.n	801d036 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d02e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801d036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d03e:	2100      	movs	r1, #0
 801d040:	60b9      	str	r1, [r7, #8]
 801d042:	f003 0310 	and.w	r3, r3, #16
 801d046:	60fb      	str	r3, [r7, #12]
 801d048:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d04c:	460b      	mov	r3, r1
 801d04e:	4313      	orrs	r3, r2
 801d050:	d011      	beq.n	801d076 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d056:	3328      	adds	r3, #40	@ 0x28
 801d058:	2101      	movs	r1, #1
 801d05a:	4618      	mov	r0, r3
 801d05c:	f000 fbaa 	bl	801d7b4 <RCCEx_PLL3_Config>
 801d060:	4603      	mov	r3, r0
 801d062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d003      	beq.n	801d076 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d06e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d07e:	2100      	movs	r1, #0
 801d080:	6039      	str	r1, [r7, #0]
 801d082:	f003 0320 	and.w	r3, r3, #32
 801d086:	607b      	str	r3, [r7, #4]
 801d088:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d08c:	460b      	mov	r3, r1
 801d08e:	4313      	orrs	r3, r2
 801d090:	d011      	beq.n	801d0b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d096:	3328      	adds	r3, #40	@ 0x28
 801d098:	2102      	movs	r1, #2
 801d09a:	4618      	mov	r0, r3
 801d09c:	f000 fb8a 	bl	801d7b4 <RCCEx_PLL3_Config>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d0a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d003      	beq.n	801d0b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d0ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d0b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801d0b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d101      	bne.n	801d0c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801d0be:	2300      	movs	r3, #0
 801d0c0:	e000      	b.n	801d0c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801d0c2:	2301      	movs	r3, #1
}
 801d0c4:	4618      	mov	r0, r3
 801d0c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d0d0:	58024400 	.word	0x58024400

0801d0d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801d0d8:	f7fe fd54 	bl	801bb84 <HAL_RCC_GetHCLKFreq>
 801d0dc:	4602      	mov	r2, r0
 801d0de:	4b06      	ldr	r3, [pc, #24]	@ (801d0f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801d0e0:	6a1b      	ldr	r3, [r3, #32]
 801d0e2:	091b      	lsrs	r3, r3, #4
 801d0e4:	f003 0307 	and.w	r3, r3, #7
 801d0e8:	4904      	ldr	r1, [pc, #16]	@ (801d0fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801d0ea:	5ccb      	ldrb	r3, [r1, r3]
 801d0ec:	f003 031f 	and.w	r3, r3, #31
 801d0f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	bd80      	pop	{r7, pc}
 801d0f8:	58024400 	.word	0x58024400
 801d0fc:	080260bc 	.word	0x080260bc

0801d100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801d100:	b480      	push	{r7}
 801d102:	b089      	sub	sp, #36	@ 0x24
 801d104:	af00      	add	r7, sp, #0
 801d106:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d108:	4ba1      	ldr	r3, [pc, #644]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d10c:	f003 0303 	and.w	r3, r3, #3
 801d110:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801d112:	4b9f      	ldr	r3, [pc, #636]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d116:	0b1b      	lsrs	r3, r3, #12
 801d118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d11c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801d11e:	4b9c      	ldr	r3, [pc, #624]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d122:	091b      	lsrs	r3, r3, #4
 801d124:	f003 0301 	and.w	r3, r3, #1
 801d128:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801d12a:	4b99      	ldr	r3, [pc, #612]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d12c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d12e:	08db      	lsrs	r3, r3, #3
 801d130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d134:	693a      	ldr	r2, [r7, #16]
 801d136:	fb02 f303 	mul.w	r3, r2, r3
 801d13a:	ee07 3a90 	vmov	s15, r3
 801d13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801d146:	697b      	ldr	r3, [r7, #20]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	f000 8111 	beq.w	801d370 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801d14e:	69bb      	ldr	r3, [r7, #24]
 801d150:	2b02      	cmp	r3, #2
 801d152:	f000 8083 	beq.w	801d25c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801d156:	69bb      	ldr	r3, [r7, #24]
 801d158:	2b02      	cmp	r3, #2
 801d15a:	f200 80a1 	bhi.w	801d2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801d15e:	69bb      	ldr	r3, [r7, #24]
 801d160:	2b00      	cmp	r3, #0
 801d162:	d003      	beq.n	801d16c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801d164:	69bb      	ldr	r3, [r7, #24]
 801d166:	2b01      	cmp	r3, #1
 801d168:	d056      	beq.n	801d218 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801d16a:	e099      	b.n	801d2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d16c:	4b88      	ldr	r3, [pc, #544]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	f003 0320 	and.w	r3, r3, #32
 801d174:	2b00      	cmp	r3, #0
 801d176:	d02d      	beq.n	801d1d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d178:	4b85      	ldr	r3, [pc, #532]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	08db      	lsrs	r3, r3, #3
 801d17e:	f003 0303 	and.w	r3, r3, #3
 801d182:	4a84      	ldr	r2, [pc, #528]	@ (801d394 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801d184:	fa22 f303 	lsr.w	r3, r2, r3
 801d188:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d18a:	68bb      	ldr	r3, [r7, #8]
 801d18c:	ee07 3a90 	vmov	s15, r3
 801d190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d194:	697b      	ldr	r3, [r7, #20]
 801d196:	ee07 3a90 	vmov	s15, r3
 801d19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d1a2:	4b7b      	ldr	r3, [pc, #492]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d1aa:	ee07 3a90 	vmov	s15, r3
 801d1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 801d1b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801d398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d1c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d1ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801d1d2:	e087      	b.n	801d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d1d4:	697b      	ldr	r3, [r7, #20]
 801d1d6:	ee07 3a90 	vmov	s15, r3
 801d1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d1de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801d39c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801d1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d1e6:	4b6a      	ldr	r3, [pc, #424]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d1e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d1ee:	ee07 3a90 	vmov	s15, r3
 801d1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 801d1fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801d398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d216:	e065      	b.n	801d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d218:	697b      	ldr	r3, [r7, #20]
 801d21a:	ee07 3a90 	vmov	s15, r3
 801d21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d222:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801d226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d22a:	4b59      	ldr	r3, [pc, #356]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d232:	ee07 3a90 	vmov	s15, r3
 801d236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d23a:	ed97 6a03 	vldr	s12, [r7, #12]
 801d23e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801d398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d24a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d252:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d25a:	e043      	b.n	801d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d25c:	697b      	ldr	r3, [r7, #20]
 801d25e:	ee07 3a90 	vmov	s15, r3
 801d262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d266:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801d3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801d26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d26e:	4b48      	ldr	r3, [pc, #288]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d276:	ee07 3a90 	vmov	s15, r3
 801d27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d27e:	ed97 6a03 	vldr	s12, [r7, #12]
 801d282:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801d398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d28e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d296:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d29a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d29e:	e021      	b.n	801d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d2a0:	697b      	ldr	r3, [r7, #20]
 801d2a2:	ee07 3a90 	vmov	s15, r3
 801d2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d2aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801d2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d2b2:	4b37      	ldr	r3, [pc, #220]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d2ba:	ee07 3a90 	vmov	s15, r3
 801d2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d2c2:	ed97 6a03 	vldr	s12, [r7, #12]
 801d2c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801d398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d2d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d2de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d2e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801d2e4:	4b2a      	ldr	r3, [pc, #168]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d2e8:	0a5b      	lsrs	r3, r3, #9
 801d2ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d2ee:	ee07 3a90 	vmov	s15, r3
 801d2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d2f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d2fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d2fe:	edd7 6a07 	vldr	s13, [r7, #28]
 801d302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d30a:	ee17 2a90 	vmov	r2, s15
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801d312:	4b1f      	ldr	r3, [pc, #124]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d316:	0c1b      	lsrs	r3, r3, #16
 801d318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d31c:	ee07 3a90 	vmov	s15, r3
 801d320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d328:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d32c:	edd7 6a07 	vldr	s13, [r7, #28]
 801d330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d338:	ee17 2a90 	vmov	r2, s15
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801d340:	4b13      	ldr	r3, [pc, #76]	@ (801d390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d344:	0e1b      	lsrs	r3, r3, #24
 801d346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d34a:	ee07 3a90 	vmov	s15, r3
 801d34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d356:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d35a:	edd7 6a07 	vldr	s13, [r7, #28]
 801d35e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d366:	ee17 2a90 	vmov	r2, s15
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801d36e:	e008      	b.n	801d382 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	2200      	movs	r2, #0
 801d374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	2200      	movs	r2, #0
 801d37a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	2200      	movs	r2, #0
 801d380:	609a      	str	r2, [r3, #8]
}
 801d382:	bf00      	nop
 801d384:	3724      	adds	r7, #36	@ 0x24
 801d386:	46bd      	mov	sp, r7
 801d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d38c:	4770      	bx	lr
 801d38e:	bf00      	nop
 801d390:	58024400 	.word	0x58024400
 801d394:	03d09000 	.word	0x03d09000
 801d398:	46000000 	.word	0x46000000
 801d39c:	4c742400 	.word	0x4c742400
 801d3a0:	4a742400 	.word	0x4a742400
 801d3a4:	4af42400 	.word	0x4af42400

0801d3a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801d3a8:	b480      	push	{r7}
 801d3aa:	b089      	sub	sp, #36	@ 0x24
 801d3ac:	af00      	add	r7, sp, #0
 801d3ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d3b0:	4ba1      	ldr	r3, [pc, #644]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d3b4:	f003 0303 	and.w	r3, r3, #3
 801d3b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801d3ba:	4b9f      	ldr	r3, [pc, #636]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d3be:	0d1b      	lsrs	r3, r3, #20
 801d3c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d3c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801d3c6:	4b9c      	ldr	r3, [pc, #624]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3ca:	0a1b      	lsrs	r3, r3, #8
 801d3cc:	f003 0301 	and.w	r3, r3, #1
 801d3d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801d3d2:	4b99      	ldr	r3, [pc, #612]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d3d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d3d6:	08db      	lsrs	r3, r3, #3
 801d3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d3dc:	693a      	ldr	r2, [r7, #16]
 801d3de:	fb02 f303 	mul.w	r3, r2, r3
 801d3e2:	ee07 3a90 	vmov	s15, r3
 801d3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d3ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801d3ee:	697b      	ldr	r3, [r7, #20]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	f000 8111 	beq.w	801d618 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801d3f6:	69bb      	ldr	r3, [r7, #24]
 801d3f8:	2b02      	cmp	r3, #2
 801d3fa:	f000 8083 	beq.w	801d504 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801d3fe:	69bb      	ldr	r3, [r7, #24]
 801d400:	2b02      	cmp	r3, #2
 801d402:	f200 80a1 	bhi.w	801d548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801d406:	69bb      	ldr	r3, [r7, #24]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d003      	beq.n	801d414 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801d40c:	69bb      	ldr	r3, [r7, #24]
 801d40e:	2b01      	cmp	r3, #1
 801d410:	d056      	beq.n	801d4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801d412:	e099      	b.n	801d548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d414:	4b88      	ldr	r3, [pc, #544]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	f003 0320 	and.w	r3, r3, #32
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d02d      	beq.n	801d47c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d420:	4b85      	ldr	r3, [pc, #532]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	08db      	lsrs	r3, r3, #3
 801d426:	f003 0303 	and.w	r3, r3, #3
 801d42a:	4a84      	ldr	r2, [pc, #528]	@ (801d63c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801d42c:	fa22 f303 	lsr.w	r3, r2, r3
 801d430:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d432:	68bb      	ldr	r3, [r7, #8]
 801d434:	ee07 3a90 	vmov	s15, r3
 801d438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d43c:	697b      	ldr	r3, [r7, #20]
 801d43e:	ee07 3a90 	vmov	s15, r3
 801d442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d44a:	4b7b      	ldr	r3, [pc, #492]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d452:	ee07 3a90 	vmov	s15, r3
 801d456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d45a:	ed97 6a03 	vldr	s12, [r7, #12]
 801d45e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801d640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d46a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d472:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d476:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801d47a:	e087      	b.n	801d58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d47c:	697b      	ldr	r3, [r7, #20]
 801d47e:	ee07 3a90 	vmov	s15, r3
 801d482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d486:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801d644 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801d48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d48e:	4b6a      	ldr	r3, [pc, #424]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d496:	ee07 3a90 	vmov	s15, r3
 801d49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d49e:	ed97 6a03 	vldr	s12, [r7, #12]
 801d4a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801d640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d4ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d4ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d4be:	e065      	b.n	801d58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d4c0:	697b      	ldr	r3, [r7, #20]
 801d4c2:	ee07 3a90 	vmov	s15, r3
 801d4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d4ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801d648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801d4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d4d2:	4b59      	ldr	r3, [pc, #356]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d4d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d4da:	ee07 3a90 	vmov	s15, r3
 801d4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 801d4e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801d640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d4f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d4fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d502:	e043      	b.n	801d58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d504:	697b      	ldr	r3, [r7, #20]
 801d506:	ee07 3a90 	vmov	s15, r3
 801d50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d50e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801d64c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801d512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d516:	4b48      	ldr	r3, [pc, #288]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d51e:	ee07 3a90 	vmov	s15, r3
 801d522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d526:	ed97 6a03 	vldr	s12, [r7, #12]
 801d52a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801d640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d546:	e021      	b.n	801d58c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d548:	697b      	ldr	r3, [r7, #20]
 801d54a:	ee07 3a90 	vmov	s15, r3
 801d54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d552:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801d648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801d556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d55a:	4b37      	ldr	r3, [pc, #220]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d562:	ee07 3a90 	vmov	s15, r3
 801d566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d56a:	ed97 6a03 	vldr	s12, [r7, #12]
 801d56e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801d640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d57a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d582:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d58a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801d58c:	4b2a      	ldr	r3, [pc, #168]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d590:	0a5b      	lsrs	r3, r3, #9
 801d592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d596:	ee07 3a90 	vmov	s15, r3
 801d59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d59e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d5a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d5a6:	edd7 6a07 	vldr	s13, [r7, #28]
 801d5aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d5ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d5b2:	ee17 2a90 	vmov	r2, s15
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801d5ba:	4b1f      	ldr	r3, [pc, #124]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d5be:	0c1b      	lsrs	r3, r3, #16
 801d5c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d5c4:	ee07 3a90 	vmov	s15, r3
 801d5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d5cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d5d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d5d4:	edd7 6a07 	vldr	s13, [r7, #28]
 801d5d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d5dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d5e0:	ee17 2a90 	vmov	r2, s15
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801d5e8:	4b13      	ldr	r3, [pc, #76]	@ (801d638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d5ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d5ec:	0e1b      	lsrs	r3, r3, #24
 801d5ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d5f2:	ee07 3a90 	vmov	s15, r3
 801d5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d5fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d5fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d602:	edd7 6a07 	vldr	s13, [r7, #28]
 801d606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d60a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d60e:	ee17 2a90 	vmov	r2, s15
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801d616:	e008      	b.n	801d62a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	2200      	movs	r2, #0
 801d61c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	2200      	movs	r2, #0
 801d622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	2200      	movs	r2, #0
 801d628:	609a      	str	r2, [r3, #8]
}
 801d62a:	bf00      	nop
 801d62c:	3724      	adds	r7, #36	@ 0x24
 801d62e:	46bd      	mov	sp, r7
 801d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d634:	4770      	bx	lr
 801d636:	bf00      	nop
 801d638:	58024400 	.word	0x58024400
 801d63c:	03d09000 	.word	0x03d09000
 801d640:	46000000 	.word	0x46000000
 801d644:	4c742400 	.word	0x4c742400
 801d648:	4a742400 	.word	0x4a742400
 801d64c:	4af42400 	.word	0x4af42400

0801d650 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801d650:	b580      	push	{r7, lr}
 801d652:	b084      	sub	sp, #16
 801d654:	af00      	add	r7, sp, #0
 801d656:	6078      	str	r0, [r7, #4]
 801d658:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d65a:	2300      	movs	r3, #0
 801d65c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d65e:	4b53      	ldr	r3, [pc, #332]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d662:	f003 0303 	and.w	r3, r3, #3
 801d666:	2b03      	cmp	r3, #3
 801d668:	d101      	bne.n	801d66e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801d66a:	2301      	movs	r3, #1
 801d66c:	e099      	b.n	801d7a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801d66e:	4b4f      	ldr	r3, [pc, #316]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d670:	681b      	ldr	r3, [r3, #0]
 801d672:	4a4e      	ldr	r2, [pc, #312]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d674:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801d678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d67a:	f7fc f891 	bl	80197a0 <HAL_GetTick>
 801d67e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801d680:	e008      	b.n	801d694 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801d682:	f7fc f88d 	bl	80197a0 <HAL_GetTick>
 801d686:	4602      	mov	r2, r0
 801d688:	68bb      	ldr	r3, [r7, #8]
 801d68a:	1ad3      	subs	r3, r2, r3
 801d68c:	2b02      	cmp	r3, #2
 801d68e:	d901      	bls.n	801d694 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801d690:	2303      	movs	r3, #3
 801d692:	e086      	b.n	801d7a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801d694:	4b45      	ldr	r3, [pc, #276]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d1f0      	bne.n	801d682 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801d6a0:	4b42      	ldr	r3, [pc, #264]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	031b      	lsls	r3, r3, #12
 801d6ae:	493f      	ldr	r1, [pc, #252]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d6b0:	4313      	orrs	r3, r2
 801d6b2:	628b      	str	r3, [r1, #40]	@ 0x28
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	685b      	ldr	r3, [r3, #4]
 801d6b8:	3b01      	subs	r3, #1
 801d6ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	689b      	ldr	r3, [r3, #8]
 801d6c2:	3b01      	subs	r3, #1
 801d6c4:	025b      	lsls	r3, r3, #9
 801d6c6:	b29b      	uxth	r3, r3
 801d6c8:	431a      	orrs	r2, r3
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	68db      	ldr	r3, [r3, #12]
 801d6ce:	3b01      	subs	r3, #1
 801d6d0:	041b      	lsls	r3, r3, #16
 801d6d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d6d6:	431a      	orrs	r2, r3
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	691b      	ldr	r3, [r3, #16]
 801d6dc:	3b01      	subs	r3, #1
 801d6de:	061b      	lsls	r3, r3, #24
 801d6e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d6e4:	4931      	ldr	r1, [pc, #196]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d6e6:	4313      	orrs	r3, r2
 801d6e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801d6ea:	4b30      	ldr	r3, [pc, #192]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	695b      	ldr	r3, [r3, #20]
 801d6f6:	492d      	ldr	r1, [pc, #180]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d6f8:	4313      	orrs	r3, r2
 801d6fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801d6fc:	4b2b      	ldr	r3, [pc, #172]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d700:	f023 0220 	bic.w	r2, r3, #32
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	699b      	ldr	r3, [r3, #24]
 801d708:	4928      	ldr	r1, [pc, #160]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d70a:	4313      	orrs	r3, r2
 801d70c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801d70e:	4b27      	ldr	r3, [pc, #156]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d712:	4a26      	ldr	r2, [pc, #152]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d714:	f023 0310 	bic.w	r3, r3, #16
 801d718:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801d71a:	4b24      	ldr	r3, [pc, #144]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d71c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d71e:	4b24      	ldr	r3, [pc, #144]	@ (801d7b0 <RCCEx_PLL2_Config+0x160>)
 801d720:	4013      	ands	r3, r2
 801d722:	687a      	ldr	r2, [r7, #4]
 801d724:	69d2      	ldr	r2, [r2, #28]
 801d726:	00d2      	lsls	r2, r2, #3
 801d728:	4920      	ldr	r1, [pc, #128]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d72a:	4313      	orrs	r3, r2
 801d72c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801d72e:	4b1f      	ldr	r3, [pc, #124]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d732:	4a1e      	ldr	r2, [pc, #120]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d734:	f043 0310 	orr.w	r3, r3, #16
 801d738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801d73a:	683b      	ldr	r3, [r7, #0]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d106      	bne.n	801d74e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801d740:	4b1a      	ldr	r3, [pc, #104]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d744:	4a19      	ldr	r2, [pc, #100]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d746:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801d74a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801d74c:	e00f      	b.n	801d76e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801d74e:	683b      	ldr	r3, [r7, #0]
 801d750:	2b01      	cmp	r3, #1
 801d752:	d106      	bne.n	801d762 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801d754:	4b15      	ldr	r3, [pc, #84]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d758:	4a14      	ldr	r2, [pc, #80]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d75a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d75e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801d760:	e005      	b.n	801d76e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801d762:	4b12      	ldr	r3, [pc, #72]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d766:	4a11      	ldr	r2, [pc, #68]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d768:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801d76c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801d76e:	4b0f      	ldr	r3, [pc, #60]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	4a0e      	ldr	r2, [pc, #56]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d774:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801d778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d77a:	f7fc f811 	bl	80197a0 <HAL_GetTick>
 801d77e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801d780:	e008      	b.n	801d794 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801d782:	f7fc f80d 	bl	80197a0 <HAL_GetTick>
 801d786:	4602      	mov	r2, r0
 801d788:	68bb      	ldr	r3, [r7, #8]
 801d78a:	1ad3      	subs	r3, r2, r3
 801d78c:	2b02      	cmp	r3, #2
 801d78e:	d901      	bls.n	801d794 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801d790:	2303      	movs	r3, #3
 801d792:	e006      	b.n	801d7a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801d794:	4b05      	ldr	r3, [pc, #20]	@ (801d7ac <RCCEx_PLL2_Config+0x15c>)
 801d796:	681b      	ldr	r3, [r3, #0]
 801d798:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d0f0      	beq.n	801d782 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801d7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801d7a2:	4618      	mov	r0, r3
 801d7a4:	3710      	adds	r7, #16
 801d7a6:	46bd      	mov	sp, r7
 801d7a8:	bd80      	pop	{r7, pc}
 801d7aa:	bf00      	nop
 801d7ac:	58024400 	.word	0x58024400
 801d7b0:	ffff0007 	.word	0xffff0007

0801d7b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801d7b4:	b580      	push	{r7, lr}
 801d7b6:	b084      	sub	sp, #16
 801d7b8:	af00      	add	r7, sp, #0
 801d7ba:	6078      	str	r0, [r7, #4]
 801d7bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d7be:	2300      	movs	r3, #0
 801d7c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d7c2:	4b53      	ldr	r3, [pc, #332]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d7c6:	f003 0303 	and.w	r3, r3, #3
 801d7ca:	2b03      	cmp	r3, #3
 801d7cc:	d101      	bne.n	801d7d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801d7ce:	2301      	movs	r3, #1
 801d7d0:	e099      	b.n	801d906 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801d7d2:	4b4f      	ldr	r3, [pc, #316]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	4a4e      	ldr	r2, [pc, #312]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d7d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801d7dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d7de:	f7fb ffdf 	bl	80197a0 <HAL_GetTick>
 801d7e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801d7e4:	e008      	b.n	801d7f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801d7e6:	f7fb ffdb 	bl	80197a0 <HAL_GetTick>
 801d7ea:	4602      	mov	r2, r0
 801d7ec:	68bb      	ldr	r3, [r7, #8]
 801d7ee:	1ad3      	subs	r3, r2, r3
 801d7f0:	2b02      	cmp	r3, #2
 801d7f2:	d901      	bls.n	801d7f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801d7f4:	2303      	movs	r3, #3
 801d7f6:	e086      	b.n	801d906 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801d7f8:	4b45      	ldr	r3, [pc, #276]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801d800:	2b00      	cmp	r3, #0
 801d802:	d1f0      	bne.n	801d7e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801d804:	4b42      	ldr	r3, [pc, #264]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d808:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	051b      	lsls	r3, r3, #20
 801d812:	493f      	ldr	r1, [pc, #252]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d814:	4313      	orrs	r3, r2
 801d816:	628b      	str	r3, [r1, #40]	@ 0x28
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	685b      	ldr	r3, [r3, #4]
 801d81c:	3b01      	subs	r3, #1
 801d81e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	689b      	ldr	r3, [r3, #8]
 801d826:	3b01      	subs	r3, #1
 801d828:	025b      	lsls	r3, r3, #9
 801d82a:	b29b      	uxth	r3, r3
 801d82c:	431a      	orrs	r2, r3
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	68db      	ldr	r3, [r3, #12]
 801d832:	3b01      	subs	r3, #1
 801d834:	041b      	lsls	r3, r3, #16
 801d836:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d83a:	431a      	orrs	r2, r3
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	691b      	ldr	r3, [r3, #16]
 801d840:	3b01      	subs	r3, #1
 801d842:	061b      	lsls	r3, r3, #24
 801d844:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d848:	4931      	ldr	r1, [pc, #196]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d84a:	4313      	orrs	r3, r2
 801d84c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801d84e:	4b30      	ldr	r3, [pc, #192]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d852:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	695b      	ldr	r3, [r3, #20]
 801d85a:	492d      	ldr	r1, [pc, #180]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d85c:	4313      	orrs	r3, r2
 801d85e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801d860:	4b2b      	ldr	r3, [pc, #172]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d864:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	699b      	ldr	r3, [r3, #24]
 801d86c:	4928      	ldr	r1, [pc, #160]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d86e:	4313      	orrs	r3, r2
 801d870:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801d872:	4b27      	ldr	r3, [pc, #156]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d876:	4a26      	ldr	r2, [pc, #152]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d87c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801d87e:	4b24      	ldr	r3, [pc, #144]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d882:	4b24      	ldr	r3, [pc, #144]	@ (801d914 <RCCEx_PLL3_Config+0x160>)
 801d884:	4013      	ands	r3, r2
 801d886:	687a      	ldr	r2, [r7, #4]
 801d888:	69d2      	ldr	r2, [r2, #28]
 801d88a:	00d2      	lsls	r2, r2, #3
 801d88c:	4920      	ldr	r1, [pc, #128]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d88e:	4313      	orrs	r3, r2
 801d890:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801d892:	4b1f      	ldr	r3, [pc, #124]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d896:	4a1e      	ldr	r2, [pc, #120]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d89c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801d89e:	683b      	ldr	r3, [r7, #0]
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d106      	bne.n	801d8b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801d8a4:	4b1a      	ldr	r3, [pc, #104]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8a8:	4a19      	ldr	r2, [pc, #100]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801d8ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801d8b0:	e00f      	b.n	801d8d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801d8b2:	683b      	ldr	r3, [r7, #0]
 801d8b4:	2b01      	cmp	r3, #1
 801d8b6:	d106      	bne.n	801d8c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801d8b8:	4b15      	ldr	r3, [pc, #84]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8bc:	4a14      	ldr	r2, [pc, #80]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801d8c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801d8c4:	e005      	b.n	801d8d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801d8c6:	4b12      	ldr	r3, [pc, #72]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8ca:	4a11      	ldr	r2, [pc, #68]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d8d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801d8d2:	4b0f      	ldr	r3, [pc, #60]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	4a0e      	ldr	r2, [pc, #56]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801d8dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d8de:	f7fb ff5f 	bl	80197a0 <HAL_GetTick>
 801d8e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801d8e4:	e008      	b.n	801d8f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801d8e6:	f7fb ff5b 	bl	80197a0 <HAL_GetTick>
 801d8ea:	4602      	mov	r2, r0
 801d8ec:	68bb      	ldr	r3, [r7, #8]
 801d8ee:	1ad3      	subs	r3, r2, r3
 801d8f0:	2b02      	cmp	r3, #2
 801d8f2:	d901      	bls.n	801d8f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801d8f4:	2303      	movs	r3, #3
 801d8f6:	e006      	b.n	801d906 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801d8f8:	4b05      	ldr	r3, [pc, #20]	@ (801d910 <RCCEx_PLL3_Config+0x15c>)
 801d8fa:	681b      	ldr	r3, [r3, #0]
 801d8fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801d900:	2b00      	cmp	r3, #0
 801d902:	d0f0      	beq.n	801d8e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801d904:	7bfb      	ldrb	r3, [r7, #15]
}
 801d906:	4618      	mov	r0, r3
 801d908:	3710      	adds	r7, #16
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bd80      	pop	{r7, pc}
 801d90e:	bf00      	nop
 801d910:	58024400 	.word	0x58024400
 801d914:	ffff0007 	.word	0xffff0007

0801d918 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801d918:	b580      	push	{r7, lr}
 801d91a:	b084      	sub	sp, #16
 801d91c:	af00      	add	r7, sp, #0
 801d91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	2b00      	cmp	r3, #0
 801d924:	d101      	bne.n	801d92a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801d926:	2301      	movs	r3, #1
 801d928:	e054      	b.n	801d9d4 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	7a5b      	ldrb	r3, [r3, #9]
 801d92e:	b2db      	uxtb	r3, r3
 801d930:	2b00      	cmp	r3, #0
 801d932:	d105      	bne.n	801d940 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	2200      	movs	r2, #0
 801d938:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801d93a:	6878      	ldr	r0, [r7, #4]
 801d93c:	f7fb fc62 	bl	8019204 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	2202      	movs	r2, #2
 801d944:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	f023 0120 	bic.w	r1, r3, #32
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	685a      	ldr	r2, [r3, #4]
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	430a      	orrs	r2, r1
 801d95a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	681a      	ldr	r2, [r3, #0]
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	f042 0204 	orr.w	r2, r2, #4
 801d96a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	685b      	ldr	r3, [r3, #4]
 801d972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d976:	2b40      	cmp	r3, #64	@ 0x40
 801d978:	d104      	bne.n	801d984 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	2204      	movs	r2, #4
 801d97e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 801d980:	2301      	movs	r3, #1
 801d982:	e027      	b.n	801d9d4 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 801d984:	f7fb ff0c 	bl	80197a0 <HAL_GetTick>
 801d988:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 801d98a:	e015      	b.n	801d9b8 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801d98c:	f7fb ff08 	bl	80197a0 <HAL_GetTick>
 801d990:	4602      	mov	r2, r0
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	1ad3      	subs	r3, r2, r3
 801d996:	2b02      	cmp	r3, #2
 801d998:	d90e      	bls.n	801d9b8 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	685b      	ldr	r3, [r3, #4]
 801d9a0:	f003 0301 	and.w	r3, r3, #1
 801d9a4:	2b01      	cmp	r3, #1
 801d9a6:	d007      	beq.n	801d9b8 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	2204      	movs	r2, #4
 801d9ac:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	2202      	movs	r2, #2
 801d9b2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 801d9b4:	2301      	movs	r3, #1
 801d9b6:	e00d      	b.n	801d9d4 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	685b      	ldr	r3, [r3, #4]
 801d9be:	f003 0301 	and.w	r3, r3, #1
 801d9c2:	2b01      	cmp	r3, #1
 801d9c4:	d1e2      	bne.n	801d98c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	2201      	movs	r2, #1
 801d9ca:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	2200      	movs	r2, #0
 801d9d0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 801d9d2:	2300      	movs	r3, #0
}
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	3710      	adds	r7, #16
 801d9d8:	46bd      	mov	sp, r7
 801d9da:	bd80      	pop	{r7, pc}

0801d9dc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801d9dc:	b580      	push	{r7, lr}
 801d9de:	b084      	sub	sp, #16
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	6078      	str	r0, [r7, #4]
 801d9e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d9e6:	2300      	movs	r3, #0
 801d9e8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	7a1b      	ldrb	r3, [r3, #8]
 801d9ee:	2b01      	cmp	r3, #1
 801d9f0:	d101      	bne.n	801d9f6 <HAL_RNG_GenerateRandomNumber+0x1a>
 801d9f2:	2302      	movs	r3, #2
 801d9f4:	e044      	b.n	801da80 <HAL_RNG_GenerateRandomNumber+0xa4>
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	2201      	movs	r2, #1
 801d9fa:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	7a5b      	ldrb	r3, [r3, #9]
 801da00:	b2db      	uxtb	r3, r3
 801da02:	2b01      	cmp	r3, #1
 801da04:	d133      	bne.n	801da6e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	2202      	movs	r2, #2
 801da0a:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 801da0c:	f7fb fec8 	bl	80197a0 <HAL_GetTick>
 801da10:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801da12:	e018      	b.n	801da46 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801da14:	f7fb fec4 	bl	80197a0 <HAL_GetTick>
 801da18:	4602      	mov	r2, r0
 801da1a:	68bb      	ldr	r3, [r7, #8]
 801da1c:	1ad3      	subs	r3, r2, r3
 801da1e:	2b02      	cmp	r3, #2
 801da20:	d911      	bls.n	801da46 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	685b      	ldr	r3, [r3, #4]
 801da28:	f003 0301 	and.w	r3, r3, #1
 801da2c:	2b01      	cmp	r3, #1
 801da2e:	d00a      	beq.n	801da46 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	2201      	movs	r2, #1
 801da34:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	2202      	movs	r2, #2
 801da3a:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	2200      	movs	r2, #0
 801da40:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 801da42:	2301      	movs	r3, #1
 801da44:	e01c      	b.n	801da80 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	685b      	ldr	r3, [r3, #4]
 801da4c:	f003 0301 	and.w	r3, r3, #1
 801da50:	2b01      	cmp	r3, #1
 801da52:	d1df      	bne.n	801da14 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	689a      	ldr	r2, [r3, #8]
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	691a      	ldr	r2, [r3, #16]
 801da62:	683b      	ldr	r3, [r7, #0]
 801da64:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	2201      	movs	r2, #1
 801da6a:	725a      	strb	r2, [r3, #9]
 801da6c:	e004      	b.n	801da78 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	2204      	movs	r2, #4
 801da72:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 801da74:	2301      	movs	r3, #1
 801da76:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	2200      	movs	r2, #0
 801da7c:	721a      	strb	r2, [r3, #8]

  return status;
 801da7e:	7bfb      	ldrb	r3, [r7, #15]
}
 801da80:	4618      	mov	r0, r3
 801da82:	3710      	adds	r7, #16
 801da84:	46bd      	mov	sp, r7
 801da86:	bd80      	pop	{r7, pc}

0801da88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b082      	sub	sp, #8
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	2b00      	cmp	r3, #0
 801da94:	d101      	bne.n	801da9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801da96:	2301      	movs	r3, #1
 801da98:	e049      	b.n	801db2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801daa0:	b2db      	uxtb	r3, r3
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d106      	bne.n	801dab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	2200      	movs	r2, #0
 801daaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801daae:	6878      	ldr	r0, [r7, #4]
 801dab0:	f000 f841 	bl	801db36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	2202      	movs	r2, #2
 801dab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	681a      	ldr	r2, [r3, #0]
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	3304      	adds	r3, #4
 801dac4:	4619      	mov	r1, r3
 801dac6:	4610      	mov	r0, r2
 801dac8:	f000 f9e8 	bl	801de9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	2201      	movs	r2, #1
 801dad0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	2201      	movs	r2, #1
 801dad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	2201      	movs	r2, #1
 801dae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	2201      	movs	r2, #1
 801dae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	2201      	movs	r2, #1
 801daf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	2201      	movs	r2, #1
 801daf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	2201      	movs	r2, #1
 801db00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	2201      	movs	r2, #1
 801db08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	2201      	movs	r2, #1
 801db10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	2201      	movs	r2, #1
 801db18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	2201      	movs	r2, #1
 801db20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	2201      	movs	r2, #1
 801db28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801db2c:	2300      	movs	r3, #0
}
 801db2e:	4618      	mov	r0, r3
 801db30:	3708      	adds	r7, #8
 801db32:	46bd      	mov	sp, r7
 801db34:	bd80      	pop	{r7, pc}

0801db36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801db36:	b480      	push	{r7}
 801db38:	b083      	sub	sp, #12
 801db3a:	af00      	add	r7, sp, #0
 801db3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801db3e:	bf00      	nop
 801db40:	370c      	adds	r7, #12
 801db42:	46bd      	mov	sp, r7
 801db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db48:	4770      	bx	lr
	...

0801db4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801db4c:	b480      	push	{r7}
 801db4e:	b085      	sub	sp, #20
 801db50:	af00      	add	r7, sp, #0
 801db52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801db5a:	b2db      	uxtb	r3, r3
 801db5c:	2b01      	cmp	r3, #1
 801db5e:	d001      	beq.n	801db64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801db60:	2301      	movs	r3, #1
 801db62:	e054      	b.n	801dc0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	2202      	movs	r2, #2
 801db68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	68da      	ldr	r2, [r3, #12]
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	f042 0201 	orr.w	r2, r2, #1
 801db7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	4a26      	ldr	r2, [pc, #152]	@ (801dc1c <HAL_TIM_Base_Start_IT+0xd0>)
 801db82:	4293      	cmp	r3, r2
 801db84:	d022      	beq.n	801dbcc <HAL_TIM_Base_Start_IT+0x80>
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801db8e:	d01d      	beq.n	801dbcc <HAL_TIM_Base_Start_IT+0x80>
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	4a22      	ldr	r2, [pc, #136]	@ (801dc20 <HAL_TIM_Base_Start_IT+0xd4>)
 801db96:	4293      	cmp	r3, r2
 801db98:	d018      	beq.n	801dbcc <HAL_TIM_Base_Start_IT+0x80>
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	4a21      	ldr	r2, [pc, #132]	@ (801dc24 <HAL_TIM_Base_Start_IT+0xd8>)
 801dba0:	4293      	cmp	r3, r2
 801dba2:	d013      	beq.n	801dbcc <HAL_TIM_Base_Start_IT+0x80>
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	4a1f      	ldr	r2, [pc, #124]	@ (801dc28 <HAL_TIM_Base_Start_IT+0xdc>)
 801dbaa:	4293      	cmp	r3, r2
 801dbac:	d00e      	beq.n	801dbcc <HAL_TIM_Base_Start_IT+0x80>
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	4a1e      	ldr	r2, [pc, #120]	@ (801dc2c <HAL_TIM_Base_Start_IT+0xe0>)
 801dbb4:	4293      	cmp	r3, r2
 801dbb6:	d009      	beq.n	801dbcc <HAL_TIM_Base_Start_IT+0x80>
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	4a1c      	ldr	r2, [pc, #112]	@ (801dc30 <HAL_TIM_Base_Start_IT+0xe4>)
 801dbbe:	4293      	cmp	r3, r2
 801dbc0:	d004      	beq.n	801dbcc <HAL_TIM_Base_Start_IT+0x80>
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	4a1b      	ldr	r2, [pc, #108]	@ (801dc34 <HAL_TIM_Base_Start_IT+0xe8>)
 801dbc8:	4293      	cmp	r3, r2
 801dbca:	d115      	bne.n	801dbf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	689a      	ldr	r2, [r3, #8]
 801dbd2:	4b19      	ldr	r3, [pc, #100]	@ (801dc38 <HAL_TIM_Base_Start_IT+0xec>)
 801dbd4:	4013      	ands	r3, r2
 801dbd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	2b06      	cmp	r3, #6
 801dbdc:	d015      	beq.n	801dc0a <HAL_TIM_Base_Start_IT+0xbe>
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dbe4:	d011      	beq.n	801dc0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	681a      	ldr	r2, [r3, #0]
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	f042 0201 	orr.w	r2, r2, #1
 801dbf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801dbf6:	e008      	b.n	801dc0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	681b      	ldr	r3, [r3, #0]
 801dbfc:	681a      	ldr	r2, [r3, #0]
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	f042 0201 	orr.w	r2, r2, #1
 801dc06:	601a      	str	r2, [r3, #0]
 801dc08:	e000      	b.n	801dc0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801dc0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801dc0c:	2300      	movs	r3, #0
}
 801dc0e:	4618      	mov	r0, r3
 801dc10:	3714      	adds	r7, #20
 801dc12:	46bd      	mov	sp, r7
 801dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc18:	4770      	bx	lr
 801dc1a:	bf00      	nop
 801dc1c:	40010000 	.word	0x40010000
 801dc20:	40000400 	.word	0x40000400
 801dc24:	40000800 	.word	0x40000800
 801dc28:	40000c00 	.word	0x40000c00
 801dc2c:	40010400 	.word	0x40010400
 801dc30:	40001800 	.word	0x40001800
 801dc34:	40014000 	.word	0x40014000
 801dc38:	00010007 	.word	0x00010007

0801dc3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801dc3c:	b580      	push	{r7, lr}
 801dc3e:	b084      	sub	sp, #16
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	68db      	ldr	r3, [r3, #12]
 801dc4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	691b      	ldr	r3, [r3, #16]
 801dc52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801dc54:	68bb      	ldr	r3, [r7, #8]
 801dc56:	f003 0302 	and.w	r3, r3, #2
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d020      	beq.n	801dca0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	f003 0302 	and.w	r3, r3, #2
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d01b      	beq.n	801dca0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	f06f 0202 	mvn.w	r2, #2
 801dc70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	2201      	movs	r2, #1
 801dc76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	699b      	ldr	r3, [r3, #24]
 801dc7e:	f003 0303 	and.w	r3, r3, #3
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	d003      	beq.n	801dc8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801dc86:	6878      	ldr	r0, [r7, #4]
 801dc88:	f000 f8e9 	bl	801de5e <HAL_TIM_IC_CaptureCallback>
 801dc8c:	e005      	b.n	801dc9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801dc8e:	6878      	ldr	r0, [r7, #4]
 801dc90:	f000 f8db 	bl	801de4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801dc94:	6878      	ldr	r0, [r7, #4]
 801dc96:	f000 f8ec 	bl	801de72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	f003 0304 	and.w	r3, r3, #4
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d020      	beq.n	801dcec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	f003 0304 	and.w	r3, r3, #4
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d01b      	beq.n	801dcec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	f06f 0204 	mvn.w	r2, #4
 801dcbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	2202      	movs	r2, #2
 801dcc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	699b      	ldr	r3, [r3, #24]
 801dcca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d003      	beq.n	801dcda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801dcd2:	6878      	ldr	r0, [r7, #4]
 801dcd4:	f000 f8c3 	bl	801de5e <HAL_TIM_IC_CaptureCallback>
 801dcd8:	e005      	b.n	801dce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801dcda:	6878      	ldr	r0, [r7, #4]
 801dcdc:	f000 f8b5 	bl	801de4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801dce0:	6878      	ldr	r0, [r7, #4]
 801dce2:	f000 f8c6 	bl	801de72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	2200      	movs	r2, #0
 801dcea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801dcec:	68bb      	ldr	r3, [r7, #8]
 801dcee:	f003 0308 	and.w	r3, r3, #8
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d020      	beq.n	801dd38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	f003 0308 	and.w	r3, r3, #8
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d01b      	beq.n	801dd38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	f06f 0208 	mvn.w	r2, #8
 801dd08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	2204      	movs	r2, #4
 801dd0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	69db      	ldr	r3, [r3, #28]
 801dd16:	f003 0303 	and.w	r3, r3, #3
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d003      	beq.n	801dd26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801dd1e:	6878      	ldr	r0, [r7, #4]
 801dd20:	f000 f89d 	bl	801de5e <HAL_TIM_IC_CaptureCallback>
 801dd24:	e005      	b.n	801dd32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801dd26:	6878      	ldr	r0, [r7, #4]
 801dd28:	f000 f88f 	bl	801de4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801dd2c:	6878      	ldr	r0, [r7, #4]
 801dd2e:	f000 f8a0 	bl	801de72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	2200      	movs	r2, #0
 801dd36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801dd38:	68bb      	ldr	r3, [r7, #8]
 801dd3a:	f003 0310 	and.w	r3, r3, #16
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d020      	beq.n	801dd84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	f003 0310 	and.w	r3, r3, #16
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d01b      	beq.n	801dd84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	f06f 0210 	mvn.w	r2, #16
 801dd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	2208      	movs	r2, #8
 801dd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	681b      	ldr	r3, [r3, #0]
 801dd60:	69db      	ldr	r3, [r3, #28]
 801dd62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	d003      	beq.n	801dd72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801dd6a:	6878      	ldr	r0, [r7, #4]
 801dd6c:	f000 f877 	bl	801de5e <HAL_TIM_IC_CaptureCallback>
 801dd70:	e005      	b.n	801dd7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801dd72:	6878      	ldr	r0, [r7, #4]
 801dd74:	f000 f869 	bl	801de4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801dd78:	6878      	ldr	r0, [r7, #4]
 801dd7a:	f000 f87a 	bl	801de72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	2200      	movs	r2, #0
 801dd82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801dd84:	68bb      	ldr	r3, [r7, #8]
 801dd86:	f003 0301 	and.w	r3, r3, #1
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d00c      	beq.n	801dda8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	f003 0301 	and.w	r3, r3, #1
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d007      	beq.n	801dda8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	f06f 0201 	mvn.w	r2, #1
 801dda0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801dda2:	6878      	ldr	r0, [r7, #4]
 801dda4:	f7e3 f9da 	bl	800115c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801dda8:	68bb      	ldr	r3, [r7, #8]
 801ddaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d104      	bne.n	801ddbc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801ddb2:	68bb      	ldr	r3, [r7, #8]
 801ddb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801ddb8:	2b00      	cmp	r3, #0
 801ddba:	d00c      	beq.n	801ddd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d007      	beq.n	801ddd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801ddce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801ddd0:	6878      	ldr	r0, [r7, #4]
 801ddd2:	f000 f90d 	bl	801dff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801ddd6:	68bb      	ldr	r3, [r7, #8]
 801ddd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d00c      	beq.n	801ddfa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801dde0:	68fb      	ldr	r3, [r7, #12]
 801dde2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d007      	beq.n	801ddfa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801ddf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801ddf4:	6878      	ldr	r0, [r7, #4]
 801ddf6:	f000 f905 	bl	801e004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801ddfa:	68bb      	ldr	r3, [r7, #8]
 801ddfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801de00:	2b00      	cmp	r3, #0
 801de02:	d00c      	beq.n	801de1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d007      	beq.n	801de1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801de16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801de18:	6878      	ldr	r0, [r7, #4]
 801de1a:	f000 f834 	bl	801de86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801de1e:	68bb      	ldr	r3, [r7, #8]
 801de20:	f003 0320 	and.w	r3, r3, #32
 801de24:	2b00      	cmp	r3, #0
 801de26:	d00c      	beq.n	801de42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	f003 0320 	and.w	r3, r3, #32
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d007      	beq.n	801de42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	f06f 0220 	mvn.w	r2, #32
 801de3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801de3c:	6878      	ldr	r0, [r7, #4]
 801de3e:	f000 f8cd 	bl	801dfdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801de42:	bf00      	nop
 801de44:	3710      	adds	r7, #16
 801de46:	46bd      	mov	sp, r7
 801de48:	bd80      	pop	{r7, pc}

0801de4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801de4a:	b480      	push	{r7}
 801de4c:	b083      	sub	sp, #12
 801de4e:	af00      	add	r7, sp, #0
 801de50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801de52:	bf00      	nop
 801de54:	370c      	adds	r7, #12
 801de56:	46bd      	mov	sp, r7
 801de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de5c:	4770      	bx	lr

0801de5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801de5e:	b480      	push	{r7}
 801de60:	b083      	sub	sp, #12
 801de62:	af00      	add	r7, sp, #0
 801de64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801de66:	bf00      	nop
 801de68:	370c      	adds	r7, #12
 801de6a:	46bd      	mov	sp, r7
 801de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de70:	4770      	bx	lr

0801de72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801de72:	b480      	push	{r7}
 801de74:	b083      	sub	sp, #12
 801de76:	af00      	add	r7, sp, #0
 801de78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801de7a:	bf00      	nop
 801de7c:	370c      	adds	r7, #12
 801de7e:	46bd      	mov	sp, r7
 801de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de84:	4770      	bx	lr

0801de86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801de86:	b480      	push	{r7}
 801de88:	b083      	sub	sp, #12
 801de8a:	af00      	add	r7, sp, #0
 801de8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801de8e:	bf00      	nop
 801de90:	370c      	adds	r7, #12
 801de92:	46bd      	mov	sp, r7
 801de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de98:	4770      	bx	lr
	...

0801de9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801de9c:	b480      	push	{r7}
 801de9e:	b085      	sub	sp, #20
 801dea0:	af00      	add	r7, sp, #0
 801dea2:	6078      	str	r0, [r7, #4]
 801dea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	4a43      	ldr	r2, [pc, #268]	@ (801dfbc <TIM_Base_SetConfig+0x120>)
 801deb0:	4293      	cmp	r3, r2
 801deb2:	d013      	beq.n	801dedc <TIM_Base_SetConfig+0x40>
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801deba:	d00f      	beq.n	801dedc <TIM_Base_SetConfig+0x40>
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	4a40      	ldr	r2, [pc, #256]	@ (801dfc0 <TIM_Base_SetConfig+0x124>)
 801dec0:	4293      	cmp	r3, r2
 801dec2:	d00b      	beq.n	801dedc <TIM_Base_SetConfig+0x40>
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	4a3f      	ldr	r2, [pc, #252]	@ (801dfc4 <TIM_Base_SetConfig+0x128>)
 801dec8:	4293      	cmp	r3, r2
 801deca:	d007      	beq.n	801dedc <TIM_Base_SetConfig+0x40>
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	4a3e      	ldr	r2, [pc, #248]	@ (801dfc8 <TIM_Base_SetConfig+0x12c>)
 801ded0:	4293      	cmp	r3, r2
 801ded2:	d003      	beq.n	801dedc <TIM_Base_SetConfig+0x40>
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	4a3d      	ldr	r2, [pc, #244]	@ (801dfcc <TIM_Base_SetConfig+0x130>)
 801ded8:	4293      	cmp	r3, r2
 801deda:	d108      	bne.n	801deee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801dee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801dee4:	683b      	ldr	r3, [r7, #0]
 801dee6:	685b      	ldr	r3, [r3, #4]
 801dee8:	68fa      	ldr	r2, [r7, #12]
 801deea:	4313      	orrs	r3, r2
 801deec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	4a32      	ldr	r2, [pc, #200]	@ (801dfbc <TIM_Base_SetConfig+0x120>)
 801def2:	4293      	cmp	r3, r2
 801def4:	d01f      	beq.n	801df36 <TIM_Base_SetConfig+0x9a>
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801defc:	d01b      	beq.n	801df36 <TIM_Base_SetConfig+0x9a>
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	4a2f      	ldr	r2, [pc, #188]	@ (801dfc0 <TIM_Base_SetConfig+0x124>)
 801df02:	4293      	cmp	r3, r2
 801df04:	d017      	beq.n	801df36 <TIM_Base_SetConfig+0x9a>
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	4a2e      	ldr	r2, [pc, #184]	@ (801dfc4 <TIM_Base_SetConfig+0x128>)
 801df0a:	4293      	cmp	r3, r2
 801df0c:	d013      	beq.n	801df36 <TIM_Base_SetConfig+0x9a>
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	4a2d      	ldr	r2, [pc, #180]	@ (801dfc8 <TIM_Base_SetConfig+0x12c>)
 801df12:	4293      	cmp	r3, r2
 801df14:	d00f      	beq.n	801df36 <TIM_Base_SetConfig+0x9a>
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	4a2c      	ldr	r2, [pc, #176]	@ (801dfcc <TIM_Base_SetConfig+0x130>)
 801df1a:	4293      	cmp	r3, r2
 801df1c:	d00b      	beq.n	801df36 <TIM_Base_SetConfig+0x9a>
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	4a2b      	ldr	r2, [pc, #172]	@ (801dfd0 <TIM_Base_SetConfig+0x134>)
 801df22:	4293      	cmp	r3, r2
 801df24:	d007      	beq.n	801df36 <TIM_Base_SetConfig+0x9a>
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	4a2a      	ldr	r2, [pc, #168]	@ (801dfd4 <TIM_Base_SetConfig+0x138>)
 801df2a:	4293      	cmp	r3, r2
 801df2c:	d003      	beq.n	801df36 <TIM_Base_SetConfig+0x9a>
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	4a29      	ldr	r2, [pc, #164]	@ (801dfd8 <TIM_Base_SetConfig+0x13c>)
 801df32:	4293      	cmp	r3, r2
 801df34:	d108      	bne.n	801df48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801df3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801df3e:	683b      	ldr	r3, [r7, #0]
 801df40:	68db      	ldr	r3, [r3, #12]
 801df42:	68fa      	ldr	r2, [r7, #12]
 801df44:	4313      	orrs	r3, r2
 801df46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801df48:	68fb      	ldr	r3, [r7, #12]
 801df4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801df4e:	683b      	ldr	r3, [r7, #0]
 801df50:	695b      	ldr	r3, [r3, #20]
 801df52:	4313      	orrs	r3, r2
 801df54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801df56:	683b      	ldr	r3, [r7, #0]
 801df58:	689a      	ldr	r2, [r3, #8]
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801df5e:	683b      	ldr	r3, [r7, #0]
 801df60:	681a      	ldr	r2, [r3, #0]
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	4a14      	ldr	r2, [pc, #80]	@ (801dfbc <TIM_Base_SetConfig+0x120>)
 801df6a:	4293      	cmp	r3, r2
 801df6c:	d00f      	beq.n	801df8e <TIM_Base_SetConfig+0xf2>
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	4a16      	ldr	r2, [pc, #88]	@ (801dfcc <TIM_Base_SetConfig+0x130>)
 801df72:	4293      	cmp	r3, r2
 801df74:	d00b      	beq.n	801df8e <TIM_Base_SetConfig+0xf2>
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	4a15      	ldr	r2, [pc, #84]	@ (801dfd0 <TIM_Base_SetConfig+0x134>)
 801df7a:	4293      	cmp	r3, r2
 801df7c:	d007      	beq.n	801df8e <TIM_Base_SetConfig+0xf2>
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	4a14      	ldr	r2, [pc, #80]	@ (801dfd4 <TIM_Base_SetConfig+0x138>)
 801df82:	4293      	cmp	r3, r2
 801df84:	d003      	beq.n	801df8e <TIM_Base_SetConfig+0xf2>
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	4a13      	ldr	r2, [pc, #76]	@ (801dfd8 <TIM_Base_SetConfig+0x13c>)
 801df8a:	4293      	cmp	r3, r2
 801df8c:	d103      	bne.n	801df96 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801df8e:	683b      	ldr	r3, [r7, #0]
 801df90:	691a      	ldr	r2, [r3, #16]
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	f043 0204 	orr.w	r2, r3, #4
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	2201      	movs	r2, #1
 801dfa6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	68fa      	ldr	r2, [r7, #12]
 801dfac:	601a      	str	r2, [r3, #0]
}
 801dfae:	bf00      	nop
 801dfb0:	3714      	adds	r7, #20
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfb8:	4770      	bx	lr
 801dfba:	bf00      	nop
 801dfbc:	40010000 	.word	0x40010000
 801dfc0:	40000400 	.word	0x40000400
 801dfc4:	40000800 	.word	0x40000800
 801dfc8:	40000c00 	.word	0x40000c00
 801dfcc:	40010400 	.word	0x40010400
 801dfd0:	40014000 	.word	0x40014000
 801dfd4:	40014400 	.word	0x40014400
 801dfd8:	40014800 	.word	0x40014800

0801dfdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dfdc:	b480      	push	{r7}
 801dfde:	b083      	sub	sp, #12
 801dfe0:	af00      	add	r7, sp, #0
 801dfe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801dfe4:	bf00      	nop
 801dfe6:	370c      	adds	r7, #12
 801dfe8:	46bd      	mov	sp, r7
 801dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfee:	4770      	bx	lr

0801dff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801dff0:	b480      	push	{r7}
 801dff2:	b083      	sub	sp, #12
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801dff8:	bf00      	nop
 801dffa:	370c      	adds	r7, #12
 801dffc:	46bd      	mov	sp, r7
 801dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e002:	4770      	bx	lr

0801e004 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e004:	b480      	push	{r7}
 801e006:	b083      	sub	sp, #12
 801e008:	af00      	add	r7, sp, #0
 801e00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e00c:	bf00      	nop
 801e00e:	370c      	adds	r7, #12
 801e010:	46bd      	mov	sp, r7
 801e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e016:	4770      	bx	lr

0801e018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e018:	b580      	push	{r7, lr}
 801e01a:	b082      	sub	sp, #8
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	2b00      	cmp	r3, #0
 801e024:	d101      	bne.n	801e02a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e026:	2301      	movs	r3, #1
 801e028:	e042      	b.n	801e0b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e030:	2b00      	cmp	r3, #0
 801e032:	d106      	bne.n	801e042 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	2200      	movs	r2, #0
 801e038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e03c:	6878      	ldr	r0, [r7, #4]
 801e03e:	f7fb f91b 	bl	8019278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	2224      	movs	r2, #36	@ 0x24
 801e046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	681b      	ldr	r3, [r3, #0]
 801e04e:	681a      	ldr	r2, [r3, #0]
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	681b      	ldr	r3, [r3, #0]
 801e054:	f022 0201 	bic.w	r2, r2, #1
 801e058:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d002      	beq.n	801e068 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801e062:	6878      	ldr	r0, [r7, #4]
 801e064:	f000 fe1e 	bl	801eca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e068:	6878      	ldr	r0, [r7, #4]
 801e06a:	f000 f8b3 	bl	801e1d4 <UART_SetConfig>
 801e06e:	4603      	mov	r3, r0
 801e070:	2b01      	cmp	r3, #1
 801e072:	d101      	bne.n	801e078 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801e074:	2301      	movs	r3, #1
 801e076:	e01b      	b.n	801e0b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	685a      	ldr	r2, [r3, #4]
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801e086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	689a      	ldr	r2, [r3, #8]
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801e096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	681a      	ldr	r2, [r3, #0]
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	681b      	ldr	r3, [r3, #0]
 801e0a2:	f042 0201 	orr.w	r2, r2, #1
 801e0a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e0a8:	6878      	ldr	r0, [r7, #4]
 801e0aa:	f000 fe9d 	bl	801ede8 <UART_CheckIdleState>
 801e0ae:	4603      	mov	r3, r0
}
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	3708      	adds	r7, #8
 801e0b4:	46bd      	mov	sp, r7
 801e0b6:	bd80      	pop	{r7, pc}

0801e0b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e0b8:	b580      	push	{r7, lr}
 801e0ba:	b08a      	sub	sp, #40	@ 0x28
 801e0bc:	af02      	add	r7, sp, #8
 801e0be:	60f8      	str	r0, [r7, #12]
 801e0c0:	60b9      	str	r1, [r7, #8]
 801e0c2:	603b      	str	r3, [r7, #0]
 801e0c4:	4613      	mov	r3, r2
 801e0c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e0ce:	2b20      	cmp	r3, #32
 801e0d0:	d17b      	bne.n	801e1ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801e0d2:	68bb      	ldr	r3, [r7, #8]
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d002      	beq.n	801e0de <HAL_UART_Transmit+0x26>
 801e0d8:	88fb      	ldrh	r3, [r7, #6]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d101      	bne.n	801e0e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801e0de:	2301      	movs	r3, #1
 801e0e0:	e074      	b.n	801e1cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	2221      	movs	r2, #33	@ 0x21
 801e0ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e0f2:	f7fb fb55 	bl	80197a0 <HAL_GetTick>
 801e0f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	88fa      	ldrh	r2, [r7, #6]
 801e0fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801e100:	68fb      	ldr	r3, [r7, #12]
 801e102:	88fa      	ldrh	r2, [r7, #6]
 801e104:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	689b      	ldr	r3, [r3, #8]
 801e10c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e110:	d108      	bne.n	801e124 <HAL_UART_Transmit+0x6c>
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	691b      	ldr	r3, [r3, #16]
 801e116:	2b00      	cmp	r3, #0
 801e118:	d104      	bne.n	801e124 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801e11a:	2300      	movs	r3, #0
 801e11c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e11e:	68bb      	ldr	r3, [r7, #8]
 801e120:	61bb      	str	r3, [r7, #24]
 801e122:	e003      	b.n	801e12c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801e124:	68bb      	ldr	r3, [r7, #8]
 801e126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e128:	2300      	movs	r3, #0
 801e12a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801e12c:	e030      	b.n	801e190 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e12e:	683b      	ldr	r3, [r7, #0]
 801e130:	9300      	str	r3, [sp, #0]
 801e132:	697b      	ldr	r3, [r7, #20]
 801e134:	2200      	movs	r2, #0
 801e136:	2180      	movs	r1, #128	@ 0x80
 801e138:	68f8      	ldr	r0, [r7, #12]
 801e13a:	f000 feff 	bl	801ef3c <UART_WaitOnFlagUntilTimeout>
 801e13e:	4603      	mov	r3, r0
 801e140:	2b00      	cmp	r3, #0
 801e142:	d005      	beq.n	801e150 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	2220      	movs	r2, #32
 801e148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801e14c:	2303      	movs	r3, #3
 801e14e:	e03d      	b.n	801e1cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801e150:	69fb      	ldr	r3, [r7, #28]
 801e152:	2b00      	cmp	r3, #0
 801e154:	d10b      	bne.n	801e16e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e156:	69bb      	ldr	r3, [r7, #24]
 801e158:	881b      	ldrh	r3, [r3, #0]
 801e15a:	461a      	mov	r2, r3
 801e15c:	68fb      	ldr	r3, [r7, #12]
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e164:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801e166:	69bb      	ldr	r3, [r7, #24]
 801e168:	3302      	adds	r3, #2
 801e16a:	61bb      	str	r3, [r7, #24]
 801e16c:	e007      	b.n	801e17e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e16e:	69fb      	ldr	r3, [r7, #28]
 801e170:	781a      	ldrb	r2, [r3, #0]
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801e178:	69fb      	ldr	r3, [r7, #28]
 801e17a:	3301      	adds	r3, #1
 801e17c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801e184:	b29b      	uxth	r3, r3
 801e186:	3b01      	subs	r3, #1
 801e188:	b29a      	uxth	r2, r3
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801e196:	b29b      	uxth	r3, r3
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d1c8      	bne.n	801e12e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e19c:	683b      	ldr	r3, [r7, #0]
 801e19e:	9300      	str	r3, [sp, #0]
 801e1a0:	697b      	ldr	r3, [r7, #20]
 801e1a2:	2200      	movs	r2, #0
 801e1a4:	2140      	movs	r1, #64	@ 0x40
 801e1a6:	68f8      	ldr	r0, [r7, #12]
 801e1a8:	f000 fec8 	bl	801ef3c <UART_WaitOnFlagUntilTimeout>
 801e1ac:	4603      	mov	r3, r0
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d005      	beq.n	801e1be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	2220      	movs	r2, #32
 801e1b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801e1ba:	2303      	movs	r3, #3
 801e1bc:	e006      	b.n	801e1cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	2220      	movs	r2, #32
 801e1c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801e1c6:	2300      	movs	r3, #0
 801e1c8:	e000      	b.n	801e1cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801e1ca:	2302      	movs	r3, #2
  }
}
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	3720      	adds	r7, #32
 801e1d0:	46bd      	mov	sp, r7
 801e1d2:	bd80      	pop	{r7, pc}

0801e1d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e1d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e1d8:	b092      	sub	sp, #72	@ 0x48
 801e1da:	af00      	add	r7, sp, #0
 801e1dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e1de:	2300      	movs	r3, #0
 801e1e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e1e4:	697b      	ldr	r3, [r7, #20]
 801e1e6:	689a      	ldr	r2, [r3, #8]
 801e1e8:	697b      	ldr	r3, [r7, #20]
 801e1ea:	691b      	ldr	r3, [r3, #16]
 801e1ec:	431a      	orrs	r2, r3
 801e1ee:	697b      	ldr	r3, [r7, #20]
 801e1f0:	695b      	ldr	r3, [r3, #20]
 801e1f2:	431a      	orrs	r2, r3
 801e1f4:	697b      	ldr	r3, [r7, #20]
 801e1f6:	69db      	ldr	r3, [r3, #28]
 801e1f8:	4313      	orrs	r3, r2
 801e1fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e1fc:	697b      	ldr	r3, [r7, #20]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	681a      	ldr	r2, [r3, #0]
 801e202:	4bbe      	ldr	r3, [pc, #760]	@ (801e4fc <UART_SetConfig+0x328>)
 801e204:	4013      	ands	r3, r2
 801e206:	697a      	ldr	r2, [r7, #20]
 801e208:	6812      	ldr	r2, [r2, #0]
 801e20a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801e20c:	430b      	orrs	r3, r1
 801e20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e210:	697b      	ldr	r3, [r7, #20]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	685b      	ldr	r3, [r3, #4]
 801e216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e21a:	697b      	ldr	r3, [r7, #20]
 801e21c:	68da      	ldr	r2, [r3, #12]
 801e21e:	697b      	ldr	r3, [r7, #20]
 801e220:	681b      	ldr	r3, [r3, #0]
 801e222:	430a      	orrs	r2, r1
 801e224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e226:	697b      	ldr	r3, [r7, #20]
 801e228:	699b      	ldr	r3, [r3, #24]
 801e22a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e22c:	697b      	ldr	r3, [r7, #20]
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	4ab3      	ldr	r2, [pc, #716]	@ (801e500 <UART_SetConfig+0x32c>)
 801e232:	4293      	cmp	r3, r2
 801e234:	d004      	beq.n	801e240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e236:	697b      	ldr	r3, [r7, #20]
 801e238:	6a1b      	ldr	r3, [r3, #32]
 801e23a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e23c:	4313      	orrs	r3, r2
 801e23e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e240:	697b      	ldr	r3, [r7, #20]
 801e242:	681b      	ldr	r3, [r3, #0]
 801e244:	689a      	ldr	r2, [r3, #8]
 801e246:	4baf      	ldr	r3, [pc, #700]	@ (801e504 <UART_SetConfig+0x330>)
 801e248:	4013      	ands	r3, r2
 801e24a:	697a      	ldr	r2, [r7, #20]
 801e24c:	6812      	ldr	r2, [r2, #0]
 801e24e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801e250:	430b      	orrs	r3, r1
 801e252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801e254:	697b      	ldr	r3, [r7, #20]
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e25a:	f023 010f 	bic.w	r1, r3, #15
 801e25e:	697b      	ldr	r3, [r7, #20]
 801e260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e262:	697b      	ldr	r3, [r7, #20]
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	430a      	orrs	r2, r1
 801e268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e26a:	697b      	ldr	r3, [r7, #20]
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	4aa6      	ldr	r2, [pc, #664]	@ (801e508 <UART_SetConfig+0x334>)
 801e270:	4293      	cmp	r3, r2
 801e272:	d177      	bne.n	801e364 <UART_SetConfig+0x190>
 801e274:	4ba5      	ldr	r3, [pc, #660]	@ (801e50c <UART_SetConfig+0x338>)
 801e276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e278:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801e27c:	2b28      	cmp	r3, #40	@ 0x28
 801e27e:	d86d      	bhi.n	801e35c <UART_SetConfig+0x188>
 801e280:	a201      	add	r2, pc, #4	@ (adr r2, 801e288 <UART_SetConfig+0xb4>)
 801e282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e286:	bf00      	nop
 801e288:	0801e32d 	.word	0x0801e32d
 801e28c:	0801e35d 	.word	0x0801e35d
 801e290:	0801e35d 	.word	0x0801e35d
 801e294:	0801e35d 	.word	0x0801e35d
 801e298:	0801e35d 	.word	0x0801e35d
 801e29c:	0801e35d 	.word	0x0801e35d
 801e2a0:	0801e35d 	.word	0x0801e35d
 801e2a4:	0801e35d 	.word	0x0801e35d
 801e2a8:	0801e335 	.word	0x0801e335
 801e2ac:	0801e35d 	.word	0x0801e35d
 801e2b0:	0801e35d 	.word	0x0801e35d
 801e2b4:	0801e35d 	.word	0x0801e35d
 801e2b8:	0801e35d 	.word	0x0801e35d
 801e2bc:	0801e35d 	.word	0x0801e35d
 801e2c0:	0801e35d 	.word	0x0801e35d
 801e2c4:	0801e35d 	.word	0x0801e35d
 801e2c8:	0801e33d 	.word	0x0801e33d
 801e2cc:	0801e35d 	.word	0x0801e35d
 801e2d0:	0801e35d 	.word	0x0801e35d
 801e2d4:	0801e35d 	.word	0x0801e35d
 801e2d8:	0801e35d 	.word	0x0801e35d
 801e2dc:	0801e35d 	.word	0x0801e35d
 801e2e0:	0801e35d 	.word	0x0801e35d
 801e2e4:	0801e35d 	.word	0x0801e35d
 801e2e8:	0801e345 	.word	0x0801e345
 801e2ec:	0801e35d 	.word	0x0801e35d
 801e2f0:	0801e35d 	.word	0x0801e35d
 801e2f4:	0801e35d 	.word	0x0801e35d
 801e2f8:	0801e35d 	.word	0x0801e35d
 801e2fc:	0801e35d 	.word	0x0801e35d
 801e300:	0801e35d 	.word	0x0801e35d
 801e304:	0801e35d 	.word	0x0801e35d
 801e308:	0801e34d 	.word	0x0801e34d
 801e30c:	0801e35d 	.word	0x0801e35d
 801e310:	0801e35d 	.word	0x0801e35d
 801e314:	0801e35d 	.word	0x0801e35d
 801e318:	0801e35d 	.word	0x0801e35d
 801e31c:	0801e35d 	.word	0x0801e35d
 801e320:	0801e35d 	.word	0x0801e35d
 801e324:	0801e35d 	.word	0x0801e35d
 801e328:	0801e355 	.word	0x0801e355
 801e32c:	2301      	movs	r3, #1
 801e32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e332:	e222      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e334:	2304      	movs	r3, #4
 801e336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e33a:	e21e      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e33c:	2308      	movs	r3, #8
 801e33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e342:	e21a      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e344:	2310      	movs	r3, #16
 801e346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e34a:	e216      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e34c:	2320      	movs	r3, #32
 801e34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e352:	e212      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e354:	2340      	movs	r3, #64	@ 0x40
 801e356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e35a:	e20e      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e35c:	2380      	movs	r3, #128	@ 0x80
 801e35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e362:	e20a      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e364:	697b      	ldr	r3, [r7, #20]
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	4a69      	ldr	r2, [pc, #420]	@ (801e510 <UART_SetConfig+0x33c>)
 801e36a:	4293      	cmp	r3, r2
 801e36c:	d130      	bne.n	801e3d0 <UART_SetConfig+0x1fc>
 801e36e:	4b67      	ldr	r3, [pc, #412]	@ (801e50c <UART_SetConfig+0x338>)
 801e370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e372:	f003 0307 	and.w	r3, r3, #7
 801e376:	2b05      	cmp	r3, #5
 801e378:	d826      	bhi.n	801e3c8 <UART_SetConfig+0x1f4>
 801e37a:	a201      	add	r2, pc, #4	@ (adr r2, 801e380 <UART_SetConfig+0x1ac>)
 801e37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e380:	0801e399 	.word	0x0801e399
 801e384:	0801e3a1 	.word	0x0801e3a1
 801e388:	0801e3a9 	.word	0x0801e3a9
 801e38c:	0801e3b1 	.word	0x0801e3b1
 801e390:	0801e3b9 	.word	0x0801e3b9
 801e394:	0801e3c1 	.word	0x0801e3c1
 801e398:	2300      	movs	r3, #0
 801e39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e39e:	e1ec      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e3a0:	2304      	movs	r3, #4
 801e3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e3a6:	e1e8      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e3a8:	2308      	movs	r3, #8
 801e3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e3ae:	e1e4      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e3b0:	2310      	movs	r3, #16
 801e3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e3b6:	e1e0      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e3b8:	2320      	movs	r3, #32
 801e3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e3be:	e1dc      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e3c0:	2340      	movs	r3, #64	@ 0x40
 801e3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e3c6:	e1d8      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e3c8:	2380      	movs	r3, #128	@ 0x80
 801e3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e3ce:	e1d4      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e3d0:	697b      	ldr	r3, [r7, #20]
 801e3d2:	681b      	ldr	r3, [r3, #0]
 801e3d4:	4a4f      	ldr	r2, [pc, #316]	@ (801e514 <UART_SetConfig+0x340>)
 801e3d6:	4293      	cmp	r3, r2
 801e3d8:	d130      	bne.n	801e43c <UART_SetConfig+0x268>
 801e3da:	4b4c      	ldr	r3, [pc, #304]	@ (801e50c <UART_SetConfig+0x338>)
 801e3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e3de:	f003 0307 	and.w	r3, r3, #7
 801e3e2:	2b05      	cmp	r3, #5
 801e3e4:	d826      	bhi.n	801e434 <UART_SetConfig+0x260>
 801e3e6:	a201      	add	r2, pc, #4	@ (adr r2, 801e3ec <UART_SetConfig+0x218>)
 801e3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e3ec:	0801e405 	.word	0x0801e405
 801e3f0:	0801e40d 	.word	0x0801e40d
 801e3f4:	0801e415 	.word	0x0801e415
 801e3f8:	0801e41d 	.word	0x0801e41d
 801e3fc:	0801e425 	.word	0x0801e425
 801e400:	0801e42d 	.word	0x0801e42d
 801e404:	2300      	movs	r3, #0
 801e406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e40a:	e1b6      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e40c:	2304      	movs	r3, #4
 801e40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e412:	e1b2      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e414:	2308      	movs	r3, #8
 801e416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e41a:	e1ae      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e41c:	2310      	movs	r3, #16
 801e41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e422:	e1aa      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e424:	2320      	movs	r3, #32
 801e426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e42a:	e1a6      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e42c:	2340      	movs	r3, #64	@ 0x40
 801e42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e432:	e1a2      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e434:	2380      	movs	r3, #128	@ 0x80
 801e436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e43a:	e19e      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e43c:	697b      	ldr	r3, [r7, #20]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	4a35      	ldr	r2, [pc, #212]	@ (801e518 <UART_SetConfig+0x344>)
 801e442:	4293      	cmp	r3, r2
 801e444:	d130      	bne.n	801e4a8 <UART_SetConfig+0x2d4>
 801e446:	4b31      	ldr	r3, [pc, #196]	@ (801e50c <UART_SetConfig+0x338>)
 801e448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e44a:	f003 0307 	and.w	r3, r3, #7
 801e44e:	2b05      	cmp	r3, #5
 801e450:	d826      	bhi.n	801e4a0 <UART_SetConfig+0x2cc>
 801e452:	a201      	add	r2, pc, #4	@ (adr r2, 801e458 <UART_SetConfig+0x284>)
 801e454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e458:	0801e471 	.word	0x0801e471
 801e45c:	0801e479 	.word	0x0801e479
 801e460:	0801e481 	.word	0x0801e481
 801e464:	0801e489 	.word	0x0801e489
 801e468:	0801e491 	.word	0x0801e491
 801e46c:	0801e499 	.word	0x0801e499
 801e470:	2300      	movs	r3, #0
 801e472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e476:	e180      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e478:	2304      	movs	r3, #4
 801e47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e47e:	e17c      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e480:	2308      	movs	r3, #8
 801e482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e486:	e178      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e488:	2310      	movs	r3, #16
 801e48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e48e:	e174      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e490:	2320      	movs	r3, #32
 801e492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e496:	e170      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e498:	2340      	movs	r3, #64	@ 0x40
 801e49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e49e:	e16c      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e4a0:	2380      	movs	r3, #128	@ 0x80
 801e4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e4a6:	e168      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e4a8:	697b      	ldr	r3, [r7, #20]
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	4a1b      	ldr	r2, [pc, #108]	@ (801e51c <UART_SetConfig+0x348>)
 801e4ae:	4293      	cmp	r3, r2
 801e4b0:	d142      	bne.n	801e538 <UART_SetConfig+0x364>
 801e4b2:	4b16      	ldr	r3, [pc, #88]	@ (801e50c <UART_SetConfig+0x338>)
 801e4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e4b6:	f003 0307 	and.w	r3, r3, #7
 801e4ba:	2b05      	cmp	r3, #5
 801e4bc:	d838      	bhi.n	801e530 <UART_SetConfig+0x35c>
 801e4be:	a201      	add	r2, pc, #4	@ (adr r2, 801e4c4 <UART_SetConfig+0x2f0>)
 801e4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4c4:	0801e4dd 	.word	0x0801e4dd
 801e4c8:	0801e4e5 	.word	0x0801e4e5
 801e4cc:	0801e4ed 	.word	0x0801e4ed
 801e4d0:	0801e4f5 	.word	0x0801e4f5
 801e4d4:	0801e521 	.word	0x0801e521
 801e4d8:	0801e529 	.word	0x0801e529
 801e4dc:	2300      	movs	r3, #0
 801e4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e4e2:	e14a      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e4e4:	2304      	movs	r3, #4
 801e4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e4ea:	e146      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e4ec:	2308      	movs	r3, #8
 801e4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e4f2:	e142      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e4f4:	2310      	movs	r3, #16
 801e4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e4fa:	e13e      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e4fc:	cfff69f3 	.word	0xcfff69f3
 801e500:	58000c00 	.word	0x58000c00
 801e504:	11fff4ff 	.word	0x11fff4ff
 801e508:	40011000 	.word	0x40011000
 801e50c:	58024400 	.word	0x58024400
 801e510:	40004400 	.word	0x40004400
 801e514:	40004800 	.word	0x40004800
 801e518:	40004c00 	.word	0x40004c00
 801e51c:	40005000 	.word	0x40005000
 801e520:	2320      	movs	r3, #32
 801e522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e526:	e128      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e528:	2340      	movs	r3, #64	@ 0x40
 801e52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e52e:	e124      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e530:	2380      	movs	r3, #128	@ 0x80
 801e532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e536:	e120      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e538:	697b      	ldr	r3, [r7, #20]
 801e53a:	681b      	ldr	r3, [r3, #0]
 801e53c:	4acb      	ldr	r2, [pc, #812]	@ (801e86c <UART_SetConfig+0x698>)
 801e53e:	4293      	cmp	r3, r2
 801e540:	d176      	bne.n	801e630 <UART_SetConfig+0x45c>
 801e542:	4bcb      	ldr	r3, [pc, #812]	@ (801e870 <UART_SetConfig+0x69c>)
 801e544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801e54a:	2b28      	cmp	r3, #40	@ 0x28
 801e54c:	d86c      	bhi.n	801e628 <UART_SetConfig+0x454>
 801e54e:	a201      	add	r2, pc, #4	@ (adr r2, 801e554 <UART_SetConfig+0x380>)
 801e550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e554:	0801e5f9 	.word	0x0801e5f9
 801e558:	0801e629 	.word	0x0801e629
 801e55c:	0801e629 	.word	0x0801e629
 801e560:	0801e629 	.word	0x0801e629
 801e564:	0801e629 	.word	0x0801e629
 801e568:	0801e629 	.word	0x0801e629
 801e56c:	0801e629 	.word	0x0801e629
 801e570:	0801e629 	.word	0x0801e629
 801e574:	0801e601 	.word	0x0801e601
 801e578:	0801e629 	.word	0x0801e629
 801e57c:	0801e629 	.word	0x0801e629
 801e580:	0801e629 	.word	0x0801e629
 801e584:	0801e629 	.word	0x0801e629
 801e588:	0801e629 	.word	0x0801e629
 801e58c:	0801e629 	.word	0x0801e629
 801e590:	0801e629 	.word	0x0801e629
 801e594:	0801e609 	.word	0x0801e609
 801e598:	0801e629 	.word	0x0801e629
 801e59c:	0801e629 	.word	0x0801e629
 801e5a0:	0801e629 	.word	0x0801e629
 801e5a4:	0801e629 	.word	0x0801e629
 801e5a8:	0801e629 	.word	0x0801e629
 801e5ac:	0801e629 	.word	0x0801e629
 801e5b0:	0801e629 	.word	0x0801e629
 801e5b4:	0801e611 	.word	0x0801e611
 801e5b8:	0801e629 	.word	0x0801e629
 801e5bc:	0801e629 	.word	0x0801e629
 801e5c0:	0801e629 	.word	0x0801e629
 801e5c4:	0801e629 	.word	0x0801e629
 801e5c8:	0801e629 	.word	0x0801e629
 801e5cc:	0801e629 	.word	0x0801e629
 801e5d0:	0801e629 	.word	0x0801e629
 801e5d4:	0801e619 	.word	0x0801e619
 801e5d8:	0801e629 	.word	0x0801e629
 801e5dc:	0801e629 	.word	0x0801e629
 801e5e0:	0801e629 	.word	0x0801e629
 801e5e4:	0801e629 	.word	0x0801e629
 801e5e8:	0801e629 	.word	0x0801e629
 801e5ec:	0801e629 	.word	0x0801e629
 801e5f0:	0801e629 	.word	0x0801e629
 801e5f4:	0801e621 	.word	0x0801e621
 801e5f8:	2301      	movs	r3, #1
 801e5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e5fe:	e0bc      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e600:	2304      	movs	r3, #4
 801e602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e606:	e0b8      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e608:	2308      	movs	r3, #8
 801e60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e60e:	e0b4      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e610:	2310      	movs	r3, #16
 801e612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e616:	e0b0      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e618:	2320      	movs	r3, #32
 801e61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e61e:	e0ac      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e620:	2340      	movs	r3, #64	@ 0x40
 801e622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e626:	e0a8      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e628:	2380      	movs	r3, #128	@ 0x80
 801e62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e62e:	e0a4      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e630:	697b      	ldr	r3, [r7, #20]
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	4a8f      	ldr	r2, [pc, #572]	@ (801e874 <UART_SetConfig+0x6a0>)
 801e636:	4293      	cmp	r3, r2
 801e638:	d130      	bne.n	801e69c <UART_SetConfig+0x4c8>
 801e63a:	4b8d      	ldr	r3, [pc, #564]	@ (801e870 <UART_SetConfig+0x69c>)
 801e63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e63e:	f003 0307 	and.w	r3, r3, #7
 801e642:	2b05      	cmp	r3, #5
 801e644:	d826      	bhi.n	801e694 <UART_SetConfig+0x4c0>
 801e646:	a201      	add	r2, pc, #4	@ (adr r2, 801e64c <UART_SetConfig+0x478>)
 801e648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e64c:	0801e665 	.word	0x0801e665
 801e650:	0801e66d 	.word	0x0801e66d
 801e654:	0801e675 	.word	0x0801e675
 801e658:	0801e67d 	.word	0x0801e67d
 801e65c:	0801e685 	.word	0x0801e685
 801e660:	0801e68d 	.word	0x0801e68d
 801e664:	2300      	movs	r3, #0
 801e666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e66a:	e086      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e66c:	2304      	movs	r3, #4
 801e66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e672:	e082      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e674:	2308      	movs	r3, #8
 801e676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e67a:	e07e      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e67c:	2310      	movs	r3, #16
 801e67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e682:	e07a      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e684:	2320      	movs	r3, #32
 801e686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e68a:	e076      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e68c:	2340      	movs	r3, #64	@ 0x40
 801e68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e692:	e072      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e694:	2380      	movs	r3, #128	@ 0x80
 801e696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e69a:	e06e      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e69c:	697b      	ldr	r3, [r7, #20]
 801e69e:	681b      	ldr	r3, [r3, #0]
 801e6a0:	4a75      	ldr	r2, [pc, #468]	@ (801e878 <UART_SetConfig+0x6a4>)
 801e6a2:	4293      	cmp	r3, r2
 801e6a4:	d130      	bne.n	801e708 <UART_SetConfig+0x534>
 801e6a6:	4b72      	ldr	r3, [pc, #456]	@ (801e870 <UART_SetConfig+0x69c>)
 801e6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e6aa:	f003 0307 	and.w	r3, r3, #7
 801e6ae:	2b05      	cmp	r3, #5
 801e6b0:	d826      	bhi.n	801e700 <UART_SetConfig+0x52c>
 801e6b2:	a201      	add	r2, pc, #4	@ (adr r2, 801e6b8 <UART_SetConfig+0x4e4>)
 801e6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e6b8:	0801e6d1 	.word	0x0801e6d1
 801e6bc:	0801e6d9 	.word	0x0801e6d9
 801e6c0:	0801e6e1 	.word	0x0801e6e1
 801e6c4:	0801e6e9 	.word	0x0801e6e9
 801e6c8:	0801e6f1 	.word	0x0801e6f1
 801e6cc:	0801e6f9 	.word	0x0801e6f9
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e6d6:	e050      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e6d8:	2304      	movs	r3, #4
 801e6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e6de:	e04c      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e6e0:	2308      	movs	r3, #8
 801e6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e6e6:	e048      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e6e8:	2310      	movs	r3, #16
 801e6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e6ee:	e044      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e6f0:	2320      	movs	r3, #32
 801e6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e6f6:	e040      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e6f8:	2340      	movs	r3, #64	@ 0x40
 801e6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e6fe:	e03c      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e700:	2380      	movs	r3, #128	@ 0x80
 801e702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e706:	e038      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e708:	697b      	ldr	r3, [r7, #20]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	4a5b      	ldr	r2, [pc, #364]	@ (801e87c <UART_SetConfig+0x6a8>)
 801e70e:	4293      	cmp	r3, r2
 801e710:	d130      	bne.n	801e774 <UART_SetConfig+0x5a0>
 801e712:	4b57      	ldr	r3, [pc, #348]	@ (801e870 <UART_SetConfig+0x69c>)
 801e714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e716:	f003 0307 	and.w	r3, r3, #7
 801e71a:	2b05      	cmp	r3, #5
 801e71c:	d826      	bhi.n	801e76c <UART_SetConfig+0x598>
 801e71e:	a201      	add	r2, pc, #4	@ (adr r2, 801e724 <UART_SetConfig+0x550>)
 801e720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e724:	0801e73d 	.word	0x0801e73d
 801e728:	0801e745 	.word	0x0801e745
 801e72c:	0801e74d 	.word	0x0801e74d
 801e730:	0801e755 	.word	0x0801e755
 801e734:	0801e75d 	.word	0x0801e75d
 801e738:	0801e765 	.word	0x0801e765
 801e73c:	2302      	movs	r3, #2
 801e73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e742:	e01a      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e744:	2304      	movs	r3, #4
 801e746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e74a:	e016      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e74c:	2308      	movs	r3, #8
 801e74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e752:	e012      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e754:	2310      	movs	r3, #16
 801e756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e75a:	e00e      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e75c:	2320      	movs	r3, #32
 801e75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e762:	e00a      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e764:	2340      	movs	r3, #64	@ 0x40
 801e766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e76a:	e006      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e76c:	2380      	movs	r3, #128	@ 0x80
 801e76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801e772:	e002      	b.n	801e77a <UART_SetConfig+0x5a6>
 801e774:	2380      	movs	r3, #128	@ 0x80
 801e776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e77a:	697b      	ldr	r3, [r7, #20]
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	4a3f      	ldr	r2, [pc, #252]	@ (801e87c <UART_SetConfig+0x6a8>)
 801e780:	4293      	cmp	r3, r2
 801e782:	f040 80f8 	bne.w	801e976 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e786:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801e78a:	2b20      	cmp	r3, #32
 801e78c:	dc46      	bgt.n	801e81c <UART_SetConfig+0x648>
 801e78e:	2b02      	cmp	r3, #2
 801e790:	f2c0 8082 	blt.w	801e898 <UART_SetConfig+0x6c4>
 801e794:	3b02      	subs	r3, #2
 801e796:	2b1e      	cmp	r3, #30
 801e798:	d87e      	bhi.n	801e898 <UART_SetConfig+0x6c4>
 801e79a:	a201      	add	r2, pc, #4	@ (adr r2, 801e7a0 <UART_SetConfig+0x5cc>)
 801e79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e7a0:	0801e823 	.word	0x0801e823
 801e7a4:	0801e899 	.word	0x0801e899
 801e7a8:	0801e82b 	.word	0x0801e82b
 801e7ac:	0801e899 	.word	0x0801e899
 801e7b0:	0801e899 	.word	0x0801e899
 801e7b4:	0801e899 	.word	0x0801e899
 801e7b8:	0801e83b 	.word	0x0801e83b
 801e7bc:	0801e899 	.word	0x0801e899
 801e7c0:	0801e899 	.word	0x0801e899
 801e7c4:	0801e899 	.word	0x0801e899
 801e7c8:	0801e899 	.word	0x0801e899
 801e7cc:	0801e899 	.word	0x0801e899
 801e7d0:	0801e899 	.word	0x0801e899
 801e7d4:	0801e899 	.word	0x0801e899
 801e7d8:	0801e84b 	.word	0x0801e84b
 801e7dc:	0801e899 	.word	0x0801e899
 801e7e0:	0801e899 	.word	0x0801e899
 801e7e4:	0801e899 	.word	0x0801e899
 801e7e8:	0801e899 	.word	0x0801e899
 801e7ec:	0801e899 	.word	0x0801e899
 801e7f0:	0801e899 	.word	0x0801e899
 801e7f4:	0801e899 	.word	0x0801e899
 801e7f8:	0801e899 	.word	0x0801e899
 801e7fc:	0801e899 	.word	0x0801e899
 801e800:	0801e899 	.word	0x0801e899
 801e804:	0801e899 	.word	0x0801e899
 801e808:	0801e899 	.word	0x0801e899
 801e80c:	0801e899 	.word	0x0801e899
 801e810:	0801e899 	.word	0x0801e899
 801e814:	0801e899 	.word	0x0801e899
 801e818:	0801e88b 	.word	0x0801e88b
 801e81c:	2b40      	cmp	r3, #64	@ 0x40
 801e81e:	d037      	beq.n	801e890 <UART_SetConfig+0x6bc>
 801e820:	e03a      	b.n	801e898 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801e822:	f7fe fc57 	bl	801d0d4 <HAL_RCCEx_GetD3PCLK1Freq>
 801e826:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801e828:	e03c      	b.n	801e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e82a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e82e:	4618      	mov	r0, r3
 801e830:	f7fe fc66 	bl	801d100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801e834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e838:	e034      	b.n	801e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e83a:	f107 0318 	add.w	r3, r7, #24
 801e83e:	4618      	mov	r0, r3
 801e840:	f7fe fdb2 	bl	801d3a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801e844:	69fb      	ldr	r3, [r7, #28]
 801e846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e848:	e02c      	b.n	801e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e84a:	4b09      	ldr	r3, [pc, #36]	@ (801e870 <UART_SetConfig+0x69c>)
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	f003 0320 	and.w	r3, r3, #32
 801e852:	2b00      	cmp	r3, #0
 801e854:	d016      	beq.n	801e884 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801e856:	4b06      	ldr	r3, [pc, #24]	@ (801e870 <UART_SetConfig+0x69c>)
 801e858:	681b      	ldr	r3, [r3, #0]
 801e85a:	08db      	lsrs	r3, r3, #3
 801e85c:	f003 0303 	and.w	r3, r3, #3
 801e860:	4a07      	ldr	r2, [pc, #28]	@ (801e880 <UART_SetConfig+0x6ac>)
 801e862:	fa22 f303 	lsr.w	r3, r2, r3
 801e866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e868:	e01c      	b.n	801e8a4 <UART_SetConfig+0x6d0>
 801e86a:	bf00      	nop
 801e86c:	40011400 	.word	0x40011400
 801e870:	58024400 	.word	0x58024400
 801e874:	40007800 	.word	0x40007800
 801e878:	40007c00 	.word	0x40007c00
 801e87c:	58000c00 	.word	0x58000c00
 801e880:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801e884:	4b9d      	ldr	r3, [pc, #628]	@ (801eafc <UART_SetConfig+0x928>)
 801e886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e888:	e00c      	b.n	801e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801e88a:	4b9d      	ldr	r3, [pc, #628]	@ (801eb00 <UART_SetConfig+0x92c>)
 801e88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e88e:	e009      	b.n	801e8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e896:	e005      	b.n	801e8a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801e898:	2300      	movs	r3, #0
 801e89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801e89c:	2301      	movs	r3, #1
 801e89e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801e8a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	f000 81de 	beq.w	801ec68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801e8ac:	697b      	ldr	r3, [r7, #20]
 801e8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e8b0:	4a94      	ldr	r2, [pc, #592]	@ (801eb04 <UART_SetConfig+0x930>)
 801e8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e8b6:	461a      	mov	r2, r3
 801e8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e8ba:	fbb3 f3f2 	udiv	r3, r3, r2
 801e8be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e8c0:	697b      	ldr	r3, [r7, #20]
 801e8c2:	685a      	ldr	r2, [r3, #4]
 801e8c4:	4613      	mov	r3, r2
 801e8c6:	005b      	lsls	r3, r3, #1
 801e8c8:	4413      	add	r3, r2
 801e8ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e8cc:	429a      	cmp	r2, r3
 801e8ce:	d305      	bcc.n	801e8dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801e8d0:	697b      	ldr	r3, [r7, #20]
 801e8d2:	685b      	ldr	r3, [r3, #4]
 801e8d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e8d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e8d8:	429a      	cmp	r2, r3
 801e8da:	d903      	bls.n	801e8e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801e8dc:	2301      	movs	r3, #1
 801e8de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801e8e2:	e1c1      	b.n	801ec68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e8e6:	2200      	movs	r2, #0
 801e8e8:	60bb      	str	r3, [r7, #8]
 801e8ea:	60fa      	str	r2, [r7, #12]
 801e8ec:	697b      	ldr	r3, [r7, #20]
 801e8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e8f0:	4a84      	ldr	r2, [pc, #528]	@ (801eb04 <UART_SetConfig+0x930>)
 801e8f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e8f6:	b29b      	uxth	r3, r3
 801e8f8:	2200      	movs	r2, #0
 801e8fa:	603b      	str	r3, [r7, #0]
 801e8fc:	607a      	str	r2, [r7, #4]
 801e8fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801e906:	f7e1 ff5f 	bl	80007c8 <__aeabi_uldivmod>
 801e90a:	4602      	mov	r2, r0
 801e90c:	460b      	mov	r3, r1
 801e90e:	4610      	mov	r0, r2
 801e910:	4619      	mov	r1, r3
 801e912:	f04f 0200 	mov.w	r2, #0
 801e916:	f04f 0300 	mov.w	r3, #0
 801e91a:	020b      	lsls	r3, r1, #8
 801e91c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801e920:	0202      	lsls	r2, r0, #8
 801e922:	6979      	ldr	r1, [r7, #20]
 801e924:	6849      	ldr	r1, [r1, #4]
 801e926:	0849      	lsrs	r1, r1, #1
 801e928:	2000      	movs	r0, #0
 801e92a:	460c      	mov	r4, r1
 801e92c:	4605      	mov	r5, r0
 801e92e:	eb12 0804 	adds.w	r8, r2, r4
 801e932:	eb43 0905 	adc.w	r9, r3, r5
 801e936:	697b      	ldr	r3, [r7, #20]
 801e938:	685b      	ldr	r3, [r3, #4]
 801e93a:	2200      	movs	r2, #0
 801e93c:	469a      	mov	sl, r3
 801e93e:	4693      	mov	fp, r2
 801e940:	4652      	mov	r2, sl
 801e942:	465b      	mov	r3, fp
 801e944:	4640      	mov	r0, r8
 801e946:	4649      	mov	r1, r9
 801e948:	f7e1 ff3e 	bl	80007c8 <__aeabi_uldivmod>
 801e94c:	4602      	mov	r2, r0
 801e94e:	460b      	mov	r3, r1
 801e950:	4613      	mov	r3, r2
 801e952:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e95a:	d308      	bcc.n	801e96e <UART_SetConfig+0x79a>
 801e95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e95e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e962:	d204      	bcs.n	801e96e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801e964:	697b      	ldr	r3, [r7, #20]
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e96a:	60da      	str	r2, [r3, #12]
 801e96c:	e17c      	b.n	801ec68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801e96e:	2301      	movs	r3, #1
 801e970:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801e974:	e178      	b.n	801ec68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e976:	697b      	ldr	r3, [r7, #20]
 801e978:	69db      	ldr	r3, [r3, #28]
 801e97a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e97e:	f040 80c5 	bne.w	801eb0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801e982:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801e986:	2b20      	cmp	r3, #32
 801e988:	dc48      	bgt.n	801ea1c <UART_SetConfig+0x848>
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	db7b      	blt.n	801ea86 <UART_SetConfig+0x8b2>
 801e98e:	2b20      	cmp	r3, #32
 801e990:	d879      	bhi.n	801ea86 <UART_SetConfig+0x8b2>
 801e992:	a201      	add	r2, pc, #4	@ (adr r2, 801e998 <UART_SetConfig+0x7c4>)
 801e994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e998:	0801ea23 	.word	0x0801ea23
 801e99c:	0801ea2b 	.word	0x0801ea2b
 801e9a0:	0801ea87 	.word	0x0801ea87
 801e9a4:	0801ea87 	.word	0x0801ea87
 801e9a8:	0801ea33 	.word	0x0801ea33
 801e9ac:	0801ea87 	.word	0x0801ea87
 801e9b0:	0801ea87 	.word	0x0801ea87
 801e9b4:	0801ea87 	.word	0x0801ea87
 801e9b8:	0801ea43 	.word	0x0801ea43
 801e9bc:	0801ea87 	.word	0x0801ea87
 801e9c0:	0801ea87 	.word	0x0801ea87
 801e9c4:	0801ea87 	.word	0x0801ea87
 801e9c8:	0801ea87 	.word	0x0801ea87
 801e9cc:	0801ea87 	.word	0x0801ea87
 801e9d0:	0801ea87 	.word	0x0801ea87
 801e9d4:	0801ea87 	.word	0x0801ea87
 801e9d8:	0801ea53 	.word	0x0801ea53
 801e9dc:	0801ea87 	.word	0x0801ea87
 801e9e0:	0801ea87 	.word	0x0801ea87
 801e9e4:	0801ea87 	.word	0x0801ea87
 801e9e8:	0801ea87 	.word	0x0801ea87
 801e9ec:	0801ea87 	.word	0x0801ea87
 801e9f0:	0801ea87 	.word	0x0801ea87
 801e9f4:	0801ea87 	.word	0x0801ea87
 801e9f8:	0801ea87 	.word	0x0801ea87
 801e9fc:	0801ea87 	.word	0x0801ea87
 801ea00:	0801ea87 	.word	0x0801ea87
 801ea04:	0801ea87 	.word	0x0801ea87
 801ea08:	0801ea87 	.word	0x0801ea87
 801ea0c:	0801ea87 	.word	0x0801ea87
 801ea10:	0801ea87 	.word	0x0801ea87
 801ea14:	0801ea87 	.word	0x0801ea87
 801ea18:	0801ea79 	.word	0x0801ea79
 801ea1c:	2b40      	cmp	r3, #64	@ 0x40
 801ea1e:	d02e      	beq.n	801ea7e <UART_SetConfig+0x8aa>
 801ea20:	e031      	b.n	801ea86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ea22:	f7fd f8df 	bl	801bbe4 <HAL_RCC_GetPCLK1Freq>
 801ea26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ea28:	e033      	b.n	801ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ea2a:	f7fd f8f1 	bl	801bc10 <HAL_RCC_GetPCLK2Freq>
 801ea2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ea30:	e02f      	b.n	801ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ea32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ea36:	4618      	mov	r0, r3
 801ea38:	f7fe fb62 	bl	801d100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801ea3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ea3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ea40:	e027      	b.n	801ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ea42:	f107 0318 	add.w	r3, r7, #24
 801ea46:	4618      	mov	r0, r3
 801ea48:	f7fe fcae 	bl	801d3a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801ea4c:	69fb      	ldr	r3, [r7, #28]
 801ea4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ea50:	e01f      	b.n	801ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ea52:	4b2d      	ldr	r3, [pc, #180]	@ (801eb08 <UART_SetConfig+0x934>)
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	f003 0320 	and.w	r3, r3, #32
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d009      	beq.n	801ea72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801ea5e:	4b2a      	ldr	r3, [pc, #168]	@ (801eb08 <UART_SetConfig+0x934>)
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	08db      	lsrs	r3, r3, #3
 801ea64:	f003 0303 	and.w	r3, r3, #3
 801ea68:	4a24      	ldr	r2, [pc, #144]	@ (801eafc <UART_SetConfig+0x928>)
 801ea6a:	fa22 f303 	lsr.w	r3, r2, r3
 801ea6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801ea70:	e00f      	b.n	801ea92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801ea72:	4b22      	ldr	r3, [pc, #136]	@ (801eafc <UART_SetConfig+0x928>)
 801ea74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ea76:	e00c      	b.n	801ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801ea78:	4b21      	ldr	r3, [pc, #132]	@ (801eb00 <UART_SetConfig+0x92c>)
 801ea7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ea7c:	e009      	b.n	801ea92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ea7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ea82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ea84:	e005      	b.n	801ea92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801ea86:	2300      	movs	r3, #0
 801ea88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801ea8a:	2301      	movs	r3, #1
 801ea8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801ea90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801ea92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	f000 80e7 	beq.w	801ec68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ea9a:	697b      	ldr	r3, [r7, #20]
 801ea9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ea9e:	4a19      	ldr	r2, [pc, #100]	@ (801eb04 <UART_SetConfig+0x930>)
 801eaa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801eaa4:	461a      	mov	r2, r3
 801eaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801eaa8:	fbb3 f3f2 	udiv	r3, r3, r2
 801eaac:	005a      	lsls	r2, r3, #1
 801eaae:	697b      	ldr	r3, [r7, #20]
 801eab0:	685b      	ldr	r3, [r3, #4]
 801eab2:	085b      	lsrs	r3, r3, #1
 801eab4:	441a      	add	r2, r3
 801eab6:	697b      	ldr	r3, [r7, #20]
 801eab8:	685b      	ldr	r3, [r3, #4]
 801eaba:	fbb2 f3f3 	udiv	r3, r2, r3
 801eabe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801eac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eac2:	2b0f      	cmp	r3, #15
 801eac4:	d916      	bls.n	801eaf4 <UART_SetConfig+0x920>
 801eac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eacc:	d212      	bcs.n	801eaf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801eace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ead0:	b29b      	uxth	r3, r3
 801ead2:	f023 030f 	bic.w	r3, r3, #15
 801ead6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ead8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eada:	085b      	lsrs	r3, r3, #1
 801eadc:	b29b      	uxth	r3, r3
 801eade:	f003 0307 	and.w	r3, r3, #7
 801eae2:	b29a      	uxth	r2, r3
 801eae4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801eae6:	4313      	orrs	r3, r2
 801eae8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801eaea:	697b      	ldr	r3, [r7, #20]
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801eaf0:	60da      	str	r2, [r3, #12]
 801eaf2:	e0b9      	b.n	801ec68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801eaf4:	2301      	movs	r3, #1
 801eaf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801eafa:	e0b5      	b.n	801ec68 <UART_SetConfig+0xa94>
 801eafc:	03d09000 	.word	0x03d09000
 801eb00:	003d0900 	.word	0x003d0900
 801eb04:	080321d0 	.word	0x080321d0
 801eb08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801eb0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801eb10:	2b20      	cmp	r3, #32
 801eb12:	dc49      	bgt.n	801eba8 <UART_SetConfig+0x9d4>
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	db7c      	blt.n	801ec12 <UART_SetConfig+0xa3e>
 801eb18:	2b20      	cmp	r3, #32
 801eb1a:	d87a      	bhi.n	801ec12 <UART_SetConfig+0xa3e>
 801eb1c:	a201      	add	r2, pc, #4	@ (adr r2, 801eb24 <UART_SetConfig+0x950>)
 801eb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eb22:	bf00      	nop
 801eb24:	0801ebaf 	.word	0x0801ebaf
 801eb28:	0801ebb7 	.word	0x0801ebb7
 801eb2c:	0801ec13 	.word	0x0801ec13
 801eb30:	0801ec13 	.word	0x0801ec13
 801eb34:	0801ebbf 	.word	0x0801ebbf
 801eb38:	0801ec13 	.word	0x0801ec13
 801eb3c:	0801ec13 	.word	0x0801ec13
 801eb40:	0801ec13 	.word	0x0801ec13
 801eb44:	0801ebcf 	.word	0x0801ebcf
 801eb48:	0801ec13 	.word	0x0801ec13
 801eb4c:	0801ec13 	.word	0x0801ec13
 801eb50:	0801ec13 	.word	0x0801ec13
 801eb54:	0801ec13 	.word	0x0801ec13
 801eb58:	0801ec13 	.word	0x0801ec13
 801eb5c:	0801ec13 	.word	0x0801ec13
 801eb60:	0801ec13 	.word	0x0801ec13
 801eb64:	0801ebdf 	.word	0x0801ebdf
 801eb68:	0801ec13 	.word	0x0801ec13
 801eb6c:	0801ec13 	.word	0x0801ec13
 801eb70:	0801ec13 	.word	0x0801ec13
 801eb74:	0801ec13 	.word	0x0801ec13
 801eb78:	0801ec13 	.word	0x0801ec13
 801eb7c:	0801ec13 	.word	0x0801ec13
 801eb80:	0801ec13 	.word	0x0801ec13
 801eb84:	0801ec13 	.word	0x0801ec13
 801eb88:	0801ec13 	.word	0x0801ec13
 801eb8c:	0801ec13 	.word	0x0801ec13
 801eb90:	0801ec13 	.word	0x0801ec13
 801eb94:	0801ec13 	.word	0x0801ec13
 801eb98:	0801ec13 	.word	0x0801ec13
 801eb9c:	0801ec13 	.word	0x0801ec13
 801eba0:	0801ec13 	.word	0x0801ec13
 801eba4:	0801ec05 	.word	0x0801ec05
 801eba8:	2b40      	cmp	r3, #64	@ 0x40
 801ebaa:	d02e      	beq.n	801ec0a <UART_SetConfig+0xa36>
 801ebac:	e031      	b.n	801ec12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ebae:	f7fd f819 	bl	801bbe4 <HAL_RCC_GetPCLK1Freq>
 801ebb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ebb4:	e033      	b.n	801ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ebb6:	f7fd f82b 	bl	801bc10 <HAL_RCC_GetPCLK2Freq>
 801ebba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ebbc:	e02f      	b.n	801ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ebbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ebc2:	4618      	mov	r0, r3
 801ebc4:	f7fe fa9c 	bl	801d100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801ebc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ebca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ebcc:	e027      	b.n	801ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ebce:	f107 0318 	add.w	r3, r7, #24
 801ebd2:	4618      	mov	r0, r3
 801ebd4:	f7fe fbe8 	bl	801d3a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801ebd8:	69fb      	ldr	r3, [r7, #28]
 801ebda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ebdc:	e01f      	b.n	801ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ebde:	4b2d      	ldr	r3, [pc, #180]	@ (801ec94 <UART_SetConfig+0xac0>)
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	f003 0320 	and.w	r3, r3, #32
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d009      	beq.n	801ebfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801ebea:	4b2a      	ldr	r3, [pc, #168]	@ (801ec94 <UART_SetConfig+0xac0>)
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	08db      	lsrs	r3, r3, #3
 801ebf0:	f003 0303 	and.w	r3, r3, #3
 801ebf4:	4a28      	ldr	r2, [pc, #160]	@ (801ec98 <UART_SetConfig+0xac4>)
 801ebf6:	fa22 f303 	lsr.w	r3, r2, r3
 801ebfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801ebfc:	e00f      	b.n	801ec1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801ebfe:	4b26      	ldr	r3, [pc, #152]	@ (801ec98 <UART_SetConfig+0xac4>)
 801ec00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ec02:	e00c      	b.n	801ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801ec04:	4b25      	ldr	r3, [pc, #148]	@ (801ec9c <UART_SetConfig+0xac8>)
 801ec06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ec08:	e009      	b.n	801ec1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ec0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ec0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ec10:	e005      	b.n	801ec1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801ec12:	2300      	movs	r3, #0
 801ec14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801ec16:	2301      	movs	r3, #1
 801ec18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801ec1c:	bf00      	nop
    }

    if (pclk != 0U)
 801ec1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d021      	beq.n	801ec68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ec24:	697b      	ldr	r3, [r7, #20]
 801ec26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ec28:	4a1d      	ldr	r2, [pc, #116]	@ (801eca0 <UART_SetConfig+0xacc>)
 801ec2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ec2e:	461a      	mov	r2, r3
 801ec30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ec32:	fbb3 f2f2 	udiv	r2, r3, r2
 801ec36:	697b      	ldr	r3, [r7, #20]
 801ec38:	685b      	ldr	r3, [r3, #4]
 801ec3a:	085b      	lsrs	r3, r3, #1
 801ec3c:	441a      	add	r2, r3
 801ec3e:	697b      	ldr	r3, [r7, #20]
 801ec40:	685b      	ldr	r3, [r3, #4]
 801ec42:	fbb2 f3f3 	udiv	r3, r2, r3
 801ec46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ec48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec4a:	2b0f      	cmp	r3, #15
 801ec4c:	d909      	bls.n	801ec62 <UART_SetConfig+0xa8e>
 801ec4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ec54:	d205      	bcs.n	801ec62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ec56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec58:	b29a      	uxth	r2, r3
 801ec5a:	697b      	ldr	r3, [r7, #20]
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	60da      	str	r2, [r3, #12]
 801ec60:	e002      	b.n	801ec68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801ec62:	2301      	movs	r3, #1
 801ec64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801ec68:	697b      	ldr	r3, [r7, #20]
 801ec6a:	2201      	movs	r2, #1
 801ec6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801ec70:	697b      	ldr	r3, [r7, #20]
 801ec72:	2201      	movs	r2, #1
 801ec74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ec78:	697b      	ldr	r3, [r7, #20]
 801ec7a:	2200      	movs	r2, #0
 801ec7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801ec7e:	697b      	ldr	r3, [r7, #20]
 801ec80:	2200      	movs	r2, #0
 801ec82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801ec84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801ec88:	4618      	mov	r0, r3
 801ec8a:	3748      	adds	r7, #72	@ 0x48
 801ec8c:	46bd      	mov	sp, r7
 801ec8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ec92:	bf00      	nop
 801ec94:	58024400 	.word	0x58024400
 801ec98:	03d09000 	.word	0x03d09000
 801ec9c:	003d0900 	.word	0x003d0900
 801eca0:	080321d0 	.word	0x080321d0

0801eca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801eca4:	b480      	push	{r7}
 801eca6:	b083      	sub	sp, #12
 801eca8:	af00      	add	r7, sp, #0
 801ecaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecb0:	f003 0308 	and.w	r3, r3, #8
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	d00a      	beq.n	801ecce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	685b      	ldr	r3, [r3, #4]
 801ecbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	681b      	ldr	r3, [r3, #0]
 801ecca:	430a      	orrs	r2, r1
 801eccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecd2:	f003 0301 	and.w	r3, r3, #1
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	d00a      	beq.n	801ecf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	685b      	ldr	r3, [r3, #4]
 801ece0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	430a      	orrs	r2, r1
 801ecee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecf4:	f003 0302 	and.w	r3, r3, #2
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	d00a      	beq.n	801ed12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	685b      	ldr	r3, [r3, #4]
 801ed02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	430a      	orrs	r2, r1
 801ed10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed16:	f003 0304 	and.w	r3, r3, #4
 801ed1a:	2b00      	cmp	r3, #0
 801ed1c:	d00a      	beq.n	801ed34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801ed1e:	687b      	ldr	r3, [r7, #4]
 801ed20:	681b      	ldr	r3, [r3, #0]
 801ed22:	685b      	ldr	r3, [r3, #4]
 801ed24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	430a      	orrs	r2, r1
 801ed32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ed34:	687b      	ldr	r3, [r7, #4]
 801ed36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed38:	f003 0310 	and.w	r3, r3, #16
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	d00a      	beq.n	801ed56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	681b      	ldr	r3, [r3, #0]
 801ed44:	689b      	ldr	r3, [r3, #8]
 801ed46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801ed4a:	687b      	ldr	r3, [r7, #4]
 801ed4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	430a      	orrs	r2, r1
 801ed54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed5a:	f003 0320 	and.w	r3, r3, #32
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d00a      	beq.n	801ed78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	689b      	ldr	r3, [r3, #8]
 801ed68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	430a      	orrs	r2, r1
 801ed76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d01a      	beq.n	801edba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	685b      	ldr	r3, [r3, #4]
 801ed8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	681b      	ldr	r3, [r3, #0]
 801ed96:	430a      	orrs	r2, r1
 801ed98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ed9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801eda2:	d10a      	bne.n	801edba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	681b      	ldr	r3, [r3, #0]
 801eda8:	685b      	ldr	r3, [r3, #4]
 801edaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801edae:	687b      	ldr	r3, [r7, #4]
 801edb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801edb2:	687b      	ldr	r3, [r7, #4]
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	430a      	orrs	r2, r1
 801edb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d00a      	beq.n	801eddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	685b      	ldr	r3, [r3, #4]
 801edcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	430a      	orrs	r2, r1
 801edda:	605a      	str	r2, [r3, #4]
  }
}
 801eddc:	bf00      	nop
 801edde:	370c      	adds	r7, #12
 801ede0:	46bd      	mov	sp, r7
 801ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ede6:	4770      	bx	lr

0801ede8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ede8:	b580      	push	{r7, lr}
 801edea:	b098      	sub	sp, #96	@ 0x60
 801edec:	af02      	add	r7, sp, #8
 801edee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	2200      	movs	r2, #0
 801edf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801edf8:	f7fa fcd2 	bl	80197a0 <HAL_GetTick>
 801edfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	681b      	ldr	r3, [r3, #0]
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	f003 0308 	and.w	r3, r3, #8
 801ee08:	2b08      	cmp	r3, #8
 801ee0a:	d12f      	bne.n	801ee6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ee0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801ee10:	9300      	str	r3, [sp, #0]
 801ee12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ee14:	2200      	movs	r2, #0
 801ee16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801ee1a:	6878      	ldr	r0, [r7, #4]
 801ee1c:	f000 f88e 	bl	801ef3c <UART_WaitOnFlagUntilTimeout>
 801ee20:	4603      	mov	r3, r0
 801ee22:	2b00      	cmp	r3, #0
 801ee24:	d022      	beq.n	801ee6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ee2e:	e853 3f00 	ldrex	r3, [r3]
 801ee32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801ee34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ee36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ee3a:	653b      	str	r3, [r7, #80]	@ 0x50
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	461a      	mov	r2, r3
 801ee42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ee44:	647b      	str	r3, [r7, #68]	@ 0x44
 801ee46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ee48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801ee4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ee4c:	e841 2300 	strex	r3, r2, [r1]
 801ee50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801ee52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d1e6      	bne.n	801ee26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	2220      	movs	r2, #32
 801ee5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	2200      	movs	r2, #0
 801ee64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ee68:	2303      	movs	r3, #3
 801ee6a:	e063      	b.n	801ef34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	681b      	ldr	r3, [r3, #0]
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	f003 0304 	and.w	r3, r3, #4
 801ee76:	2b04      	cmp	r3, #4
 801ee78:	d149      	bne.n	801ef0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ee7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801ee7e:	9300      	str	r3, [sp, #0]
 801ee80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ee82:	2200      	movs	r2, #0
 801ee84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801ee88:	6878      	ldr	r0, [r7, #4]
 801ee8a:	f000 f857 	bl	801ef3c <UART_WaitOnFlagUntilTimeout>
 801ee8e:	4603      	mov	r3, r0
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d03c      	beq.n	801ef0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee9c:	e853 3f00 	ldrex	r3, [r3]
 801eea0:	623b      	str	r3, [r7, #32]
   return(result);
 801eea2:	6a3b      	ldr	r3, [r7, #32]
 801eea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801eea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	681b      	ldr	r3, [r3, #0]
 801eeae:	461a      	mov	r2, r3
 801eeb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeb2:	633b      	str	r3, [r7, #48]	@ 0x30
 801eeb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eeb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801eeb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801eeba:	e841 2300 	strex	r3, r2, [r1]
 801eebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801eec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d1e6      	bne.n	801ee94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	3308      	adds	r3, #8
 801eecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eece:	693b      	ldr	r3, [r7, #16]
 801eed0:	e853 3f00 	ldrex	r3, [r3]
 801eed4:	60fb      	str	r3, [r7, #12]
   return(result);
 801eed6:	68fb      	ldr	r3, [r7, #12]
 801eed8:	f023 0301 	bic.w	r3, r3, #1
 801eedc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	681b      	ldr	r3, [r3, #0]
 801eee2:	3308      	adds	r3, #8
 801eee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801eee6:	61fa      	str	r2, [r7, #28]
 801eee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eeea:	69b9      	ldr	r1, [r7, #24]
 801eeec:	69fa      	ldr	r2, [r7, #28]
 801eeee:	e841 2300 	strex	r3, r2, [r1]
 801eef2:	617b      	str	r3, [r7, #20]
   return(result);
 801eef4:	697b      	ldr	r3, [r7, #20]
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d1e5      	bne.n	801eec6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	2220      	movs	r2, #32
 801eefe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	2200      	movs	r2, #0
 801ef06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ef0a:	2303      	movs	r3, #3
 801ef0c:	e012      	b.n	801ef34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	2220      	movs	r2, #32
 801ef12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	2220      	movs	r2, #32
 801ef1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	2200      	movs	r2, #0
 801ef22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	2200      	movs	r2, #0
 801ef28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	2200      	movs	r2, #0
 801ef2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ef32:	2300      	movs	r3, #0
}
 801ef34:	4618      	mov	r0, r3
 801ef36:	3758      	adds	r7, #88	@ 0x58
 801ef38:	46bd      	mov	sp, r7
 801ef3a:	bd80      	pop	{r7, pc}

0801ef3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ef3c:	b580      	push	{r7, lr}
 801ef3e:	b084      	sub	sp, #16
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	60f8      	str	r0, [r7, #12]
 801ef44:	60b9      	str	r1, [r7, #8]
 801ef46:	603b      	str	r3, [r7, #0]
 801ef48:	4613      	mov	r3, r2
 801ef4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ef4c:	e04f      	b.n	801efee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ef4e:	69bb      	ldr	r3, [r7, #24]
 801ef50:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef54:	d04b      	beq.n	801efee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ef56:	f7fa fc23 	bl	80197a0 <HAL_GetTick>
 801ef5a:	4602      	mov	r2, r0
 801ef5c:	683b      	ldr	r3, [r7, #0]
 801ef5e:	1ad3      	subs	r3, r2, r3
 801ef60:	69ba      	ldr	r2, [r7, #24]
 801ef62:	429a      	cmp	r2, r3
 801ef64:	d302      	bcc.n	801ef6c <UART_WaitOnFlagUntilTimeout+0x30>
 801ef66:	69bb      	ldr	r3, [r7, #24]
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	d101      	bne.n	801ef70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801ef6c:	2303      	movs	r3, #3
 801ef6e:	e04e      	b.n	801f00e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	681b      	ldr	r3, [r3, #0]
 801ef76:	f003 0304 	and.w	r3, r3, #4
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d037      	beq.n	801efee <UART_WaitOnFlagUntilTimeout+0xb2>
 801ef7e:	68bb      	ldr	r3, [r7, #8]
 801ef80:	2b80      	cmp	r3, #128	@ 0x80
 801ef82:	d034      	beq.n	801efee <UART_WaitOnFlagUntilTimeout+0xb2>
 801ef84:	68bb      	ldr	r3, [r7, #8]
 801ef86:	2b40      	cmp	r3, #64	@ 0x40
 801ef88:	d031      	beq.n	801efee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ef8a:	68fb      	ldr	r3, [r7, #12]
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	69db      	ldr	r3, [r3, #28]
 801ef90:	f003 0308 	and.w	r3, r3, #8
 801ef94:	2b08      	cmp	r3, #8
 801ef96:	d110      	bne.n	801efba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ef98:	68fb      	ldr	r3, [r7, #12]
 801ef9a:	681b      	ldr	r3, [r3, #0]
 801ef9c:	2208      	movs	r2, #8
 801ef9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801efa0:	68f8      	ldr	r0, [r7, #12]
 801efa2:	f000 f839 	bl	801f018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801efa6:	68fb      	ldr	r3, [r7, #12]
 801efa8:	2208      	movs	r2, #8
 801efaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801efae:	68fb      	ldr	r3, [r7, #12]
 801efb0:	2200      	movs	r2, #0
 801efb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801efb6:	2301      	movs	r3, #1
 801efb8:	e029      	b.n	801f00e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801efba:	68fb      	ldr	r3, [r7, #12]
 801efbc:	681b      	ldr	r3, [r3, #0]
 801efbe:	69db      	ldr	r3, [r3, #28]
 801efc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801efc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801efc8:	d111      	bne.n	801efee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801efca:	68fb      	ldr	r3, [r7, #12]
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801efd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801efd4:	68f8      	ldr	r0, [r7, #12]
 801efd6:	f000 f81f 	bl	801f018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801efda:	68fb      	ldr	r3, [r7, #12]
 801efdc:	2220      	movs	r2, #32
 801efde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801efe2:	68fb      	ldr	r3, [r7, #12]
 801efe4:	2200      	movs	r2, #0
 801efe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801efea:	2303      	movs	r3, #3
 801efec:	e00f      	b.n	801f00e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801efee:	68fb      	ldr	r3, [r7, #12]
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	69da      	ldr	r2, [r3, #28]
 801eff4:	68bb      	ldr	r3, [r7, #8]
 801eff6:	4013      	ands	r3, r2
 801eff8:	68ba      	ldr	r2, [r7, #8]
 801effa:	429a      	cmp	r2, r3
 801effc:	bf0c      	ite	eq
 801effe:	2301      	moveq	r3, #1
 801f000:	2300      	movne	r3, #0
 801f002:	b2db      	uxtb	r3, r3
 801f004:	461a      	mov	r2, r3
 801f006:	79fb      	ldrb	r3, [r7, #7]
 801f008:	429a      	cmp	r2, r3
 801f00a:	d0a0      	beq.n	801ef4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801f00c:	2300      	movs	r3, #0
}
 801f00e:	4618      	mov	r0, r3
 801f010:	3710      	adds	r7, #16
 801f012:	46bd      	mov	sp, r7
 801f014:	bd80      	pop	{r7, pc}
	...

0801f018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801f018:	b480      	push	{r7}
 801f01a:	b095      	sub	sp, #84	@ 0x54
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	681b      	ldr	r3, [r3, #0]
 801f024:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f028:	e853 3f00 	ldrex	r3, [r3]
 801f02c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801f02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801f034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	461a      	mov	r2, r3
 801f03c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f03e:	643b      	str	r3, [r7, #64]	@ 0x40
 801f040:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f042:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801f044:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801f046:	e841 2300 	strex	r3, r2, [r1]
 801f04a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801f04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d1e6      	bne.n	801f020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	681b      	ldr	r3, [r3, #0]
 801f056:	3308      	adds	r3, #8
 801f058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f05a:	6a3b      	ldr	r3, [r7, #32]
 801f05c:	e853 3f00 	ldrex	r3, [r3]
 801f060:	61fb      	str	r3, [r7, #28]
   return(result);
 801f062:	69fa      	ldr	r2, [r7, #28]
 801f064:	4b1e      	ldr	r3, [pc, #120]	@ (801f0e0 <UART_EndRxTransfer+0xc8>)
 801f066:	4013      	ands	r3, r2
 801f068:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	3308      	adds	r3, #8
 801f070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801f072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801f074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f076:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f07a:	e841 2300 	strex	r3, r2, [r1]
 801f07e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801f080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f082:	2b00      	cmp	r3, #0
 801f084:	d1e5      	bne.n	801f052 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f08a:	2b01      	cmp	r3, #1
 801f08c:	d118      	bne.n	801f0c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	681b      	ldr	r3, [r3, #0]
 801f092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f094:	68fb      	ldr	r3, [r7, #12]
 801f096:	e853 3f00 	ldrex	r3, [r3]
 801f09a:	60bb      	str	r3, [r7, #8]
   return(result);
 801f09c:	68bb      	ldr	r3, [r7, #8]
 801f09e:	f023 0310 	bic.w	r3, r3, #16
 801f0a2:	647b      	str	r3, [r7, #68]	@ 0x44
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	461a      	mov	r2, r3
 801f0aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f0ac:	61bb      	str	r3, [r7, #24]
 801f0ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f0b0:	6979      	ldr	r1, [r7, #20]
 801f0b2:	69ba      	ldr	r2, [r7, #24]
 801f0b4:	e841 2300 	strex	r3, r2, [r1]
 801f0b8:	613b      	str	r3, [r7, #16]
   return(result);
 801f0ba:	693b      	ldr	r3, [r7, #16]
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d1e6      	bne.n	801f08e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	2220      	movs	r2, #32
 801f0c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	2200      	movs	r2, #0
 801f0cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	2200      	movs	r2, #0
 801f0d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801f0d4:	bf00      	nop
 801f0d6:	3754      	adds	r7, #84	@ 0x54
 801f0d8:	46bd      	mov	sp, r7
 801f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0de:	4770      	bx	lr
 801f0e0:	effffffe 	.word	0xeffffffe

0801f0e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801f0e4:	b480      	push	{r7}
 801f0e6:	b085      	sub	sp, #20
 801f0e8:	af00      	add	r7, sp, #0
 801f0ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801f0f2:	2b01      	cmp	r3, #1
 801f0f4:	d101      	bne.n	801f0fa <HAL_UARTEx_DisableFifoMode+0x16>
 801f0f6:	2302      	movs	r3, #2
 801f0f8:	e027      	b.n	801f14a <HAL_UARTEx_DisableFifoMode+0x66>
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	2201      	movs	r2, #1
 801f0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	2224      	movs	r2, #36	@ 0x24
 801f106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	681a      	ldr	r2, [r3, #0]
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	f022 0201 	bic.w	r2, r2, #1
 801f120:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801f122:	68fb      	ldr	r3, [r7, #12]
 801f124:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801f128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801f12a:	687b      	ldr	r3, [r7, #4]
 801f12c:	2200      	movs	r2, #0
 801f12e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	68fa      	ldr	r2, [r7, #12]
 801f136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	2220      	movs	r2, #32
 801f13c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	2200      	movs	r2, #0
 801f144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801f148:	2300      	movs	r3, #0
}
 801f14a:	4618      	mov	r0, r3
 801f14c:	3714      	adds	r7, #20
 801f14e:	46bd      	mov	sp, r7
 801f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f154:	4770      	bx	lr

0801f156 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801f156:	b580      	push	{r7, lr}
 801f158:	b084      	sub	sp, #16
 801f15a:	af00      	add	r7, sp, #0
 801f15c:	6078      	str	r0, [r7, #4]
 801f15e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801f166:	2b01      	cmp	r3, #1
 801f168:	d101      	bne.n	801f16e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801f16a:	2302      	movs	r3, #2
 801f16c:	e02d      	b.n	801f1ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	2201      	movs	r2, #1
 801f172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	2224      	movs	r2, #36	@ 0x24
 801f17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	681b      	ldr	r3, [r3, #0]
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	681b      	ldr	r3, [r3, #0]
 801f18a:	681a      	ldr	r2, [r3, #0]
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	f022 0201 	bic.w	r2, r2, #1
 801f194:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	689b      	ldr	r3, [r3, #8]
 801f19c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	683a      	ldr	r2, [r7, #0]
 801f1a6:	430a      	orrs	r2, r1
 801f1a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801f1aa:	6878      	ldr	r0, [r7, #4]
 801f1ac:	f000 f850 	bl	801f250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	68fa      	ldr	r2, [r7, #12]
 801f1b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	2220      	movs	r2, #32
 801f1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	2200      	movs	r2, #0
 801f1c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801f1c8:	2300      	movs	r3, #0
}
 801f1ca:	4618      	mov	r0, r3
 801f1cc:	3710      	adds	r7, #16
 801f1ce:	46bd      	mov	sp, r7
 801f1d0:	bd80      	pop	{r7, pc}

0801f1d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801f1d2:	b580      	push	{r7, lr}
 801f1d4:	b084      	sub	sp, #16
 801f1d6:	af00      	add	r7, sp, #0
 801f1d8:	6078      	str	r0, [r7, #4]
 801f1da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801f1e2:	2b01      	cmp	r3, #1
 801f1e4:	d101      	bne.n	801f1ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801f1e6:	2302      	movs	r3, #2
 801f1e8:	e02d      	b.n	801f246 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	2201      	movs	r2, #1
 801f1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	2224      	movs	r2, #36	@ 0x24
 801f1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	681b      	ldr	r3, [r3, #0]
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	681a      	ldr	r2, [r3, #0]
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	681b      	ldr	r3, [r3, #0]
 801f20c:	f022 0201 	bic.w	r2, r2, #1
 801f210:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	689b      	ldr	r3, [r3, #8]
 801f218:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	683a      	ldr	r2, [r7, #0]
 801f222:	430a      	orrs	r2, r1
 801f224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801f226:	6878      	ldr	r0, [r7, #4]
 801f228:	f000 f812 	bl	801f250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	681b      	ldr	r3, [r3, #0]
 801f230:	68fa      	ldr	r2, [r7, #12]
 801f232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	2220      	movs	r2, #32
 801f238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	2200      	movs	r2, #0
 801f240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801f244:	2300      	movs	r3, #0
}
 801f246:	4618      	mov	r0, r3
 801f248:	3710      	adds	r7, #16
 801f24a:	46bd      	mov	sp, r7
 801f24c:	bd80      	pop	{r7, pc}
	...

0801f250 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801f250:	b480      	push	{r7}
 801f252:	b085      	sub	sp, #20
 801f254:	af00      	add	r7, sp, #0
 801f256:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f25c:	2b00      	cmp	r3, #0
 801f25e:	d108      	bne.n	801f272 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	2201      	movs	r2, #1
 801f264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	2201      	movs	r2, #1
 801f26c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801f270:	e031      	b.n	801f2d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801f272:	2310      	movs	r3, #16
 801f274:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801f276:	2310      	movs	r3, #16
 801f278:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	689b      	ldr	r3, [r3, #8]
 801f280:	0e5b      	lsrs	r3, r3, #25
 801f282:	b2db      	uxtb	r3, r3
 801f284:	f003 0307 	and.w	r3, r3, #7
 801f288:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	689b      	ldr	r3, [r3, #8]
 801f290:	0f5b      	lsrs	r3, r3, #29
 801f292:	b2db      	uxtb	r3, r3
 801f294:	f003 0307 	and.w	r3, r3, #7
 801f298:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801f29a:	7bbb      	ldrb	r3, [r7, #14]
 801f29c:	7b3a      	ldrb	r2, [r7, #12]
 801f29e:	4911      	ldr	r1, [pc, #68]	@ (801f2e4 <UARTEx_SetNbDataToProcess+0x94>)
 801f2a0:	5c8a      	ldrb	r2, [r1, r2]
 801f2a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801f2a6:	7b3a      	ldrb	r2, [r7, #12]
 801f2a8:	490f      	ldr	r1, [pc, #60]	@ (801f2e8 <UARTEx_SetNbDataToProcess+0x98>)
 801f2aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801f2ac:	fb93 f3f2 	sdiv	r3, r3, r2
 801f2b0:	b29a      	uxth	r2, r3
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801f2b8:	7bfb      	ldrb	r3, [r7, #15]
 801f2ba:	7b7a      	ldrb	r2, [r7, #13]
 801f2bc:	4909      	ldr	r1, [pc, #36]	@ (801f2e4 <UARTEx_SetNbDataToProcess+0x94>)
 801f2be:	5c8a      	ldrb	r2, [r1, r2]
 801f2c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801f2c4:	7b7a      	ldrb	r2, [r7, #13]
 801f2c6:	4908      	ldr	r1, [pc, #32]	@ (801f2e8 <UARTEx_SetNbDataToProcess+0x98>)
 801f2c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801f2ca:	fb93 f3f2 	sdiv	r3, r3, r2
 801f2ce:	b29a      	uxth	r2, r3
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801f2d6:	bf00      	nop
 801f2d8:	3714      	adds	r7, #20
 801f2da:	46bd      	mov	sp, r7
 801f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2e0:	4770      	bx	lr
 801f2e2:	bf00      	nop
 801f2e4:	080321e8 	.word	0x080321e8
 801f2e8:	080321f0 	.word	0x080321f0

0801f2ec <__NVIC_SetPriority>:
{
 801f2ec:	b480      	push	{r7}
 801f2ee:	b083      	sub	sp, #12
 801f2f0:	af00      	add	r7, sp, #0
 801f2f2:	4603      	mov	r3, r0
 801f2f4:	6039      	str	r1, [r7, #0]
 801f2f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801f2f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	db0a      	blt.n	801f316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801f300:	683b      	ldr	r3, [r7, #0]
 801f302:	b2da      	uxtb	r2, r3
 801f304:	490c      	ldr	r1, [pc, #48]	@ (801f338 <__NVIC_SetPriority+0x4c>)
 801f306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f30a:	0112      	lsls	r2, r2, #4
 801f30c:	b2d2      	uxtb	r2, r2
 801f30e:	440b      	add	r3, r1
 801f310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801f314:	e00a      	b.n	801f32c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801f316:	683b      	ldr	r3, [r7, #0]
 801f318:	b2da      	uxtb	r2, r3
 801f31a:	4908      	ldr	r1, [pc, #32]	@ (801f33c <__NVIC_SetPriority+0x50>)
 801f31c:	88fb      	ldrh	r3, [r7, #6]
 801f31e:	f003 030f 	and.w	r3, r3, #15
 801f322:	3b04      	subs	r3, #4
 801f324:	0112      	lsls	r2, r2, #4
 801f326:	b2d2      	uxtb	r2, r2
 801f328:	440b      	add	r3, r1
 801f32a:	761a      	strb	r2, [r3, #24]
}
 801f32c:	bf00      	nop
 801f32e:	370c      	adds	r7, #12
 801f330:	46bd      	mov	sp, r7
 801f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f336:	4770      	bx	lr
 801f338:	e000e100 	.word	0xe000e100
 801f33c:	e000ed00 	.word	0xe000ed00

0801f340 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801f340:	b580      	push	{r7, lr}
 801f342:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801f344:	4b05      	ldr	r3, [pc, #20]	@ (801f35c <SysTick_Handler+0x1c>)
 801f346:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801f348:	f002 f98a 	bl	8021660 <xTaskGetSchedulerState>
 801f34c:	4603      	mov	r3, r0
 801f34e:	2b01      	cmp	r3, #1
 801f350:	d001      	beq.n	801f356 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801f352:	f000 fda1 	bl	801fe98 <xPortSysTickHandler>
  }
}
 801f356:	bf00      	nop
 801f358:	bd80      	pop	{r7, pc}
 801f35a:	bf00      	nop
 801f35c:	e000e010 	.word	0xe000e010

0801f360 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801f360:	b580      	push	{r7, lr}
 801f362:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801f364:	2100      	movs	r1, #0
 801f366:	f06f 0004 	mvn.w	r0, #4
 801f36a:	f7ff ffbf 	bl	801f2ec <__NVIC_SetPriority>
#endif
}
 801f36e:	bf00      	nop
 801f370:	bd80      	pop	{r7, pc}
	...

0801f374 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801f374:	b480      	push	{r7}
 801f376:	b083      	sub	sp, #12
 801f378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f37a:	f3ef 8305 	mrs	r3, IPSR
 801f37e:	603b      	str	r3, [r7, #0]
  return(result);
 801f380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801f382:	2b00      	cmp	r3, #0
 801f384:	d003      	beq.n	801f38e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801f386:	f06f 0305 	mvn.w	r3, #5
 801f38a:	607b      	str	r3, [r7, #4]
 801f38c:	e00c      	b.n	801f3a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801f38e:	4b0a      	ldr	r3, [pc, #40]	@ (801f3b8 <osKernelInitialize+0x44>)
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	2b00      	cmp	r3, #0
 801f394:	d105      	bne.n	801f3a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801f396:	4b08      	ldr	r3, [pc, #32]	@ (801f3b8 <osKernelInitialize+0x44>)
 801f398:	2201      	movs	r2, #1
 801f39a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801f39c:	2300      	movs	r3, #0
 801f39e:	607b      	str	r3, [r7, #4]
 801f3a0:	e002      	b.n	801f3a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801f3a2:	f04f 33ff 	mov.w	r3, #4294967295
 801f3a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801f3a8:	687b      	ldr	r3, [r7, #4]
}
 801f3aa:	4618      	mov	r0, r3
 801f3ac:	370c      	adds	r7, #12
 801f3ae:	46bd      	mov	sp, r7
 801f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3b4:	4770      	bx	lr
 801f3b6:	bf00      	nop
 801f3b8:	24010c60 	.word	0x24010c60

0801f3bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801f3bc:	b580      	push	{r7, lr}
 801f3be:	b082      	sub	sp, #8
 801f3c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f3c2:	f3ef 8305 	mrs	r3, IPSR
 801f3c6:	603b      	str	r3, [r7, #0]
  return(result);
 801f3c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801f3ca:	2b00      	cmp	r3, #0
 801f3cc:	d003      	beq.n	801f3d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 801f3ce:	f06f 0305 	mvn.w	r3, #5
 801f3d2:	607b      	str	r3, [r7, #4]
 801f3d4:	e010      	b.n	801f3f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801f3d6:	4b0b      	ldr	r3, [pc, #44]	@ (801f404 <osKernelStart+0x48>)
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	2b01      	cmp	r3, #1
 801f3dc:	d109      	bne.n	801f3f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801f3de:	f7ff ffbf 	bl	801f360 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801f3e2:	4b08      	ldr	r3, [pc, #32]	@ (801f404 <osKernelStart+0x48>)
 801f3e4:	2202      	movs	r2, #2
 801f3e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801f3e8:	f001 fcd6 	bl	8020d98 <vTaskStartScheduler>
      stat = osOK;
 801f3ec:	2300      	movs	r3, #0
 801f3ee:	607b      	str	r3, [r7, #4]
 801f3f0:	e002      	b.n	801f3f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801f3f2:	f04f 33ff 	mov.w	r3, #4294967295
 801f3f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801f3f8:	687b      	ldr	r3, [r7, #4]
}
 801f3fa:	4618      	mov	r0, r3
 801f3fc:	3708      	adds	r7, #8
 801f3fe:	46bd      	mov	sp, r7
 801f400:	bd80      	pop	{r7, pc}
 801f402:	bf00      	nop
 801f404:	24010c60 	.word	0x24010c60

0801f408 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801f408:	b580      	push	{r7, lr}
 801f40a:	b08e      	sub	sp, #56	@ 0x38
 801f40c:	af04      	add	r7, sp, #16
 801f40e:	60f8      	str	r0, [r7, #12]
 801f410:	60b9      	str	r1, [r7, #8]
 801f412:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801f414:	2300      	movs	r3, #0
 801f416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f418:	f3ef 8305 	mrs	r3, IPSR
 801f41c:	617b      	str	r3, [r7, #20]
  return(result);
 801f41e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801f420:	2b00      	cmp	r3, #0
 801f422:	d17e      	bne.n	801f522 <osThreadNew+0x11a>
 801f424:	68fb      	ldr	r3, [r7, #12]
 801f426:	2b00      	cmp	r3, #0
 801f428:	d07b      	beq.n	801f522 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801f42a:	2380      	movs	r3, #128	@ 0x80
 801f42c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801f42e:	2318      	movs	r3, #24
 801f430:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801f432:	2300      	movs	r3, #0
 801f434:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 801f436:	f04f 33ff 	mov.w	r3, #4294967295
 801f43a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d045      	beq.n	801f4ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	681b      	ldr	r3, [r3, #0]
 801f446:	2b00      	cmp	r3, #0
 801f448:	d002      	beq.n	801f450 <osThreadNew+0x48>
        name = attr->name;
 801f44a:	687b      	ldr	r3, [r7, #4]
 801f44c:	681b      	ldr	r3, [r3, #0]
 801f44e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	699b      	ldr	r3, [r3, #24]
 801f454:	2b00      	cmp	r3, #0
 801f456:	d002      	beq.n	801f45e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	699b      	ldr	r3, [r3, #24]
 801f45c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801f45e:	69fb      	ldr	r3, [r7, #28]
 801f460:	2b00      	cmp	r3, #0
 801f462:	d008      	beq.n	801f476 <osThreadNew+0x6e>
 801f464:	69fb      	ldr	r3, [r7, #28]
 801f466:	2b38      	cmp	r3, #56	@ 0x38
 801f468:	d805      	bhi.n	801f476 <osThreadNew+0x6e>
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	685b      	ldr	r3, [r3, #4]
 801f46e:	f003 0301 	and.w	r3, r3, #1
 801f472:	2b00      	cmp	r3, #0
 801f474:	d001      	beq.n	801f47a <osThreadNew+0x72>
        return (NULL);
 801f476:	2300      	movs	r3, #0
 801f478:	e054      	b.n	801f524 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	695b      	ldr	r3, [r3, #20]
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d003      	beq.n	801f48a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	695b      	ldr	r3, [r3, #20]
 801f486:	089b      	lsrs	r3, r3, #2
 801f488:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	689b      	ldr	r3, [r3, #8]
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d00e      	beq.n	801f4b0 <osThreadNew+0xa8>
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	68db      	ldr	r3, [r3, #12]
 801f496:	2ba7      	cmp	r3, #167	@ 0xa7
 801f498:	d90a      	bls.n	801f4b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d006      	beq.n	801f4b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	695b      	ldr	r3, [r3, #20]
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	d002      	beq.n	801f4b0 <osThreadNew+0xa8>
        mem = 1;
 801f4aa:	2301      	movs	r3, #1
 801f4ac:	61bb      	str	r3, [r7, #24]
 801f4ae:	e010      	b.n	801f4d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	689b      	ldr	r3, [r3, #8]
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	d10c      	bne.n	801f4d2 <osThreadNew+0xca>
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	68db      	ldr	r3, [r3, #12]
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	d108      	bne.n	801f4d2 <osThreadNew+0xca>
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	691b      	ldr	r3, [r3, #16]
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d104      	bne.n	801f4d2 <osThreadNew+0xca>
          mem = 0;
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	61bb      	str	r3, [r7, #24]
 801f4cc:	e001      	b.n	801f4d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801f4ce:	2300      	movs	r3, #0
 801f4d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801f4d2:	69bb      	ldr	r3, [r7, #24]
 801f4d4:	2b01      	cmp	r3, #1
 801f4d6:	d110      	bne.n	801f4fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801f4dc:	687a      	ldr	r2, [r7, #4]
 801f4de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801f4e0:	9202      	str	r2, [sp, #8]
 801f4e2:	9301      	str	r3, [sp, #4]
 801f4e4:	69fb      	ldr	r3, [r7, #28]
 801f4e6:	9300      	str	r3, [sp, #0]
 801f4e8:	68bb      	ldr	r3, [r7, #8]
 801f4ea:	6a3a      	ldr	r2, [r7, #32]
 801f4ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f4ee:	68f8      	ldr	r0, [r7, #12]
 801f4f0:	f001 fa5e 	bl	80209b0 <xTaskCreateStatic>
 801f4f4:	4603      	mov	r3, r0
 801f4f6:	613b      	str	r3, [r7, #16]
 801f4f8:	e013      	b.n	801f522 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801f4fa:	69bb      	ldr	r3, [r7, #24]
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	d110      	bne.n	801f522 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801f500:	6a3b      	ldr	r3, [r7, #32]
 801f502:	b29a      	uxth	r2, r3
 801f504:	f107 0310 	add.w	r3, r7, #16
 801f508:	9301      	str	r3, [sp, #4]
 801f50a:	69fb      	ldr	r3, [r7, #28]
 801f50c:	9300      	str	r3, [sp, #0]
 801f50e:	68bb      	ldr	r3, [r7, #8]
 801f510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f512:	68f8      	ldr	r0, [r7, #12]
 801f514:	f001 faac 	bl	8020a70 <xTaskCreate>
 801f518:	4603      	mov	r3, r0
 801f51a:	2b01      	cmp	r3, #1
 801f51c:	d001      	beq.n	801f522 <osThreadNew+0x11a>
            hTask = NULL;
 801f51e:	2300      	movs	r3, #0
 801f520:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801f522:	693b      	ldr	r3, [r7, #16]
}
 801f524:	4618      	mov	r0, r3
 801f526:	3728      	adds	r7, #40	@ 0x28
 801f528:	46bd      	mov	sp, r7
 801f52a:	bd80      	pop	{r7, pc}

0801f52c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801f52c:	b580      	push	{r7, lr}
 801f52e:	b084      	sub	sp, #16
 801f530:	af00      	add	r7, sp, #0
 801f532:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801f534:	f3ef 8305 	mrs	r3, IPSR
 801f538:	60bb      	str	r3, [r7, #8]
  return(result);
 801f53a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d003      	beq.n	801f548 <osDelay+0x1c>
    stat = osErrorISR;
 801f540:	f06f 0305 	mvn.w	r3, #5
 801f544:	60fb      	str	r3, [r7, #12]
 801f546:	e007      	b.n	801f558 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801f548:	2300      	movs	r3, #0
 801f54a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	2b00      	cmp	r3, #0
 801f550:	d002      	beq.n	801f558 <osDelay+0x2c>
      vTaskDelay(ticks);
 801f552:	6878      	ldr	r0, [r7, #4]
 801f554:	f001 fbea 	bl	8020d2c <vTaskDelay>
    }
  }

  return (stat);
 801f558:	68fb      	ldr	r3, [r7, #12]
}
 801f55a:	4618      	mov	r0, r3
 801f55c:	3710      	adds	r7, #16
 801f55e:	46bd      	mov	sp, r7
 801f560:	bd80      	pop	{r7, pc}
	...

0801f564 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801f564:	b480      	push	{r7}
 801f566:	b085      	sub	sp, #20
 801f568:	af00      	add	r7, sp, #0
 801f56a:	60f8      	str	r0, [r7, #12]
 801f56c:	60b9      	str	r1, [r7, #8]
 801f56e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801f570:	68fb      	ldr	r3, [r7, #12]
 801f572:	4a07      	ldr	r2, [pc, #28]	@ (801f590 <vApplicationGetIdleTaskMemory+0x2c>)
 801f574:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801f576:	68bb      	ldr	r3, [r7, #8]
 801f578:	4a06      	ldr	r2, [pc, #24]	@ (801f594 <vApplicationGetIdleTaskMemory+0x30>)
 801f57a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	2280      	movs	r2, #128	@ 0x80
 801f580:	601a      	str	r2, [r3, #0]
}
 801f582:	bf00      	nop
 801f584:	3714      	adds	r7, #20
 801f586:	46bd      	mov	sp, r7
 801f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f58c:	4770      	bx	lr
 801f58e:	bf00      	nop
 801f590:	24010c64 	.word	0x24010c64
 801f594:	24010d0c 	.word	0x24010d0c

0801f598 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801f598:	b480      	push	{r7}
 801f59a:	b085      	sub	sp, #20
 801f59c:	af00      	add	r7, sp, #0
 801f59e:	60f8      	str	r0, [r7, #12]
 801f5a0:	60b9      	str	r1, [r7, #8]
 801f5a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801f5a4:	68fb      	ldr	r3, [r7, #12]
 801f5a6:	4a07      	ldr	r2, [pc, #28]	@ (801f5c4 <vApplicationGetTimerTaskMemory+0x2c>)
 801f5a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801f5aa:	68bb      	ldr	r3, [r7, #8]
 801f5ac:	4a06      	ldr	r2, [pc, #24]	@ (801f5c8 <vApplicationGetTimerTaskMemory+0x30>)
 801f5ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801f5b6:	601a      	str	r2, [r3, #0]
}
 801f5b8:	bf00      	nop
 801f5ba:	3714      	adds	r7, #20
 801f5bc:	46bd      	mov	sp, r7
 801f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5c2:	4770      	bx	lr
 801f5c4:	24010f0c 	.word	0x24010f0c
 801f5c8:	24010fb4 	.word	0x24010fb4

0801f5cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801f5cc:	b580      	push	{r7, lr}
 801f5ce:	b08a      	sub	sp, #40	@ 0x28
 801f5d0:	af00      	add	r7, sp, #0
 801f5d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801f5d4:	2300      	movs	r3, #0
 801f5d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801f5d8:	f001 fc4e 	bl	8020e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801f5dc:	4b5c      	ldr	r3, [pc, #368]	@ (801f750 <pvPortMalloc+0x184>)
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d101      	bne.n	801f5e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801f5e4:	f000 f924 	bl	801f830 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801f5e8:	4b5a      	ldr	r3, [pc, #360]	@ (801f754 <pvPortMalloc+0x188>)
 801f5ea:	681a      	ldr	r2, [r3, #0]
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	4013      	ands	r3, r2
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	f040 8095 	bne.w	801f720 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	d01e      	beq.n	801f63a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801f5fc:	2208      	movs	r2, #8
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	4413      	add	r3, r2
 801f602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	f003 0307 	and.w	r3, r3, #7
 801f60a:	2b00      	cmp	r3, #0
 801f60c:	d015      	beq.n	801f63a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	f023 0307 	bic.w	r3, r3, #7
 801f614:	3308      	adds	r3, #8
 801f616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	f003 0307 	and.w	r3, r3, #7
 801f61e:	2b00      	cmp	r3, #0
 801f620:	d00b      	beq.n	801f63a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801f622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f626:	f383 8811 	msr	BASEPRI, r3
 801f62a:	f3bf 8f6f 	isb	sy
 801f62e:	f3bf 8f4f 	dsb	sy
 801f632:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801f634:	bf00      	nop
 801f636:	bf00      	nop
 801f638:	e7fd      	b.n	801f636 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	d06f      	beq.n	801f720 <pvPortMalloc+0x154>
 801f640:	4b45      	ldr	r3, [pc, #276]	@ (801f758 <pvPortMalloc+0x18c>)
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	687a      	ldr	r2, [r7, #4]
 801f646:	429a      	cmp	r2, r3
 801f648:	d86a      	bhi.n	801f720 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801f64a:	4b44      	ldr	r3, [pc, #272]	@ (801f75c <pvPortMalloc+0x190>)
 801f64c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801f64e:	4b43      	ldr	r3, [pc, #268]	@ (801f75c <pvPortMalloc+0x190>)
 801f650:	681b      	ldr	r3, [r3, #0]
 801f652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f654:	e004      	b.n	801f660 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801f656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801f65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f662:	685b      	ldr	r3, [r3, #4]
 801f664:	687a      	ldr	r2, [r7, #4]
 801f666:	429a      	cmp	r2, r3
 801f668:	d903      	bls.n	801f672 <pvPortMalloc+0xa6>
 801f66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d1f1      	bne.n	801f656 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801f672:	4b37      	ldr	r3, [pc, #220]	@ (801f750 <pvPortMalloc+0x184>)
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f678:	429a      	cmp	r2, r3
 801f67a:	d051      	beq.n	801f720 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801f67c:	6a3b      	ldr	r3, [r7, #32]
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	2208      	movs	r2, #8
 801f682:	4413      	add	r3, r2
 801f684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801f686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f688:	681a      	ldr	r2, [r3, #0]
 801f68a:	6a3b      	ldr	r3, [r7, #32]
 801f68c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801f68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f690:	685a      	ldr	r2, [r3, #4]
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	1ad2      	subs	r2, r2, r3
 801f696:	2308      	movs	r3, #8
 801f698:	005b      	lsls	r3, r3, #1
 801f69a:	429a      	cmp	r2, r3
 801f69c:	d920      	bls.n	801f6e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801f69e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	4413      	add	r3, r2
 801f6a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f6a6:	69bb      	ldr	r3, [r7, #24]
 801f6a8:	f003 0307 	and.w	r3, r3, #7
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	d00b      	beq.n	801f6c8 <pvPortMalloc+0xfc>
	__asm volatile
 801f6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f6b4:	f383 8811 	msr	BASEPRI, r3
 801f6b8:	f3bf 8f6f 	isb	sy
 801f6bc:	f3bf 8f4f 	dsb	sy
 801f6c0:	613b      	str	r3, [r7, #16]
}
 801f6c2:	bf00      	nop
 801f6c4:	bf00      	nop
 801f6c6:	e7fd      	b.n	801f6c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801f6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6ca:	685a      	ldr	r2, [r3, #4]
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	1ad2      	subs	r2, r2, r3
 801f6d0:	69bb      	ldr	r3, [r7, #24]
 801f6d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801f6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6d6:	687a      	ldr	r2, [r7, #4]
 801f6d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801f6da:	69b8      	ldr	r0, [r7, #24]
 801f6dc:	f000 f90a 	bl	801f8f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801f6e0:	4b1d      	ldr	r3, [pc, #116]	@ (801f758 <pvPortMalloc+0x18c>)
 801f6e2:	681a      	ldr	r2, [r3, #0]
 801f6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6e6:	685b      	ldr	r3, [r3, #4]
 801f6e8:	1ad3      	subs	r3, r2, r3
 801f6ea:	4a1b      	ldr	r2, [pc, #108]	@ (801f758 <pvPortMalloc+0x18c>)
 801f6ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801f6ee:	4b1a      	ldr	r3, [pc, #104]	@ (801f758 <pvPortMalloc+0x18c>)
 801f6f0:	681a      	ldr	r2, [r3, #0]
 801f6f2:	4b1b      	ldr	r3, [pc, #108]	@ (801f760 <pvPortMalloc+0x194>)
 801f6f4:	681b      	ldr	r3, [r3, #0]
 801f6f6:	429a      	cmp	r2, r3
 801f6f8:	d203      	bcs.n	801f702 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801f6fa:	4b17      	ldr	r3, [pc, #92]	@ (801f758 <pvPortMalloc+0x18c>)
 801f6fc:	681b      	ldr	r3, [r3, #0]
 801f6fe:	4a18      	ldr	r2, [pc, #96]	@ (801f760 <pvPortMalloc+0x194>)
 801f700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801f702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f704:	685a      	ldr	r2, [r3, #4]
 801f706:	4b13      	ldr	r3, [pc, #76]	@ (801f754 <pvPortMalloc+0x188>)
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	431a      	orrs	r2, r3
 801f70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f70e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801f710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f712:	2200      	movs	r2, #0
 801f714:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801f716:	4b13      	ldr	r3, [pc, #76]	@ (801f764 <pvPortMalloc+0x198>)
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	3301      	adds	r3, #1
 801f71c:	4a11      	ldr	r2, [pc, #68]	@ (801f764 <pvPortMalloc+0x198>)
 801f71e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801f720:	f001 fbb8 	bl	8020e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801f724:	69fb      	ldr	r3, [r7, #28]
 801f726:	f003 0307 	and.w	r3, r3, #7
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d00b      	beq.n	801f746 <pvPortMalloc+0x17a>
	__asm volatile
 801f72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f732:	f383 8811 	msr	BASEPRI, r3
 801f736:	f3bf 8f6f 	isb	sy
 801f73a:	f3bf 8f4f 	dsb	sy
 801f73e:	60fb      	str	r3, [r7, #12]
}
 801f740:	bf00      	nop
 801f742:	bf00      	nop
 801f744:	e7fd      	b.n	801f742 <pvPortMalloc+0x176>
	return pvReturn;
 801f746:	69fb      	ldr	r3, [r7, #28]
}
 801f748:	4618      	mov	r0, r3
 801f74a:	3728      	adds	r7, #40	@ 0x28
 801f74c:	46bd      	mov	sp, r7
 801f74e:	bd80      	pop	{r7, pc}
 801f750:	240188ec 	.word	0x240188ec
 801f754:	24018900 	.word	0x24018900
 801f758:	240188f0 	.word	0x240188f0
 801f75c:	240188e4 	.word	0x240188e4
 801f760:	240188f4 	.word	0x240188f4
 801f764:	240188f8 	.word	0x240188f8

0801f768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801f768:	b580      	push	{r7, lr}
 801f76a:	b086      	sub	sp, #24
 801f76c:	af00      	add	r7, sp, #0
 801f76e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d04f      	beq.n	801f81a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801f77a:	2308      	movs	r3, #8
 801f77c:	425b      	negs	r3, r3
 801f77e:	697a      	ldr	r2, [r7, #20]
 801f780:	4413      	add	r3, r2
 801f782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801f784:	697b      	ldr	r3, [r7, #20]
 801f786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801f788:	693b      	ldr	r3, [r7, #16]
 801f78a:	685a      	ldr	r2, [r3, #4]
 801f78c:	4b25      	ldr	r3, [pc, #148]	@ (801f824 <vPortFree+0xbc>)
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	4013      	ands	r3, r2
 801f792:	2b00      	cmp	r3, #0
 801f794:	d10b      	bne.n	801f7ae <vPortFree+0x46>
	__asm volatile
 801f796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f79a:	f383 8811 	msr	BASEPRI, r3
 801f79e:	f3bf 8f6f 	isb	sy
 801f7a2:	f3bf 8f4f 	dsb	sy
 801f7a6:	60fb      	str	r3, [r7, #12]
}
 801f7a8:	bf00      	nop
 801f7aa:	bf00      	nop
 801f7ac:	e7fd      	b.n	801f7aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801f7ae:	693b      	ldr	r3, [r7, #16]
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	d00b      	beq.n	801f7ce <vPortFree+0x66>
	__asm volatile
 801f7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f7ba:	f383 8811 	msr	BASEPRI, r3
 801f7be:	f3bf 8f6f 	isb	sy
 801f7c2:	f3bf 8f4f 	dsb	sy
 801f7c6:	60bb      	str	r3, [r7, #8]
}
 801f7c8:	bf00      	nop
 801f7ca:	bf00      	nop
 801f7cc:	e7fd      	b.n	801f7ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801f7ce:	693b      	ldr	r3, [r7, #16]
 801f7d0:	685a      	ldr	r2, [r3, #4]
 801f7d2:	4b14      	ldr	r3, [pc, #80]	@ (801f824 <vPortFree+0xbc>)
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	4013      	ands	r3, r2
 801f7d8:	2b00      	cmp	r3, #0
 801f7da:	d01e      	beq.n	801f81a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801f7dc:	693b      	ldr	r3, [r7, #16]
 801f7de:	681b      	ldr	r3, [r3, #0]
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d11a      	bne.n	801f81a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801f7e4:	693b      	ldr	r3, [r7, #16]
 801f7e6:	685a      	ldr	r2, [r3, #4]
 801f7e8:	4b0e      	ldr	r3, [pc, #56]	@ (801f824 <vPortFree+0xbc>)
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	43db      	mvns	r3, r3
 801f7ee:	401a      	ands	r2, r3
 801f7f0:	693b      	ldr	r3, [r7, #16]
 801f7f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801f7f4:	f001 fb40 	bl	8020e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801f7f8:	693b      	ldr	r3, [r7, #16]
 801f7fa:	685a      	ldr	r2, [r3, #4]
 801f7fc:	4b0a      	ldr	r3, [pc, #40]	@ (801f828 <vPortFree+0xc0>)
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	4413      	add	r3, r2
 801f802:	4a09      	ldr	r2, [pc, #36]	@ (801f828 <vPortFree+0xc0>)
 801f804:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801f806:	6938      	ldr	r0, [r7, #16]
 801f808:	f000 f874 	bl	801f8f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801f80c:	4b07      	ldr	r3, [pc, #28]	@ (801f82c <vPortFree+0xc4>)
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	3301      	adds	r3, #1
 801f812:	4a06      	ldr	r2, [pc, #24]	@ (801f82c <vPortFree+0xc4>)
 801f814:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801f816:	f001 fb3d 	bl	8020e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801f81a:	bf00      	nop
 801f81c:	3718      	adds	r7, #24
 801f81e:	46bd      	mov	sp, r7
 801f820:	bd80      	pop	{r7, pc}
 801f822:	bf00      	nop
 801f824:	24018900 	.word	0x24018900
 801f828:	240188f0 	.word	0x240188f0
 801f82c:	240188fc 	.word	0x240188fc

0801f830 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801f830:	b480      	push	{r7}
 801f832:	b085      	sub	sp, #20
 801f834:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801f836:	f247 5330 	movw	r3, #30000	@ 0x7530
 801f83a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801f83c:	4b27      	ldr	r3, [pc, #156]	@ (801f8dc <prvHeapInit+0xac>)
 801f83e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801f840:	68fb      	ldr	r3, [r7, #12]
 801f842:	f003 0307 	and.w	r3, r3, #7
 801f846:	2b00      	cmp	r3, #0
 801f848:	d00c      	beq.n	801f864 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801f84a:	68fb      	ldr	r3, [r7, #12]
 801f84c:	3307      	adds	r3, #7
 801f84e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f850:	68fb      	ldr	r3, [r7, #12]
 801f852:	f023 0307 	bic.w	r3, r3, #7
 801f856:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801f858:	68ba      	ldr	r2, [r7, #8]
 801f85a:	68fb      	ldr	r3, [r7, #12]
 801f85c:	1ad3      	subs	r3, r2, r3
 801f85e:	4a1f      	ldr	r2, [pc, #124]	@ (801f8dc <prvHeapInit+0xac>)
 801f860:	4413      	add	r3, r2
 801f862:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801f864:	68fb      	ldr	r3, [r7, #12]
 801f866:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801f868:	4a1d      	ldr	r2, [pc, #116]	@ (801f8e0 <prvHeapInit+0xb0>)
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801f86e:	4b1c      	ldr	r3, [pc, #112]	@ (801f8e0 <prvHeapInit+0xb0>)
 801f870:	2200      	movs	r2, #0
 801f872:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	68ba      	ldr	r2, [r7, #8]
 801f878:	4413      	add	r3, r2
 801f87a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801f87c:	2208      	movs	r2, #8
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	1a9b      	subs	r3, r3, r2
 801f882:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	f023 0307 	bic.w	r3, r3, #7
 801f88a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801f88c:	68fb      	ldr	r3, [r7, #12]
 801f88e:	4a15      	ldr	r2, [pc, #84]	@ (801f8e4 <prvHeapInit+0xb4>)
 801f890:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801f892:	4b14      	ldr	r3, [pc, #80]	@ (801f8e4 <prvHeapInit+0xb4>)
 801f894:	681b      	ldr	r3, [r3, #0]
 801f896:	2200      	movs	r2, #0
 801f898:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801f89a:	4b12      	ldr	r3, [pc, #72]	@ (801f8e4 <prvHeapInit+0xb4>)
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	2200      	movs	r2, #0
 801f8a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801f8a6:	683b      	ldr	r3, [r7, #0]
 801f8a8:	68fa      	ldr	r2, [r7, #12]
 801f8aa:	1ad2      	subs	r2, r2, r3
 801f8ac:	683b      	ldr	r3, [r7, #0]
 801f8ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801f8b0:	4b0c      	ldr	r3, [pc, #48]	@ (801f8e4 <prvHeapInit+0xb4>)
 801f8b2:	681a      	ldr	r2, [r3, #0]
 801f8b4:	683b      	ldr	r3, [r7, #0]
 801f8b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f8b8:	683b      	ldr	r3, [r7, #0]
 801f8ba:	685b      	ldr	r3, [r3, #4]
 801f8bc:	4a0a      	ldr	r2, [pc, #40]	@ (801f8e8 <prvHeapInit+0xb8>)
 801f8be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f8c0:	683b      	ldr	r3, [r7, #0]
 801f8c2:	685b      	ldr	r3, [r3, #4]
 801f8c4:	4a09      	ldr	r2, [pc, #36]	@ (801f8ec <prvHeapInit+0xbc>)
 801f8c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f8c8:	4b09      	ldr	r3, [pc, #36]	@ (801f8f0 <prvHeapInit+0xc0>)
 801f8ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801f8ce:	601a      	str	r2, [r3, #0]
}
 801f8d0:	bf00      	nop
 801f8d2:	3714      	adds	r7, #20
 801f8d4:	46bd      	mov	sp, r7
 801f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8da:	4770      	bx	lr
 801f8dc:	240113b4 	.word	0x240113b4
 801f8e0:	240188e4 	.word	0x240188e4
 801f8e4:	240188ec 	.word	0x240188ec
 801f8e8:	240188f4 	.word	0x240188f4
 801f8ec:	240188f0 	.word	0x240188f0
 801f8f0:	24018900 	.word	0x24018900

0801f8f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801f8f4:	b480      	push	{r7}
 801f8f6:	b085      	sub	sp, #20
 801f8f8:	af00      	add	r7, sp, #0
 801f8fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801f8fc:	4b28      	ldr	r3, [pc, #160]	@ (801f9a0 <prvInsertBlockIntoFreeList+0xac>)
 801f8fe:	60fb      	str	r3, [r7, #12]
 801f900:	e002      	b.n	801f908 <prvInsertBlockIntoFreeList+0x14>
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	681b      	ldr	r3, [r3, #0]
 801f906:	60fb      	str	r3, [r7, #12]
 801f908:	68fb      	ldr	r3, [r7, #12]
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	687a      	ldr	r2, [r7, #4]
 801f90e:	429a      	cmp	r2, r3
 801f910:	d8f7      	bhi.n	801f902 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801f912:	68fb      	ldr	r3, [r7, #12]
 801f914:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801f916:	68fb      	ldr	r3, [r7, #12]
 801f918:	685b      	ldr	r3, [r3, #4]
 801f91a:	68ba      	ldr	r2, [r7, #8]
 801f91c:	4413      	add	r3, r2
 801f91e:	687a      	ldr	r2, [r7, #4]
 801f920:	429a      	cmp	r2, r3
 801f922:	d108      	bne.n	801f936 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801f924:	68fb      	ldr	r3, [r7, #12]
 801f926:	685a      	ldr	r2, [r3, #4]
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	685b      	ldr	r3, [r3, #4]
 801f92c:	441a      	add	r2, r3
 801f92e:	68fb      	ldr	r3, [r7, #12]
 801f930:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801f932:	68fb      	ldr	r3, [r7, #12]
 801f934:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	685b      	ldr	r3, [r3, #4]
 801f93e:	68ba      	ldr	r2, [r7, #8]
 801f940:	441a      	add	r2, r3
 801f942:	68fb      	ldr	r3, [r7, #12]
 801f944:	681b      	ldr	r3, [r3, #0]
 801f946:	429a      	cmp	r2, r3
 801f948:	d118      	bne.n	801f97c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801f94a:	68fb      	ldr	r3, [r7, #12]
 801f94c:	681a      	ldr	r2, [r3, #0]
 801f94e:	4b15      	ldr	r3, [pc, #84]	@ (801f9a4 <prvInsertBlockIntoFreeList+0xb0>)
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	429a      	cmp	r2, r3
 801f954:	d00d      	beq.n	801f972 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	685a      	ldr	r2, [r3, #4]
 801f95a:	68fb      	ldr	r3, [r7, #12]
 801f95c:	681b      	ldr	r3, [r3, #0]
 801f95e:	685b      	ldr	r3, [r3, #4]
 801f960:	441a      	add	r2, r3
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801f966:	68fb      	ldr	r3, [r7, #12]
 801f968:	681b      	ldr	r3, [r3, #0]
 801f96a:	681a      	ldr	r2, [r3, #0]
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	601a      	str	r2, [r3, #0]
 801f970:	e008      	b.n	801f984 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801f972:	4b0c      	ldr	r3, [pc, #48]	@ (801f9a4 <prvInsertBlockIntoFreeList+0xb0>)
 801f974:	681a      	ldr	r2, [r3, #0]
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	601a      	str	r2, [r3, #0]
 801f97a:	e003      	b.n	801f984 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801f97c:	68fb      	ldr	r3, [r7, #12]
 801f97e:	681a      	ldr	r2, [r3, #0]
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801f984:	68fa      	ldr	r2, [r7, #12]
 801f986:	687b      	ldr	r3, [r7, #4]
 801f988:	429a      	cmp	r2, r3
 801f98a:	d002      	beq.n	801f992 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801f98c:	68fb      	ldr	r3, [r7, #12]
 801f98e:	687a      	ldr	r2, [r7, #4]
 801f990:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f992:	bf00      	nop
 801f994:	3714      	adds	r7, #20
 801f996:	46bd      	mov	sp, r7
 801f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f99c:	4770      	bx	lr
 801f99e:	bf00      	nop
 801f9a0:	240188e4 	.word	0x240188e4
 801f9a4:	240188ec 	.word	0x240188ec

0801f9a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801f9a8:	b480      	push	{r7}
 801f9aa:	b083      	sub	sp, #12
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	f103 0208 	add.w	r2, r3, #8
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	f04f 32ff 	mov.w	r2, #4294967295
 801f9c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	f103 0208 	add.w	r2, r3, #8
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	f103 0208 	add.w	r2, r3, #8
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801f9d6:	687b      	ldr	r3, [r7, #4]
 801f9d8:	2200      	movs	r2, #0
 801f9da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801f9dc:	bf00      	nop
 801f9de:	370c      	adds	r7, #12
 801f9e0:	46bd      	mov	sp, r7
 801f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9e6:	4770      	bx	lr

0801f9e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801f9e8:	b480      	push	{r7}
 801f9ea:	b083      	sub	sp, #12
 801f9ec:	af00      	add	r7, sp, #0
 801f9ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	2200      	movs	r2, #0
 801f9f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801f9f6:	bf00      	nop
 801f9f8:	370c      	adds	r7, #12
 801f9fa:	46bd      	mov	sp, r7
 801f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa00:	4770      	bx	lr

0801fa02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801fa02:	b480      	push	{r7}
 801fa04:	b085      	sub	sp, #20
 801fa06:	af00      	add	r7, sp, #0
 801fa08:	6078      	str	r0, [r7, #4]
 801fa0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	685b      	ldr	r3, [r3, #4]
 801fa10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801fa12:	683b      	ldr	r3, [r7, #0]
 801fa14:	68fa      	ldr	r2, [r7, #12]
 801fa16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801fa18:	68fb      	ldr	r3, [r7, #12]
 801fa1a:	689a      	ldr	r2, [r3, #8]
 801fa1c:	683b      	ldr	r3, [r7, #0]
 801fa1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801fa20:	68fb      	ldr	r3, [r7, #12]
 801fa22:	689b      	ldr	r3, [r3, #8]
 801fa24:	683a      	ldr	r2, [r7, #0]
 801fa26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801fa28:	68fb      	ldr	r3, [r7, #12]
 801fa2a:	683a      	ldr	r2, [r7, #0]
 801fa2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801fa2e:	683b      	ldr	r3, [r7, #0]
 801fa30:	687a      	ldr	r2, [r7, #4]
 801fa32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	681b      	ldr	r3, [r3, #0]
 801fa38:	1c5a      	adds	r2, r3, #1
 801fa3a:	687b      	ldr	r3, [r7, #4]
 801fa3c:	601a      	str	r2, [r3, #0]
}
 801fa3e:	bf00      	nop
 801fa40:	3714      	adds	r7, #20
 801fa42:	46bd      	mov	sp, r7
 801fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa48:	4770      	bx	lr

0801fa4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801fa4a:	b480      	push	{r7}
 801fa4c:	b085      	sub	sp, #20
 801fa4e:	af00      	add	r7, sp, #0
 801fa50:	6078      	str	r0, [r7, #4]
 801fa52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801fa54:	683b      	ldr	r3, [r7, #0]
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801fa5a:	68bb      	ldr	r3, [r7, #8]
 801fa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fa60:	d103      	bne.n	801fa6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	691b      	ldr	r3, [r3, #16]
 801fa66:	60fb      	str	r3, [r7, #12]
 801fa68:	e00c      	b.n	801fa84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	3308      	adds	r3, #8
 801fa6e:	60fb      	str	r3, [r7, #12]
 801fa70:	e002      	b.n	801fa78 <vListInsert+0x2e>
 801fa72:	68fb      	ldr	r3, [r7, #12]
 801fa74:	685b      	ldr	r3, [r3, #4]
 801fa76:	60fb      	str	r3, [r7, #12]
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	685b      	ldr	r3, [r3, #4]
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	68ba      	ldr	r2, [r7, #8]
 801fa80:	429a      	cmp	r2, r3
 801fa82:	d2f6      	bcs.n	801fa72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801fa84:	68fb      	ldr	r3, [r7, #12]
 801fa86:	685a      	ldr	r2, [r3, #4]
 801fa88:	683b      	ldr	r3, [r7, #0]
 801fa8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801fa8c:	683b      	ldr	r3, [r7, #0]
 801fa8e:	685b      	ldr	r3, [r3, #4]
 801fa90:	683a      	ldr	r2, [r7, #0]
 801fa92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801fa94:	683b      	ldr	r3, [r7, #0]
 801fa96:	68fa      	ldr	r2, [r7, #12]
 801fa98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801fa9a:	68fb      	ldr	r3, [r7, #12]
 801fa9c:	683a      	ldr	r2, [r7, #0]
 801fa9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801faa0:	683b      	ldr	r3, [r7, #0]
 801faa2:	687a      	ldr	r2, [r7, #4]
 801faa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801faa6:	687b      	ldr	r3, [r7, #4]
 801faa8:	681b      	ldr	r3, [r3, #0]
 801faaa:	1c5a      	adds	r2, r3, #1
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	601a      	str	r2, [r3, #0]
}
 801fab0:	bf00      	nop
 801fab2:	3714      	adds	r7, #20
 801fab4:	46bd      	mov	sp, r7
 801fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faba:	4770      	bx	lr

0801fabc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801fabc:	b480      	push	{r7}
 801fabe:	b085      	sub	sp, #20
 801fac0:	af00      	add	r7, sp, #0
 801fac2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	691b      	ldr	r3, [r3, #16]
 801fac8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	685b      	ldr	r3, [r3, #4]
 801face:	687a      	ldr	r2, [r7, #4]
 801fad0:	6892      	ldr	r2, [r2, #8]
 801fad2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	689b      	ldr	r3, [r3, #8]
 801fad8:	687a      	ldr	r2, [r7, #4]
 801fada:	6852      	ldr	r2, [r2, #4]
 801fadc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801fade:	68fb      	ldr	r3, [r7, #12]
 801fae0:	685b      	ldr	r3, [r3, #4]
 801fae2:	687a      	ldr	r2, [r7, #4]
 801fae4:	429a      	cmp	r2, r3
 801fae6:	d103      	bne.n	801faf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	689a      	ldr	r2, [r3, #8]
 801faec:	68fb      	ldr	r3, [r7, #12]
 801faee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801faf0:	687b      	ldr	r3, [r7, #4]
 801faf2:	2200      	movs	r2, #0
 801faf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801faf6:	68fb      	ldr	r3, [r7, #12]
 801faf8:	681b      	ldr	r3, [r3, #0]
 801fafa:	1e5a      	subs	r2, r3, #1
 801fafc:	68fb      	ldr	r3, [r7, #12]
 801fafe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801fb00:	68fb      	ldr	r3, [r7, #12]
 801fb02:	681b      	ldr	r3, [r3, #0]
}
 801fb04:	4618      	mov	r0, r3
 801fb06:	3714      	adds	r7, #20
 801fb08:	46bd      	mov	sp, r7
 801fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb0e:	4770      	bx	lr

0801fb10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801fb10:	b480      	push	{r7}
 801fb12:	b085      	sub	sp, #20
 801fb14:	af00      	add	r7, sp, #0
 801fb16:	60f8      	str	r0, [r7, #12]
 801fb18:	60b9      	str	r1, [r7, #8]
 801fb1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801fb1c:	68fb      	ldr	r3, [r7, #12]
 801fb1e:	3b04      	subs	r3, #4
 801fb20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801fb22:	68fb      	ldr	r3, [r7, #12]
 801fb24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801fb28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801fb2a:	68fb      	ldr	r3, [r7, #12]
 801fb2c:	3b04      	subs	r3, #4
 801fb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801fb30:	68bb      	ldr	r3, [r7, #8]
 801fb32:	f023 0201 	bic.w	r2, r3, #1
 801fb36:	68fb      	ldr	r3, [r7, #12]
 801fb38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801fb3a:	68fb      	ldr	r3, [r7, #12]
 801fb3c:	3b04      	subs	r3, #4
 801fb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801fb40:	4a0c      	ldr	r2, [pc, #48]	@ (801fb74 <pxPortInitialiseStack+0x64>)
 801fb42:	68fb      	ldr	r3, [r7, #12]
 801fb44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801fb46:	68fb      	ldr	r3, [r7, #12]
 801fb48:	3b14      	subs	r3, #20
 801fb4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801fb4c:	687a      	ldr	r2, [r7, #4]
 801fb4e:	68fb      	ldr	r3, [r7, #12]
 801fb50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801fb52:	68fb      	ldr	r3, [r7, #12]
 801fb54:	3b04      	subs	r3, #4
 801fb56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801fb58:	68fb      	ldr	r3, [r7, #12]
 801fb5a:	f06f 0202 	mvn.w	r2, #2
 801fb5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	3b20      	subs	r3, #32
 801fb64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801fb66:	68fb      	ldr	r3, [r7, #12]
}
 801fb68:	4618      	mov	r0, r3
 801fb6a:	3714      	adds	r7, #20
 801fb6c:	46bd      	mov	sp, r7
 801fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb72:	4770      	bx	lr
 801fb74:	0801fb79 	.word	0x0801fb79

0801fb78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801fb78:	b480      	push	{r7}
 801fb7a:	b085      	sub	sp, #20
 801fb7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801fb7e:	2300      	movs	r3, #0
 801fb80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801fb82:	4b13      	ldr	r3, [pc, #76]	@ (801fbd0 <prvTaskExitError+0x58>)
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb8a:	d00b      	beq.n	801fba4 <prvTaskExitError+0x2c>
	__asm volatile
 801fb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fb90:	f383 8811 	msr	BASEPRI, r3
 801fb94:	f3bf 8f6f 	isb	sy
 801fb98:	f3bf 8f4f 	dsb	sy
 801fb9c:	60fb      	str	r3, [r7, #12]
}
 801fb9e:	bf00      	nop
 801fba0:	bf00      	nop
 801fba2:	e7fd      	b.n	801fba0 <prvTaskExitError+0x28>
	__asm volatile
 801fba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fba8:	f383 8811 	msr	BASEPRI, r3
 801fbac:	f3bf 8f6f 	isb	sy
 801fbb0:	f3bf 8f4f 	dsb	sy
 801fbb4:	60bb      	str	r3, [r7, #8]
}
 801fbb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801fbb8:	bf00      	nop
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	d0fc      	beq.n	801fbba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801fbc0:	bf00      	nop
 801fbc2:	bf00      	nop
 801fbc4:	3714      	adds	r7, #20
 801fbc6:	46bd      	mov	sp, r7
 801fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbcc:	4770      	bx	lr
 801fbce:	bf00      	nop
 801fbd0:	240007a4 	.word	0x240007a4
	...

0801fbe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801fbe0:	4b07      	ldr	r3, [pc, #28]	@ (801fc00 <pxCurrentTCBConst2>)
 801fbe2:	6819      	ldr	r1, [r3, #0]
 801fbe4:	6808      	ldr	r0, [r1, #0]
 801fbe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbea:	f380 8809 	msr	PSP, r0
 801fbee:	f3bf 8f6f 	isb	sy
 801fbf2:	f04f 0000 	mov.w	r0, #0
 801fbf6:	f380 8811 	msr	BASEPRI, r0
 801fbfa:	4770      	bx	lr
 801fbfc:	f3af 8000 	nop.w

0801fc00 <pxCurrentTCBConst2>:
 801fc00:	2401894c 	.word	0x2401894c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801fc04:	bf00      	nop
 801fc06:	bf00      	nop

0801fc08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801fc08:	4808      	ldr	r0, [pc, #32]	@ (801fc2c <prvPortStartFirstTask+0x24>)
 801fc0a:	6800      	ldr	r0, [r0, #0]
 801fc0c:	6800      	ldr	r0, [r0, #0]
 801fc0e:	f380 8808 	msr	MSP, r0
 801fc12:	f04f 0000 	mov.w	r0, #0
 801fc16:	f380 8814 	msr	CONTROL, r0
 801fc1a:	b662      	cpsie	i
 801fc1c:	b661      	cpsie	f
 801fc1e:	f3bf 8f4f 	dsb	sy
 801fc22:	f3bf 8f6f 	isb	sy
 801fc26:	df00      	svc	0
 801fc28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801fc2a:	bf00      	nop
 801fc2c:	e000ed08 	.word	0xe000ed08

0801fc30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801fc30:	b580      	push	{r7, lr}
 801fc32:	b086      	sub	sp, #24
 801fc34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801fc36:	4b47      	ldr	r3, [pc, #284]	@ (801fd54 <xPortStartScheduler+0x124>)
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	4a47      	ldr	r2, [pc, #284]	@ (801fd58 <xPortStartScheduler+0x128>)
 801fc3c:	4293      	cmp	r3, r2
 801fc3e:	d10b      	bne.n	801fc58 <xPortStartScheduler+0x28>
	__asm volatile
 801fc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fc44:	f383 8811 	msr	BASEPRI, r3
 801fc48:	f3bf 8f6f 	isb	sy
 801fc4c:	f3bf 8f4f 	dsb	sy
 801fc50:	613b      	str	r3, [r7, #16]
}
 801fc52:	bf00      	nop
 801fc54:	bf00      	nop
 801fc56:	e7fd      	b.n	801fc54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801fc58:	4b3e      	ldr	r3, [pc, #248]	@ (801fd54 <xPortStartScheduler+0x124>)
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	4a3f      	ldr	r2, [pc, #252]	@ (801fd5c <xPortStartScheduler+0x12c>)
 801fc5e:	4293      	cmp	r3, r2
 801fc60:	d10b      	bne.n	801fc7a <xPortStartScheduler+0x4a>
	__asm volatile
 801fc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fc66:	f383 8811 	msr	BASEPRI, r3
 801fc6a:	f3bf 8f6f 	isb	sy
 801fc6e:	f3bf 8f4f 	dsb	sy
 801fc72:	60fb      	str	r3, [r7, #12]
}
 801fc74:	bf00      	nop
 801fc76:	bf00      	nop
 801fc78:	e7fd      	b.n	801fc76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801fc7a:	4b39      	ldr	r3, [pc, #228]	@ (801fd60 <xPortStartScheduler+0x130>)
 801fc7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801fc7e:	697b      	ldr	r3, [r7, #20]
 801fc80:	781b      	ldrb	r3, [r3, #0]
 801fc82:	b2db      	uxtb	r3, r3
 801fc84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801fc86:	697b      	ldr	r3, [r7, #20]
 801fc88:	22ff      	movs	r2, #255	@ 0xff
 801fc8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801fc8c:	697b      	ldr	r3, [r7, #20]
 801fc8e:	781b      	ldrb	r3, [r3, #0]
 801fc90:	b2db      	uxtb	r3, r3
 801fc92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801fc94:	78fb      	ldrb	r3, [r7, #3]
 801fc96:	b2db      	uxtb	r3, r3
 801fc98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801fc9c:	b2da      	uxtb	r2, r3
 801fc9e:	4b31      	ldr	r3, [pc, #196]	@ (801fd64 <xPortStartScheduler+0x134>)
 801fca0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801fca2:	4b31      	ldr	r3, [pc, #196]	@ (801fd68 <xPortStartScheduler+0x138>)
 801fca4:	2207      	movs	r2, #7
 801fca6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801fca8:	e009      	b.n	801fcbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801fcaa:	4b2f      	ldr	r3, [pc, #188]	@ (801fd68 <xPortStartScheduler+0x138>)
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	3b01      	subs	r3, #1
 801fcb0:	4a2d      	ldr	r2, [pc, #180]	@ (801fd68 <xPortStartScheduler+0x138>)
 801fcb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801fcb4:	78fb      	ldrb	r3, [r7, #3]
 801fcb6:	b2db      	uxtb	r3, r3
 801fcb8:	005b      	lsls	r3, r3, #1
 801fcba:	b2db      	uxtb	r3, r3
 801fcbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801fcbe:	78fb      	ldrb	r3, [r7, #3]
 801fcc0:	b2db      	uxtb	r3, r3
 801fcc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801fcc6:	2b80      	cmp	r3, #128	@ 0x80
 801fcc8:	d0ef      	beq.n	801fcaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801fcca:	4b27      	ldr	r3, [pc, #156]	@ (801fd68 <xPortStartScheduler+0x138>)
 801fccc:	681b      	ldr	r3, [r3, #0]
 801fcce:	f1c3 0307 	rsb	r3, r3, #7
 801fcd2:	2b04      	cmp	r3, #4
 801fcd4:	d00b      	beq.n	801fcee <xPortStartScheduler+0xbe>
	__asm volatile
 801fcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fcda:	f383 8811 	msr	BASEPRI, r3
 801fcde:	f3bf 8f6f 	isb	sy
 801fce2:	f3bf 8f4f 	dsb	sy
 801fce6:	60bb      	str	r3, [r7, #8]
}
 801fce8:	bf00      	nop
 801fcea:	bf00      	nop
 801fcec:	e7fd      	b.n	801fcea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801fcee:	4b1e      	ldr	r3, [pc, #120]	@ (801fd68 <xPortStartScheduler+0x138>)
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	021b      	lsls	r3, r3, #8
 801fcf4:	4a1c      	ldr	r2, [pc, #112]	@ (801fd68 <xPortStartScheduler+0x138>)
 801fcf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801fcf8:	4b1b      	ldr	r3, [pc, #108]	@ (801fd68 <xPortStartScheduler+0x138>)
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801fd00:	4a19      	ldr	r2, [pc, #100]	@ (801fd68 <xPortStartScheduler+0x138>)
 801fd02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	b2da      	uxtb	r2, r3
 801fd08:	697b      	ldr	r3, [r7, #20]
 801fd0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801fd0c:	4b17      	ldr	r3, [pc, #92]	@ (801fd6c <xPortStartScheduler+0x13c>)
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	4a16      	ldr	r2, [pc, #88]	@ (801fd6c <xPortStartScheduler+0x13c>)
 801fd12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801fd16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801fd18:	4b14      	ldr	r3, [pc, #80]	@ (801fd6c <xPortStartScheduler+0x13c>)
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	4a13      	ldr	r2, [pc, #76]	@ (801fd6c <xPortStartScheduler+0x13c>)
 801fd1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801fd22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801fd24:	f000 f8da 	bl	801fedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801fd28:	4b11      	ldr	r3, [pc, #68]	@ (801fd70 <xPortStartScheduler+0x140>)
 801fd2a:	2200      	movs	r2, #0
 801fd2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801fd2e:	f000 f8f9 	bl	801ff24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801fd32:	4b10      	ldr	r3, [pc, #64]	@ (801fd74 <xPortStartScheduler+0x144>)
 801fd34:	681b      	ldr	r3, [r3, #0]
 801fd36:	4a0f      	ldr	r2, [pc, #60]	@ (801fd74 <xPortStartScheduler+0x144>)
 801fd38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801fd3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801fd3e:	f7ff ff63 	bl	801fc08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801fd42:	f001 fa0f 	bl	8021164 <vTaskSwitchContext>
	prvTaskExitError();
 801fd46:	f7ff ff17 	bl	801fb78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801fd4a:	2300      	movs	r3, #0
}
 801fd4c:	4618      	mov	r0, r3
 801fd4e:	3718      	adds	r7, #24
 801fd50:	46bd      	mov	sp, r7
 801fd52:	bd80      	pop	{r7, pc}
 801fd54:	e000ed00 	.word	0xe000ed00
 801fd58:	410fc271 	.word	0x410fc271
 801fd5c:	410fc270 	.word	0x410fc270
 801fd60:	e000e400 	.word	0xe000e400
 801fd64:	24018904 	.word	0x24018904
 801fd68:	24018908 	.word	0x24018908
 801fd6c:	e000ed20 	.word	0xe000ed20
 801fd70:	240007a4 	.word	0x240007a4
 801fd74:	e000ef34 	.word	0xe000ef34

0801fd78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801fd78:	b480      	push	{r7}
 801fd7a:	b083      	sub	sp, #12
 801fd7c:	af00      	add	r7, sp, #0
	__asm volatile
 801fd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fd82:	f383 8811 	msr	BASEPRI, r3
 801fd86:	f3bf 8f6f 	isb	sy
 801fd8a:	f3bf 8f4f 	dsb	sy
 801fd8e:	607b      	str	r3, [r7, #4]
}
 801fd90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801fd92:	4b10      	ldr	r3, [pc, #64]	@ (801fdd4 <vPortEnterCritical+0x5c>)
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	3301      	adds	r3, #1
 801fd98:	4a0e      	ldr	r2, [pc, #56]	@ (801fdd4 <vPortEnterCritical+0x5c>)
 801fd9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801fd9c:	4b0d      	ldr	r3, [pc, #52]	@ (801fdd4 <vPortEnterCritical+0x5c>)
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	2b01      	cmp	r3, #1
 801fda2:	d110      	bne.n	801fdc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801fda4:	4b0c      	ldr	r3, [pc, #48]	@ (801fdd8 <vPortEnterCritical+0x60>)
 801fda6:	681b      	ldr	r3, [r3, #0]
 801fda8:	b2db      	uxtb	r3, r3
 801fdaa:	2b00      	cmp	r3, #0
 801fdac:	d00b      	beq.n	801fdc6 <vPortEnterCritical+0x4e>
	__asm volatile
 801fdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fdb2:	f383 8811 	msr	BASEPRI, r3
 801fdb6:	f3bf 8f6f 	isb	sy
 801fdba:	f3bf 8f4f 	dsb	sy
 801fdbe:	603b      	str	r3, [r7, #0]
}
 801fdc0:	bf00      	nop
 801fdc2:	bf00      	nop
 801fdc4:	e7fd      	b.n	801fdc2 <vPortEnterCritical+0x4a>
	}
}
 801fdc6:	bf00      	nop
 801fdc8:	370c      	adds	r7, #12
 801fdca:	46bd      	mov	sp, r7
 801fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdd0:	4770      	bx	lr
 801fdd2:	bf00      	nop
 801fdd4:	240007a4 	.word	0x240007a4
 801fdd8:	e000ed04 	.word	0xe000ed04

0801fddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801fddc:	b480      	push	{r7}
 801fdde:	b083      	sub	sp, #12
 801fde0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801fde2:	4b12      	ldr	r3, [pc, #72]	@ (801fe2c <vPortExitCritical+0x50>)
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	d10b      	bne.n	801fe02 <vPortExitCritical+0x26>
	__asm volatile
 801fdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fdee:	f383 8811 	msr	BASEPRI, r3
 801fdf2:	f3bf 8f6f 	isb	sy
 801fdf6:	f3bf 8f4f 	dsb	sy
 801fdfa:	607b      	str	r3, [r7, #4]
}
 801fdfc:	bf00      	nop
 801fdfe:	bf00      	nop
 801fe00:	e7fd      	b.n	801fdfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801fe02:	4b0a      	ldr	r3, [pc, #40]	@ (801fe2c <vPortExitCritical+0x50>)
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	3b01      	subs	r3, #1
 801fe08:	4a08      	ldr	r2, [pc, #32]	@ (801fe2c <vPortExitCritical+0x50>)
 801fe0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801fe0c:	4b07      	ldr	r3, [pc, #28]	@ (801fe2c <vPortExitCritical+0x50>)
 801fe0e:	681b      	ldr	r3, [r3, #0]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d105      	bne.n	801fe20 <vPortExitCritical+0x44>
 801fe14:	2300      	movs	r3, #0
 801fe16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801fe18:	683b      	ldr	r3, [r7, #0]
 801fe1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801fe1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801fe20:	bf00      	nop
 801fe22:	370c      	adds	r7, #12
 801fe24:	46bd      	mov	sp, r7
 801fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe2a:	4770      	bx	lr
 801fe2c:	240007a4 	.word	0x240007a4

0801fe30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801fe30:	f3ef 8009 	mrs	r0, PSP
 801fe34:	f3bf 8f6f 	isb	sy
 801fe38:	4b15      	ldr	r3, [pc, #84]	@ (801fe90 <pxCurrentTCBConst>)
 801fe3a:	681a      	ldr	r2, [r3, #0]
 801fe3c:	f01e 0f10 	tst.w	lr, #16
 801fe40:	bf08      	it	eq
 801fe42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801fe46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe4a:	6010      	str	r0, [r2, #0]
 801fe4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801fe50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801fe54:	f380 8811 	msr	BASEPRI, r0
 801fe58:	f3bf 8f4f 	dsb	sy
 801fe5c:	f3bf 8f6f 	isb	sy
 801fe60:	f001 f980 	bl	8021164 <vTaskSwitchContext>
 801fe64:	f04f 0000 	mov.w	r0, #0
 801fe68:	f380 8811 	msr	BASEPRI, r0
 801fe6c:	bc09      	pop	{r0, r3}
 801fe6e:	6819      	ldr	r1, [r3, #0]
 801fe70:	6808      	ldr	r0, [r1, #0]
 801fe72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe76:	f01e 0f10 	tst.w	lr, #16
 801fe7a:	bf08      	it	eq
 801fe7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801fe80:	f380 8809 	msr	PSP, r0
 801fe84:	f3bf 8f6f 	isb	sy
 801fe88:	4770      	bx	lr
 801fe8a:	bf00      	nop
 801fe8c:	f3af 8000 	nop.w

0801fe90 <pxCurrentTCBConst>:
 801fe90:	2401894c 	.word	0x2401894c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801fe94:	bf00      	nop
 801fe96:	bf00      	nop

0801fe98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801fe98:	b580      	push	{r7, lr}
 801fe9a:	b082      	sub	sp, #8
 801fe9c:	af00      	add	r7, sp, #0
	__asm volatile
 801fe9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fea2:	f383 8811 	msr	BASEPRI, r3
 801fea6:	f3bf 8f6f 	isb	sy
 801feaa:	f3bf 8f4f 	dsb	sy
 801feae:	607b      	str	r3, [r7, #4]
}
 801feb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801feb2:	f001 f89d 	bl	8020ff0 <xTaskIncrementTick>
 801feb6:	4603      	mov	r3, r0
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d003      	beq.n	801fec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801febc:	4b06      	ldr	r3, [pc, #24]	@ (801fed8 <xPortSysTickHandler+0x40>)
 801febe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801fec2:	601a      	str	r2, [r3, #0]
 801fec4:	2300      	movs	r3, #0
 801fec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801fec8:	683b      	ldr	r3, [r7, #0]
 801feca:	f383 8811 	msr	BASEPRI, r3
}
 801fece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801fed0:	bf00      	nop
 801fed2:	3708      	adds	r7, #8
 801fed4:	46bd      	mov	sp, r7
 801fed6:	bd80      	pop	{r7, pc}
 801fed8:	e000ed04 	.word	0xe000ed04

0801fedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801fedc:	b480      	push	{r7}
 801fede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801fee0:	4b0b      	ldr	r3, [pc, #44]	@ (801ff10 <vPortSetupTimerInterrupt+0x34>)
 801fee2:	2200      	movs	r2, #0
 801fee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801fee6:	4b0b      	ldr	r3, [pc, #44]	@ (801ff14 <vPortSetupTimerInterrupt+0x38>)
 801fee8:	2200      	movs	r2, #0
 801feea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801feec:	4b0a      	ldr	r3, [pc, #40]	@ (801ff18 <vPortSetupTimerInterrupt+0x3c>)
 801feee:	681b      	ldr	r3, [r3, #0]
 801fef0:	4a0a      	ldr	r2, [pc, #40]	@ (801ff1c <vPortSetupTimerInterrupt+0x40>)
 801fef2:	fba2 2303 	umull	r2, r3, r2, r3
 801fef6:	099b      	lsrs	r3, r3, #6
 801fef8:	4a09      	ldr	r2, [pc, #36]	@ (801ff20 <vPortSetupTimerInterrupt+0x44>)
 801fefa:	3b01      	subs	r3, #1
 801fefc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801fefe:	4b04      	ldr	r3, [pc, #16]	@ (801ff10 <vPortSetupTimerInterrupt+0x34>)
 801ff00:	2207      	movs	r2, #7
 801ff02:	601a      	str	r2, [r3, #0]
}
 801ff04:	bf00      	nop
 801ff06:	46bd      	mov	sp, r7
 801ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff0c:	4770      	bx	lr
 801ff0e:	bf00      	nop
 801ff10:	e000e010 	.word	0xe000e010
 801ff14:	e000e018 	.word	0xe000e018
 801ff18:	24000000 	.word	0x24000000
 801ff1c:	10624dd3 	.word	0x10624dd3
 801ff20:	e000e014 	.word	0xe000e014

0801ff24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ff24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801ff34 <vPortEnableVFP+0x10>
 801ff28:	6801      	ldr	r1, [r0, #0]
 801ff2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801ff2e:	6001      	str	r1, [r0, #0]
 801ff30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ff32:	bf00      	nop
 801ff34:	e000ed88 	.word	0xe000ed88

0801ff38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ff38:	b480      	push	{r7}
 801ff3a:	b085      	sub	sp, #20
 801ff3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ff3e:	f3ef 8305 	mrs	r3, IPSR
 801ff42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801ff44:	68fb      	ldr	r3, [r7, #12]
 801ff46:	2b0f      	cmp	r3, #15
 801ff48:	d915      	bls.n	801ff76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ff4a:	4a18      	ldr	r2, [pc, #96]	@ (801ffac <vPortValidateInterruptPriority+0x74>)
 801ff4c:	68fb      	ldr	r3, [r7, #12]
 801ff4e:	4413      	add	r3, r2
 801ff50:	781b      	ldrb	r3, [r3, #0]
 801ff52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ff54:	4b16      	ldr	r3, [pc, #88]	@ (801ffb0 <vPortValidateInterruptPriority+0x78>)
 801ff56:	781b      	ldrb	r3, [r3, #0]
 801ff58:	7afa      	ldrb	r2, [r7, #11]
 801ff5a:	429a      	cmp	r2, r3
 801ff5c:	d20b      	bcs.n	801ff76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801ff5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ff62:	f383 8811 	msr	BASEPRI, r3
 801ff66:	f3bf 8f6f 	isb	sy
 801ff6a:	f3bf 8f4f 	dsb	sy
 801ff6e:	607b      	str	r3, [r7, #4]
}
 801ff70:	bf00      	nop
 801ff72:	bf00      	nop
 801ff74:	e7fd      	b.n	801ff72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801ff76:	4b0f      	ldr	r3, [pc, #60]	@ (801ffb4 <vPortValidateInterruptPriority+0x7c>)
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801ff7e:	4b0e      	ldr	r3, [pc, #56]	@ (801ffb8 <vPortValidateInterruptPriority+0x80>)
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	429a      	cmp	r2, r3
 801ff84:	d90b      	bls.n	801ff9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801ff86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ff8a:	f383 8811 	msr	BASEPRI, r3
 801ff8e:	f3bf 8f6f 	isb	sy
 801ff92:	f3bf 8f4f 	dsb	sy
 801ff96:	603b      	str	r3, [r7, #0]
}
 801ff98:	bf00      	nop
 801ff9a:	bf00      	nop
 801ff9c:	e7fd      	b.n	801ff9a <vPortValidateInterruptPriority+0x62>
	}
 801ff9e:	bf00      	nop
 801ffa0:	3714      	adds	r7, #20
 801ffa2:	46bd      	mov	sp, r7
 801ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffa8:	4770      	bx	lr
 801ffaa:	bf00      	nop
 801ffac:	e000e3f0 	.word	0xe000e3f0
 801ffb0:	24018904 	.word	0x24018904
 801ffb4:	e000ed0c 	.word	0xe000ed0c
 801ffb8:	24018908 	.word	0x24018908

0801ffbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801ffbc:	b580      	push	{r7, lr}
 801ffbe:	b084      	sub	sp, #16
 801ffc0:	af00      	add	r7, sp, #0
 801ffc2:	6078      	str	r0, [r7, #4]
 801ffc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801ffca:	68fb      	ldr	r3, [r7, #12]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d10b      	bne.n	801ffe8 <xQueueGenericReset+0x2c>
	__asm volatile
 801ffd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ffd4:	f383 8811 	msr	BASEPRI, r3
 801ffd8:	f3bf 8f6f 	isb	sy
 801ffdc:	f3bf 8f4f 	dsb	sy
 801ffe0:	60bb      	str	r3, [r7, #8]
}
 801ffe2:	bf00      	nop
 801ffe4:	bf00      	nop
 801ffe6:	e7fd      	b.n	801ffe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801ffe8:	f7ff fec6 	bl	801fd78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ffec:	68fb      	ldr	r3, [r7, #12]
 801ffee:	681a      	ldr	r2, [r3, #0]
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fff4:	68f9      	ldr	r1, [r7, #12]
 801fff6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801fff8:	fb01 f303 	mul.w	r3, r1, r3
 801fffc:	441a      	add	r2, r3
 801fffe:	68fb      	ldr	r3, [r7, #12]
 8020000:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8020002:	68fb      	ldr	r3, [r7, #12]
 8020004:	2200      	movs	r2, #0
 8020006:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8020008:	68fb      	ldr	r3, [r7, #12]
 802000a:	681a      	ldr	r2, [r3, #0]
 802000c:	68fb      	ldr	r3, [r7, #12]
 802000e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020010:	68fb      	ldr	r3, [r7, #12]
 8020012:	681a      	ldr	r2, [r3, #0]
 8020014:	68fb      	ldr	r3, [r7, #12]
 8020016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020018:	3b01      	subs	r3, #1
 802001a:	68f9      	ldr	r1, [r7, #12]
 802001c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 802001e:	fb01 f303 	mul.w	r3, r1, r3
 8020022:	441a      	add	r2, r3
 8020024:	68fb      	ldr	r3, [r7, #12]
 8020026:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8020028:	68fb      	ldr	r3, [r7, #12]
 802002a:	22ff      	movs	r2, #255	@ 0xff
 802002c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8020030:	68fb      	ldr	r3, [r7, #12]
 8020032:	22ff      	movs	r2, #255	@ 0xff
 8020034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8020038:	683b      	ldr	r3, [r7, #0]
 802003a:	2b00      	cmp	r3, #0
 802003c:	d114      	bne.n	8020068 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802003e:	68fb      	ldr	r3, [r7, #12]
 8020040:	691b      	ldr	r3, [r3, #16]
 8020042:	2b00      	cmp	r3, #0
 8020044:	d01a      	beq.n	802007c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020046:	68fb      	ldr	r3, [r7, #12]
 8020048:	3310      	adds	r3, #16
 802004a:	4618      	mov	r0, r3
 802004c:	f001 f942 	bl	80212d4 <xTaskRemoveFromEventList>
 8020050:	4603      	mov	r3, r0
 8020052:	2b00      	cmp	r3, #0
 8020054:	d012      	beq.n	802007c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8020056:	4b0d      	ldr	r3, [pc, #52]	@ (802008c <xQueueGenericReset+0xd0>)
 8020058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802005c:	601a      	str	r2, [r3, #0]
 802005e:	f3bf 8f4f 	dsb	sy
 8020062:	f3bf 8f6f 	isb	sy
 8020066:	e009      	b.n	802007c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8020068:	68fb      	ldr	r3, [r7, #12]
 802006a:	3310      	adds	r3, #16
 802006c:	4618      	mov	r0, r3
 802006e:	f7ff fc9b 	bl	801f9a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8020072:	68fb      	ldr	r3, [r7, #12]
 8020074:	3324      	adds	r3, #36	@ 0x24
 8020076:	4618      	mov	r0, r3
 8020078:	f7ff fc96 	bl	801f9a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802007c:	f7ff feae 	bl	801fddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8020080:	2301      	movs	r3, #1
}
 8020082:	4618      	mov	r0, r3
 8020084:	3710      	adds	r7, #16
 8020086:	46bd      	mov	sp, r7
 8020088:	bd80      	pop	{r7, pc}
 802008a:	bf00      	nop
 802008c:	e000ed04 	.word	0xe000ed04

08020090 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8020090:	b580      	push	{r7, lr}
 8020092:	b08e      	sub	sp, #56	@ 0x38
 8020094:	af02      	add	r7, sp, #8
 8020096:	60f8      	str	r0, [r7, #12]
 8020098:	60b9      	str	r1, [r7, #8]
 802009a:	607a      	str	r2, [r7, #4]
 802009c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802009e:	68fb      	ldr	r3, [r7, #12]
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	d10b      	bne.n	80200bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80200a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80200a8:	f383 8811 	msr	BASEPRI, r3
 80200ac:	f3bf 8f6f 	isb	sy
 80200b0:	f3bf 8f4f 	dsb	sy
 80200b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80200b6:	bf00      	nop
 80200b8:	bf00      	nop
 80200ba:	e7fd      	b.n	80200b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80200bc:	683b      	ldr	r3, [r7, #0]
 80200be:	2b00      	cmp	r3, #0
 80200c0:	d10b      	bne.n	80200da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80200c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80200c6:	f383 8811 	msr	BASEPRI, r3
 80200ca:	f3bf 8f6f 	isb	sy
 80200ce:	f3bf 8f4f 	dsb	sy
 80200d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80200d4:	bf00      	nop
 80200d6:	bf00      	nop
 80200d8:	e7fd      	b.n	80200d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d002      	beq.n	80200e6 <xQueueGenericCreateStatic+0x56>
 80200e0:	68bb      	ldr	r3, [r7, #8]
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d001      	beq.n	80200ea <xQueueGenericCreateStatic+0x5a>
 80200e6:	2301      	movs	r3, #1
 80200e8:	e000      	b.n	80200ec <xQueueGenericCreateStatic+0x5c>
 80200ea:	2300      	movs	r3, #0
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d10b      	bne.n	8020108 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80200f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80200f4:	f383 8811 	msr	BASEPRI, r3
 80200f8:	f3bf 8f6f 	isb	sy
 80200fc:	f3bf 8f4f 	dsb	sy
 8020100:	623b      	str	r3, [r7, #32]
}
 8020102:	bf00      	nop
 8020104:	bf00      	nop
 8020106:	e7fd      	b.n	8020104 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d102      	bne.n	8020114 <xQueueGenericCreateStatic+0x84>
 802010e:	68bb      	ldr	r3, [r7, #8]
 8020110:	2b00      	cmp	r3, #0
 8020112:	d101      	bne.n	8020118 <xQueueGenericCreateStatic+0x88>
 8020114:	2301      	movs	r3, #1
 8020116:	e000      	b.n	802011a <xQueueGenericCreateStatic+0x8a>
 8020118:	2300      	movs	r3, #0
 802011a:	2b00      	cmp	r3, #0
 802011c:	d10b      	bne.n	8020136 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 802011e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020122:	f383 8811 	msr	BASEPRI, r3
 8020126:	f3bf 8f6f 	isb	sy
 802012a:	f3bf 8f4f 	dsb	sy
 802012e:	61fb      	str	r3, [r7, #28]
}
 8020130:	bf00      	nop
 8020132:	bf00      	nop
 8020134:	e7fd      	b.n	8020132 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8020136:	2350      	movs	r3, #80	@ 0x50
 8020138:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 802013a:	697b      	ldr	r3, [r7, #20]
 802013c:	2b50      	cmp	r3, #80	@ 0x50
 802013e:	d00b      	beq.n	8020158 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8020140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020144:	f383 8811 	msr	BASEPRI, r3
 8020148:	f3bf 8f6f 	isb	sy
 802014c:	f3bf 8f4f 	dsb	sy
 8020150:	61bb      	str	r3, [r7, #24]
}
 8020152:	bf00      	nop
 8020154:	bf00      	nop
 8020156:	e7fd      	b.n	8020154 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8020158:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802015a:	683b      	ldr	r3, [r7, #0]
 802015c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 802015e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020160:	2b00      	cmp	r3, #0
 8020162:	d00d      	beq.n	8020180 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8020164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020166:	2201      	movs	r2, #1
 8020168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 802016c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8020170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020172:	9300      	str	r3, [sp, #0]
 8020174:	4613      	mov	r3, r2
 8020176:	687a      	ldr	r2, [r7, #4]
 8020178:	68b9      	ldr	r1, [r7, #8]
 802017a:	68f8      	ldr	r0, [r7, #12]
 802017c:	f000 f805 	bl	802018a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8020182:	4618      	mov	r0, r3
 8020184:	3730      	adds	r7, #48	@ 0x30
 8020186:	46bd      	mov	sp, r7
 8020188:	bd80      	pop	{r7, pc}

0802018a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 802018a:	b580      	push	{r7, lr}
 802018c:	b084      	sub	sp, #16
 802018e:	af00      	add	r7, sp, #0
 8020190:	60f8      	str	r0, [r7, #12]
 8020192:	60b9      	str	r1, [r7, #8]
 8020194:	607a      	str	r2, [r7, #4]
 8020196:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8020198:	68bb      	ldr	r3, [r7, #8]
 802019a:	2b00      	cmp	r3, #0
 802019c:	d103      	bne.n	80201a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 802019e:	69bb      	ldr	r3, [r7, #24]
 80201a0:	69ba      	ldr	r2, [r7, #24]
 80201a2:	601a      	str	r2, [r3, #0]
 80201a4:	e002      	b.n	80201ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80201a6:	69bb      	ldr	r3, [r7, #24]
 80201a8:	687a      	ldr	r2, [r7, #4]
 80201aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80201ac:	69bb      	ldr	r3, [r7, #24]
 80201ae:	68fa      	ldr	r2, [r7, #12]
 80201b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80201b2:	69bb      	ldr	r3, [r7, #24]
 80201b4:	68ba      	ldr	r2, [r7, #8]
 80201b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80201b8:	2101      	movs	r1, #1
 80201ba:	69b8      	ldr	r0, [r7, #24]
 80201bc:	f7ff fefe 	bl	801ffbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80201c0:	69bb      	ldr	r3, [r7, #24]
 80201c2:	78fa      	ldrb	r2, [r7, #3]
 80201c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80201c8:	bf00      	nop
 80201ca:	3710      	adds	r7, #16
 80201cc:	46bd      	mov	sp, r7
 80201ce:	bd80      	pop	{r7, pc}

080201d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80201d0:	b580      	push	{r7, lr}
 80201d2:	b08e      	sub	sp, #56	@ 0x38
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	60f8      	str	r0, [r7, #12]
 80201d8:	60b9      	str	r1, [r7, #8]
 80201da:	607a      	str	r2, [r7, #4]
 80201dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80201de:	2300      	movs	r3, #0
 80201e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80201e2:	68fb      	ldr	r3, [r7, #12]
 80201e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80201e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d10b      	bne.n	8020204 <xQueueGenericSend+0x34>
	__asm volatile
 80201ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80201f0:	f383 8811 	msr	BASEPRI, r3
 80201f4:	f3bf 8f6f 	isb	sy
 80201f8:	f3bf 8f4f 	dsb	sy
 80201fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80201fe:	bf00      	nop
 8020200:	bf00      	nop
 8020202:	e7fd      	b.n	8020200 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020204:	68bb      	ldr	r3, [r7, #8]
 8020206:	2b00      	cmp	r3, #0
 8020208:	d103      	bne.n	8020212 <xQueueGenericSend+0x42>
 802020a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802020c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802020e:	2b00      	cmp	r3, #0
 8020210:	d101      	bne.n	8020216 <xQueueGenericSend+0x46>
 8020212:	2301      	movs	r3, #1
 8020214:	e000      	b.n	8020218 <xQueueGenericSend+0x48>
 8020216:	2300      	movs	r3, #0
 8020218:	2b00      	cmp	r3, #0
 802021a:	d10b      	bne.n	8020234 <xQueueGenericSend+0x64>
	__asm volatile
 802021c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020220:	f383 8811 	msr	BASEPRI, r3
 8020224:	f3bf 8f6f 	isb	sy
 8020228:	f3bf 8f4f 	dsb	sy
 802022c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 802022e:	bf00      	nop
 8020230:	bf00      	nop
 8020232:	e7fd      	b.n	8020230 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020234:	683b      	ldr	r3, [r7, #0]
 8020236:	2b02      	cmp	r3, #2
 8020238:	d103      	bne.n	8020242 <xQueueGenericSend+0x72>
 802023a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802023c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802023e:	2b01      	cmp	r3, #1
 8020240:	d101      	bne.n	8020246 <xQueueGenericSend+0x76>
 8020242:	2301      	movs	r3, #1
 8020244:	e000      	b.n	8020248 <xQueueGenericSend+0x78>
 8020246:	2300      	movs	r3, #0
 8020248:	2b00      	cmp	r3, #0
 802024a:	d10b      	bne.n	8020264 <xQueueGenericSend+0x94>
	__asm volatile
 802024c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020250:	f383 8811 	msr	BASEPRI, r3
 8020254:	f3bf 8f6f 	isb	sy
 8020258:	f3bf 8f4f 	dsb	sy
 802025c:	623b      	str	r3, [r7, #32]
}
 802025e:	bf00      	nop
 8020260:	bf00      	nop
 8020262:	e7fd      	b.n	8020260 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020264:	f001 f9fc 	bl	8021660 <xTaskGetSchedulerState>
 8020268:	4603      	mov	r3, r0
 802026a:	2b00      	cmp	r3, #0
 802026c:	d102      	bne.n	8020274 <xQueueGenericSend+0xa4>
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	2b00      	cmp	r3, #0
 8020272:	d101      	bne.n	8020278 <xQueueGenericSend+0xa8>
 8020274:	2301      	movs	r3, #1
 8020276:	e000      	b.n	802027a <xQueueGenericSend+0xaa>
 8020278:	2300      	movs	r3, #0
 802027a:	2b00      	cmp	r3, #0
 802027c:	d10b      	bne.n	8020296 <xQueueGenericSend+0xc6>
	__asm volatile
 802027e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020282:	f383 8811 	msr	BASEPRI, r3
 8020286:	f3bf 8f6f 	isb	sy
 802028a:	f3bf 8f4f 	dsb	sy
 802028e:	61fb      	str	r3, [r7, #28]
}
 8020290:	bf00      	nop
 8020292:	bf00      	nop
 8020294:	e7fd      	b.n	8020292 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020296:	f7ff fd6f 	bl	801fd78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802029a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802029c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802029e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80202a2:	429a      	cmp	r2, r3
 80202a4:	d302      	bcc.n	80202ac <xQueueGenericSend+0xdc>
 80202a6:	683b      	ldr	r3, [r7, #0]
 80202a8:	2b02      	cmp	r3, #2
 80202aa:	d129      	bne.n	8020300 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80202ac:	683a      	ldr	r2, [r7, #0]
 80202ae:	68b9      	ldr	r1, [r7, #8]
 80202b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80202b2:	f000 fa0f 	bl	80206d4 <prvCopyDataToQueue>
 80202b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80202b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80202bc:	2b00      	cmp	r3, #0
 80202be:	d010      	beq.n	80202e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80202c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202c2:	3324      	adds	r3, #36	@ 0x24
 80202c4:	4618      	mov	r0, r3
 80202c6:	f001 f805 	bl	80212d4 <xTaskRemoveFromEventList>
 80202ca:	4603      	mov	r3, r0
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	d013      	beq.n	80202f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80202d0:	4b3f      	ldr	r3, [pc, #252]	@ (80203d0 <xQueueGenericSend+0x200>)
 80202d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80202d6:	601a      	str	r2, [r3, #0]
 80202d8:	f3bf 8f4f 	dsb	sy
 80202dc:	f3bf 8f6f 	isb	sy
 80202e0:	e00a      	b.n	80202f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80202e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d007      	beq.n	80202f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80202e8:	4b39      	ldr	r3, [pc, #228]	@ (80203d0 <xQueueGenericSend+0x200>)
 80202ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80202ee:	601a      	str	r2, [r3, #0]
 80202f0:	f3bf 8f4f 	dsb	sy
 80202f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80202f8:	f7ff fd70 	bl	801fddc <vPortExitCritical>
				return pdPASS;
 80202fc:	2301      	movs	r3, #1
 80202fe:	e063      	b.n	80203c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	2b00      	cmp	r3, #0
 8020304:	d103      	bne.n	802030e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020306:	f7ff fd69 	bl	801fddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 802030a:	2300      	movs	r3, #0
 802030c:	e05c      	b.n	80203c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 802030e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020310:	2b00      	cmp	r3, #0
 8020312:	d106      	bne.n	8020322 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020314:	f107 0314 	add.w	r3, r7, #20
 8020318:	4618      	mov	r0, r3
 802031a:	f001 f83f 	bl	802139c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802031e:	2301      	movs	r3, #1
 8020320:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020322:	f7ff fd5b 	bl	801fddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020326:	f000 fda7 	bl	8020e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802032a:	f7ff fd25 	bl	801fd78 <vPortEnterCritical>
 802032e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020330:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8020334:	b25b      	sxtb	r3, r3
 8020336:	f1b3 3fff 	cmp.w	r3, #4294967295
 802033a:	d103      	bne.n	8020344 <xQueueGenericSend+0x174>
 802033c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802033e:	2200      	movs	r2, #0
 8020340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8020344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802034a:	b25b      	sxtb	r3, r3
 802034c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020350:	d103      	bne.n	802035a <xQueueGenericSend+0x18a>
 8020352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020354:	2200      	movs	r2, #0
 8020356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 802035a:	f7ff fd3f 	bl	801fddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802035e:	1d3a      	adds	r2, r7, #4
 8020360:	f107 0314 	add.w	r3, r7, #20
 8020364:	4611      	mov	r1, r2
 8020366:	4618      	mov	r0, r3
 8020368:	f001 f82e 	bl	80213c8 <xTaskCheckForTimeOut>
 802036c:	4603      	mov	r3, r0
 802036e:	2b00      	cmp	r3, #0
 8020370:	d124      	bne.n	80203bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8020372:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8020374:	f000 faa6 	bl	80208c4 <prvIsQueueFull>
 8020378:	4603      	mov	r3, r0
 802037a:	2b00      	cmp	r3, #0
 802037c:	d018      	beq.n	80203b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 802037e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020380:	3310      	adds	r3, #16
 8020382:	687a      	ldr	r2, [r7, #4]
 8020384:	4611      	mov	r1, r2
 8020386:	4618      	mov	r0, r3
 8020388:	f000 ff52 	bl	8021230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 802038c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802038e:	f000 fa31 	bl	80207f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8020392:	f000 fd7f 	bl	8020e94 <xTaskResumeAll>
 8020396:	4603      	mov	r3, r0
 8020398:	2b00      	cmp	r3, #0
 802039a:	f47f af7c 	bne.w	8020296 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 802039e:	4b0c      	ldr	r3, [pc, #48]	@ (80203d0 <xQueueGenericSend+0x200>)
 80203a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80203a4:	601a      	str	r2, [r3, #0]
 80203a6:	f3bf 8f4f 	dsb	sy
 80203aa:	f3bf 8f6f 	isb	sy
 80203ae:	e772      	b.n	8020296 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80203b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80203b2:	f000 fa1f 	bl	80207f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80203b6:	f000 fd6d 	bl	8020e94 <xTaskResumeAll>
 80203ba:	e76c      	b.n	8020296 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80203bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80203be:	f000 fa19 	bl	80207f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80203c2:	f000 fd67 	bl	8020e94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80203c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80203c8:	4618      	mov	r0, r3
 80203ca:	3738      	adds	r7, #56	@ 0x38
 80203cc:	46bd      	mov	sp, r7
 80203ce:	bd80      	pop	{r7, pc}
 80203d0:	e000ed04 	.word	0xe000ed04

080203d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80203d4:	b580      	push	{r7, lr}
 80203d6:	b090      	sub	sp, #64	@ 0x40
 80203d8:	af00      	add	r7, sp, #0
 80203da:	60f8      	str	r0, [r7, #12]
 80203dc:	60b9      	str	r1, [r7, #8]
 80203de:	607a      	str	r2, [r7, #4]
 80203e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80203e2:	68fb      	ldr	r3, [r7, #12]
 80203e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80203e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d10b      	bne.n	8020404 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80203ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80203f0:	f383 8811 	msr	BASEPRI, r3
 80203f4:	f3bf 8f6f 	isb	sy
 80203f8:	f3bf 8f4f 	dsb	sy
 80203fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80203fe:	bf00      	nop
 8020400:	bf00      	nop
 8020402:	e7fd      	b.n	8020400 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020404:	68bb      	ldr	r3, [r7, #8]
 8020406:	2b00      	cmp	r3, #0
 8020408:	d103      	bne.n	8020412 <xQueueGenericSendFromISR+0x3e>
 802040a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802040c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802040e:	2b00      	cmp	r3, #0
 8020410:	d101      	bne.n	8020416 <xQueueGenericSendFromISR+0x42>
 8020412:	2301      	movs	r3, #1
 8020414:	e000      	b.n	8020418 <xQueueGenericSendFromISR+0x44>
 8020416:	2300      	movs	r3, #0
 8020418:	2b00      	cmp	r3, #0
 802041a:	d10b      	bne.n	8020434 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 802041c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020420:	f383 8811 	msr	BASEPRI, r3
 8020424:	f3bf 8f6f 	isb	sy
 8020428:	f3bf 8f4f 	dsb	sy
 802042c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 802042e:	bf00      	nop
 8020430:	bf00      	nop
 8020432:	e7fd      	b.n	8020430 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020434:	683b      	ldr	r3, [r7, #0]
 8020436:	2b02      	cmp	r3, #2
 8020438:	d103      	bne.n	8020442 <xQueueGenericSendFromISR+0x6e>
 802043a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802043c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802043e:	2b01      	cmp	r3, #1
 8020440:	d101      	bne.n	8020446 <xQueueGenericSendFromISR+0x72>
 8020442:	2301      	movs	r3, #1
 8020444:	e000      	b.n	8020448 <xQueueGenericSendFromISR+0x74>
 8020446:	2300      	movs	r3, #0
 8020448:	2b00      	cmp	r3, #0
 802044a:	d10b      	bne.n	8020464 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 802044c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020450:	f383 8811 	msr	BASEPRI, r3
 8020454:	f3bf 8f6f 	isb	sy
 8020458:	f3bf 8f4f 	dsb	sy
 802045c:	623b      	str	r3, [r7, #32]
}
 802045e:	bf00      	nop
 8020460:	bf00      	nop
 8020462:	e7fd      	b.n	8020460 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020464:	f7ff fd68 	bl	801ff38 <vPortValidateInterruptPriority>
	__asm volatile
 8020468:	f3ef 8211 	mrs	r2, BASEPRI
 802046c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020470:	f383 8811 	msr	BASEPRI, r3
 8020474:	f3bf 8f6f 	isb	sy
 8020478:	f3bf 8f4f 	dsb	sy
 802047c:	61fa      	str	r2, [r7, #28]
 802047e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8020480:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8020482:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020486:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802048a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802048c:	429a      	cmp	r2, r3
 802048e:	d302      	bcc.n	8020496 <xQueueGenericSendFromISR+0xc2>
 8020490:	683b      	ldr	r3, [r7, #0]
 8020492:	2b02      	cmp	r3, #2
 8020494:	d12f      	bne.n	80204f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8020496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020498:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802049c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80204a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80204a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80204a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80204a6:	683a      	ldr	r2, [r7, #0]
 80204a8:	68b9      	ldr	r1, [r7, #8]
 80204aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80204ac:	f000 f912 	bl	80206d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80204b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80204b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80204b8:	d112      	bne.n	80204e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80204ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80204bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80204be:	2b00      	cmp	r3, #0
 80204c0:	d016      	beq.n	80204f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80204c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80204c4:	3324      	adds	r3, #36	@ 0x24
 80204c6:	4618      	mov	r0, r3
 80204c8:	f000 ff04 	bl	80212d4 <xTaskRemoveFromEventList>
 80204cc:	4603      	mov	r3, r0
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d00e      	beq.n	80204f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d00b      	beq.n	80204f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	2201      	movs	r2, #1
 80204dc:	601a      	str	r2, [r3, #0]
 80204de:	e007      	b.n	80204f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80204e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80204e4:	3301      	adds	r3, #1
 80204e6:	b2db      	uxtb	r3, r3
 80204e8:	b25a      	sxtb	r2, r3
 80204ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80204ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80204f0:	2301      	movs	r3, #1
 80204f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80204f4:	e001      	b.n	80204fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80204f6:	2300      	movs	r3, #0
 80204f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80204fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80204fc:	617b      	str	r3, [r7, #20]
	__asm volatile
 80204fe:	697b      	ldr	r3, [r7, #20]
 8020500:	f383 8811 	msr	BASEPRI, r3
}
 8020504:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8020508:	4618      	mov	r0, r3
 802050a:	3740      	adds	r7, #64	@ 0x40
 802050c:	46bd      	mov	sp, r7
 802050e:	bd80      	pop	{r7, pc}

08020510 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020510:	b580      	push	{r7, lr}
 8020512:	b08c      	sub	sp, #48	@ 0x30
 8020514:	af00      	add	r7, sp, #0
 8020516:	60f8      	str	r0, [r7, #12]
 8020518:	60b9      	str	r1, [r7, #8]
 802051a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 802051c:	2300      	movs	r3, #0
 802051e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020520:	68fb      	ldr	r3, [r7, #12]
 8020522:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020526:	2b00      	cmp	r3, #0
 8020528:	d10b      	bne.n	8020542 <xQueueReceive+0x32>
	__asm volatile
 802052a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802052e:	f383 8811 	msr	BASEPRI, r3
 8020532:	f3bf 8f6f 	isb	sy
 8020536:	f3bf 8f4f 	dsb	sy
 802053a:	623b      	str	r3, [r7, #32]
}
 802053c:	bf00      	nop
 802053e:	bf00      	nop
 8020540:	e7fd      	b.n	802053e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020542:	68bb      	ldr	r3, [r7, #8]
 8020544:	2b00      	cmp	r3, #0
 8020546:	d103      	bne.n	8020550 <xQueueReceive+0x40>
 8020548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802054c:	2b00      	cmp	r3, #0
 802054e:	d101      	bne.n	8020554 <xQueueReceive+0x44>
 8020550:	2301      	movs	r3, #1
 8020552:	e000      	b.n	8020556 <xQueueReceive+0x46>
 8020554:	2300      	movs	r3, #0
 8020556:	2b00      	cmp	r3, #0
 8020558:	d10b      	bne.n	8020572 <xQueueReceive+0x62>
	__asm volatile
 802055a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802055e:	f383 8811 	msr	BASEPRI, r3
 8020562:	f3bf 8f6f 	isb	sy
 8020566:	f3bf 8f4f 	dsb	sy
 802056a:	61fb      	str	r3, [r7, #28]
}
 802056c:	bf00      	nop
 802056e:	bf00      	nop
 8020570:	e7fd      	b.n	802056e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020572:	f001 f875 	bl	8021660 <xTaskGetSchedulerState>
 8020576:	4603      	mov	r3, r0
 8020578:	2b00      	cmp	r3, #0
 802057a:	d102      	bne.n	8020582 <xQueueReceive+0x72>
 802057c:	687b      	ldr	r3, [r7, #4]
 802057e:	2b00      	cmp	r3, #0
 8020580:	d101      	bne.n	8020586 <xQueueReceive+0x76>
 8020582:	2301      	movs	r3, #1
 8020584:	e000      	b.n	8020588 <xQueueReceive+0x78>
 8020586:	2300      	movs	r3, #0
 8020588:	2b00      	cmp	r3, #0
 802058a:	d10b      	bne.n	80205a4 <xQueueReceive+0x94>
	__asm volatile
 802058c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020590:	f383 8811 	msr	BASEPRI, r3
 8020594:	f3bf 8f6f 	isb	sy
 8020598:	f3bf 8f4f 	dsb	sy
 802059c:	61bb      	str	r3, [r7, #24]
}
 802059e:	bf00      	nop
 80205a0:	bf00      	nop
 80205a2:	e7fd      	b.n	80205a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80205a4:	f7ff fbe8 	bl	801fd78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80205a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80205aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80205ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80205ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	d01f      	beq.n	80205f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80205b4:	68b9      	ldr	r1, [r7, #8]
 80205b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80205b8:	f000 f8f6 	bl	80207a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80205bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205be:	1e5a      	subs	r2, r3, #1
 80205c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80205c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80205c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80205c6:	691b      	ldr	r3, [r3, #16]
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d00f      	beq.n	80205ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80205cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80205ce:	3310      	adds	r3, #16
 80205d0:	4618      	mov	r0, r3
 80205d2:	f000 fe7f 	bl	80212d4 <xTaskRemoveFromEventList>
 80205d6:	4603      	mov	r3, r0
 80205d8:	2b00      	cmp	r3, #0
 80205da:	d007      	beq.n	80205ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80205dc:	4b3c      	ldr	r3, [pc, #240]	@ (80206d0 <xQueueReceive+0x1c0>)
 80205de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80205e2:	601a      	str	r2, [r3, #0]
 80205e4:	f3bf 8f4f 	dsb	sy
 80205e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80205ec:	f7ff fbf6 	bl	801fddc <vPortExitCritical>
				return pdPASS;
 80205f0:	2301      	movs	r3, #1
 80205f2:	e069      	b.n	80206c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	d103      	bne.n	8020602 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80205fa:	f7ff fbef 	bl	801fddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80205fe:	2300      	movs	r3, #0
 8020600:	e062      	b.n	80206c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020604:	2b00      	cmp	r3, #0
 8020606:	d106      	bne.n	8020616 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020608:	f107 0310 	add.w	r3, r7, #16
 802060c:	4618      	mov	r0, r3
 802060e:	f000 fec5 	bl	802139c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020612:	2301      	movs	r3, #1
 8020614:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020616:	f7ff fbe1 	bl	801fddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802061a:	f000 fc2d 	bl	8020e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802061e:	f7ff fbab 	bl	801fd78 <vPortEnterCritical>
 8020622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8020628:	b25b      	sxtb	r3, r3
 802062a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802062e:	d103      	bne.n	8020638 <xQueueReceive+0x128>
 8020630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020632:	2200      	movs	r2, #0
 8020634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8020638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802063a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 802063e:	b25b      	sxtb	r3, r3
 8020640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020644:	d103      	bne.n	802064e <xQueueReceive+0x13e>
 8020646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020648:	2200      	movs	r2, #0
 802064a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 802064e:	f7ff fbc5 	bl	801fddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020652:	1d3a      	adds	r2, r7, #4
 8020654:	f107 0310 	add.w	r3, r7, #16
 8020658:	4611      	mov	r1, r2
 802065a:	4618      	mov	r0, r3
 802065c:	f000 feb4 	bl	80213c8 <xTaskCheckForTimeOut>
 8020660:	4603      	mov	r3, r0
 8020662:	2b00      	cmp	r3, #0
 8020664:	d123      	bne.n	80206ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020668:	f000 f916 	bl	8020898 <prvIsQueueEmpty>
 802066c:	4603      	mov	r3, r0
 802066e:	2b00      	cmp	r3, #0
 8020670:	d017      	beq.n	80206a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020674:	3324      	adds	r3, #36	@ 0x24
 8020676:	687a      	ldr	r2, [r7, #4]
 8020678:	4611      	mov	r1, r2
 802067a:	4618      	mov	r0, r3
 802067c:	f000 fdd8 	bl	8021230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020682:	f000 f8b7 	bl	80207f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8020686:	f000 fc05 	bl	8020e94 <xTaskResumeAll>
 802068a:	4603      	mov	r3, r0
 802068c:	2b00      	cmp	r3, #0
 802068e:	d189      	bne.n	80205a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8020690:	4b0f      	ldr	r3, [pc, #60]	@ (80206d0 <xQueueReceive+0x1c0>)
 8020692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020696:	601a      	str	r2, [r3, #0]
 8020698:	f3bf 8f4f 	dsb	sy
 802069c:	f3bf 8f6f 	isb	sy
 80206a0:	e780      	b.n	80205a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80206a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80206a4:	f000 f8a6 	bl	80207f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80206a8:	f000 fbf4 	bl	8020e94 <xTaskResumeAll>
 80206ac:	e77a      	b.n	80205a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80206ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80206b0:	f000 f8a0 	bl	80207f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80206b4:	f000 fbee 	bl	8020e94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80206b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80206ba:	f000 f8ed 	bl	8020898 <prvIsQueueEmpty>
 80206be:	4603      	mov	r3, r0
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	f43f af6f 	beq.w	80205a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80206c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80206c8:	4618      	mov	r0, r3
 80206ca:	3730      	adds	r7, #48	@ 0x30
 80206cc:	46bd      	mov	sp, r7
 80206ce:	bd80      	pop	{r7, pc}
 80206d0:	e000ed04 	.word	0xe000ed04

080206d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80206d4:	b580      	push	{r7, lr}
 80206d6:	b086      	sub	sp, #24
 80206d8:	af00      	add	r7, sp, #0
 80206da:	60f8      	str	r0, [r7, #12]
 80206dc:	60b9      	str	r1, [r7, #8]
 80206de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80206e0:	2300      	movs	r3, #0
 80206e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80206e4:	68fb      	ldr	r3, [r7, #12]
 80206e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80206e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80206ea:	68fb      	ldr	r3, [r7, #12]
 80206ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d10d      	bne.n	802070e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	d14d      	bne.n	8020796 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80206fa:	68fb      	ldr	r3, [r7, #12]
 80206fc:	689b      	ldr	r3, [r3, #8]
 80206fe:	4618      	mov	r0, r3
 8020700:	f000 ffcc 	bl	802169c <xTaskPriorityDisinherit>
 8020704:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8020706:	68fb      	ldr	r3, [r7, #12]
 8020708:	2200      	movs	r2, #0
 802070a:	609a      	str	r2, [r3, #8]
 802070c:	e043      	b.n	8020796 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802070e:	687b      	ldr	r3, [r7, #4]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d119      	bne.n	8020748 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8020714:	68fb      	ldr	r3, [r7, #12]
 8020716:	6858      	ldr	r0, [r3, #4]
 8020718:	68fb      	ldr	r3, [r7, #12]
 802071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802071c:	461a      	mov	r2, r3
 802071e:	68b9      	ldr	r1, [r7, #8]
 8020720:	f002 f8a9 	bl	8022876 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8020724:	68fb      	ldr	r3, [r7, #12]
 8020726:	685a      	ldr	r2, [r3, #4]
 8020728:	68fb      	ldr	r3, [r7, #12]
 802072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802072c:	441a      	add	r2, r3
 802072e:	68fb      	ldr	r3, [r7, #12]
 8020730:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	685a      	ldr	r2, [r3, #4]
 8020736:	68fb      	ldr	r3, [r7, #12]
 8020738:	689b      	ldr	r3, [r3, #8]
 802073a:	429a      	cmp	r2, r3
 802073c:	d32b      	bcc.n	8020796 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802073e:	68fb      	ldr	r3, [r7, #12]
 8020740:	681a      	ldr	r2, [r3, #0]
 8020742:	68fb      	ldr	r3, [r7, #12]
 8020744:	605a      	str	r2, [r3, #4]
 8020746:	e026      	b.n	8020796 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	68d8      	ldr	r0, [r3, #12]
 802074c:	68fb      	ldr	r3, [r7, #12]
 802074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020750:	461a      	mov	r2, r3
 8020752:	68b9      	ldr	r1, [r7, #8]
 8020754:	f002 f88f 	bl	8022876 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8020758:	68fb      	ldr	r3, [r7, #12]
 802075a:	68da      	ldr	r2, [r3, #12]
 802075c:	68fb      	ldr	r3, [r7, #12]
 802075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020760:	425b      	negs	r3, r3
 8020762:	441a      	add	r2, r3
 8020764:	68fb      	ldr	r3, [r7, #12]
 8020766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020768:	68fb      	ldr	r3, [r7, #12]
 802076a:	68da      	ldr	r2, [r3, #12]
 802076c:	68fb      	ldr	r3, [r7, #12]
 802076e:	681b      	ldr	r3, [r3, #0]
 8020770:	429a      	cmp	r2, r3
 8020772:	d207      	bcs.n	8020784 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	689a      	ldr	r2, [r3, #8]
 8020778:	68fb      	ldr	r3, [r7, #12]
 802077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802077c:	425b      	negs	r3, r3
 802077e:	441a      	add	r2, r3
 8020780:	68fb      	ldr	r3, [r7, #12]
 8020782:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	2b02      	cmp	r3, #2
 8020788:	d105      	bne.n	8020796 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802078a:	693b      	ldr	r3, [r7, #16]
 802078c:	2b00      	cmp	r3, #0
 802078e:	d002      	beq.n	8020796 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8020790:	693b      	ldr	r3, [r7, #16]
 8020792:	3b01      	subs	r3, #1
 8020794:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8020796:	693b      	ldr	r3, [r7, #16]
 8020798:	1c5a      	adds	r2, r3, #1
 802079a:	68fb      	ldr	r3, [r7, #12]
 802079c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 802079e:	697b      	ldr	r3, [r7, #20]
}
 80207a0:	4618      	mov	r0, r3
 80207a2:	3718      	adds	r7, #24
 80207a4:	46bd      	mov	sp, r7
 80207a6:	bd80      	pop	{r7, pc}

080207a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80207a8:	b580      	push	{r7, lr}
 80207aa:	b082      	sub	sp, #8
 80207ac:	af00      	add	r7, sp, #0
 80207ae:	6078      	str	r0, [r7, #4]
 80207b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80207b2:	687b      	ldr	r3, [r7, #4]
 80207b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	d018      	beq.n	80207ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	68da      	ldr	r2, [r3, #12]
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80207c2:	441a      	add	r2, r3
 80207c4:	687b      	ldr	r3, [r7, #4]
 80207c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80207c8:	687b      	ldr	r3, [r7, #4]
 80207ca:	68da      	ldr	r2, [r3, #12]
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	689b      	ldr	r3, [r3, #8]
 80207d0:	429a      	cmp	r2, r3
 80207d2:	d303      	bcc.n	80207dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	681a      	ldr	r2, [r3, #0]
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	68d9      	ldr	r1, [r3, #12]
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80207e4:	461a      	mov	r2, r3
 80207e6:	6838      	ldr	r0, [r7, #0]
 80207e8:	f002 f845 	bl	8022876 <memcpy>
	}
}
 80207ec:	bf00      	nop
 80207ee:	3708      	adds	r7, #8
 80207f0:	46bd      	mov	sp, r7
 80207f2:	bd80      	pop	{r7, pc}

080207f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80207f4:	b580      	push	{r7, lr}
 80207f6:	b084      	sub	sp, #16
 80207f8:	af00      	add	r7, sp, #0
 80207fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80207fc:	f7ff fabc 	bl	801fd78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8020800:	687b      	ldr	r3, [r7, #4]
 8020802:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8020806:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8020808:	e011      	b.n	802082e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802080e:	2b00      	cmp	r3, #0
 8020810:	d012      	beq.n	8020838 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	3324      	adds	r3, #36	@ 0x24
 8020816:	4618      	mov	r0, r3
 8020818:	f000 fd5c 	bl	80212d4 <xTaskRemoveFromEventList>
 802081c:	4603      	mov	r3, r0
 802081e:	2b00      	cmp	r3, #0
 8020820:	d001      	beq.n	8020826 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8020822:	f000 fe35 	bl	8021490 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8020826:	7bfb      	ldrb	r3, [r7, #15]
 8020828:	3b01      	subs	r3, #1
 802082a:	b2db      	uxtb	r3, r3
 802082c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802082e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020832:	2b00      	cmp	r3, #0
 8020834:	dce9      	bgt.n	802080a <prvUnlockQueue+0x16>
 8020836:	e000      	b.n	802083a <prvUnlockQueue+0x46>
					break;
 8020838:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	22ff      	movs	r2, #255	@ 0xff
 802083e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8020842:	f7ff facb 	bl	801fddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8020846:	f7ff fa97 	bl	801fd78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8020850:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020852:	e011      	b.n	8020878 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	691b      	ldr	r3, [r3, #16]
 8020858:	2b00      	cmp	r3, #0
 802085a:	d012      	beq.n	8020882 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	3310      	adds	r3, #16
 8020860:	4618      	mov	r0, r3
 8020862:	f000 fd37 	bl	80212d4 <xTaskRemoveFromEventList>
 8020866:	4603      	mov	r3, r0
 8020868:	2b00      	cmp	r3, #0
 802086a:	d001      	beq.n	8020870 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 802086c:	f000 fe10 	bl	8021490 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8020870:	7bbb      	ldrb	r3, [r7, #14]
 8020872:	3b01      	subs	r3, #1
 8020874:	b2db      	uxtb	r3, r3
 8020876:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802087c:	2b00      	cmp	r3, #0
 802087e:	dce9      	bgt.n	8020854 <prvUnlockQueue+0x60>
 8020880:	e000      	b.n	8020884 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8020882:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	22ff      	movs	r2, #255	@ 0xff
 8020888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 802088c:	f7ff faa6 	bl	801fddc <vPortExitCritical>
}
 8020890:	bf00      	nop
 8020892:	3710      	adds	r7, #16
 8020894:	46bd      	mov	sp, r7
 8020896:	bd80      	pop	{r7, pc}

08020898 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8020898:	b580      	push	{r7, lr}
 802089a:	b084      	sub	sp, #16
 802089c:	af00      	add	r7, sp, #0
 802089e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80208a0:	f7ff fa6a 	bl	801fd78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d102      	bne.n	80208b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80208ac:	2301      	movs	r3, #1
 80208ae:	60fb      	str	r3, [r7, #12]
 80208b0:	e001      	b.n	80208b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80208b2:	2300      	movs	r3, #0
 80208b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80208b6:	f7ff fa91 	bl	801fddc <vPortExitCritical>

	return xReturn;
 80208ba:	68fb      	ldr	r3, [r7, #12]
}
 80208bc:	4618      	mov	r0, r3
 80208be:	3710      	adds	r7, #16
 80208c0:	46bd      	mov	sp, r7
 80208c2:	bd80      	pop	{r7, pc}

080208c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80208c4:	b580      	push	{r7, lr}
 80208c6:	b084      	sub	sp, #16
 80208c8:	af00      	add	r7, sp, #0
 80208ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80208cc:	f7ff fa54 	bl	801fd78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80208d8:	429a      	cmp	r2, r3
 80208da:	d102      	bne.n	80208e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80208dc:	2301      	movs	r3, #1
 80208de:	60fb      	str	r3, [r7, #12]
 80208e0:	e001      	b.n	80208e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80208e2:	2300      	movs	r3, #0
 80208e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80208e6:	f7ff fa79 	bl	801fddc <vPortExitCritical>

	return xReturn;
 80208ea:	68fb      	ldr	r3, [r7, #12]
}
 80208ec:	4618      	mov	r0, r3
 80208ee:	3710      	adds	r7, #16
 80208f0:	46bd      	mov	sp, r7
 80208f2:	bd80      	pop	{r7, pc}

080208f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80208f4:	b480      	push	{r7}
 80208f6:	b085      	sub	sp, #20
 80208f8:	af00      	add	r7, sp, #0
 80208fa:	6078      	str	r0, [r7, #4]
 80208fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80208fe:	2300      	movs	r3, #0
 8020900:	60fb      	str	r3, [r7, #12]
 8020902:	e014      	b.n	802092e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8020904:	4a0f      	ldr	r2, [pc, #60]	@ (8020944 <vQueueAddToRegistry+0x50>)
 8020906:	68fb      	ldr	r3, [r7, #12]
 8020908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802090c:	2b00      	cmp	r3, #0
 802090e:	d10b      	bne.n	8020928 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8020910:	490c      	ldr	r1, [pc, #48]	@ (8020944 <vQueueAddToRegistry+0x50>)
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	683a      	ldr	r2, [r7, #0]
 8020916:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 802091a:	4a0a      	ldr	r2, [pc, #40]	@ (8020944 <vQueueAddToRegistry+0x50>)
 802091c:	68fb      	ldr	r3, [r7, #12]
 802091e:	00db      	lsls	r3, r3, #3
 8020920:	4413      	add	r3, r2
 8020922:	687a      	ldr	r2, [r7, #4]
 8020924:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8020926:	e006      	b.n	8020936 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020928:	68fb      	ldr	r3, [r7, #12]
 802092a:	3301      	adds	r3, #1
 802092c:	60fb      	str	r3, [r7, #12]
 802092e:	68fb      	ldr	r3, [r7, #12]
 8020930:	2b07      	cmp	r3, #7
 8020932:	d9e7      	bls.n	8020904 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8020934:	bf00      	nop
 8020936:	bf00      	nop
 8020938:	3714      	adds	r7, #20
 802093a:	46bd      	mov	sp, r7
 802093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020940:	4770      	bx	lr
 8020942:	bf00      	nop
 8020944:	2401890c 	.word	0x2401890c

08020948 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8020948:	b580      	push	{r7, lr}
 802094a:	b086      	sub	sp, #24
 802094c:	af00      	add	r7, sp, #0
 802094e:	60f8      	str	r0, [r7, #12]
 8020950:	60b9      	str	r1, [r7, #8]
 8020952:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8020954:	68fb      	ldr	r3, [r7, #12]
 8020956:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8020958:	f7ff fa0e 	bl	801fd78 <vPortEnterCritical>
 802095c:	697b      	ldr	r3, [r7, #20]
 802095e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8020962:	b25b      	sxtb	r3, r3
 8020964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020968:	d103      	bne.n	8020972 <vQueueWaitForMessageRestricted+0x2a>
 802096a:	697b      	ldr	r3, [r7, #20]
 802096c:	2200      	movs	r2, #0
 802096e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8020972:	697b      	ldr	r3, [r7, #20]
 8020974:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8020978:	b25b      	sxtb	r3, r3
 802097a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802097e:	d103      	bne.n	8020988 <vQueueWaitForMessageRestricted+0x40>
 8020980:	697b      	ldr	r3, [r7, #20]
 8020982:	2200      	movs	r2, #0
 8020984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020988:	f7ff fa28 	bl	801fddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 802098c:	697b      	ldr	r3, [r7, #20]
 802098e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020990:	2b00      	cmp	r3, #0
 8020992:	d106      	bne.n	80209a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8020994:	697b      	ldr	r3, [r7, #20]
 8020996:	3324      	adds	r3, #36	@ 0x24
 8020998:	687a      	ldr	r2, [r7, #4]
 802099a:	68b9      	ldr	r1, [r7, #8]
 802099c:	4618      	mov	r0, r3
 802099e:	f000 fc6d 	bl	802127c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80209a2:	6978      	ldr	r0, [r7, #20]
 80209a4:	f7ff ff26 	bl	80207f4 <prvUnlockQueue>
	}
 80209a8:	bf00      	nop
 80209aa:	3718      	adds	r7, #24
 80209ac:	46bd      	mov	sp, r7
 80209ae:	bd80      	pop	{r7, pc}

080209b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80209b0:	b580      	push	{r7, lr}
 80209b2:	b08e      	sub	sp, #56	@ 0x38
 80209b4:	af04      	add	r7, sp, #16
 80209b6:	60f8      	str	r0, [r7, #12]
 80209b8:	60b9      	str	r1, [r7, #8]
 80209ba:	607a      	str	r2, [r7, #4]
 80209bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80209be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d10b      	bne.n	80209dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80209c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80209c8:	f383 8811 	msr	BASEPRI, r3
 80209cc:	f3bf 8f6f 	isb	sy
 80209d0:	f3bf 8f4f 	dsb	sy
 80209d4:	623b      	str	r3, [r7, #32]
}
 80209d6:	bf00      	nop
 80209d8:	bf00      	nop
 80209da:	e7fd      	b.n	80209d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80209dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80209de:	2b00      	cmp	r3, #0
 80209e0:	d10b      	bne.n	80209fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80209e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80209e6:	f383 8811 	msr	BASEPRI, r3
 80209ea:	f3bf 8f6f 	isb	sy
 80209ee:	f3bf 8f4f 	dsb	sy
 80209f2:	61fb      	str	r3, [r7, #28]
}
 80209f4:	bf00      	nop
 80209f6:	bf00      	nop
 80209f8:	e7fd      	b.n	80209f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80209fa:	23a8      	movs	r3, #168	@ 0xa8
 80209fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80209fe:	693b      	ldr	r3, [r7, #16]
 8020a00:	2ba8      	cmp	r3, #168	@ 0xa8
 8020a02:	d00b      	beq.n	8020a1c <xTaskCreateStatic+0x6c>
	__asm volatile
 8020a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020a08:	f383 8811 	msr	BASEPRI, r3
 8020a0c:	f3bf 8f6f 	isb	sy
 8020a10:	f3bf 8f4f 	dsb	sy
 8020a14:	61bb      	str	r3, [r7, #24]
}
 8020a16:	bf00      	nop
 8020a18:	bf00      	nop
 8020a1a:	e7fd      	b.n	8020a18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8020a1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8020a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	d01e      	beq.n	8020a62 <xTaskCreateStatic+0xb2>
 8020a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d01b      	beq.n	8020a62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8020a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020a32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8020a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a36:	2202      	movs	r2, #2
 8020a38:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8020a3c:	2300      	movs	r3, #0
 8020a3e:	9303      	str	r3, [sp, #12]
 8020a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a42:	9302      	str	r3, [sp, #8]
 8020a44:	f107 0314 	add.w	r3, r7, #20
 8020a48:	9301      	str	r3, [sp, #4]
 8020a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a4c:	9300      	str	r3, [sp, #0]
 8020a4e:	683b      	ldr	r3, [r7, #0]
 8020a50:	687a      	ldr	r2, [r7, #4]
 8020a52:	68b9      	ldr	r1, [r7, #8]
 8020a54:	68f8      	ldr	r0, [r7, #12]
 8020a56:	f000 f851 	bl	8020afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8020a5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020a5c:	f000 f8f6 	bl	8020c4c <prvAddNewTaskToReadyList>
 8020a60:	e001      	b.n	8020a66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8020a62:	2300      	movs	r3, #0
 8020a64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8020a66:	697b      	ldr	r3, [r7, #20]
	}
 8020a68:	4618      	mov	r0, r3
 8020a6a:	3728      	adds	r7, #40	@ 0x28
 8020a6c:	46bd      	mov	sp, r7
 8020a6e:	bd80      	pop	{r7, pc}

08020a70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8020a70:	b580      	push	{r7, lr}
 8020a72:	b08c      	sub	sp, #48	@ 0x30
 8020a74:	af04      	add	r7, sp, #16
 8020a76:	60f8      	str	r0, [r7, #12]
 8020a78:	60b9      	str	r1, [r7, #8]
 8020a7a:	603b      	str	r3, [r7, #0]
 8020a7c:	4613      	mov	r3, r2
 8020a7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8020a80:	88fb      	ldrh	r3, [r7, #6]
 8020a82:	009b      	lsls	r3, r3, #2
 8020a84:	4618      	mov	r0, r3
 8020a86:	f7fe fda1 	bl	801f5cc <pvPortMalloc>
 8020a8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8020a8c:	697b      	ldr	r3, [r7, #20]
 8020a8e:	2b00      	cmp	r3, #0
 8020a90:	d00e      	beq.n	8020ab0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8020a92:	20a8      	movs	r0, #168	@ 0xa8
 8020a94:	f7fe fd9a 	bl	801f5cc <pvPortMalloc>
 8020a98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8020a9a:	69fb      	ldr	r3, [r7, #28]
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d003      	beq.n	8020aa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8020aa0:	69fb      	ldr	r3, [r7, #28]
 8020aa2:	697a      	ldr	r2, [r7, #20]
 8020aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8020aa6:	e005      	b.n	8020ab4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8020aa8:	6978      	ldr	r0, [r7, #20]
 8020aaa:	f7fe fe5d 	bl	801f768 <vPortFree>
 8020aae:	e001      	b.n	8020ab4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8020ab0:	2300      	movs	r3, #0
 8020ab2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8020ab4:	69fb      	ldr	r3, [r7, #28]
 8020ab6:	2b00      	cmp	r3, #0
 8020ab8:	d017      	beq.n	8020aea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8020aba:	69fb      	ldr	r3, [r7, #28]
 8020abc:	2200      	movs	r2, #0
 8020abe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8020ac2:	88fa      	ldrh	r2, [r7, #6]
 8020ac4:	2300      	movs	r3, #0
 8020ac6:	9303      	str	r3, [sp, #12]
 8020ac8:	69fb      	ldr	r3, [r7, #28]
 8020aca:	9302      	str	r3, [sp, #8]
 8020acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020ace:	9301      	str	r3, [sp, #4]
 8020ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020ad2:	9300      	str	r3, [sp, #0]
 8020ad4:	683b      	ldr	r3, [r7, #0]
 8020ad6:	68b9      	ldr	r1, [r7, #8]
 8020ad8:	68f8      	ldr	r0, [r7, #12]
 8020ada:	f000 f80f 	bl	8020afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8020ade:	69f8      	ldr	r0, [r7, #28]
 8020ae0:	f000 f8b4 	bl	8020c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8020ae4:	2301      	movs	r3, #1
 8020ae6:	61bb      	str	r3, [r7, #24]
 8020ae8:	e002      	b.n	8020af0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8020aea:	f04f 33ff 	mov.w	r3, #4294967295
 8020aee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8020af0:	69bb      	ldr	r3, [r7, #24]
	}
 8020af2:	4618      	mov	r0, r3
 8020af4:	3720      	adds	r7, #32
 8020af6:	46bd      	mov	sp, r7
 8020af8:	bd80      	pop	{r7, pc}
	...

08020afc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8020afc:	b580      	push	{r7, lr}
 8020afe:	b088      	sub	sp, #32
 8020b00:	af00      	add	r7, sp, #0
 8020b02:	60f8      	str	r0, [r7, #12]
 8020b04:	60b9      	str	r1, [r7, #8]
 8020b06:	607a      	str	r2, [r7, #4]
 8020b08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8020b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020b0c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	009b      	lsls	r3, r3, #2
 8020b12:	461a      	mov	r2, r3
 8020b14:	21a5      	movs	r1, #165	@ 0xa5
 8020b16:	f001 fd0a 	bl	802252e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8020b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8020b1e:	6879      	ldr	r1, [r7, #4]
 8020b20:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8020b24:	440b      	add	r3, r1
 8020b26:	009b      	lsls	r3, r3, #2
 8020b28:	4413      	add	r3, r2
 8020b2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8020b2c:	69bb      	ldr	r3, [r7, #24]
 8020b2e:	f023 0307 	bic.w	r3, r3, #7
 8020b32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8020b34:	69bb      	ldr	r3, [r7, #24]
 8020b36:	f003 0307 	and.w	r3, r3, #7
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d00b      	beq.n	8020b56 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8020b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020b42:	f383 8811 	msr	BASEPRI, r3
 8020b46:	f3bf 8f6f 	isb	sy
 8020b4a:	f3bf 8f4f 	dsb	sy
 8020b4e:	617b      	str	r3, [r7, #20]
}
 8020b50:	bf00      	nop
 8020b52:	bf00      	nop
 8020b54:	e7fd      	b.n	8020b52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8020b56:	68bb      	ldr	r3, [r7, #8]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d01f      	beq.n	8020b9c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8020b5c:	2300      	movs	r3, #0
 8020b5e:	61fb      	str	r3, [r7, #28]
 8020b60:	e012      	b.n	8020b88 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8020b62:	68ba      	ldr	r2, [r7, #8]
 8020b64:	69fb      	ldr	r3, [r7, #28]
 8020b66:	4413      	add	r3, r2
 8020b68:	7819      	ldrb	r1, [r3, #0]
 8020b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020b6c:	69fb      	ldr	r3, [r7, #28]
 8020b6e:	4413      	add	r3, r2
 8020b70:	3334      	adds	r3, #52	@ 0x34
 8020b72:	460a      	mov	r2, r1
 8020b74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8020b76:	68ba      	ldr	r2, [r7, #8]
 8020b78:	69fb      	ldr	r3, [r7, #28]
 8020b7a:	4413      	add	r3, r2
 8020b7c:	781b      	ldrb	r3, [r3, #0]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d006      	beq.n	8020b90 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8020b82:	69fb      	ldr	r3, [r7, #28]
 8020b84:	3301      	adds	r3, #1
 8020b86:	61fb      	str	r3, [r7, #28]
 8020b88:	69fb      	ldr	r3, [r7, #28]
 8020b8a:	2b0f      	cmp	r3, #15
 8020b8c:	d9e9      	bls.n	8020b62 <prvInitialiseNewTask+0x66>
 8020b8e:	e000      	b.n	8020b92 <prvInitialiseNewTask+0x96>
			{
				break;
 8020b90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8020b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020b94:	2200      	movs	r2, #0
 8020b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8020b9a:	e003      	b.n	8020ba4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8020b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020b9e:	2200      	movs	r2, #0
 8020ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8020ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020ba6:	2b37      	cmp	r3, #55	@ 0x37
 8020ba8:	d901      	bls.n	8020bae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8020baa:	2337      	movs	r3, #55	@ 0x37
 8020bac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8020bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8020bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020bb8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8020bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bbc:	2200      	movs	r2, #0
 8020bbe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8020bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bc2:	3304      	adds	r3, #4
 8020bc4:	4618      	mov	r0, r3
 8020bc6:	f7fe ff0f 	bl	801f9e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8020bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bcc:	3318      	adds	r3, #24
 8020bce:	4618      	mov	r0, r3
 8020bd0:	f7fe ff0a 	bl	801f9e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8020bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020bd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020bdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8020be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020be2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8020be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020be8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8020bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bec:	2200      	movs	r2, #0
 8020bee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8020bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bf4:	2200      	movs	r2, #0
 8020bf6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8020bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bfc:	3354      	adds	r3, #84	@ 0x54
 8020bfe:	224c      	movs	r2, #76	@ 0x4c
 8020c00:	2100      	movs	r1, #0
 8020c02:	4618      	mov	r0, r3
 8020c04:	f001 fc93 	bl	802252e <memset>
 8020c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8020c40 <prvInitialiseNewTask+0x144>)
 8020c0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8020c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c10:	4a0c      	ldr	r2, [pc, #48]	@ (8020c44 <prvInitialiseNewTask+0x148>)
 8020c12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8020c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c16:	4a0c      	ldr	r2, [pc, #48]	@ (8020c48 <prvInitialiseNewTask+0x14c>)
 8020c18:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8020c1a:	683a      	ldr	r2, [r7, #0]
 8020c1c:	68f9      	ldr	r1, [r7, #12]
 8020c1e:	69b8      	ldr	r0, [r7, #24]
 8020c20:	f7fe ff76 	bl	801fb10 <pxPortInitialiseStack>
 8020c24:	4602      	mov	r2, r0
 8020c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8020c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d002      	beq.n	8020c36 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8020c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8020c36:	bf00      	nop
 8020c38:	3720      	adds	r7, #32
 8020c3a:	46bd      	mov	sp, r7
 8020c3c:	bd80      	pop	{r7, pc}
 8020c3e:	bf00      	nop
 8020c40:	24018f80 	.word	0x24018f80
 8020c44:	24018fe8 	.word	0x24018fe8
 8020c48:	24019050 	.word	0x24019050

08020c4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8020c4c:	b580      	push	{r7, lr}
 8020c4e:	b082      	sub	sp, #8
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8020c54:	f7ff f890 	bl	801fd78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8020c58:	4b2d      	ldr	r3, [pc, #180]	@ (8020d10 <prvAddNewTaskToReadyList+0xc4>)
 8020c5a:	681b      	ldr	r3, [r3, #0]
 8020c5c:	3301      	adds	r3, #1
 8020c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8020d10 <prvAddNewTaskToReadyList+0xc4>)
 8020c60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8020c62:	4b2c      	ldr	r3, [pc, #176]	@ (8020d14 <prvAddNewTaskToReadyList+0xc8>)
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d109      	bne.n	8020c7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8020c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8020d14 <prvAddNewTaskToReadyList+0xc8>)
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8020c70:	4b27      	ldr	r3, [pc, #156]	@ (8020d10 <prvAddNewTaskToReadyList+0xc4>)
 8020c72:	681b      	ldr	r3, [r3, #0]
 8020c74:	2b01      	cmp	r3, #1
 8020c76:	d110      	bne.n	8020c9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8020c78:	f000 fc2e 	bl	80214d8 <prvInitialiseTaskLists>
 8020c7c:	e00d      	b.n	8020c9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8020c7e:	4b26      	ldr	r3, [pc, #152]	@ (8020d18 <prvAddNewTaskToReadyList+0xcc>)
 8020c80:	681b      	ldr	r3, [r3, #0]
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d109      	bne.n	8020c9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8020c86:	4b23      	ldr	r3, [pc, #140]	@ (8020d14 <prvAddNewTaskToReadyList+0xc8>)
 8020c88:	681b      	ldr	r3, [r3, #0]
 8020c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c90:	429a      	cmp	r2, r3
 8020c92:	d802      	bhi.n	8020c9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8020c94:	4a1f      	ldr	r2, [pc, #124]	@ (8020d14 <prvAddNewTaskToReadyList+0xc8>)
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8020c9a:	4b20      	ldr	r3, [pc, #128]	@ (8020d1c <prvAddNewTaskToReadyList+0xd0>)
 8020c9c:	681b      	ldr	r3, [r3, #0]
 8020c9e:	3301      	adds	r3, #1
 8020ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8020d1c <prvAddNewTaskToReadyList+0xd0>)
 8020ca2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8020ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8020d1c <prvAddNewTaskToReadyList+0xd0>)
 8020ca6:	681a      	ldr	r2, [r3, #0]
 8020ca8:	687b      	ldr	r3, [r7, #4]
 8020caa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8020d20 <prvAddNewTaskToReadyList+0xd4>)
 8020cb2:	681b      	ldr	r3, [r3, #0]
 8020cb4:	429a      	cmp	r2, r3
 8020cb6:	d903      	bls.n	8020cc0 <prvAddNewTaskToReadyList+0x74>
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020cbc:	4a18      	ldr	r2, [pc, #96]	@ (8020d20 <prvAddNewTaskToReadyList+0xd4>)
 8020cbe:	6013      	str	r3, [r2, #0]
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020cc4:	4613      	mov	r3, r2
 8020cc6:	009b      	lsls	r3, r3, #2
 8020cc8:	4413      	add	r3, r2
 8020cca:	009b      	lsls	r3, r3, #2
 8020ccc:	4a15      	ldr	r2, [pc, #84]	@ (8020d24 <prvAddNewTaskToReadyList+0xd8>)
 8020cce:	441a      	add	r2, r3
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	3304      	adds	r3, #4
 8020cd4:	4619      	mov	r1, r3
 8020cd6:	4610      	mov	r0, r2
 8020cd8:	f7fe fe93 	bl	801fa02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8020cdc:	f7ff f87e 	bl	801fddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8020ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8020d18 <prvAddNewTaskToReadyList+0xcc>)
 8020ce2:	681b      	ldr	r3, [r3, #0]
 8020ce4:	2b00      	cmp	r3, #0
 8020ce6:	d00e      	beq.n	8020d06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8020ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8020d14 <prvAddNewTaskToReadyList+0xc8>)
 8020cea:	681b      	ldr	r3, [r3, #0]
 8020cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020cf2:	429a      	cmp	r2, r3
 8020cf4:	d207      	bcs.n	8020d06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8020cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8020d28 <prvAddNewTaskToReadyList+0xdc>)
 8020cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020cfc:	601a      	str	r2, [r3, #0]
 8020cfe:	f3bf 8f4f 	dsb	sy
 8020d02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8020d06:	bf00      	nop
 8020d08:	3708      	adds	r7, #8
 8020d0a:	46bd      	mov	sp, r7
 8020d0c:	bd80      	pop	{r7, pc}
 8020d0e:	bf00      	nop
 8020d10:	24018e20 	.word	0x24018e20
 8020d14:	2401894c 	.word	0x2401894c
 8020d18:	24018e2c 	.word	0x24018e2c
 8020d1c:	24018e3c 	.word	0x24018e3c
 8020d20:	24018e28 	.word	0x24018e28
 8020d24:	24018950 	.word	0x24018950
 8020d28:	e000ed04 	.word	0xe000ed04

08020d2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8020d2c:	b580      	push	{r7, lr}
 8020d2e:	b084      	sub	sp, #16
 8020d30:	af00      	add	r7, sp, #0
 8020d32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8020d34:	2300      	movs	r3, #0
 8020d36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	d018      	beq.n	8020d70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8020d3e:	4b14      	ldr	r3, [pc, #80]	@ (8020d90 <vTaskDelay+0x64>)
 8020d40:	681b      	ldr	r3, [r3, #0]
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d00b      	beq.n	8020d5e <vTaskDelay+0x32>
	__asm volatile
 8020d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020d4a:	f383 8811 	msr	BASEPRI, r3
 8020d4e:	f3bf 8f6f 	isb	sy
 8020d52:	f3bf 8f4f 	dsb	sy
 8020d56:	60bb      	str	r3, [r7, #8]
}
 8020d58:	bf00      	nop
 8020d5a:	bf00      	nop
 8020d5c:	e7fd      	b.n	8020d5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8020d5e:	f000 f88b 	bl	8020e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8020d62:	2100      	movs	r1, #0
 8020d64:	6878      	ldr	r0, [r7, #4]
 8020d66:	f000 fd09 	bl	802177c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8020d6a:	f000 f893 	bl	8020e94 <xTaskResumeAll>
 8020d6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8020d70:	68fb      	ldr	r3, [r7, #12]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d107      	bne.n	8020d86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8020d76:	4b07      	ldr	r3, [pc, #28]	@ (8020d94 <vTaskDelay+0x68>)
 8020d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020d7c:	601a      	str	r2, [r3, #0]
 8020d7e:	f3bf 8f4f 	dsb	sy
 8020d82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8020d86:	bf00      	nop
 8020d88:	3710      	adds	r7, #16
 8020d8a:	46bd      	mov	sp, r7
 8020d8c:	bd80      	pop	{r7, pc}
 8020d8e:	bf00      	nop
 8020d90:	24018e48 	.word	0x24018e48
 8020d94:	e000ed04 	.word	0xe000ed04

08020d98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8020d98:	b580      	push	{r7, lr}
 8020d9a:	b08a      	sub	sp, #40	@ 0x28
 8020d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8020d9e:	2300      	movs	r3, #0
 8020da0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8020da2:	2300      	movs	r3, #0
 8020da4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8020da6:	463a      	mov	r2, r7
 8020da8:	1d39      	adds	r1, r7, #4
 8020daa:	f107 0308 	add.w	r3, r7, #8
 8020dae:	4618      	mov	r0, r3
 8020db0:	f7fe fbd8 	bl	801f564 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8020db4:	6839      	ldr	r1, [r7, #0]
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	68ba      	ldr	r2, [r7, #8]
 8020dba:	9202      	str	r2, [sp, #8]
 8020dbc:	9301      	str	r3, [sp, #4]
 8020dbe:	2300      	movs	r3, #0
 8020dc0:	9300      	str	r3, [sp, #0]
 8020dc2:	2300      	movs	r3, #0
 8020dc4:	460a      	mov	r2, r1
 8020dc6:	4924      	ldr	r1, [pc, #144]	@ (8020e58 <vTaskStartScheduler+0xc0>)
 8020dc8:	4824      	ldr	r0, [pc, #144]	@ (8020e5c <vTaskStartScheduler+0xc4>)
 8020dca:	f7ff fdf1 	bl	80209b0 <xTaskCreateStatic>
 8020dce:	4603      	mov	r3, r0
 8020dd0:	4a23      	ldr	r2, [pc, #140]	@ (8020e60 <vTaskStartScheduler+0xc8>)
 8020dd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8020dd4:	4b22      	ldr	r3, [pc, #136]	@ (8020e60 <vTaskStartScheduler+0xc8>)
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d002      	beq.n	8020de2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8020ddc:	2301      	movs	r3, #1
 8020dde:	617b      	str	r3, [r7, #20]
 8020de0:	e001      	b.n	8020de6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8020de2:	2300      	movs	r3, #0
 8020de4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8020de6:	697b      	ldr	r3, [r7, #20]
 8020de8:	2b01      	cmp	r3, #1
 8020dea:	d102      	bne.n	8020df2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8020dec:	f000 fd1a 	bl	8021824 <xTimerCreateTimerTask>
 8020df0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8020df2:	697b      	ldr	r3, [r7, #20]
 8020df4:	2b01      	cmp	r3, #1
 8020df6:	d11b      	bne.n	8020e30 <vTaskStartScheduler+0x98>
	__asm volatile
 8020df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020dfc:	f383 8811 	msr	BASEPRI, r3
 8020e00:	f3bf 8f6f 	isb	sy
 8020e04:	f3bf 8f4f 	dsb	sy
 8020e08:	613b      	str	r3, [r7, #16]
}
 8020e0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8020e0c:	4b15      	ldr	r3, [pc, #84]	@ (8020e64 <vTaskStartScheduler+0xcc>)
 8020e0e:	681b      	ldr	r3, [r3, #0]
 8020e10:	3354      	adds	r3, #84	@ 0x54
 8020e12:	4a15      	ldr	r2, [pc, #84]	@ (8020e68 <vTaskStartScheduler+0xd0>)
 8020e14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8020e16:	4b15      	ldr	r3, [pc, #84]	@ (8020e6c <vTaskStartScheduler+0xd4>)
 8020e18:	f04f 32ff 	mov.w	r2, #4294967295
 8020e1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8020e1e:	4b14      	ldr	r3, [pc, #80]	@ (8020e70 <vTaskStartScheduler+0xd8>)
 8020e20:	2201      	movs	r2, #1
 8020e22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8020e24:	4b13      	ldr	r3, [pc, #76]	@ (8020e74 <vTaskStartScheduler+0xdc>)
 8020e26:	2200      	movs	r2, #0
 8020e28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8020e2a:	f7fe ff01 	bl	801fc30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8020e2e:	e00f      	b.n	8020e50 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8020e30:	697b      	ldr	r3, [r7, #20]
 8020e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e36:	d10b      	bne.n	8020e50 <vTaskStartScheduler+0xb8>
	__asm volatile
 8020e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020e3c:	f383 8811 	msr	BASEPRI, r3
 8020e40:	f3bf 8f6f 	isb	sy
 8020e44:	f3bf 8f4f 	dsb	sy
 8020e48:	60fb      	str	r3, [r7, #12]
}
 8020e4a:	bf00      	nop
 8020e4c:	bf00      	nop
 8020e4e:	e7fd      	b.n	8020e4c <vTaskStartScheduler+0xb4>
}
 8020e50:	bf00      	nop
 8020e52:	3718      	adds	r7, #24
 8020e54:	46bd      	mov	sp, r7
 8020e56:	bd80      	pop	{r7, pc}
 8020e58:	080260a4 	.word	0x080260a4
 8020e5c:	080214a9 	.word	0x080214a9
 8020e60:	24018e44 	.word	0x24018e44
 8020e64:	2401894c 	.word	0x2401894c
 8020e68:	240007b4 	.word	0x240007b4
 8020e6c:	24018e40 	.word	0x24018e40
 8020e70:	24018e2c 	.word	0x24018e2c
 8020e74:	24018e24 	.word	0x24018e24

08020e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8020e78:	b480      	push	{r7}
 8020e7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8020e7c:	4b04      	ldr	r3, [pc, #16]	@ (8020e90 <vTaskSuspendAll+0x18>)
 8020e7e:	681b      	ldr	r3, [r3, #0]
 8020e80:	3301      	adds	r3, #1
 8020e82:	4a03      	ldr	r2, [pc, #12]	@ (8020e90 <vTaskSuspendAll+0x18>)
 8020e84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8020e86:	bf00      	nop
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e8e:	4770      	bx	lr
 8020e90:	24018e48 	.word	0x24018e48

08020e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8020e94:	b580      	push	{r7, lr}
 8020e96:	b084      	sub	sp, #16
 8020e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8020e9a:	2300      	movs	r3, #0
 8020e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8020e9e:	2300      	movs	r3, #0
 8020ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8020ea2:	4b42      	ldr	r3, [pc, #264]	@ (8020fac <xTaskResumeAll+0x118>)
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d10b      	bne.n	8020ec2 <xTaskResumeAll+0x2e>
	__asm volatile
 8020eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020eae:	f383 8811 	msr	BASEPRI, r3
 8020eb2:	f3bf 8f6f 	isb	sy
 8020eb6:	f3bf 8f4f 	dsb	sy
 8020eba:	603b      	str	r3, [r7, #0]
}
 8020ebc:	bf00      	nop
 8020ebe:	bf00      	nop
 8020ec0:	e7fd      	b.n	8020ebe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8020ec2:	f7fe ff59 	bl	801fd78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8020ec6:	4b39      	ldr	r3, [pc, #228]	@ (8020fac <xTaskResumeAll+0x118>)
 8020ec8:	681b      	ldr	r3, [r3, #0]
 8020eca:	3b01      	subs	r3, #1
 8020ecc:	4a37      	ldr	r2, [pc, #220]	@ (8020fac <xTaskResumeAll+0x118>)
 8020ece:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020ed0:	4b36      	ldr	r3, [pc, #216]	@ (8020fac <xTaskResumeAll+0x118>)
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d162      	bne.n	8020f9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8020ed8:	4b35      	ldr	r3, [pc, #212]	@ (8020fb0 <xTaskResumeAll+0x11c>)
 8020eda:	681b      	ldr	r3, [r3, #0]
 8020edc:	2b00      	cmp	r3, #0
 8020ede:	d05e      	beq.n	8020f9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8020ee0:	e02f      	b.n	8020f42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020ee2:	4b34      	ldr	r3, [pc, #208]	@ (8020fb4 <xTaskResumeAll+0x120>)
 8020ee4:	68db      	ldr	r3, [r3, #12]
 8020ee6:	68db      	ldr	r3, [r3, #12]
 8020ee8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8020eea:	68fb      	ldr	r3, [r7, #12]
 8020eec:	3318      	adds	r3, #24
 8020eee:	4618      	mov	r0, r3
 8020ef0:	f7fe fde4 	bl	801fabc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020ef4:	68fb      	ldr	r3, [r7, #12]
 8020ef6:	3304      	adds	r3, #4
 8020ef8:	4618      	mov	r0, r3
 8020efa:	f7fe fddf 	bl	801fabc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8020efe:	68fb      	ldr	r3, [r7, #12]
 8020f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020f02:	4b2d      	ldr	r3, [pc, #180]	@ (8020fb8 <xTaskResumeAll+0x124>)
 8020f04:	681b      	ldr	r3, [r3, #0]
 8020f06:	429a      	cmp	r2, r3
 8020f08:	d903      	bls.n	8020f12 <xTaskResumeAll+0x7e>
 8020f0a:	68fb      	ldr	r3, [r7, #12]
 8020f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8020fb8 <xTaskResumeAll+0x124>)
 8020f10:	6013      	str	r3, [r2, #0]
 8020f12:	68fb      	ldr	r3, [r7, #12]
 8020f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020f16:	4613      	mov	r3, r2
 8020f18:	009b      	lsls	r3, r3, #2
 8020f1a:	4413      	add	r3, r2
 8020f1c:	009b      	lsls	r3, r3, #2
 8020f1e:	4a27      	ldr	r2, [pc, #156]	@ (8020fbc <xTaskResumeAll+0x128>)
 8020f20:	441a      	add	r2, r3
 8020f22:	68fb      	ldr	r3, [r7, #12]
 8020f24:	3304      	adds	r3, #4
 8020f26:	4619      	mov	r1, r3
 8020f28:	4610      	mov	r0, r2
 8020f2a:	f7fe fd6a 	bl	801fa02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8020f2e:	68fb      	ldr	r3, [r7, #12]
 8020f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020f32:	4b23      	ldr	r3, [pc, #140]	@ (8020fc0 <xTaskResumeAll+0x12c>)
 8020f34:	681b      	ldr	r3, [r3, #0]
 8020f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020f38:	429a      	cmp	r2, r3
 8020f3a:	d302      	bcc.n	8020f42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8020f3c:	4b21      	ldr	r3, [pc, #132]	@ (8020fc4 <xTaskResumeAll+0x130>)
 8020f3e:	2201      	movs	r2, #1
 8020f40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8020f42:	4b1c      	ldr	r3, [pc, #112]	@ (8020fb4 <xTaskResumeAll+0x120>)
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	d1cb      	bne.n	8020ee2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8020f4a:	68fb      	ldr	r3, [r7, #12]
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	d001      	beq.n	8020f54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8020f50:	f000 fb66 	bl	8021620 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8020f54:	4b1c      	ldr	r3, [pc, #112]	@ (8020fc8 <xTaskResumeAll+0x134>)
 8020f56:	681b      	ldr	r3, [r3, #0]
 8020f58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d010      	beq.n	8020f82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8020f60:	f000 f846 	bl	8020ff0 <xTaskIncrementTick>
 8020f64:	4603      	mov	r3, r0
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	d002      	beq.n	8020f70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8020f6a:	4b16      	ldr	r3, [pc, #88]	@ (8020fc4 <xTaskResumeAll+0x130>)
 8020f6c:	2201      	movs	r2, #1
 8020f6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8020f70:	687b      	ldr	r3, [r7, #4]
 8020f72:	3b01      	subs	r3, #1
 8020f74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8020f76:	687b      	ldr	r3, [r7, #4]
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	d1f1      	bne.n	8020f60 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8020f7c:	4b12      	ldr	r3, [pc, #72]	@ (8020fc8 <xTaskResumeAll+0x134>)
 8020f7e:	2200      	movs	r2, #0
 8020f80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8020f82:	4b10      	ldr	r3, [pc, #64]	@ (8020fc4 <xTaskResumeAll+0x130>)
 8020f84:	681b      	ldr	r3, [r3, #0]
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d009      	beq.n	8020f9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8020f8a:	2301      	movs	r3, #1
 8020f8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8020f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8020fcc <xTaskResumeAll+0x138>)
 8020f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020f94:	601a      	str	r2, [r3, #0]
 8020f96:	f3bf 8f4f 	dsb	sy
 8020f9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8020f9e:	f7fe ff1d 	bl	801fddc <vPortExitCritical>

	return xAlreadyYielded;
 8020fa2:	68bb      	ldr	r3, [r7, #8]
}
 8020fa4:	4618      	mov	r0, r3
 8020fa6:	3710      	adds	r7, #16
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	bd80      	pop	{r7, pc}
 8020fac:	24018e48 	.word	0x24018e48
 8020fb0:	24018e20 	.word	0x24018e20
 8020fb4:	24018de0 	.word	0x24018de0
 8020fb8:	24018e28 	.word	0x24018e28
 8020fbc:	24018950 	.word	0x24018950
 8020fc0:	2401894c 	.word	0x2401894c
 8020fc4:	24018e34 	.word	0x24018e34
 8020fc8:	24018e30 	.word	0x24018e30
 8020fcc:	e000ed04 	.word	0xe000ed04

08020fd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8020fd0:	b480      	push	{r7}
 8020fd2:	b083      	sub	sp, #12
 8020fd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8020fd6:	4b05      	ldr	r3, [pc, #20]	@ (8020fec <xTaskGetTickCount+0x1c>)
 8020fd8:	681b      	ldr	r3, [r3, #0]
 8020fda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8020fdc:	687b      	ldr	r3, [r7, #4]
}
 8020fde:	4618      	mov	r0, r3
 8020fe0:	370c      	adds	r7, #12
 8020fe2:	46bd      	mov	sp, r7
 8020fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fe8:	4770      	bx	lr
 8020fea:	bf00      	nop
 8020fec:	24018e24 	.word	0x24018e24

08020ff0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8020ff0:	b580      	push	{r7, lr}
 8020ff2:	b086      	sub	sp, #24
 8020ff4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8021138 <xTaskIncrementTick+0x148>)
 8020ffc:	681b      	ldr	r3, [r3, #0]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	f040 8090 	bne.w	8021124 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8021004:	4b4d      	ldr	r3, [pc, #308]	@ (802113c <xTaskIncrementTick+0x14c>)
 8021006:	681b      	ldr	r3, [r3, #0]
 8021008:	3301      	adds	r3, #1
 802100a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802100c:	4a4b      	ldr	r2, [pc, #300]	@ (802113c <xTaskIncrementTick+0x14c>)
 802100e:	693b      	ldr	r3, [r7, #16]
 8021010:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8021012:	693b      	ldr	r3, [r7, #16]
 8021014:	2b00      	cmp	r3, #0
 8021016:	d121      	bne.n	802105c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8021018:	4b49      	ldr	r3, [pc, #292]	@ (8021140 <xTaskIncrementTick+0x150>)
 802101a:	681b      	ldr	r3, [r3, #0]
 802101c:	681b      	ldr	r3, [r3, #0]
 802101e:	2b00      	cmp	r3, #0
 8021020:	d00b      	beq.n	802103a <xTaskIncrementTick+0x4a>
	__asm volatile
 8021022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021026:	f383 8811 	msr	BASEPRI, r3
 802102a:	f3bf 8f6f 	isb	sy
 802102e:	f3bf 8f4f 	dsb	sy
 8021032:	603b      	str	r3, [r7, #0]
}
 8021034:	bf00      	nop
 8021036:	bf00      	nop
 8021038:	e7fd      	b.n	8021036 <xTaskIncrementTick+0x46>
 802103a:	4b41      	ldr	r3, [pc, #260]	@ (8021140 <xTaskIncrementTick+0x150>)
 802103c:	681b      	ldr	r3, [r3, #0]
 802103e:	60fb      	str	r3, [r7, #12]
 8021040:	4b40      	ldr	r3, [pc, #256]	@ (8021144 <xTaskIncrementTick+0x154>)
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	4a3e      	ldr	r2, [pc, #248]	@ (8021140 <xTaskIncrementTick+0x150>)
 8021046:	6013      	str	r3, [r2, #0]
 8021048:	4a3e      	ldr	r2, [pc, #248]	@ (8021144 <xTaskIncrementTick+0x154>)
 802104a:	68fb      	ldr	r3, [r7, #12]
 802104c:	6013      	str	r3, [r2, #0]
 802104e:	4b3e      	ldr	r3, [pc, #248]	@ (8021148 <xTaskIncrementTick+0x158>)
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	3301      	adds	r3, #1
 8021054:	4a3c      	ldr	r2, [pc, #240]	@ (8021148 <xTaskIncrementTick+0x158>)
 8021056:	6013      	str	r3, [r2, #0]
 8021058:	f000 fae2 	bl	8021620 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802105c:	4b3b      	ldr	r3, [pc, #236]	@ (802114c <xTaskIncrementTick+0x15c>)
 802105e:	681b      	ldr	r3, [r3, #0]
 8021060:	693a      	ldr	r2, [r7, #16]
 8021062:	429a      	cmp	r2, r3
 8021064:	d349      	bcc.n	80210fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021066:	4b36      	ldr	r3, [pc, #216]	@ (8021140 <xTaskIncrementTick+0x150>)
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	681b      	ldr	r3, [r3, #0]
 802106c:	2b00      	cmp	r3, #0
 802106e:	d104      	bne.n	802107a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021070:	4b36      	ldr	r3, [pc, #216]	@ (802114c <xTaskIncrementTick+0x15c>)
 8021072:	f04f 32ff 	mov.w	r2, #4294967295
 8021076:	601a      	str	r2, [r3, #0]
					break;
 8021078:	e03f      	b.n	80210fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802107a:	4b31      	ldr	r3, [pc, #196]	@ (8021140 <xTaskIncrementTick+0x150>)
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	68db      	ldr	r3, [r3, #12]
 8021080:	68db      	ldr	r3, [r3, #12]
 8021082:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8021084:	68bb      	ldr	r3, [r7, #8]
 8021086:	685b      	ldr	r3, [r3, #4]
 8021088:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802108a:	693a      	ldr	r2, [r7, #16]
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	429a      	cmp	r2, r3
 8021090:	d203      	bcs.n	802109a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8021092:	4a2e      	ldr	r2, [pc, #184]	@ (802114c <xTaskIncrementTick+0x15c>)
 8021094:	687b      	ldr	r3, [r7, #4]
 8021096:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8021098:	e02f      	b.n	80210fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802109a:	68bb      	ldr	r3, [r7, #8]
 802109c:	3304      	adds	r3, #4
 802109e:	4618      	mov	r0, r3
 80210a0:	f7fe fd0c 	bl	801fabc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80210a4:	68bb      	ldr	r3, [r7, #8]
 80210a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	d004      	beq.n	80210b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80210ac:	68bb      	ldr	r3, [r7, #8]
 80210ae:	3318      	adds	r3, #24
 80210b0:	4618      	mov	r0, r3
 80210b2:	f7fe fd03 	bl	801fabc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80210b6:	68bb      	ldr	r3, [r7, #8]
 80210b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80210ba:	4b25      	ldr	r3, [pc, #148]	@ (8021150 <xTaskIncrementTick+0x160>)
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	429a      	cmp	r2, r3
 80210c0:	d903      	bls.n	80210ca <xTaskIncrementTick+0xda>
 80210c2:	68bb      	ldr	r3, [r7, #8]
 80210c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80210c6:	4a22      	ldr	r2, [pc, #136]	@ (8021150 <xTaskIncrementTick+0x160>)
 80210c8:	6013      	str	r3, [r2, #0]
 80210ca:	68bb      	ldr	r3, [r7, #8]
 80210cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80210ce:	4613      	mov	r3, r2
 80210d0:	009b      	lsls	r3, r3, #2
 80210d2:	4413      	add	r3, r2
 80210d4:	009b      	lsls	r3, r3, #2
 80210d6:	4a1f      	ldr	r2, [pc, #124]	@ (8021154 <xTaskIncrementTick+0x164>)
 80210d8:	441a      	add	r2, r3
 80210da:	68bb      	ldr	r3, [r7, #8]
 80210dc:	3304      	adds	r3, #4
 80210de:	4619      	mov	r1, r3
 80210e0:	4610      	mov	r0, r2
 80210e2:	f7fe fc8e 	bl	801fa02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80210e6:	68bb      	ldr	r3, [r7, #8]
 80210e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80210ea:	4b1b      	ldr	r3, [pc, #108]	@ (8021158 <xTaskIncrementTick+0x168>)
 80210ec:	681b      	ldr	r3, [r3, #0]
 80210ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80210f0:	429a      	cmp	r2, r3
 80210f2:	d3b8      	bcc.n	8021066 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80210f4:	2301      	movs	r3, #1
 80210f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80210f8:	e7b5      	b.n	8021066 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80210fa:	4b17      	ldr	r3, [pc, #92]	@ (8021158 <xTaskIncrementTick+0x168>)
 80210fc:	681b      	ldr	r3, [r3, #0]
 80210fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021100:	4914      	ldr	r1, [pc, #80]	@ (8021154 <xTaskIncrementTick+0x164>)
 8021102:	4613      	mov	r3, r2
 8021104:	009b      	lsls	r3, r3, #2
 8021106:	4413      	add	r3, r2
 8021108:	009b      	lsls	r3, r3, #2
 802110a:	440b      	add	r3, r1
 802110c:	681b      	ldr	r3, [r3, #0]
 802110e:	2b01      	cmp	r3, #1
 8021110:	d901      	bls.n	8021116 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8021112:	2301      	movs	r3, #1
 8021114:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8021116:	4b11      	ldr	r3, [pc, #68]	@ (802115c <xTaskIncrementTick+0x16c>)
 8021118:	681b      	ldr	r3, [r3, #0]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d007      	beq.n	802112e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 802111e:	2301      	movs	r3, #1
 8021120:	617b      	str	r3, [r7, #20]
 8021122:	e004      	b.n	802112e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8021124:	4b0e      	ldr	r3, [pc, #56]	@ (8021160 <xTaskIncrementTick+0x170>)
 8021126:	681b      	ldr	r3, [r3, #0]
 8021128:	3301      	adds	r3, #1
 802112a:	4a0d      	ldr	r2, [pc, #52]	@ (8021160 <xTaskIncrementTick+0x170>)
 802112c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 802112e:	697b      	ldr	r3, [r7, #20]
}
 8021130:	4618      	mov	r0, r3
 8021132:	3718      	adds	r7, #24
 8021134:	46bd      	mov	sp, r7
 8021136:	bd80      	pop	{r7, pc}
 8021138:	24018e48 	.word	0x24018e48
 802113c:	24018e24 	.word	0x24018e24
 8021140:	24018dd8 	.word	0x24018dd8
 8021144:	24018ddc 	.word	0x24018ddc
 8021148:	24018e38 	.word	0x24018e38
 802114c:	24018e40 	.word	0x24018e40
 8021150:	24018e28 	.word	0x24018e28
 8021154:	24018950 	.word	0x24018950
 8021158:	2401894c 	.word	0x2401894c
 802115c:	24018e34 	.word	0x24018e34
 8021160:	24018e30 	.word	0x24018e30

08021164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8021164:	b480      	push	{r7}
 8021166:	b085      	sub	sp, #20
 8021168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802116a:	4b2b      	ldr	r3, [pc, #172]	@ (8021218 <vTaskSwitchContext+0xb4>)
 802116c:	681b      	ldr	r3, [r3, #0]
 802116e:	2b00      	cmp	r3, #0
 8021170:	d003      	beq.n	802117a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8021172:	4b2a      	ldr	r3, [pc, #168]	@ (802121c <vTaskSwitchContext+0xb8>)
 8021174:	2201      	movs	r2, #1
 8021176:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8021178:	e047      	b.n	802120a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 802117a:	4b28      	ldr	r3, [pc, #160]	@ (802121c <vTaskSwitchContext+0xb8>)
 802117c:	2200      	movs	r2, #0
 802117e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021180:	4b27      	ldr	r3, [pc, #156]	@ (8021220 <vTaskSwitchContext+0xbc>)
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	60fb      	str	r3, [r7, #12]
 8021186:	e011      	b.n	80211ac <vTaskSwitchContext+0x48>
 8021188:	68fb      	ldr	r3, [r7, #12]
 802118a:	2b00      	cmp	r3, #0
 802118c:	d10b      	bne.n	80211a6 <vTaskSwitchContext+0x42>
	__asm volatile
 802118e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021192:	f383 8811 	msr	BASEPRI, r3
 8021196:	f3bf 8f6f 	isb	sy
 802119a:	f3bf 8f4f 	dsb	sy
 802119e:	607b      	str	r3, [r7, #4]
}
 80211a0:	bf00      	nop
 80211a2:	bf00      	nop
 80211a4:	e7fd      	b.n	80211a2 <vTaskSwitchContext+0x3e>
 80211a6:	68fb      	ldr	r3, [r7, #12]
 80211a8:	3b01      	subs	r3, #1
 80211aa:	60fb      	str	r3, [r7, #12]
 80211ac:	491d      	ldr	r1, [pc, #116]	@ (8021224 <vTaskSwitchContext+0xc0>)
 80211ae:	68fa      	ldr	r2, [r7, #12]
 80211b0:	4613      	mov	r3, r2
 80211b2:	009b      	lsls	r3, r3, #2
 80211b4:	4413      	add	r3, r2
 80211b6:	009b      	lsls	r3, r3, #2
 80211b8:	440b      	add	r3, r1
 80211ba:	681b      	ldr	r3, [r3, #0]
 80211bc:	2b00      	cmp	r3, #0
 80211be:	d0e3      	beq.n	8021188 <vTaskSwitchContext+0x24>
 80211c0:	68fa      	ldr	r2, [r7, #12]
 80211c2:	4613      	mov	r3, r2
 80211c4:	009b      	lsls	r3, r3, #2
 80211c6:	4413      	add	r3, r2
 80211c8:	009b      	lsls	r3, r3, #2
 80211ca:	4a16      	ldr	r2, [pc, #88]	@ (8021224 <vTaskSwitchContext+0xc0>)
 80211cc:	4413      	add	r3, r2
 80211ce:	60bb      	str	r3, [r7, #8]
 80211d0:	68bb      	ldr	r3, [r7, #8]
 80211d2:	685b      	ldr	r3, [r3, #4]
 80211d4:	685a      	ldr	r2, [r3, #4]
 80211d6:	68bb      	ldr	r3, [r7, #8]
 80211d8:	605a      	str	r2, [r3, #4]
 80211da:	68bb      	ldr	r3, [r7, #8]
 80211dc:	685a      	ldr	r2, [r3, #4]
 80211de:	68bb      	ldr	r3, [r7, #8]
 80211e0:	3308      	adds	r3, #8
 80211e2:	429a      	cmp	r2, r3
 80211e4:	d104      	bne.n	80211f0 <vTaskSwitchContext+0x8c>
 80211e6:	68bb      	ldr	r3, [r7, #8]
 80211e8:	685b      	ldr	r3, [r3, #4]
 80211ea:	685a      	ldr	r2, [r3, #4]
 80211ec:	68bb      	ldr	r3, [r7, #8]
 80211ee:	605a      	str	r2, [r3, #4]
 80211f0:	68bb      	ldr	r3, [r7, #8]
 80211f2:	685b      	ldr	r3, [r3, #4]
 80211f4:	68db      	ldr	r3, [r3, #12]
 80211f6:	4a0c      	ldr	r2, [pc, #48]	@ (8021228 <vTaskSwitchContext+0xc4>)
 80211f8:	6013      	str	r3, [r2, #0]
 80211fa:	4a09      	ldr	r2, [pc, #36]	@ (8021220 <vTaskSwitchContext+0xbc>)
 80211fc:	68fb      	ldr	r3, [r7, #12]
 80211fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021200:	4b09      	ldr	r3, [pc, #36]	@ (8021228 <vTaskSwitchContext+0xc4>)
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	3354      	adds	r3, #84	@ 0x54
 8021206:	4a09      	ldr	r2, [pc, #36]	@ (802122c <vTaskSwitchContext+0xc8>)
 8021208:	6013      	str	r3, [r2, #0]
}
 802120a:	bf00      	nop
 802120c:	3714      	adds	r7, #20
 802120e:	46bd      	mov	sp, r7
 8021210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021214:	4770      	bx	lr
 8021216:	bf00      	nop
 8021218:	24018e48 	.word	0x24018e48
 802121c:	24018e34 	.word	0x24018e34
 8021220:	24018e28 	.word	0x24018e28
 8021224:	24018950 	.word	0x24018950
 8021228:	2401894c 	.word	0x2401894c
 802122c:	240007b4 	.word	0x240007b4

08021230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8021230:	b580      	push	{r7, lr}
 8021232:	b084      	sub	sp, #16
 8021234:	af00      	add	r7, sp, #0
 8021236:	6078      	str	r0, [r7, #4]
 8021238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	2b00      	cmp	r3, #0
 802123e:	d10b      	bne.n	8021258 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8021240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021244:	f383 8811 	msr	BASEPRI, r3
 8021248:	f3bf 8f6f 	isb	sy
 802124c:	f3bf 8f4f 	dsb	sy
 8021250:	60fb      	str	r3, [r7, #12]
}
 8021252:	bf00      	nop
 8021254:	bf00      	nop
 8021256:	e7fd      	b.n	8021254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8021258:	4b07      	ldr	r3, [pc, #28]	@ (8021278 <vTaskPlaceOnEventList+0x48>)
 802125a:	681b      	ldr	r3, [r3, #0]
 802125c:	3318      	adds	r3, #24
 802125e:	4619      	mov	r1, r3
 8021260:	6878      	ldr	r0, [r7, #4]
 8021262:	f7fe fbf2 	bl	801fa4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8021266:	2101      	movs	r1, #1
 8021268:	6838      	ldr	r0, [r7, #0]
 802126a:	f000 fa87 	bl	802177c <prvAddCurrentTaskToDelayedList>
}
 802126e:	bf00      	nop
 8021270:	3710      	adds	r7, #16
 8021272:	46bd      	mov	sp, r7
 8021274:	bd80      	pop	{r7, pc}
 8021276:	bf00      	nop
 8021278:	2401894c 	.word	0x2401894c

0802127c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802127c:	b580      	push	{r7, lr}
 802127e:	b086      	sub	sp, #24
 8021280:	af00      	add	r7, sp, #0
 8021282:	60f8      	str	r0, [r7, #12]
 8021284:	60b9      	str	r1, [r7, #8]
 8021286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8021288:	68fb      	ldr	r3, [r7, #12]
 802128a:	2b00      	cmp	r3, #0
 802128c:	d10b      	bne.n	80212a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 802128e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021292:	f383 8811 	msr	BASEPRI, r3
 8021296:	f3bf 8f6f 	isb	sy
 802129a:	f3bf 8f4f 	dsb	sy
 802129e:	617b      	str	r3, [r7, #20]
}
 80212a0:	bf00      	nop
 80212a2:	bf00      	nop
 80212a4:	e7fd      	b.n	80212a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80212a6:	4b0a      	ldr	r3, [pc, #40]	@ (80212d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80212a8:	681b      	ldr	r3, [r3, #0]
 80212aa:	3318      	adds	r3, #24
 80212ac:	4619      	mov	r1, r3
 80212ae:	68f8      	ldr	r0, [r7, #12]
 80212b0:	f7fe fba7 	bl	801fa02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	d002      	beq.n	80212c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80212ba:	f04f 33ff 	mov.w	r3, #4294967295
 80212be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80212c0:	6879      	ldr	r1, [r7, #4]
 80212c2:	68b8      	ldr	r0, [r7, #8]
 80212c4:	f000 fa5a 	bl	802177c <prvAddCurrentTaskToDelayedList>
	}
 80212c8:	bf00      	nop
 80212ca:	3718      	adds	r7, #24
 80212cc:	46bd      	mov	sp, r7
 80212ce:	bd80      	pop	{r7, pc}
 80212d0:	2401894c 	.word	0x2401894c

080212d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80212d4:	b580      	push	{r7, lr}
 80212d6:	b086      	sub	sp, #24
 80212d8:	af00      	add	r7, sp, #0
 80212da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	68db      	ldr	r3, [r3, #12]
 80212e0:	68db      	ldr	r3, [r3, #12]
 80212e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80212e4:	693b      	ldr	r3, [r7, #16]
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	d10b      	bne.n	8021302 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80212ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80212ee:	f383 8811 	msr	BASEPRI, r3
 80212f2:	f3bf 8f6f 	isb	sy
 80212f6:	f3bf 8f4f 	dsb	sy
 80212fa:	60fb      	str	r3, [r7, #12]
}
 80212fc:	bf00      	nop
 80212fe:	bf00      	nop
 8021300:	e7fd      	b.n	80212fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8021302:	693b      	ldr	r3, [r7, #16]
 8021304:	3318      	adds	r3, #24
 8021306:	4618      	mov	r0, r3
 8021308:	f7fe fbd8 	bl	801fabc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802130c:	4b1d      	ldr	r3, [pc, #116]	@ (8021384 <xTaskRemoveFromEventList+0xb0>)
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	2b00      	cmp	r3, #0
 8021312:	d11d      	bne.n	8021350 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8021314:	693b      	ldr	r3, [r7, #16]
 8021316:	3304      	adds	r3, #4
 8021318:	4618      	mov	r0, r3
 802131a:	f7fe fbcf 	bl	801fabc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802131e:	693b      	ldr	r3, [r7, #16]
 8021320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021322:	4b19      	ldr	r3, [pc, #100]	@ (8021388 <xTaskRemoveFromEventList+0xb4>)
 8021324:	681b      	ldr	r3, [r3, #0]
 8021326:	429a      	cmp	r2, r3
 8021328:	d903      	bls.n	8021332 <xTaskRemoveFromEventList+0x5e>
 802132a:	693b      	ldr	r3, [r7, #16]
 802132c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802132e:	4a16      	ldr	r2, [pc, #88]	@ (8021388 <xTaskRemoveFromEventList+0xb4>)
 8021330:	6013      	str	r3, [r2, #0]
 8021332:	693b      	ldr	r3, [r7, #16]
 8021334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021336:	4613      	mov	r3, r2
 8021338:	009b      	lsls	r3, r3, #2
 802133a:	4413      	add	r3, r2
 802133c:	009b      	lsls	r3, r3, #2
 802133e:	4a13      	ldr	r2, [pc, #76]	@ (802138c <xTaskRemoveFromEventList+0xb8>)
 8021340:	441a      	add	r2, r3
 8021342:	693b      	ldr	r3, [r7, #16]
 8021344:	3304      	adds	r3, #4
 8021346:	4619      	mov	r1, r3
 8021348:	4610      	mov	r0, r2
 802134a:	f7fe fb5a 	bl	801fa02 <vListInsertEnd>
 802134e:	e005      	b.n	802135c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8021350:	693b      	ldr	r3, [r7, #16]
 8021352:	3318      	adds	r3, #24
 8021354:	4619      	mov	r1, r3
 8021356:	480e      	ldr	r0, [pc, #56]	@ (8021390 <xTaskRemoveFromEventList+0xbc>)
 8021358:	f7fe fb53 	bl	801fa02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802135c:	693b      	ldr	r3, [r7, #16]
 802135e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021360:	4b0c      	ldr	r3, [pc, #48]	@ (8021394 <xTaskRemoveFromEventList+0xc0>)
 8021362:	681b      	ldr	r3, [r3, #0]
 8021364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021366:	429a      	cmp	r2, r3
 8021368:	d905      	bls.n	8021376 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802136a:	2301      	movs	r3, #1
 802136c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802136e:	4b0a      	ldr	r3, [pc, #40]	@ (8021398 <xTaskRemoveFromEventList+0xc4>)
 8021370:	2201      	movs	r2, #1
 8021372:	601a      	str	r2, [r3, #0]
 8021374:	e001      	b.n	802137a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8021376:	2300      	movs	r3, #0
 8021378:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802137a:	697b      	ldr	r3, [r7, #20]
}
 802137c:	4618      	mov	r0, r3
 802137e:	3718      	adds	r7, #24
 8021380:	46bd      	mov	sp, r7
 8021382:	bd80      	pop	{r7, pc}
 8021384:	24018e48 	.word	0x24018e48
 8021388:	24018e28 	.word	0x24018e28
 802138c:	24018950 	.word	0x24018950
 8021390:	24018de0 	.word	0x24018de0
 8021394:	2401894c 	.word	0x2401894c
 8021398:	24018e34 	.word	0x24018e34

0802139c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 802139c:	b480      	push	{r7}
 802139e:	b083      	sub	sp, #12
 80213a0:	af00      	add	r7, sp, #0
 80213a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80213a4:	4b06      	ldr	r3, [pc, #24]	@ (80213c0 <vTaskInternalSetTimeOutState+0x24>)
 80213a6:	681a      	ldr	r2, [r3, #0]
 80213a8:	687b      	ldr	r3, [r7, #4]
 80213aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80213ac:	4b05      	ldr	r3, [pc, #20]	@ (80213c4 <vTaskInternalSetTimeOutState+0x28>)
 80213ae:	681a      	ldr	r2, [r3, #0]
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	605a      	str	r2, [r3, #4]
}
 80213b4:	bf00      	nop
 80213b6:	370c      	adds	r7, #12
 80213b8:	46bd      	mov	sp, r7
 80213ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213be:	4770      	bx	lr
 80213c0:	24018e38 	.word	0x24018e38
 80213c4:	24018e24 	.word	0x24018e24

080213c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80213c8:	b580      	push	{r7, lr}
 80213ca:	b088      	sub	sp, #32
 80213cc:	af00      	add	r7, sp, #0
 80213ce:	6078      	str	r0, [r7, #4]
 80213d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80213d2:	687b      	ldr	r3, [r7, #4]
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d10b      	bne.n	80213f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80213d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80213dc:	f383 8811 	msr	BASEPRI, r3
 80213e0:	f3bf 8f6f 	isb	sy
 80213e4:	f3bf 8f4f 	dsb	sy
 80213e8:	613b      	str	r3, [r7, #16]
}
 80213ea:	bf00      	nop
 80213ec:	bf00      	nop
 80213ee:	e7fd      	b.n	80213ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80213f0:	683b      	ldr	r3, [r7, #0]
 80213f2:	2b00      	cmp	r3, #0
 80213f4:	d10b      	bne.n	802140e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80213f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80213fa:	f383 8811 	msr	BASEPRI, r3
 80213fe:	f3bf 8f6f 	isb	sy
 8021402:	f3bf 8f4f 	dsb	sy
 8021406:	60fb      	str	r3, [r7, #12]
}
 8021408:	bf00      	nop
 802140a:	bf00      	nop
 802140c:	e7fd      	b.n	802140a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 802140e:	f7fe fcb3 	bl	801fd78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8021412:	4b1d      	ldr	r3, [pc, #116]	@ (8021488 <xTaskCheckForTimeOut+0xc0>)
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8021418:	687b      	ldr	r3, [r7, #4]
 802141a:	685b      	ldr	r3, [r3, #4]
 802141c:	69ba      	ldr	r2, [r7, #24]
 802141e:	1ad3      	subs	r3, r2, r3
 8021420:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8021422:	683b      	ldr	r3, [r7, #0]
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	f1b3 3fff 	cmp.w	r3, #4294967295
 802142a:	d102      	bne.n	8021432 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 802142c:	2300      	movs	r3, #0
 802142e:	61fb      	str	r3, [r7, #28]
 8021430:	e023      	b.n	802147a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8021432:	687b      	ldr	r3, [r7, #4]
 8021434:	681a      	ldr	r2, [r3, #0]
 8021436:	4b15      	ldr	r3, [pc, #84]	@ (802148c <xTaskCheckForTimeOut+0xc4>)
 8021438:	681b      	ldr	r3, [r3, #0]
 802143a:	429a      	cmp	r2, r3
 802143c:	d007      	beq.n	802144e <xTaskCheckForTimeOut+0x86>
 802143e:	687b      	ldr	r3, [r7, #4]
 8021440:	685b      	ldr	r3, [r3, #4]
 8021442:	69ba      	ldr	r2, [r7, #24]
 8021444:	429a      	cmp	r2, r3
 8021446:	d302      	bcc.n	802144e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8021448:	2301      	movs	r3, #1
 802144a:	61fb      	str	r3, [r7, #28]
 802144c:	e015      	b.n	802147a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802144e:	683b      	ldr	r3, [r7, #0]
 8021450:	681b      	ldr	r3, [r3, #0]
 8021452:	697a      	ldr	r2, [r7, #20]
 8021454:	429a      	cmp	r2, r3
 8021456:	d20b      	bcs.n	8021470 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8021458:	683b      	ldr	r3, [r7, #0]
 802145a:	681a      	ldr	r2, [r3, #0]
 802145c:	697b      	ldr	r3, [r7, #20]
 802145e:	1ad2      	subs	r2, r2, r3
 8021460:	683b      	ldr	r3, [r7, #0]
 8021462:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8021464:	6878      	ldr	r0, [r7, #4]
 8021466:	f7ff ff99 	bl	802139c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802146a:	2300      	movs	r3, #0
 802146c:	61fb      	str	r3, [r7, #28]
 802146e:	e004      	b.n	802147a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8021470:	683b      	ldr	r3, [r7, #0]
 8021472:	2200      	movs	r2, #0
 8021474:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8021476:	2301      	movs	r3, #1
 8021478:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802147a:	f7fe fcaf 	bl	801fddc <vPortExitCritical>

	return xReturn;
 802147e:	69fb      	ldr	r3, [r7, #28]
}
 8021480:	4618      	mov	r0, r3
 8021482:	3720      	adds	r7, #32
 8021484:	46bd      	mov	sp, r7
 8021486:	bd80      	pop	{r7, pc}
 8021488:	24018e24 	.word	0x24018e24
 802148c:	24018e38 	.word	0x24018e38

08021490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8021490:	b480      	push	{r7}
 8021492:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8021494:	4b03      	ldr	r3, [pc, #12]	@ (80214a4 <vTaskMissedYield+0x14>)
 8021496:	2201      	movs	r2, #1
 8021498:	601a      	str	r2, [r3, #0]
}
 802149a:	bf00      	nop
 802149c:	46bd      	mov	sp, r7
 802149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214a2:	4770      	bx	lr
 80214a4:	24018e34 	.word	0x24018e34

080214a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80214a8:	b580      	push	{r7, lr}
 80214aa:	b082      	sub	sp, #8
 80214ac:	af00      	add	r7, sp, #0
 80214ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80214b0:	f000 f852 	bl	8021558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80214b4:	4b06      	ldr	r3, [pc, #24]	@ (80214d0 <prvIdleTask+0x28>)
 80214b6:	681b      	ldr	r3, [r3, #0]
 80214b8:	2b01      	cmp	r3, #1
 80214ba:	d9f9      	bls.n	80214b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80214bc:	4b05      	ldr	r3, [pc, #20]	@ (80214d4 <prvIdleTask+0x2c>)
 80214be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80214c2:	601a      	str	r2, [r3, #0]
 80214c4:	f3bf 8f4f 	dsb	sy
 80214c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80214cc:	e7f0      	b.n	80214b0 <prvIdleTask+0x8>
 80214ce:	bf00      	nop
 80214d0:	24018950 	.word	0x24018950
 80214d4:	e000ed04 	.word	0xe000ed04

080214d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80214d8:	b580      	push	{r7, lr}
 80214da:	b082      	sub	sp, #8
 80214dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80214de:	2300      	movs	r3, #0
 80214e0:	607b      	str	r3, [r7, #4]
 80214e2:	e00c      	b.n	80214fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80214e4:	687a      	ldr	r2, [r7, #4]
 80214e6:	4613      	mov	r3, r2
 80214e8:	009b      	lsls	r3, r3, #2
 80214ea:	4413      	add	r3, r2
 80214ec:	009b      	lsls	r3, r3, #2
 80214ee:	4a12      	ldr	r2, [pc, #72]	@ (8021538 <prvInitialiseTaskLists+0x60>)
 80214f0:	4413      	add	r3, r2
 80214f2:	4618      	mov	r0, r3
 80214f4:	f7fe fa58 	bl	801f9a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	3301      	adds	r3, #1
 80214fc:	607b      	str	r3, [r7, #4]
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	2b37      	cmp	r3, #55	@ 0x37
 8021502:	d9ef      	bls.n	80214e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8021504:	480d      	ldr	r0, [pc, #52]	@ (802153c <prvInitialiseTaskLists+0x64>)
 8021506:	f7fe fa4f 	bl	801f9a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802150a:	480d      	ldr	r0, [pc, #52]	@ (8021540 <prvInitialiseTaskLists+0x68>)
 802150c:	f7fe fa4c 	bl	801f9a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8021510:	480c      	ldr	r0, [pc, #48]	@ (8021544 <prvInitialiseTaskLists+0x6c>)
 8021512:	f7fe fa49 	bl	801f9a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8021516:	480c      	ldr	r0, [pc, #48]	@ (8021548 <prvInitialiseTaskLists+0x70>)
 8021518:	f7fe fa46 	bl	801f9a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 802151c:	480b      	ldr	r0, [pc, #44]	@ (802154c <prvInitialiseTaskLists+0x74>)
 802151e:	f7fe fa43 	bl	801f9a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8021522:	4b0b      	ldr	r3, [pc, #44]	@ (8021550 <prvInitialiseTaskLists+0x78>)
 8021524:	4a05      	ldr	r2, [pc, #20]	@ (802153c <prvInitialiseTaskLists+0x64>)
 8021526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8021528:	4b0a      	ldr	r3, [pc, #40]	@ (8021554 <prvInitialiseTaskLists+0x7c>)
 802152a:	4a05      	ldr	r2, [pc, #20]	@ (8021540 <prvInitialiseTaskLists+0x68>)
 802152c:	601a      	str	r2, [r3, #0]
}
 802152e:	bf00      	nop
 8021530:	3708      	adds	r7, #8
 8021532:	46bd      	mov	sp, r7
 8021534:	bd80      	pop	{r7, pc}
 8021536:	bf00      	nop
 8021538:	24018950 	.word	0x24018950
 802153c:	24018db0 	.word	0x24018db0
 8021540:	24018dc4 	.word	0x24018dc4
 8021544:	24018de0 	.word	0x24018de0
 8021548:	24018df4 	.word	0x24018df4
 802154c:	24018e0c 	.word	0x24018e0c
 8021550:	24018dd8 	.word	0x24018dd8
 8021554:	24018ddc 	.word	0x24018ddc

08021558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8021558:	b580      	push	{r7, lr}
 802155a:	b082      	sub	sp, #8
 802155c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802155e:	e019      	b.n	8021594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8021560:	f7fe fc0a 	bl	801fd78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021564:	4b10      	ldr	r3, [pc, #64]	@ (80215a8 <prvCheckTasksWaitingTermination+0x50>)
 8021566:	68db      	ldr	r3, [r3, #12]
 8021568:	68db      	ldr	r3, [r3, #12]
 802156a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	3304      	adds	r3, #4
 8021570:	4618      	mov	r0, r3
 8021572:	f7fe faa3 	bl	801fabc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8021576:	4b0d      	ldr	r3, [pc, #52]	@ (80215ac <prvCheckTasksWaitingTermination+0x54>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	3b01      	subs	r3, #1
 802157c:	4a0b      	ldr	r2, [pc, #44]	@ (80215ac <prvCheckTasksWaitingTermination+0x54>)
 802157e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8021580:	4b0b      	ldr	r3, [pc, #44]	@ (80215b0 <prvCheckTasksWaitingTermination+0x58>)
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	3b01      	subs	r3, #1
 8021586:	4a0a      	ldr	r2, [pc, #40]	@ (80215b0 <prvCheckTasksWaitingTermination+0x58>)
 8021588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802158a:	f7fe fc27 	bl	801fddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802158e:	6878      	ldr	r0, [r7, #4]
 8021590:	f000 f810 	bl	80215b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8021594:	4b06      	ldr	r3, [pc, #24]	@ (80215b0 <prvCheckTasksWaitingTermination+0x58>)
 8021596:	681b      	ldr	r3, [r3, #0]
 8021598:	2b00      	cmp	r3, #0
 802159a:	d1e1      	bne.n	8021560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 802159c:	bf00      	nop
 802159e:	bf00      	nop
 80215a0:	3708      	adds	r7, #8
 80215a2:	46bd      	mov	sp, r7
 80215a4:	bd80      	pop	{r7, pc}
 80215a6:	bf00      	nop
 80215a8:	24018df4 	.word	0x24018df4
 80215ac:	24018e20 	.word	0x24018e20
 80215b0:	24018e08 	.word	0x24018e08

080215b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80215b4:	b580      	push	{r7, lr}
 80215b6:	b084      	sub	sp, #16
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	3354      	adds	r3, #84	@ 0x54
 80215c0:	4618      	mov	r0, r3
 80215c2:	f001 f887 	bl	80226d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80215cc:	2b00      	cmp	r3, #0
 80215ce:	d108      	bne.n	80215e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80215d4:	4618      	mov	r0, r3
 80215d6:	f7fe f8c7 	bl	801f768 <vPortFree>
				vPortFree( pxTCB );
 80215da:	6878      	ldr	r0, [r7, #4]
 80215dc:	f7fe f8c4 	bl	801f768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80215e0:	e019      	b.n	8021616 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80215e8:	2b01      	cmp	r3, #1
 80215ea:	d103      	bne.n	80215f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	f7fe f8bb 	bl	801f768 <vPortFree>
	}
 80215f2:	e010      	b.n	8021616 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80215f4:	687b      	ldr	r3, [r7, #4]
 80215f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80215fa:	2b02      	cmp	r3, #2
 80215fc:	d00b      	beq.n	8021616 <prvDeleteTCB+0x62>
	__asm volatile
 80215fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021602:	f383 8811 	msr	BASEPRI, r3
 8021606:	f3bf 8f6f 	isb	sy
 802160a:	f3bf 8f4f 	dsb	sy
 802160e:	60fb      	str	r3, [r7, #12]
}
 8021610:	bf00      	nop
 8021612:	bf00      	nop
 8021614:	e7fd      	b.n	8021612 <prvDeleteTCB+0x5e>
	}
 8021616:	bf00      	nop
 8021618:	3710      	adds	r7, #16
 802161a:	46bd      	mov	sp, r7
 802161c:	bd80      	pop	{r7, pc}
	...

08021620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8021620:	b480      	push	{r7}
 8021622:	b083      	sub	sp, #12
 8021624:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021626:	4b0c      	ldr	r3, [pc, #48]	@ (8021658 <prvResetNextTaskUnblockTime+0x38>)
 8021628:	681b      	ldr	r3, [r3, #0]
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	2b00      	cmp	r3, #0
 802162e:	d104      	bne.n	802163a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8021630:	4b0a      	ldr	r3, [pc, #40]	@ (802165c <prvResetNextTaskUnblockTime+0x3c>)
 8021632:	f04f 32ff 	mov.w	r2, #4294967295
 8021636:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8021638:	e008      	b.n	802164c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802163a:	4b07      	ldr	r3, [pc, #28]	@ (8021658 <prvResetNextTaskUnblockTime+0x38>)
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	68db      	ldr	r3, [r3, #12]
 8021640:	68db      	ldr	r3, [r3, #12]
 8021642:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	685b      	ldr	r3, [r3, #4]
 8021648:	4a04      	ldr	r2, [pc, #16]	@ (802165c <prvResetNextTaskUnblockTime+0x3c>)
 802164a:	6013      	str	r3, [r2, #0]
}
 802164c:	bf00      	nop
 802164e:	370c      	adds	r7, #12
 8021650:	46bd      	mov	sp, r7
 8021652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021656:	4770      	bx	lr
 8021658:	24018dd8 	.word	0x24018dd8
 802165c:	24018e40 	.word	0x24018e40

08021660 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8021660:	b480      	push	{r7}
 8021662:	b083      	sub	sp, #12
 8021664:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8021666:	4b0b      	ldr	r3, [pc, #44]	@ (8021694 <xTaskGetSchedulerState+0x34>)
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	2b00      	cmp	r3, #0
 802166c:	d102      	bne.n	8021674 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802166e:	2301      	movs	r3, #1
 8021670:	607b      	str	r3, [r7, #4]
 8021672:	e008      	b.n	8021686 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021674:	4b08      	ldr	r3, [pc, #32]	@ (8021698 <xTaskGetSchedulerState+0x38>)
 8021676:	681b      	ldr	r3, [r3, #0]
 8021678:	2b00      	cmp	r3, #0
 802167a:	d102      	bne.n	8021682 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802167c:	2302      	movs	r3, #2
 802167e:	607b      	str	r3, [r7, #4]
 8021680:	e001      	b.n	8021686 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8021682:	2300      	movs	r3, #0
 8021684:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8021686:	687b      	ldr	r3, [r7, #4]
	}
 8021688:	4618      	mov	r0, r3
 802168a:	370c      	adds	r7, #12
 802168c:	46bd      	mov	sp, r7
 802168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021692:	4770      	bx	lr
 8021694:	24018e2c 	.word	0x24018e2c
 8021698:	24018e48 	.word	0x24018e48

0802169c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802169c:	b580      	push	{r7, lr}
 802169e:	b086      	sub	sp, #24
 80216a0:	af00      	add	r7, sp, #0
 80216a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80216a8:	2300      	movs	r3, #0
 80216aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d058      	beq.n	8021764 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80216b2:	4b2f      	ldr	r3, [pc, #188]	@ (8021770 <xTaskPriorityDisinherit+0xd4>)
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	693a      	ldr	r2, [r7, #16]
 80216b8:	429a      	cmp	r2, r3
 80216ba:	d00b      	beq.n	80216d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80216bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80216c0:	f383 8811 	msr	BASEPRI, r3
 80216c4:	f3bf 8f6f 	isb	sy
 80216c8:	f3bf 8f4f 	dsb	sy
 80216cc:	60fb      	str	r3, [r7, #12]
}
 80216ce:	bf00      	nop
 80216d0:	bf00      	nop
 80216d2:	e7fd      	b.n	80216d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80216d4:	693b      	ldr	r3, [r7, #16]
 80216d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80216d8:	2b00      	cmp	r3, #0
 80216da:	d10b      	bne.n	80216f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80216dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80216e0:	f383 8811 	msr	BASEPRI, r3
 80216e4:	f3bf 8f6f 	isb	sy
 80216e8:	f3bf 8f4f 	dsb	sy
 80216ec:	60bb      	str	r3, [r7, #8]
}
 80216ee:	bf00      	nop
 80216f0:	bf00      	nop
 80216f2:	e7fd      	b.n	80216f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80216f4:	693b      	ldr	r3, [r7, #16]
 80216f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80216f8:	1e5a      	subs	r2, r3, #1
 80216fa:	693b      	ldr	r3, [r7, #16]
 80216fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80216fe:	693b      	ldr	r3, [r7, #16]
 8021700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021702:	693b      	ldr	r3, [r7, #16]
 8021704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021706:	429a      	cmp	r2, r3
 8021708:	d02c      	beq.n	8021764 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802170a:	693b      	ldr	r3, [r7, #16]
 802170c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802170e:	2b00      	cmp	r3, #0
 8021710:	d128      	bne.n	8021764 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021712:	693b      	ldr	r3, [r7, #16]
 8021714:	3304      	adds	r3, #4
 8021716:	4618      	mov	r0, r3
 8021718:	f7fe f9d0 	bl	801fabc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802171c:	693b      	ldr	r3, [r7, #16]
 802171e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021720:	693b      	ldr	r3, [r7, #16]
 8021722:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021724:	693b      	ldr	r3, [r7, #16]
 8021726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021728:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 802172c:	693b      	ldr	r3, [r7, #16]
 802172e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8021730:	693b      	ldr	r3, [r7, #16]
 8021732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021734:	4b0f      	ldr	r3, [pc, #60]	@ (8021774 <xTaskPriorityDisinherit+0xd8>)
 8021736:	681b      	ldr	r3, [r3, #0]
 8021738:	429a      	cmp	r2, r3
 802173a:	d903      	bls.n	8021744 <xTaskPriorityDisinherit+0xa8>
 802173c:	693b      	ldr	r3, [r7, #16]
 802173e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021740:	4a0c      	ldr	r2, [pc, #48]	@ (8021774 <xTaskPriorityDisinherit+0xd8>)
 8021742:	6013      	str	r3, [r2, #0]
 8021744:	693b      	ldr	r3, [r7, #16]
 8021746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021748:	4613      	mov	r3, r2
 802174a:	009b      	lsls	r3, r3, #2
 802174c:	4413      	add	r3, r2
 802174e:	009b      	lsls	r3, r3, #2
 8021750:	4a09      	ldr	r2, [pc, #36]	@ (8021778 <xTaskPriorityDisinherit+0xdc>)
 8021752:	441a      	add	r2, r3
 8021754:	693b      	ldr	r3, [r7, #16]
 8021756:	3304      	adds	r3, #4
 8021758:	4619      	mov	r1, r3
 802175a:	4610      	mov	r0, r2
 802175c:	f7fe f951 	bl	801fa02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8021760:	2301      	movs	r3, #1
 8021762:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8021764:	697b      	ldr	r3, [r7, #20]
	}
 8021766:	4618      	mov	r0, r3
 8021768:	3718      	adds	r7, #24
 802176a:	46bd      	mov	sp, r7
 802176c:	bd80      	pop	{r7, pc}
 802176e:	bf00      	nop
 8021770:	2401894c 	.word	0x2401894c
 8021774:	24018e28 	.word	0x24018e28
 8021778:	24018950 	.word	0x24018950

0802177c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 802177c:	b580      	push	{r7, lr}
 802177e:	b084      	sub	sp, #16
 8021780:	af00      	add	r7, sp, #0
 8021782:	6078      	str	r0, [r7, #4]
 8021784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8021786:	4b21      	ldr	r3, [pc, #132]	@ (802180c <prvAddCurrentTaskToDelayedList+0x90>)
 8021788:	681b      	ldr	r3, [r3, #0]
 802178a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802178c:	4b20      	ldr	r3, [pc, #128]	@ (8021810 <prvAddCurrentTaskToDelayedList+0x94>)
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	3304      	adds	r3, #4
 8021792:	4618      	mov	r0, r3
 8021794:	f7fe f992 	bl	801fabc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802179e:	d10a      	bne.n	80217b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80217a0:	683b      	ldr	r3, [r7, #0]
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	d007      	beq.n	80217b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80217a6:	4b1a      	ldr	r3, [pc, #104]	@ (8021810 <prvAddCurrentTaskToDelayedList+0x94>)
 80217a8:	681b      	ldr	r3, [r3, #0]
 80217aa:	3304      	adds	r3, #4
 80217ac:	4619      	mov	r1, r3
 80217ae:	4819      	ldr	r0, [pc, #100]	@ (8021814 <prvAddCurrentTaskToDelayedList+0x98>)
 80217b0:	f7fe f927 	bl	801fa02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80217b4:	e026      	b.n	8021804 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80217b6:	68fa      	ldr	r2, [r7, #12]
 80217b8:	687b      	ldr	r3, [r7, #4]
 80217ba:	4413      	add	r3, r2
 80217bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80217be:	4b14      	ldr	r3, [pc, #80]	@ (8021810 <prvAddCurrentTaskToDelayedList+0x94>)
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	68ba      	ldr	r2, [r7, #8]
 80217c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80217c6:	68ba      	ldr	r2, [r7, #8]
 80217c8:	68fb      	ldr	r3, [r7, #12]
 80217ca:	429a      	cmp	r2, r3
 80217cc:	d209      	bcs.n	80217e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80217ce:	4b12      	ldr	r3, [pc, #72]	@ (8021818 <prvAddCurrentTaskToDelayedList+0x9c>)
 80217d0:	681a      	ldr	r2, [r3, #0]
 80217d2:	4b0f      	ldr	r3, [pc, #60]	@ (8021810 <prvAddCurrentTaskToDelayedList+0x94>)
 80217d4:	681b      	ldr	r3, [r3, #0]
 80217d6:	3304      	adds	r3, #4
 80217d8:	4619      	mov	r1, r3
 80217da:	4610      	mov	r0, r2
 80217dc:	f7fe f935 	bl	801fa4a <vListInsert>
}
 80217e0:	e010      	b.n	8021804 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80217e2:	4b0e      	ldr	r3, [pc, #56]	@ (802181c <prvAddCurrentTaskToDelayedList+0xa0>)
 80217e4:	681a      	ldr	r2, [r3, #0]
 80217e6:	4b0a      	ldr	r3, [pc, #40]	@ (8021810 <prvAddCurrentTaskToDelayedList+0x94>)
 80217e8:	681b      	ldr	r3, [r3, #0]
 80217ea:	3304      	adds	r3, #4
 80217ec:	4619      	mov	r1, r3
 80217ee:	4610      	mov	r0, r2
 80217f0:	f7fe f92b 	bl	801fa4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80217f4:	4b0a      	ldr	r3, [pc, #40]	@ (8021820 <prvAddCurrentTaskToDelayedList+0xa4>)
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	68ba      	ldr	r2, [r7, #8]
 80217fa:	429a      	cmp	r2, r3
 80217fc:	d202      	bcs.n	8021804 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80217fe:	4a08      	ldr	r2, [pc, #32]	@ (8021820 <prvAddCurrentTaskToDelayedList+0xa4>)
 8021800:	68bb      	ldr	r3, [r7, #8]
 8021802:	6013      	str	r3, [r2, #0]
}
 8021804:	bf00      	nop
 8021806:	3710      	adds	r7, #16
 8021808:	46bd      	mov	sp, r7
 802180a:	bd80      	pop	{r7, pc}
 802180c:	24018e24 	.word	0x24018e24
 8021810:	2401894c 	.word	0x2401894c
 8021814:	24018e0c 	.word	0x24018e0c
 8021818:	24018ddc 	.word	0x24018ddc
 802181c:	24018dd8 	.word	0x24018dd8
 8021820:	24018e40 	.word	0x24018e40

08021824 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8021824:	b580      	push	{r7, lr}
 8021826:	b08a      	sub	sp, #40	@ 0x28
 8021828:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802182a:	2300      	movs	r3, #0
 802182c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802182e:	f000 fb13 	bl	8021e58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8021832:	4b1d      	ldr	r3, [pc, #116]	@ (80218a8 <xTimerCreateTimerTask+0x84>)
 8021834:	681b      	ldr	r3, [r3, #0]
 8021836:	2b00      	cmp	r3, #0
 8021838:	d021      	beq.n	802187e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802183a:	2300      	movs	r3, #0
 802183c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802183e:	2300      	movs	r3, #0
 8021840:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8021842:	1d3a      	adds	r2, r7, #4
 8021844:	f107 0108 	add.w	r1, r7, #8
 8021848:	f107 030c 	add.w	r3, r7, #12
 802184c:	4618      	mov	r0, r3
 802184e:	f7fd fea3 	bl	801f598 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8021852:	6879      	ldr	r1, [r7, #4]
 8021854:	68bb      	ldr	r3, [r7, #8]
 8021856:	68fa      	ldr	r2, [r7, #12]
 8021858:	9202      	str	r2, [sp, #8]
 802185a:	9301      	str	r3, [sp, #4]
 802185c:	2302      	movs	r3, #2
 802185e:	9300      	str	r3, [sp, #0]
 8021860:	2300      	movs	r3, #0
 8021862:	460a      	mov	r2, r1
 8021864:	4911      	ldr	r1, [pc, #68]	@ (80218ac <xTimerCreateTimerTask+0x88>)
 8021866:	4812      	ldr	r0, [pc, #72]	@ (80218b0 <xTimerCreateTimerTask+0x8c>)
 8021868:	f7ff f8a2 	bl	80209b0 <xTaskCreateStatic>
 802186c:	4603      	mov	r3, r0
 802186e:	4a11      	ldr	r2, [pc, #68]	@ (80218b4 <xTimerCreateTimerTask+0x90>)
 8021870:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8021872:	4b10      	ldr	r3, [pc, #64]	@ (80218b4 <xTimerCreateTimerTask+0x90>)
 8021874:	681b      	ldr	r3, [r3, #0]
 8021876:	2b00      	cmp	r3, #0
 8021878:	d001      	beq.n	802187e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 802187a:	2301      	movs	r3, #1
 802187c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802187e:	697b      	ldr	r3, [r7, #20]
 8021880:	2b00      	cmp	r3, #0
 8021882:	d10b      	bne.n	802189c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8021884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021888:	f383 8811 	msr	BASEPRI, r3
 802188c:	f3bf 8f6f 	isb	sy
 8021890:	f3bf 8f4f 	dsb	sy
 8021894:	613b      	str	r3, [r7, #16]
}
 8021896:	bf00      	nop
 8021898:	bf00      	nop
 802189a:	e7fd      	b.n	8021898 <xTimerCreateTimerTask+0x74>
	return xReturn;
 802189c:	697b      	ldr	r3, [r7, #20]
}
 802189e:	4618      	mov	r0, r3
 80218a0:	3718      	adds	r7, #24
 80218a2:	46bd      	mov	sp, r7
 80218a4:	bd80      	pop	{r7, pc}
 80218a6:	bf00      	nop
 80218a8:	24018e7c 	.word	0x24018e7c
 80218ac:	080260ac 	.word	0x080260ac
 80218b0:	080219f1 	.word	0x080219f1
 80218b4:	24018e80 	.word	0x24018e80

080218b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80218b8:	b580      	push	{r7, lr}
 80218ba:	b08a      	sub	sp, #40	@ 0x28
 80218bc:	af00      	add	r7, sp, #0
 80218be:	60f8      	str	r0, [r7, #12]
 80218c0:	60b9      	str	r1, [r7, #8]
 80218c2:	607a      	str	r2, [r7, #4]
 80218c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80218c6:	2300      	movs	r3, #0
 80218c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80218ca:	68fb      	ldr	r3, [r7, #12]
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	d10b      	bne.n	80218e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80218d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80218d4:	f383 8811 	msr	BASEPRI, r3
 80218d8:	f3bf 8f6f 	isb	sy
 80218dc:	f3bf 8f4f 	dsb	sy
 80218e0:	623b      	str	r3, [r7, #32]
}
 80218e2:	bf00      	nop
 80218e4:	bf00      	nop
 80218e6:	e7fd      	b.n	80218e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80218e8:	4b19      	ldr	r3, [pc, #100]	@ (8021950 <xTimerGenericCommand+0x98>)
 80218ea:	681b      	ldr	r3, [r3, #0]
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d02a      	beq.n	8021946 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80218f0:	68bb      	ldr	r3, [r7, #8]
 80218f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80218f4:	687b      	ldr	r3, [r7, #4]
 80218f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80218f8:	68fb      	ldr	r3, [r7, #12]
 80218fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80218fc:	68bb      	ldr	r3, [r7, #8]
 80218fe:	2b05      	cmp	r3, #5
 8021900:	dc18      	bgt.n	8021934 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8021902:	f7ff fead 	bl	8021660 <xTaskGetSchedulerState>
 8021906:	4603      	mov	r3, r0
 8021908:	2b02      	cmp	r3, #2
 802190a:	d109      	bne.n	8021920 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802190c:	4b10      	ldr	r3, [pc, #64]	@ (8021950 <xTimerGenericCommand+0x98>)
 802190e:	6818      	ldr	r0, [r3, #0]
 8021910:	f107 0110 	add.w	r1, r7, #16
 8021914:	2300      	movs	r3, #0
 8021916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021918:	f7fe fc5a 	bl	80201d0 <xQueueGenericSend>
 802191c:	6278      	str	r0, [r7, #36]	@ 0x24
 802191e:	e012      	b.n	8021946 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8021920:	4b0b      	ldr	r3, [pc, #44]	@ (8021950 <xTimerGenericCommand+0x98>)
 8021922:	6818      	ldr	r0, [r3, #0]
 8021924:	f107 0110 	add.w	r1, r7, #16
 8021928:	2300      	movs	r3, #0
 802192a:	2200      	movs	r2, #0
 802192c:	f7fe fc50 	bl	80201d0 <xQueueGenericSend>
 8021930:	6278      	str	r0, [r7, #36]	@ 0x24
 8021932:	e008      	b.n	8021946 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8021934:	4b06      	ldr	r3, [pc, #24]	@ (8021950 <xTimerGenericCommand+0x98>)
 8021936:	6818      	ldr	r0, [r3, #0]
 8021938:	f107 0110 	add.w	r1, r7, #16
 802193c:	2300      	movs	r3, #0
 802193e:	683a      	ldr	r2, [r7, #0]
 8021940:	f7fe fd48 	bl	80203d4 <xQueueGenericSendFromISR>
 8021944:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8021946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8021948:	4618      	mov	r0, r3
 802194a:	3728      	adds	r7, #40	@ 0x28
 802194c:	46bd      	mov	sp, r7
 802194e:	bd80      	pop	{r7, pc}
 8021950:	24018e7c 	.word	0x24018e7c

08021954 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8021954:	b580      	push	{r7, lr}
 8021956:	b088      	sub	sp, #32
 8021958:	af02      	add	r7, sp, #8
 802195a:	6078      	str	r0, [r7, #4]
 802195c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802195e:	4b23      	ldr	r3, [pc, #140]	@ (80219ec <prvProcessExpiredTimer+0x98>)
 8021960:	681b      	ldr	r3, [r3, #0]
 8021962:	68db      	ldr	r3, [r3, #12]
 8021964:	68db      	ldr	r3, [r3, #12]
 8021966:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021968:	697b      	ldr	r3, [r7, #20]
 802196a:	3304      	adds	r3, #4
 802196c:	4618      	mov	r0, r3
 802196e:	f7fe f8a5 	bl	801fabc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021972:	697b      	ldr	r3, [r7, #20]
 8021974:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021978:	f003 0304 	and.w	r3, r3, #4
 802197c:	2b00      	cmp	r3, #0
 802197e:	d023      	beq.n	80219c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8021980:	697b      	ldr	r3, [r7, #20]
 8021982:	699a      	ldr	r2, [r3, #24]
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	18d1      	adds	r1, r2, r3
 8021988:	687b      	ldr	r3, [r7, #4]
 802198a:	683a      	ldr	r2, [r7, #0]
 802198c:	6978      	ldr	r0, [r7, #20]
 802198e:	f000 f8d5 	bl	8021b3c <prvInsertTimerInActiveList>
 8021992:	4603      	mov	r3, r0
 8021994:	2b00      	cmp	r3, #0
 8021996:	d020      	beq.n	80219da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8021998:	2300      	movs	r3, #0
 802199a:	9300      	str	r3, [sp, #0]
 802199c:	2300      	movs	r3, #0
 802199e:	687a      	ldr	r2, [r7, #4]
 80219a0:	2100      	movs	r1, #0
 80219a2:	6978      	ldr	r0, [r7, #20]
 80219a4:	f7ff ff88 	bl	80218b8 <xTimerGenericCommand>
 80219a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80219aa:	693b      	ldr	r3, [r7, #16]
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d114      	bne.n	80219da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80219b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80219b4:	f383 8811 	msr	BASEPRI, r3
 80219b8:	f3bf 8f6f 	isb	sy
 80219bc:	f3bf 8f4f 	dsb	sy
 80219c0:	60fb      	str	r3, [r7, #12]
}
 80219c2:	bf00      	nop
 80219c4:	bf00      	nop
 80219c6:	e7fd      	b.n	80219c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80219c8:	697b      	ldr	r3, [r7, #20]
 80219ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80219ce:	f023 0301 	bic.w	r3, r3, #1
 80219d2:	b2da      	uxtb	r2, r3
 80219d4:	697b      	ldr	r3, [r7, #20]
 80219d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80219da:	697b      	ldr	r3, [r7, #20]
 80219dc:	6a1b      	ldr	r3, [r3, #32]
 80219de:	6978      	ldr	r0, [r7, #20]
 80219e0:	4798      	blx	r3
}
 80219e2:	bf00      	nop
 80219e4:	3718      	adds	r7, #24
 80219e6:	46bd      	mov	sp, r7
 80219e8:	bd80      	pop	{r7, pc}
 80219ea:	bf00      	nop
 80219ec:	24018e74 	.word	0x24018e74

080219f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80219f0:	b580      	push	{r7, lr}
 80219f2:	b084      	sub	sp, #16
 80219f4:	af00      	add	r7, sp, #0
 80219f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80219f8:	f107 0308 	add.w	r3, r7, #8
 80219fc:	4618      	mov	r0, r3
 80219fe:	f000 f859 	bl	8021ab4 <prvGetNextExpireTime>
 8021a02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8021a04:	68bb      	ldr	r3, [r7, #8]
 8021a06:	4619      	mov	r1, r3
 8021a08:	68f8      	ldr	r0, [r7, #12]
 8021a0a:	f000 f805 	bl	8021a18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8021a0e:	f000 f8d7 	bl	8021bc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8021a12:	bf00      	nop
 8021a14:	e7f0      	b.n	80219f8 <prvTimerTask+0x8>
	...

08021a18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8021a18:	b580      	push	{r7, lr}
 8021a1a:	b084      	sub	sp, #16
 8021a1c:	af00      	add	r7, sp, #0
 8021a1e:	6078      	str	r0, [r7, #4]
 8021a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8021a22:	f7ff fa29 	bl	8020e78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8021a26:	f107 0308 	add.w	r3, r7, #8
 8021a2a:	4618      	mov	r0, r3
 8021a2c:	f000 f866 	bl	8021afc <prvSampleTimeNow>
 8021a30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8021a32:	68bb      	ldr	r3, [r7, #8]
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d130      	bne.n	8021a9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8021a38:	683b      	ldr	r3, [r7, #0]
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d10a      	bne.n	8021a54 <prvProcessTimerOrBlockTask+0x3c>
 8021a3e:	687a      	ldr	r2, [r7, #4]
 8021a40:	68fb      	ldr	r3, [r7, #12]
 8021a42:	429a      	cmp	r2, r3
 8021a44:	d806      	bhi.n	8021a54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8021a46:	f7ff fa25 	bl	8020e94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8021a4a:	68f9      	ldr	r1, [r7, #12]
 8021a4c:	6878      	ldr	r0, [r7, #4]
 8021a4e:	f7ff ff81 	bl	8021954 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8021a52:	e024      	b.n	8021a9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8021a54:	683b      	ldr	r3, [r7, #0]
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d008      	beq.n	8021a6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8021a5a:	4b13      	ldr	r3, [pc, #76]	@ (8021aa8 <prvProcessTimerOrBlockTask+0x90>)
 8021a5c:	681b      	ldr	r3, [r3, #0]
 8021a5e:	681b      	ldr	r3, [r3, #0]
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d101      	bne.n	8021a68 <prvProcessTimerOrBlockTask+0x50>
 8021a64:	2301      	movs	r3, #1
 8021a66:	e000      	b.n	8021a6a <prvProcessTimerOrBlockTask+0x52>
 8021a68:	2300      	movs	r3, #0
 8021a6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8021a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8021aac <prvProcessTimerOrBlockTask+0x94>)
 8021a6e:	6818      	ldr	r0, [r3, #0]
 8021a70:	687a      	ldr	r2, [r7, #4]
 8021a72:	68fb      	ldr	r3, [r7, #12]
 8021a74:	1ad3      	subs	r3, r2, r3
 8021a76:	683a      	ldr	r2, [r7, #0]
 8021a78:	4619      	mov	r1, r3
 8021a7a:	f7fe ff65 	bl	8020948 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8021a7e:	f7ff fa09 	bl	8020e94 <xTaskResumeAll>
 8021a82:	4603      	mov	r3, r0
 8021a84:	2b00      	cmp	r3, #0
 8021a86:	d10a      	bne.n	8021a9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8021a88:	4b09      	ldr	r3, [pc, #36]	@ (8021ab0 <prvProcessTimerOrBlockTask+0x98>)
 8021a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021a8e:	601a      	str	r2, [r3, #0]
 8021a90:	f3bf 8f4f 	dsb	sy
 8021a94:	f3bf 8f6f 	isb	sy
}
 8021a98:	e001      	b.n	8021a9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8021a9a:	f7ff f9fb 	bl	8020e94 <xTaskResumeAll>
}
 8021a9e:	bf00      	nop
 8021aa0:	3710      	adds	r7, #16
 8021aa2:	46bd      	mov	sp, r7
 8021aa4:	bd80      	pop	{r7, pc}
 8021aa6:	bf00      	nop
 8021aa8:	24018e78 	.word	0x24018e78
 8021aac:	24018e7c 	.word	0x24018e7c
 8021ab0:	e000ed04 	.word	0xe000ed04

08021ab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8021ab4:	b480      	push	{r7}
 8021ab6:	b085      	sub	sp, #20
 8021ab8:	af00      	add	r7, sp, #0
 8021aba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8021abc:	4b0e      	ldr	r3, [pc, #56]	@ (8021af8 <prvGetNextExpireTime+0x44>)
 8021abe:	681b      	ldr	r3, [r3, #0]
 8021ac0:	681b      	ldr	r3, [r3, #0]
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	d101      	bne.n	8021aca <prvGetNextExpireTime+0x16>
 8021ac6:	2201      	movs	r2, #1
 8021ac8:	e000      	b.n	8021acc <prvGetNextExpireTime+0x18>
 8021aca:	2200      	movs	r2, #0
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	681b      	ldr	r3, [r3, #0]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d105      	bne.n	8021ae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8021ad8:	4b07      	ldr	r3, [pc, #28]	@ (8021af8 <prvGetNextExpireTime+0x44>)
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	68db      	ldr	r3, [r3, #12]
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	60fb      	str	r3, [r7, #12]
 8021ae2:	e001      	b.n	8021ae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8021ae4:	2300      	movs	r3, #0
 8021ae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8021ae8:	68fb      	ldr	r3, [r7, #12]
}
 8021aea:	4618      	mov	r0, r3
 8021aec:	3714      	adds	r7, #20
 8021aee:	46bd      	mov	sp, r7
 8021af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021af4:	4770      	bx	lr
 8021af6:	bf00      	nop
 8021af8:	24018e74 	.word	0x24018e74

08021afc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8021afc:	b580      	push	{r7, lr}
 8021afe:	b084      	sub	sp, #16
 8021b00:	af00      	add	r7, sp, #0
 8021b02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8021b04:	f7ff fa64 	bl	8020fd0 <xTaskGetTickCount>
 8021b08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8021b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8021b38 <prvSampleTimeNow+0x3c>)
 8021b0c:	681b      	ldr	r3, [r3, #0]
 8021b0e:	68fa      	ldr	r2, [r7, #12]
 8021b10:	429a      	cmp	r2, r3
 8021b12:	d205      	bcs.n	8021b20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8021b14:	f000 f93a 	bl	8021d8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	2201      	movs	r2, #1
 8021b1c:	601a      	str	r2, [r3, #0]
 8021b1e:	e002      	b.n	8021b26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	2200      	movs	r2, #0
 8021b24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8021b26:	4a04      	ldr	r2, [pc, #16]	@ (8021b38 <prvSampleTimeNow+0x3c>)
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8021b2c:	68fb      	ldr	r3, [r7, #12]
}
 8021b2e:	4618      	mov	r0, r3
 8021b30:	3710      	adds	r7, #16
 8021b32:	46bd      	mov	sp, r7
 8021b34:	bd80      	pop	{r7, pc}
 8021b36:	bf00      	nop
 8021b38:	24018e84 	.word	0x24018e84

08021b3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8021b3c:	b580      	push	{r7, lr}
 8021b3e:	b086      	sub	sp, #24
 8021b40:	af00      	add	r7, sp, #0
 8021b42:	60f8      	str	r0, [r7, #12]
 8021b44:	60b9      	str	r1, [r7, #8]
 8021b46:	607a      	str	r2, [r7, #4]
 8021b48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8021b4a:	2300      	movs	r3, #0
 8021b4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8021b4e:	68fb      	ldr	r3, [r7, #12]
 8021b50:	68ba      	ldr	r2, [r7, #8]
 8021b52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8021b54:	68fb      	ldr	r3, [r7, #12]
 8021b56:	68fa      	ldr	r2, [r7, #12]
 8021b58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8021b5a:	68ba      	ldr	r2, [r7, #8]
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	429a      	cmp	r2, r3
 8021b60:	d812      	bhi.n	8021b88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021b62:	687a      	ldr	r2, [r7, #4]
 8021b64:	683b      	ldr	r3, [r7, #0]
 8021b66:	1ad2      	subs	r2, r2, r3
 8021b68:	68fb      	ldr	r3, [r7, #12]
 8021b6a:	699b      	ldr	r3, [r3, #24]
 8021b6c:	429a      	cmp	r2, r3
 8021b6e:	d302      	bcc.n	8021b76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8021b70:	2301      	movs	r3, #1
 8021b72:	617b      	str	r3, [r7, #20]
 8021b74:	e01b      	b.n	8021bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8021b76:	4b10      	ldr	r3, [pc, #64]	@ (8021bb8 <prvInsertTimerInActiveList+0x7c>)
 8021b78:	681a      	ldr	r2, [r3, #0]
 8021b7a:	68fb      	ldr	r3, [r7, #12]
 8021b7c:	3304      	adds	r3, #4
 8021b7e:	4619      	mov	r1, r3
 8021b80:	4610      	mov	r0, r2
 8021b82:	f7fd ff62 	bl	801fa4a <vListInsert>
 8021b86:	e012      	b.n	8021bae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8021b88:	687a      	ldr	r2, [r7, #4]
 8021b8a:	683b      	ldr	r3, [r7, #0]
 8021b8c:	429a      	cmp	r2, r3
 8021b8e:	d206      	bcs.n	8021b9e <prvInsertTimerInActiveList+0x62>
 8021b90:	68ba      	ldr	r2, [r7, #8]
 8021b92:	683b      	ldr	r3, [r7, #0]
 8021b94:	429a      	cmp	r2, r3
 8021b96:	d302      	bcc.n	8021b9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8021b98:	2301      	movs	r3, #1
 8021b9a:	617b      	str	r3, [r7, #20]
 8021b9c:	e007      	b.n	8021bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8021b9e:	4b07      	ldr	r3, [pc, #28]	@ (8021bbc <prvInsertTimerInActiveList+0x80>)
 8021ba0:	681a      	ldr	r2, [r3, #0]
 8021ba2:	68fb      	ldr	r3, [r7, #12]
 8021ba4:	3304      	adds	r3, #4
 8021ba6:	4619      	mov	r1, r3
 8021ba8:	4610      	mov	r0, r2
 8021baa:	f7fd ff4e 	bl	801fa4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8021bae:	697b      	ldr	r3, [r7, #20]
}
 8021bb0:	4618      	mov	r0, r3
 8021bb2:	3718      	adds	r7, #24
 8021bb4:	46bd      	mov	sp, r7
 8021bb6:	bd80      	pop	{r7, pc}
 8021bb8:	24018e78 	.word	0x24018e78
 8021bbc:	24018e74 	.word	0x24018e74

08021bc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8021bc0:	b580      	push	{r7, lr}
 8021bc2:	b08e      	sub	sp, #56	@ 0x38
 8021bc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8021bc6:	e0ce      	b.n	8021d66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	da19      	bge.n	8021c02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8021bce:	1d3b      	adds	r3, r7, #4
 8021bd0:	3304      	adds	r3, #4
 8021bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8021bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d10b      	bne.n	8021bf2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8021bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021bde:	f383 8811 	msr	BASEPRI, r3
 8021be2:	f3bf 8f6f 	isb	sy
 8021be6:	f3bf 8f4f 	dsb	sy
 8021bea:	61fb      	str	r3, [r7, #28]
}
 8021bec:	bf00      	nop
 8021bee:	bf00      	nop
 8021bf0:	e7fd      	b.n	8021bee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8021bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021bf4:	681b      	ldr	r3, [r3, #0]
 8021bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021bf8:	6850      	ldr	r0, [r2, #4]
 8021bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021bfc:	6892      	ldr	r2, [r2, #8]
 8021bfe:	4611      	mov	r1, r2
 8021c00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	f2c0 80ae 	blt.w	8021d66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8021c0a:	68fb      	ldr	r3, [r7, #12]
 8021c0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8021c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c10:	695b      	ldr	r3, [r3, #20]
 8021c12:	2b00      	cmp	r3, #0
 8021c14:	d004      	beq.n	8021c20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c18:	3304      	adds	r3, #4
 8021c1a:	4618      	mov	r0, r3
 8021c1c:	f7fd ff4e 	bl	801fabc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8021c20:	463b      	mov	r3, r7
 8021c22:	4618      	mov	r0, r3
 8021c24:	f7ff ff6a 	bl	8021afc <prvSampleTimeNow>
 8021c28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	2b09      	cmp	r3, #9
 8021c2e:	f200 8097 	bhi.w	8021d60 <prvProcessReceivedCommands+0x1a0>
 8021c32:	a201      	add	r2, pc, #4	@ (adr r2, 8021c38 <prvProcessReceivedCommands+0x78>)
 8021c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c38:	08021c61 	.word	0x08021c61
 8021c3c:	08021c61 	.word	0x08021c61
 8021c40:	08021c61 	.word	0x08021c61
 8021c44:	08021cd7 	.word	0x08021cd7
 8021c48:	08021ceb 	.word	0x08021ceb
 8021c4c:	08021d37 	.word	0x08021d37
 8021c50:	08021c61 	.word	0x08021c61
 8021c54:	08021c61 	.word	0x08021c61
 8021c58:	08021cd7 	.word	0x08021cd7
 8021c5c:	08021ceb 	.word	0x08021ceb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8021c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021c66:	f043 0301 	orr.w	r3, r3, #1
 8021c6a:	b2da      	uxtb	r2, r3
 8021c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8021c72:	68ba      	ldr	r2, [r7, #8]
 8021c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c76:	699b      	ldr	r3, [r3, #24]
 8021c78:	18d1      	adds	r1, r2, r3
 8021c7a:	68bb      	ldr	r3, [r7, #8]
 8021c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021c7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021c80:	f7ff ff5c 	bl	8021b3c <prvInsertTimerInActiveList>
 8021c84:	4603      	mov	r3, r0
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d06c      	beq.n	8021d64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8021c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c8c:	6a1b      	ldr	r3, [r3, #32]
 8021c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021c90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021c98:	f003 0304 	and.w	r3, r3, #4
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d061      	beq.n	8021d64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8021ca0:	68ba      	ldr	r2, [r7, #8]
 8021ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ca4:	699b      	ldr	r3, [r3, #24]
 8021ca6:	441a      	add	r2, r3
 8021ca8:	2300      	movs	r3, #0
 8021caa:	9300      	str	r3, [sp, #0]
 8021cac:	2300      	movs	r3, #0
 8021cae:	2100      	movs	r1, #0
 8021cb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021cb2:	f7ff fe01 	bl	80218b8 <xTimerGenericCommand>
 8021cb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8021cb8:	6a3b      	ldr	r3, [r7, #32]
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d152      	bne.n	8021d64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8021cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021cc2:	f383 8811 	msr	BASEPRI, r3
 8021cc6:	f3bf 8f6f 	isb	sy
 8021cca:	f3bf 8f4f 	dsb	sy
 8021cce:	61bb      	str	r3, [r7, #24]
}
 8021cd0:	bf00      	nop
 8021cd2:	bf00      	nop
 8021cd4:	e7fd      	b.n	8021cd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8021cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021cdc:	f023 0301 	bic.w	r3, r3, #1
 8021ce0:	b2da      	uxtb	r2, r3
 8021ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ce4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8021ce8:	e03d      	b.n	8021d66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8021cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021cf0:	f043 0301 	orr.w	r3, r3, #1
 8021cf4:	b2da      	uxtb	r2, r3
 8021cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8021cfc:	68ba      	ldr	r2, [r7, #8]
 8021cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8021d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d04:	699b      	ldr	r3, [r3, #24]
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d10b      	bne.n	8021d22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8021d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021d0e:	f383 8811 	msr	BASEPRI, r3
 8021d12:	f3bf 8f6f 	isb	sy
 8021d16:	f3bf 8f4f 	dsb	sy
 8021d1a:	617b      	str	r3, [r7, #20]
}
 8021d1c:	bf00      	nop
 8021d1e:	bf00      	nop
 8021d20:	e7fd      	b.n	8021d1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8021d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d24:	699a      	ldr	r2, [r3, #24]
 8021d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d28:	18d1      	adds	r1, r2, r3
 8021d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021d30:	f7ff ff04 	bl	8021b3c <prvInsertTimerInActiveList>
					break;
 8021d34:	e017      	b.n	8021d66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8021d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021d3c:	f003 0302 	and.w	r3, r3, #2
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d103      	bne.n	8021d4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8021d44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021d46:	f7fd fd0f 	bl	801f768 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8021d4a:	e00c      	b.n	8021d66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8021d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021d52:	f023 0301 	bic.w	r3, r3, #1
 8021d56:	b2da      	uxtb	r2, r3
 8021d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8021d5e:	e002      	b.n	8021d66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8021d60:	bf00      	nop
 8021d62:	e000      	b.n	8021d66 <prvProcessReceivedCommands+0x1a6>
					break;
 8021d64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8021d66:	4b08      	ldr	r3, [pc, #32]	@ (8021d88 <prvProcessReceivedCommands+0x1c8>)
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	1d39      	adds	r1, r7, #4
 8021d6c:	2200      	movs	r2, #0
 8021d6e:	4618      	mov	r0, r3
 8021d70:	f7fe fbce 	bl	8020510 <xQueueReceive>
 8021d74:	4603      	mov	r3, r0
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	f47f af26 	bne.w	8021bc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8021d7c:	bf00      	nop
 8021d7e:	bf00      	nop
 8021d80:	3730      	adds	r7, #48	@ 0x30
 8021d82:	46bd      	mov	sp, r7
 8021d84:	bd80      	pop	{r7, pc}
 8021d86:	bf00      	nop
 8021d88:	24018e7c 	.word	0x24018e7c

08021d8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	b088      	sub	sp, #32
 8021d90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8021d92:	e049      	b.n	8021e28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8021d94:	4b2e      	ldr	r3, [pc, #184]	@ (8021e50 <prvSwitchTimerLists+0xc4>)
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	68db      	ldr	r3, [r3, #12]
 8021d9a:	681b      	ldr	r3, [r3, #0]
 8021d9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8021e50 <prvSwitchTimerLists+0xc4>)
 8021da0:	681b      	ldr	r3, [r3, #0]
 8021da2:	68db      	ldr	r3, [r3, #12]
 8021da4:	68db      	ldr	r3, [r3, #12]
 8021da6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	3304      	adds	r3, #4
 8021dac:	4618      	mov	r0, r3
 8021dae:	f7fd fe85 	bl	801fabc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8021db2:	68fb      	ldr	r3, [r7, #12]
 8021db4:	6a1b      	ldr	r3, [r3, #32]
 8021db6:	68f8      	ldr	r0, [r7, #12]
 8021db8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021dba:	68fb      	ldr	r3, [r7, #12]
 8021dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021dc0:	f003 0304 	and.w	r3, r3, #4
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d02f      	beq.n	8021e28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8021dc8:	68fb      	ldr	r3, [r7, #12]
 8021dca:	699b      	ldr	r3, [r3, #24]
 8021dcc:	693a      	ldr	r2, [r7, #16]
 8021dce:	4413      	add	r3, r2
 8021dd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8021dd2:	68ba      	ldr	r2, [r7, #8]
 8021dd4:	693b      	ldr	r3, [r7, #16]
 8021dd6:	429a      	cmp	r2, r3
 8021dd8:	d90e      	bls.n	8021df8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8021dda:	68fb      	ldr	r3, [r7, #12]
 8021ddc:	68ba      	ldr	r2, [r7, #8]
 8021dde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8021de0:	68fb      	ldr	r3, [r7, #12]
 8021de2:	68fa      	ldr	r2, [r7, #12]
 8021de4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8021de6:	4b1a      	ldr	r3, [pc, #104]	@ (8021e50 <prvSwitchTimerLists+0xc4>)
 8021de8:	681a      	ldr	r2, [r3, #0]
 8021dea:	68fb      	ldr	r3, [r7, #12]
 8021dec:	3304      	adds	r3, #4
 8021dee:	4619      	mov	r1, r3
 8021df0:	4610      	mov	r0, r2
 8021df2:	f7fd fe2a 	bl	801fa4a <vListInsert>
 8021df6:	e017      	b.n	8021e28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8021df8:	2300      	movs	r3, #0
 8021dfa:	9300      	str	r3, [sp, #0]
 8021dfc:	2300      	movs	r3, #0
 8021dfe:	693a      	ldr	r2, [r7, #16]
 8021e00:	2100      	movs	r1, #0
 8021e02:	68f8      	ldr	r0, [r7, #12]
 8021e04:	f7ff fd58 	bl	80218b8 <xTimerGenericCommand>
 8021e08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	d10b      	bne.n	8021e28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8021e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021e14:	f383 8811 	msr	BASEPRI, r3
 8021e18:	f3bf 8f6f 	isb	sy
 8021e1c:	f3bf 8f4f 	dsb	sy
 8021e20:	603b      	str	r3, [r7, #0]
}
 8021e22:	bf00      	nop
 8021e24:	bf00      	nop
 8021e26:	e7fd      	b.n	8021e24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8021e28:	4b09      	ldr	r3, [pc, #36]	@ (8021e50 <prvSwitchTimerLists+0xc4>)
 8021e2a:	681b      	ldr	r3, [r3, #0]
 8021e2c:	681b      	ldr	r3, [r3, #0]
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	d1b0      	bne.n	8021d94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8021e32:	4b07      	ldr	r3, [pc, #28]	@ (8021e50 <prvSwitchTimerLists+0xc4>)
 8021e34:	681b      	ldr	r3, [r3, #0]
 8021e36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8021e38:	4b06      	ldr	r3, [pc, #24]	@ (8021e54 <prvSwitchTimerLists+0xc8>)
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	4a04      	ldr	r2, [pc, #16]	@ (8021e50 <prvSwitchTimerLists+0xc4>)
 8021e3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8021e40:	4a04      	ldr	r2, [pc, #16]	@ (8021e54 <prvSwitchTimerLists+0xc8>)
 8021e42:	697b      	ldr	r3, [r7, #20]
 8021e44:	6013      	str	r3, [r2, #0]
}
 8021e46:	bf00      	nop
 8021e48:	3718      	adds	r7, #24
 8021e4a:	46bd      	mov	sp, r7
 8021e4c:	bd80      	pop	{r7, pc}
 8021e4e:	bf00      	nop
 8021e50:	24018e74 	.word	0x24018e74
 8021e54:	24018e78 	.word	0x24018e78

08021e58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8021e58:	b580      	push	{r7, lr}
 8021e5a:	b082      	sub	sp, #8
 8021e5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8021e5e:	f7fd ff8b 	bl	801fd78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8021e62:	4b15      	ldr	r3, [pc, #84]	@ (8021eb8 <prvCheckForValidListAndQueue+0x60>)
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d120      	bne.n	8021eac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8021e6a:	4814      	ldr	r0, [pc, #80]	@ (8021ebc <prvCheckForValidListAndQueue+0x64>)
 8021e6c:	f7fd fd9c 	bl	801f9a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8021e70:	4813      	ldr	r0, [pc, #76]	@ (8021ec0 <prvCheckForValidListAndQueue+0x68>)
 8021e72:	f7fd fd99 	bl	801f9a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8021e76:	4b13      	ldr	r3, [pc, #76]	@ (8021ec4 <prvCheckForValidListAndQueue+0x6c>)
 8021e78:	4a10      	ldr	r2, [pc, #64]	@ (8021ebc <prvCheckForValidListAndQueue+0x64>)
 8021e7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8021e7c:	4b12      	ldr	r3, [pc, #72]	@ (8021ec8 <prvCheckForValidListAndQueue+0x70>)
 8021e7e:	4a10      	ldr	r2, [pc, #64]	@ (8021ec0 <prvCheckForValidListAndQueue+0x68>)
 8021e80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8021e82:	2300      	movs	r3, #0
 8021e84:	9300      	str	r3, [sp, #0]
 8021e86:	4b11      	ldr	r3, [pc, #68]	@ (8021ecc <prvCheckForValidListAndQueue+0x74>)
 8021e88:	4a11      	ldr	r2, [pc, #68]	@ (8021ed0 <prvCheckForValidListAndQueue+0x78>)
 8021e8a:	2110      	movs	r1, #16
 8021e8c:	200a      	movs	r0, #10
 8021e8e:	f7fe f8ff 	bl	8020090 <xQueueGenericCreateStatic>
 8021e92:	4603      	mov	r3, r0
 8021e94:	4a08      	ldr	r2, [pc, #32]	@ (8021eb8 <prvCheckForValidListAndQueue+0x60>)
 8021e96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8021e98:	4b07      	ldr	r3, [pc, #28]	@ (8021eb8 <prvCheckForValidListAndQueue+0x60>)
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	d005      	beq.n	8021eac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8021ea0:	4b05      	ldr	r3, [pc, #20]	@ (8021eb8 <prvCheckForValidListAndQueue+0x60>)
 8021ea2:	681b      	ldr	r3, [r3, #0]
 8021ea4:	490b      	ldr	r1, [pc, #44]	@ (8021ed4 <prvCheckForValidListAndQueue+0x7c>)
 8021ea6:	4618      	mov	r0, r3
 8021ea8:	f7fe fd24 	bl	80208f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021eac:	f7fd ff96 	bl	801fddc <vPortExitCritical>
}
 8021eb0:	bf00      	nop
 8021eb2:	46bd      	mov	sp, r7
 8021eb4:	bd80      	pop	{r7, pc}
 8021eb6:	bf00      	nop
 8021eb8:	24018e7c 	.word	0x24018e7c
 8021ebc:	24018e4c 	.word	0x24018e4c
 8021ec0:	24018e60 	.word	0x24018e60
 8021ec4:	24018e74 	.word	0x24018e74
 8021ec8:	24018e78 	.word	0x24018e78
 8021ecc:	24018f28 	.word	0x24018f28
 8021ed0:	24018e88 	.word	0x24018e88
 8021ed4:	080260b4 	.word	0x080260b4

08021ed8 <__assert_func>:
 8021ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021eda:	4614      	mov	r4, r2
 8021edc:	461a      	mov	r2, r3
 8021ede:	4b09      	ldr	r3, [pc, #36]	@ (8021f04 <__assert_func+0x2c>)
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	4605      	mov	r5, r0
 8021ee4:	68d8      	ldr	r0, [r3, #12]
 8021ee6:	b954      	cbnz	r4, 8021efe <__assert_func+0x26>
 8021ee8:	4b07      	ldr	r3, [pc, #28]	@ (8021f08 <__assert_func+0x30>)
 8021eea:	461c      	mov	r4, r3
 8021eec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021ef0:	9100      	str	r1, [sp, #0]
 8021ef2:	462b      	mov	r3, r5
 8021ef4:	4905      	ldr	r1, [pc, #20]	@ (8021f0c <__assert_func+0x34>)
 8021ef6:	f000 fa41 	bl	802237c <fiprintf>
 8021efa:	f000 fcca 	bl	8022892 <abort>
 8021efe:	4b04      	ldr	r3, [pc, #16]	@ (8021f10 <__assert_func+0x38>)
 8021f00:	e7f4      	b.n	8021eec <__assert_func+0x14>
 8021f02:	bf00      	nop
 8021f04:	240007b4 	.word	0x240007b4
 8021f08:	08032233 	.word	0x08032233
 8021f0c:	08032205 	.word	0x08032205
 8021f10:	080321f8 	.word	0x080321f8

08021f14 <atoi>:
 8021f14:	220a      	movs	r2, #10
 8021f16:	2100      	movs	r1, #0
 8021f18:	f000 b982 	b.w	8022220 <strtol>

08021f1c <calloc>:
 8021f1c:	4b02      	ldr	r3, [pc, #8]	@ (8021f28 <calloc+0xc>)
 8021f1e:	460a      	mov	r2, r1
 8021f20:	4601      	mov	r1, r0
 8021f22:	6818      	ldr	r0, [r3, #0]
 8021f24:	f000 b802 	b.w	8021f2c <_calloc_r>
 8021f28:	240007b4 	.word	0x240007b4

08021f2c <_calloc_r>:
 8021f2c:	b570      	push	{r4, r5, r6, lr}
 8021f2e:	fba1 5402 	umull	r5, r4, r1, r2
 8021f32:	b93c      	cbnz	r4, 8021f44 <_calloc_r+0x18>
 8021f34:	4629      	mov	r1, r5
 8021f36:	f000 f83f 	bl	8021fb8 <_malloc_r>
 8021f3a:	4606      	mov	r6, r0
 8021f3c:	b928      	cbnz	r0, 8021f4a <_calloc_r+0x1e>
 8021f3e:	2600      	movs	r6, #0
 8021f40:	4630      	mov	r0, r6
 8021f42:	bd70      	pop	{r4, r5, r6, pc}
 8021f44:	220c      	movs	r2, #12
 8021f46:	6002      	str	r2, [r0, #0]
 8021f48:	e7f9      	b.n	8021f3e <_calloc_r+0x12>
 8021f4a:	462a      	mov	r2, r5
 8021f4c:	4621      	mov	r1, r4
 8021f4e:	f000 faee 	bl	802252e <memset>
 8021f52:	e7f5      	b.n	8021f40 <_calloc_r+0x14>

08021f54 <malloc>:
 8021f54:	4b02      	ldr	r3, [pc, #8]	@ (8021f60 <malloc+0xc>)
 8021f56:	4601      	mov	r1, r0
 8021f58:	6818      	ldr	r0, [r3, #0]
 8021f5a:	f000 b82d 	b.w	8021fb8 <_malloc_r>
 8021f5e:	bf00      	nop
 8021f60:	240007b4 	.word	0x240007b4

08021f64 <free>:
 8021f64:	4b02      	ldr	r3, [pc, #8]	@ (8021f70 <free+0xc>)
 8021f66:	4601      	mov	r1, r0
 8021f68:	6818      	ldr	r0, [r3, #0]
 8021f6a:	f000 bc99 	b.w	80228a0 <_free_r>
 8021f6e:	bf00      	nop
 8021f70:	240007b4 	.word	0x240007b4

08021f74 <sbrk_aligned>:
 8021f74:	b570      	push	{r4, r5, r6, lr}
 8021f76:	4e0f      	ldr	r6, [pc, #60]	@ (8021fb4 <sbrk_aligned+0x40>)
 8021f78:	460c      	mov	r4, r1
 8021f7a:	6831      	ldr	r1, [r6, #0]
 8021f7c:	4605      	mov	r5, r0
 8021f7e:	b911      	cbnz	r1, 8021f86 <sbrk_aligned+0x12>
 8021f80:	f000 fc22 	bl	80227c8 <_sbrk_r>
 8021f84:	6030      	str	r0, [r6, #0]
 8021f86:	4621      	mov	r1, r4
 8021f88:	4628      	mov	r0, r5
 8021f8a:	f000 fc1d 	bl	80227c8 <_sbrk_r>
 8021f8e:	1c43      	adds	r3, r0, #1
 8021f90:	d103      	bne.n	8021f9a <sbrk_aligned+0x26>
 8021f92:	f04f 34ff 	mov.w	r4, #4294967295
 8021f96:	4620      	mov	r0, r4
 8021f98:	bd70      	pop	{r4, r5, r6, pc}
 8021f9a:	1cc4      	adds	r4, r0, #3
 8021f9c:	f024 0403 	bic.w	r4, r4, #3
 8021fa0:	42a0      	cmp	r0, r4
 8021fa2:	d0f8      	beq.n	8021f96 <sbrk_aligned+0x22>
 8021fa4:	1a21      	subs	r1, r4, r0
 8021fa6:	4628      	mov	r0, r5
 8021fa8:	f000 fc0e 	bl	80227c8 <_sbrk_r>
 8021fac:	3001      	adds	r0, #1
 8021fae:	d1f2      	bne.n	8021f96 <sbrk_aligned+0x22>
 8021fb0:	e7ef      	b.n	8021f92 <sbrk_aligned+0x1e>
 8021fb2:	bf00      	nop
 8021fb4:	24018f78 	.word	0x24018f78

08021fb8 <_malloc_r>:
 8021fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021fbc:	1ccd      	adds	r5, r1, #3
 8021fbe:	f025 0503 	bic.w	r5, r5, #3
 8021fc2:	3508      	adds	r5, #8
 8021fc4:	2d0c      	cmp	r5, #12
 8021fc6:	bf38      	it	cc
 8021fc8:	250c      	movcc	r5, #12
 8021fca:	2d00      	cmp	r5, #0
 8021fcc:	4606      	mov	r6, r0
 8021fce:	db01      	blt.n	8021fd4 <_malloc_r+0x1c>
 8021fd0:	42a9      	cmp	r1, r5
 8021fd2:	d904      	bls.n	8021fde <_malloc_r+0x26>
 8021fd4:	230c      	movs	r3, #12
 8021fd6:	6033      	str	r3, [r6, #0]
 8021fd8:	2000      	movs	r0, #0
 8021fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80220b4 <_malloc_r+0xfc>
 8021fe2:	f000 f869 	bl	80220b8 <__malloc_lock>
 8021fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8021fea:	461c      	mov	r4, r3
 8021fec:	bb44      	cbnz	r4, 8022040 <_malloc_r+0x88>
 8021fee:	4629      	mov	r1, r5
 8021ff0:	4630      	mov	r0, r6
 8021ff2:	f7ff ffbf 	bl	8021f74 <sbrk_aligned>
 8021ff6:	1c43      	adds	r3, r0, #1
 8021ff8:	4604      	mov	r4, r0
 8021ffa:	d158      	bne.n	80220ae <_malloc_r+0xf6>
 8021ffc:	f8d8 4000 	ldr.w	r4, [r8]
 8022000:	4627      	mov	r7, r4
 8022002:	2f00      	cmp	r7, #0
 8022004:	d143      	bne.n	802208e <_malloc_r+0xd6>
 8022006:	2c00      	cmp	r4, #0
 8022008:	d04b      	beq.n	80220a2 <_malloc_r+0xea>
 802200a:	6823      	ldr	r3, [r4, #0]
 802200c:	4639      	mov	r1, r7
 802200e:	4630      	mov	r0, r6
 8022010:	eb04 0903 	add.w	r9, r4, r3
 8022014:	f000 fbd8 	bl	80227c8 <_sbrk_r>
 8022018:	4581      	cmp	r9, r0
 802201a:	d142      	bne.n	80220a2 <_malloc_r+0xea>
 802201c:	6821      	ldr	r1, [r4, #0]
 802201e:	1a6d      	subs	r5, r5, r1
 8022020:	4629      	mov	r1, r5
 8022022:	4630      	mov	r0, r6
 8022024:	f7ff ffa6 	bl	8021f74 <sbrk_aligned>
 8022028:	3001      	adds	r0, #1
 802202a:	d03a      	beq.n	80220a2 <_malloc_r+0xea>
 802202c:	6823      	ldr	r3, [r4, #0]
 802202e:	442b      	add	r3, r5
 8022030:	6023      	str	r3, [r4, #0]
 8022032:	f8d8 3000 	ldr.w	r3, [r8]
 8022036:	685a      	ldr	r2, [r3, #4]
 8022038:	bb62      	cbnz	r2, 8022094 <_malloc_r+0xdc>
 802203a:	f8c8 7000 	str.w	r7, [r8]
 802203e:	e00f      	b.n	8022060 <_malloc_r+0xa8>
 8022040:	6822      	ldr	r2, [r4, #0]
 8022042:	1b52      	subs	r2, r2, r5
 8022044:	d420      	bmi.n	8022088 <_malloc_r+0xd0>
 8022046:	2a0b      	cmp	r2, #11
 8022048:	d917      	bls.n	802207a <_malloc_r+0xc2>
 802204a:	1961      	adds	r1, r4, r5
 802204c:	42a3      	cmp	r3, r4
 802204e:	6025      	str	r5, [r4, #0]
 8022050:	bf18      	it	ne
 8022052:	6059      	strne	r1, [r3, #4]
 8022054:	6863      	ldr	r3, [r4, #4]
 8022056:	bf08      	it	eq
 8022058:	f8c8 1000 	streq.w	r1, [r8]
 802205c:	5162      	str	r2, [r4, r5]
 802205e:	604b      	str	r3, [r1, #4]
 8022060:	4630      	mov	r0, r6
 8022062:	f000 f82f 	bl	80220c4 <__malloc_unlock>
 8022066:	f104 000b 	add.w	r0, r4, #11
 802206a:	1d23      	adds	r3, r4, #4
 802206c:	f020 0007 	bic.w	r0, r0, #7
 8022070:	1ac2      	subs	r2, r0, r3
 8022072:	bf1c      	itt	ne
 8022074:	1a1b      	subne	r3, r3, r0
 8022076:	50a3      	strne	r3, [r4, r2]
 8022078:	e7af      	b.n	8021fda <_malloc_r+0x22>
 802207a:	6862      	ldr	r2, [r4, #4]
 802207c:	42a3      	cmp	r3, r4
 802207e:	bf0c      	ite	eq
 8022080:	f8c8 2000 	streq.w	r2, [r8]
 8022084:	605a      	strne	r2, [r3, #4]
 8022086:	e7eb      	b.n	8022060 <_malloc_r+0xa8>
 8022088:	4623      	mov	r3, r4
 802208a:	6864      	ldr	r4, [r4, #4]
 802208c:	e7ae      	b.n	8021fec <_malloc_r+0x34>
 802208e:	463c      	mov	r4, r7
 8022090:	687f      	ldr	r7, [r7, #4]
 8022092:	e7b6      	b.n	8022002 <_malloc_r+0x4a>
 8022094:	461a      	mov	r2, r3
 8022096:	685b      	ldr	r3, [r3, #4]
 8022098:	42a3      	cmp	r3, r4
 802209a:	d1fb      	bne.n	8022094 <_malloc_r+0xdc>
 802209c:	2300      	movs	r3, #0
 802209e:	6053      	str	r3, [r2, #4]
 80220a0:	e7de      	b.n	8022060 <_malloc_r+0xa8>
 80220a2:	230c      	movs	r3, #12
 80220a4:	6033      	str	r3, [r6, #0]
 80220a6:	4630      	mov	r0, r6
 80220a8:	f000 f80c 	bl	80220c4 <__malloc_unlock>
 80220ac:	e794      	b.n	8021fd8 <_malloc_r+0x20>
 80220ae:	6005      	str	r5, [r0, #0]
 80220b0:	e7d6      	b.n	8022060 <_malloc_r+0xa8>
 80220b2:	bf00      	nop
 80220b4:	24018f7c 	.word	0x24018f7c

080220b8 <__malloc_lock>:
 80220b8:	4801      	ldr	r0, [pc, #4]	@ (80220c0 <__malloc_lock+0x8>)
 80220ba:	f000 bbd2 	b.w	8022862 <__retarget_lock_acquire_recursive>
 80220be:	bf00      	nop
 80220c0:	240190c0 	.word	0x240190c0

080220c4 <__malloc_unlock>:
 80220c4:	4801      	ldr	r0, [pc, #4]	@ (80220cc <__malloc_unlock+0x8>)
 80220c6:	f000 bbcd 	b.w	8022864 <__retarget_lock_release_recursive>
 80220ca:	bf00      	nop
 80220cc:	240190c0 	.word	0x240190c0

080220d0 <srand>:
 80220d0:	b538      	push	{r3, r4, r5, lr}
 80220d2:	4b10      	ldr	r3, [pc, #64]	@ (8022114 <srand+0x44>)
 80220d4:	681d      	ldr	r5, [r3, #0]
 80220d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80220d8:	4604      	mov	r4, r0
 80220da:	b9b3      	cbnz	r3, 802210a <srand+0x3a>
 80220dc:	2018      	movs	r0, #24
 80220de:	f7ff ff39 	bl	8021f54 <malloc>
 80220e2:	4602      	mov	r2, r0
 80220e4:	6328      	str	r0, [r5, #48]	@ 0x30
 80220e6:	b920      	cbnz	r0, 80220f2 <srand+0x22>
 80220e8:	4b0b      	ldr	r3, [pc, #44]	@ (8022118 <srand+0x48>)
 80220ea:	480c      	ldr	r0, [pc, #48]	@ (802211c <srand+0x4c>)
 80220ec:	2146      	movs	r1, #70	@ 0x46
 80220ee:	f7ff fef3 	bl	8021ed8 <__assert_func>
 80220f2:	490b      	ldr	r1, [pc, #44]	@ (8022120 <srand+0x50>)
 80220f4:	4b0b      	ldr	r3, [pc, #44]	@ (8022124 <srand+0x54>)
 80220f6:	e9c0 1300 	strd	r1, r3, [r0]
 80220fa:	4b0b      	ldr	r3, [pc, #44]	@ (8022128 <srand+0x58>)
 80220fc:	6083      	str	r3, [r0, #8]
 80220fe:	230b      	movs	r3, #11
 8022100:	8183      	strh	r3, [r0, #12]
 8022102:	2100      	movs	r1, #0
 8022104:	2001      	movs	r0, #1
 8022106:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802210a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802210c:	2200      	movs	r2, #0
 802210e:	611c      	str	r4, [r3, #16]
 8022110:	615a      	str	r2, [r3, #20]
 8022112:	bd38      	pop	{r3, r4, r5, pc}
 8022114:	240007b4 	.word	0x240007b4
 8022118:	08032234 	.word	0x08032234
 802211c:	0803224b 	.word	0x0803224b
 8022120:	abcd330e 	.word	0xabcd330e
 8022124:	e66d1234 	.word	0xe66d1234
 8022128:	0005deec 	.word	0x0005deec

0802212c <_strtol_l.constprop.0>:
 802212c:	2b24      	cmp	r3, #36	@ 0x24
 802212e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022132:	4686      	mov	lr, r0
 8022134:	4690      	mov	r8, r2
 8022136:	d801      	bhi.n	802213c <_strtol_l.constprop.0+0x10>
 8022138:	2b01      	cmp	r3, #1
 802213a:	d106      	bne.n	802214a <_strtol_l.constprop.0+0x1e>
 802213c:	f000 fb66 	bl	802280c <__errno>
 8022140:	2316      	movs	r3, #22
 8022142:	6003      	str	r3, [r0, #0]
 8022144:	2000      	movs	r0, #0
 8022146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802214a:	4834      	ldr	r0, [pc, #208]	@ (802221c <_strtol_l.constprop.0+0xf0>)
 802214c:	460d      	mov	r5, r1
 802214e:	462a      	mov	r2, r5
 8022150:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022154:	5d06      	ldrb	r6, [r0, r4]
 8022156:	f016 0608 	ands.w	r6, r6, #8
 802215a:	d1f8      	bne.n	802214e <_strtol_l.constprop.0+0x22>
 802215c:	2c2d      	cmp	r4, #45	@ 0x2d
 802215e:	d12d      	bne.n	80221bc <_strtol_l.constprop.0+0x90>
 8022160:	782c      	ldrb	r4, [r5, #0]
 8022162:	2601      	movs	r6, #1
 8022164:	1c95      	adds	r5, r2, #2
 8022166:	f033 0210 	bics.w	r2, r3, #16
 802216a:	d109      	bne.n	8022180 <_strtol_l.constprop.0+0x54>
 802216c:	2c30      	cmp	r4, #48	@ 0x30
 802216e:	d12a      	bne.n	80221c6 <_strtol_l.constprop.0+0x9a>
 8022170:	782a      	ldrb	r2, [r5, #0]
 8022172:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8022176:	2a58      	cmp	r2, #88	@ 0x58
 8022178:	d125      	bne.n	80221c6 <_strtol_l.constprop.0+0x9a>
 802217a:	786c      	ldrb	r4, [r5, #1]
 802217c:	2310      	movs	r3, #16
 802217e:	3502      	adds	r5, #2
 8022180:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8022184:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022188:	2200      	movs	r2, #0
 802218a:	fbbc f9f3 	udiv	r9, ip, r3
 802218e:	4610      	mov	r0, r2
 8022190:	fb03 ca19 	mls	sl, r3, r9, ip
 8022194:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8022198:	2f09      	cmp	r7, #9
 802219a:	d81b      	bhi.n	80221d4 <_strtol_l.constprop.0+0xa8>
 802219c:	463c      	mov	r4, r7
 802219e:	42a3      	cmp	r3, r4
 80221a0:	dd27      	ble.n	80221f2 <_strtol_l.constprop.0+0xc6>
 80221a2:	1c57      	adds	r7, r2, #1
 80221a4:	d007      	beq.n	80221b6 <_strtol_l.constprop.0+0x8a>
 80221a6:	4581      	cmp	r9, r0
 80221a8:	d320      	bcc.n	80221ec <_strtol_l.constprop.0+0xc0>
 80221aa:	d101      	bne.n	80221b0 <_strtol_l.constprop.0+0x84>
 80221ac:	45a2      	cmp	sl, r4
 80221ae:	db1d      	blt.n	80221ec <_strtol_l.constprop.0+0xc0>
 80221b0:	fb00 4003 	mla	r0, r0, r3, r4
 80221b4:	2201      	movs	r2, #1
 80221b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80221ba:	e7eb      	b.n	8022194 <_strtol_l.constprop.0+0x68>
 80221bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80221be:	bf04      	itt	eq
 80221c0:	782c      	ldrbeq	r4, [r5, #0]
 80221c2:	1c95      	addeq	r5, r2, #2
 80221c4:	e7cf      	b.n	8022166 <_strtol_l.constprop.0+0x3a>
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d1da      	bne.n	8022180 <_strtol_l.constprop.0+0x54>
 80221ca:	2c30      	cmp	r4, #48	@ 0x30
 80221cc:	bf0c      	ite	eq
 80221ce:	2308      	moveq	r3, #8
 80221d0:	230a      	movne	r3, #10
 80221d2:	e7d5      	b.n	8022180 <_strtol_l.constprop.0+0x54>
 80221d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80221d8:	2f19      	cmp	r7, #25
 80221da:	d801      	bhi.n	80221e0 <_strtol_l.constprop.0+0xb4>
 80221dc:	3c37      	subs	r4, #55	@ 0x37
 80221de:	e7de      	b.n	802219e <_strtol_l.constprop.0+0x72>
 80221e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80221e4:	2f19      	cmp	r7, #25
 80221e6:	d804      	bhi.n	80221f2 <_strtol_l.constprop.0+0xc6>
 80221e8:	3c57      	subs	r4, #87	@ 0x57
 80221ea:	e7d8      	b.n	802219e <_strtol_l.constprop.0+0x72>
 80221ec:	f04f 32ff 	mov.w	r2, #4294967295
 80221f0:	e7e1      	b.n	80221b6 <_strtol_l.constprop.0+0x8a>
 80221f2:	1c53      	adds	r3, r2, #1
 80221f4:	d108      	bne.n	8022208 <_strtol_l.constprop.0+0xdc>
 80221f6:	2322      	movs	r3, #34	@ 0x22
 80221f8:	f8ce 3000 	str.w	r3, [lr]
 80221fc:	4660      	mov	r0, ip
 80221fe:	f1b8 0f00 	cmp.w	r8, #0
 8022202:	d0a0      	beq.n	8022146 <_strtol_l.constprop.0+0x1a>
 8022204:	1e69      	subs	r1, r5, #1
 8022206:	e006      	b.n	8022216 <_strtol_l.constprop.0+0xea>
 8022208:	b106      	cbz	r6, 802220c <_strtol_l.constprop.0+0xe0>
 802220a:	4240      	negs	r0, r0
 802220c:	f1b8 0f00 	cmp.w	r8, #0
 8022210:	d099      	beq.n	8022146 <_strtol_l.constprop.0+0x1a>
 8022212:	2a00      	cmp	r2, #0
 8022214:	d1f6      	bne.n	8022204 <_strtol_l.constprop.0+0xd8>
 8022216:	f8c8 1000 	str.w	r1, [r8]
 802221a:	e794      	b.n	8022146 <_strtol_l.constprop.0+0x1a>
 802221c:	080322a4 	.word	0x080322a4

08022220 <strtol>:
 8022220:	4613      	mov	r3, r2
 8022222:	460a      	mov	r2, r1
 8022224:	4601      	mov	r1, r0
 8022226:	4802      	ldr	r0, [pc, #8]	@ (8022230 <strtol+0x10>)
 8022228:	6800      	ldr	r0, [r0, #0]
 802222a:	f7ff bf7f 	b.w	802212c <_strtol_l.constprop.0>
 802222e:	bf00      	nop
 8022230:	240007b4 	.word	0x240007b4

08022234 <std>:
 8022234:	2300      	movs	r3, #0
 8022236:	b510      	push	{r4, lr}
 8022238:	4604      	mov	r4, r0
 802223a:	e9c0 3300 	strd	r3, r3, [r0]
 802223e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022242:	6083      	str	r3, [r0, #8]
 8022244:	8181      	strh	r1, [r0, #12]
 8022246:	6643      	str	r3, [r0, #100]	@ 0x64
 8022248:	81c2      	strh	r2, [r0, #14]
 802224a:	6183      	str	r3, [r0, #24]
 802224c:	4619      	mov	r1, r3
 802224e:	2208      	movs	r2, #8
 8022250:	305c      	adds	r0, #92	@ 0x5c
 8022252:	f000 f96c 	bl	802252e <memset>
 8022256:	4b0d      	ldr	r3, [pc, #52]	@ (802228c <std+0x58>)
 8022258:	6263      	str	r3, [r4, #36]	@ 0x24
 802225a:	4b0d      	ldr	r3, [pc, #52]	@ (8022290 <std+0x5c>)
 802225c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802225e:	4b0d      	ldr	r3, [pc, #52]	@ (8022294 <std+0x60>)
 8022260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8022262:	4b0d      	ldr	r3, [pc, #52]	@ (8022298 <std+0x64>)
 8022264:	6323      	str	r3, [r4, #48]	@ 0x30
 8022266:	4b0d      	ldr	r3, [pc, #52]	@ (802229c <std+0x68>)
 8022268:	6224      	str	r4, [r4, #32]
 802226a:	429c      	cmp	r4, r3
 802226c:	d006      	beq.n	802227c <std+0x48>
 802226e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022272:	4294      	cmp	r4, r2
 8022274:	d002      	beq.n	802227c <std+0x48>
 8022276:	33d0      	adds	r3, #208	@ 0xd0
 8022278:	429c      	cmp	r4, r3
 802227a:	d105      	bne.n	8022288 <std+0x54>
 802227c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022284:	f000 baec 	b.w	8022860 <__retarget_lock_init_recursive>
 8022288:	bd10      	pop	{r4, pc}
 802228a:	bf00      	nop
 802228c:	08022455 	.word	0x08022455
 8022290:	08022477 	.word	0x08022477
 8022294:	080224af 	.word	0x080224af
 8022298:	080224d3 	.word	0x080224d3
 802229c:	24018f80 	.word	0x24018f80

080222a0 <stdio_exit_handler>:
 80222a0:	4a02      	ldr	r2, [pc, #8]	@ (80222ac <stdio_exit_handler+0xc>)
 80222a2:	4903      	ldr	r1, [pc, #12]	@ (80222b0 <stdio_exit_handler+0x10>)
 80222a4:	4803      	ldr	r0, [pc, #12]	@ (80222b4 <stdio_exit_handler+0x14>)
 80222a6:	f000 b87b 	b.w	80223a0 <_fwalk_sglue>
 80222aa:	bf00      	nop
 80222ac:	240007a8 	.word	0x240007a8
 80222b0:	0802328d 	.word	0x0802328d
 80222b4:	240007b8 	.word	0x240007b8

080222b8 <cleanup_stdio>:
 80222b8:	6841      	ldr	r1, [r0, #4]
 80222ba:	4b0c      	ldr	r3, [pc, #48]	@ (80222ec <cleanup_stdio+0x34>)
 80222bc:	4299      	cmp	r1, r3
 80222be:	b510      	push	{r4, lr}
 80222c0:	4604      	mov	r4, r0
 80222c2:	d001      	beq.n	80222c8 <cleanup_stdio+0x10>
 80222c4:	f000 ffe2 	bl	802328c <_fflush_r>
 80222c8:	68a1      	ldr	r1, [r4, #8]
 80222ca:	4b09      	ldr	r3, [pc, #36]	@ (80222f0 <cleanup_stdio+0x38>)
 80222cc:	4299      	cmp	r1, r3
 80222ce:	d002      	beq.n	80222d6 <cleanup_stdio+0x1e>
 80222d0:	4620      	mov	r0, r4
 80222d2:	f000 ffdb 	bl	802328c <_fflush_r>
 80222d6:	68e1      	ldr	r1, [r4, #12]
 80222d8:	4b06      	ldr	r3, [pc, #24]	@ (80222f4 <cleanup_stdio+0x3c>)
 80222da:	4299      	cmp	r1, r3
 80222dc:	d004      	beq.n	80222e8 <cleanup_stdio+0x30>
 80222de:	4620      	mov	r0, r4
 80222e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80222e4:	f000 bfd2 	b.w	802328c <_fflush_r>
 80222e8:	bd10      	pop	{r4, pc}
 80222ea:	bf00      	nop
 80222ec:	24018f80 	.word	0x24018f80
 80222f0:	24018fe8 	.word	0x24018fe8
 80222f4:	24019050 	.word	0x24019050

080222f8 <global_stdio_init.part.0>:
 80222f8:	b510      	push	{r4, lr}
 80222fa:	4b0b      	ldr	r3, [pc, #44]	@ (8022328 <global_stdio_init.part.0+0x30>)
 80222fc:	4c0b      	ldr	r4, [pc, #44]	@ (802232c <global_stdio_init.part.0+0x34>)
 80222fe:	4a0c      	ldr	r2, [pc, #48]	@ (8022330 <global_stdio_init.part.0+0x38>)
 8022300:	601a      	str	r2, [r3, #0]
 8022302:	4620      	mov	r0, r4
 8022304:	2200      	movs	r2, #0
 8022306:	2104      	movs	r1, #4
 8022308:	f7ff ff94 	bl	8022234 <std>
 802230c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022310:	2201      	movs	r2, #1
 8022312:	2109      	movs	r1, #9
 8022314:	f7ff ff8e 	bl	8022234 <std>
 8022318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802231c:	2202      	movs	r2, #2
 802231e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022322:	2112      	movs	r1, #18
 8022324:	f7ff bf86 	b.w	8022234 <std>
 8022328:	240190b8 	.word	0x240190b8
 802232c:	24018f80 	.word	0x24018f80
 8022330:	080222a1 	.word	0x080222a1

08022334 <__sfp_lock_acquire>:
 8022334:	4801      	ldr	r0, [pc, #4]	@ (802233c <__sfp_lock_acquire+0x8>)
 8022336:	f000 ba94 	b.w	8022862 <__retarget_lock_acquire_recursive>
 802233a:	bf00      	nop
 802233c:	240190c1 	.word	0x240190c1

08022340 <__sfp_lock_release>:
 8022340:	4801      	ldr	r0, [pc, #4]	@ (8022348 <__sfp_lock_release+0x8>)
 8022342:	f000 ba8f 	b.w	8022864 <__retarget_lock_release_recursive>
 8022346:	bf00      	nop
 8022348:	240190c1 	.word	0x240190c1

0802234c <__sinit>:
 802234c:	b510      	push	{r4, lr}
 802234e:	4604      	mov	r4, r0
 8022350:	f7ff fff0 	bl	8022334 <__sfp_lock_acquire>
 8022354:	6a23      	ldr	r3, [r4, #32]
 8022356:	b11b      	cbz	r3, 8022360 <__sinit+0x14>
 8022358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802235c:	f7ff bff0 	b.w	8022340 <__sfp_lock_release>
 8022360:	4b04      	ldr	r3, [pc, #16]	@ (8022374 <__sinit+0x28>)
 8022362:	6223      	str	r3, [r4, #32]
 8022364:	4b04      	ldr	r3, [pc, #16]	@ (8022378 <__sinit+0x2c>)
 8022366:	681b      	ldr	r3, [r3, #0]
 8022368:	2b00      	cmp	r3, #0
 802236a:	d1f5      	bne.n	8022358 <__sinit+0xc>
 802236c:	f7ff ffc4 	bl	80222f8 <global_stdio_init.part.0>
 8022370:	e7f2      	b.n	8022358 <__sinit+0xc>
 8022372:	bf00      	nop
 8022374:	080222b9 	.word	0x080222b9
 8022378:	240190b8 	.word	0x240190b8

0802237c <fiprintf>:
 802237c:	b40e      	push	{r1, r2, r3}
 802237e:	b503      	push	{r0, r1, lr}
 8022380:	4601      	mov	r1, r0
 8022382:	ab03      	add	r3, sp, #12
 8022384:	4805      	ldr	r0, [pc, #20]	@ (802239c <fiprintf+0x20>)
 8022386:	f853 2b04 	ldr.w	r2, [r3], #4
 802238a:	6800      	ldr	r0, [r0, #0]
 802238c:	9301      	str	r3, [sp, #4]
 802238e:	f000 fc53 	bl	8022c38 <_vfiprintf_r>
 8022392:	b002      	add	sp, #8
 8022394:	f85d eb04 	ldr.w	lr, [sp], #4
 8022398:	b003      	add	sp, #12
 802239a:	4770      	bx	lr
 802239c:	240007b4 	.word	0x240007b4

080223a0 <_fwalk_sglue>:
 80223a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80223a4:	4607      	mov	r7, r0
 80223a6:	4688      	mov	r8, r1
 80223a8:	4614      	mov	r4, r2
 80223aa:	2600      	movs	r6, #0
 80223ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80223b0:	f1b9 0901 	subs.w	r9, r9, #1
 80223b4:	d505      	bpl.n	80223c2 <_fwalk_sglue+0x22>
 80223b6:	6824      	ldr	r4, [r4, #0]
 80223b8:	2c00      	cmp	r4, #0
 80223ba:	d1f7      	bne.n	80223ac <_fwalk_sglue+0xc>
 80223bc:	4630      	mov	r0, r6
 80223be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80223c2:	89ab      	ldrh	r3, [r5, #12]
 80223c4:	2b01      	cmp	r3, #1
 80223c6:	d907      	bls.n	80223d8 <_fwalk_sglue+0x38>
 80223c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80223cc:	3301      	adds	r3, #1
 80223ce:	d003      	beq.n	80223d8 <_fwalk_sglue+0x38>
 80223d0:	4629      	mov	r1, r5
 80223d2:	4638      	mov	r0, r7
 80223d4:	47c0      	blx	r8
 80223d6:	4306      	orrs	r6, r0
 80223d8:	3568      	adds	r5, #104	@ 0x68
 80223da:	e7e9      	b.n	80223b0 <_fwalk_sglue+0x10>

080223dc <putchar>:
 80223dc:	4b02      	ldr	r3, [pc, #8]	@ (80223e8 <putchar+0xc>)
 80223de:	4601      	mov	r1, r0
 80223e0:	6818      	ldr	r0, [r3, #0]
 80223e2:	6882      	ldr	r2, [r0, #8]
 80223e4:	f000 bf7a 	b.w	80232dc <_putc_r>
 80223e8:	240007b4 	.word	0x240007b4

080223ec <sniprintf>:
 80223ec:	b40c      	push	{r2, r3}
 80223ee:	b530      	push	{r4, r5, lr}
 80223f0:	4b17      	ldr	r3, [pc, #92]	@ (8022450 <sniprintf+0x64>)
 80223f2:	1e0c      	subs	r4, r1, #0
 80223f4:	681d      	ldr	r5, [r3, #0]
 80223f6:	b09d      	sub	sp, #116	@ 0x74
 80223f8:	da08      	bge.n	802240c <sniprintf+0x20>
 80223fa:	238b      	movs	r3, #139	@ 0x8b
 80223fc:	602b      	str	r3, [r5, #0]
 80223fe:	f04f 30ff 	mov.w	r0, #4294967295
 8022402:	b01d      	add	sp, #116	@ 0x74
 8022404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022408:	b002      	add	sp, #8
 802240a:	4770      	bx	lr
 802240c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022410:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022414:	bf14      	ite	ne
 8022416:	f104 33ff 	addne.w	r3, r4, #4294967295
 802241a:	4623      	moveq	r3, r4
 802241c:	9304      	str	r3, [sp, #16]
 802241e:	9307      	str	r3, [sp, #28]
 8022420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022424:	9002      	str	r0, [sp, #8]
 8022426:	9006      	str	r0, [sp, #24]
 8022428:	f8ad 3016 	strh.w	r3, [sp, #22]
 802242c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802242e:	ab21      	add	r3, sp, #132	@ 0x84
 8022430:	a902      	add	r1, sp, #8
 8022432:	4628      	mov	r0, r5
 8022434:	9301      	str	r3, [sp, #4]
 8022436:	f000 fad9 	bl	80229ec <_svfiprintf_r>
 802243a:	1c43      	adds	r3, r0, #1
 802243c:	bfbc      	itt	lt
 802243e:	238b      	movlt	r3, #139	@ 0x8b
 8022440:	602b      	strlt	r3, [r5, #0]
 8022442:	2c00      	cmp	r4, #0
 8022444:	d0dd      	beq.n	8022402 <sniprintf+0x16>
 8022446:	9b02      	ldr	r3, [sp, #8]
 8022448:	2200      	movs	r2, #0
 802244a:	701a      	strb	r2, [r3, #0]
 802244c:	e7d9      	b.n	8022402 <sniprintf+0x16>
 802244e:	bf00      	nop
 8022450:	240007b4 	.word	0x240007b4

08022454 <__sread>:
 8022454:	b510      	push	{r4, lr}
 8022456:	460c      	mov	r4, r1
 8022458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802245c:	f000 f9a2 	bl	80227a4 <_read_r>
 8022460:	2800      	cmp	r0, #0
 8022462:	bfab      	itete	ge
 8022464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022466:	89a3      	ldrhlt	r3, [r4, #12]
 8022468:	181b      	addge	r3, r3, r0
 802246a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802246e:	bfac      	ite	ge
 8022470:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022472:	81a3      	strhlt	r3, [r4, #12]
 8022474:	bd10      	pop	{r4, pc}

08022476 <__swrite>:
 8022476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802247a:	461f      	mov	r7, r3
 802247c:	898b      	ldrh	r3, [r1, #12]
 802247e:	05db      	lsls	r3, r3, #23
 8022480:	4605      	mov	r5, r0
 8022482:	460c      	mov	r4, r1
 8022484:	4616      	mov	r6, r2
 8022486:	d505      	bpl.n	8022494 <__swrite+0x1e>
 8022488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802248c:	2302      	movs	r3, #2
 802248e:	2200      	movs	r2, #0
 8022490:	f000 f976 	bl	8022780 <_lseek_r>
 8022494:	89a3      	ldrh	r3, [r4, #12]
 8022496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802249a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802249e:	81a3      	strh	r3, [r4, #12]
 80224a0:	4632      	mov	r2, r6
 80224a2:	463b      	mov	r3, r7
 80224a4:	4628      	mov	r0, r5
 80224a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80224aa:	f000 b99d 	b.w	80227e8 <_write_r>

080224ae <__sseek>:
 80224ae:	b510      	push	{r4, lr}
 80224b0:	460c      	mov	r4, r1
 80224b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80224b6:	f000 f963 	bl	8022780 <_lseek_r>
 80224ba:	1c43      	adds	r3, r0, #1
 80224bc:	89a3      	ldrh	r3, [r4, #12]
 80224be:	bf15      	itete	ne
 80224c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80224c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80224c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80224ca:	81a3      	strheq	r3, [r4, #12]
 80224cc:	bf18      	it	ne
 80224ce:	81a3      	strhne	r3, [r4, #12]
 80224d0:	bd10      	pop	{r4, pc}

080224d2 <__sclose>:
 80224d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80224d6:	f000 b8ed 	b.w	80226b4 <_close_r>

080224da <memcmp>:
 80224da:	b510      	push	{r4, lr}
 80224dc:	3901      	subs	r1, #1
 80224de:	4402      	add	r2, r0
 80224e0:	4290      	cmp	r0, r2
 80224e2:	d101      	bne.n	80224e8 <memcmp+0xe>
 80224e4:	2000      	movs	r0, #0
 80224e6:	e005      	b.n	80224f4 <memcmp+0x1a>
 80224e8:	7803      	ldrb	r3, [r0, #0]
 80224ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80224ee:	42a3      	cmp	r3, r4
 80224f0:	d001      	beq.n	80224f6 <memcmp+0x1c>
 80224f2:	1b18      	subs	r0, r3, r4
 80224f4:	bd10      	pop	{r4, pc}
 80224f6:	3001      	adds	r0, #1
 80224f8:	e7f2      	b.n	80224e0 <memcmp+0x6>

080224fa <memmove>:
 80224fa:	4288      	cmp	r0, r1
 80224fc:	b510      	push	{r4, lr}
 80224fe:	eb01 0402 	add.w	r4, r1, r2
 8022502:	d902      	bls.n	802250a <memmove+0x10>
 8022504:	4284      	cmp	r4, r0
 8022506:	4623      	mov	r3, r4
 8022508:	d807      	bhi.n	802251a <memmove+0x20>
 802250a:	1e43      	subs	r3, r0, #1
 802250c:	42a1      	cmp	r1, r4
 802250e:	d008      	beq.n	8022522 <memmove+0x28>
 8022510:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022514:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022518:	e7f8      	b.n	802250c <memmove+0x12>
 802251a:	4402      	add	r2, r0
 802251c:	4601      	mov	r1, r0
 802251e:	428a      	cmp	r2, r1
 8022520:	d100      	bne.n	8022524 <memmove+0x2a>
 8022522:	bd10      	pop	{r4, pc}
 8022524:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022528:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802252c:	e7f7      	b.n	802251e <memmove+0x24>

0802252e <memset>:
 802252e:	4402      	add	r2, r0
 8022530:	4603      	mov	r3, r0
 8022532:	4293      	cmp	r3, r2
 8022534:	d100      	bne.n	8022538 <memset+0xa>
 8022536:	4770      	bx	lr
 8022538:	f803 1b01 	strb.w	r1, [r3], #1
 802253c:	e7f9      	b.n	8022532 <memset+0x4>

0802253e <strchr>:
 802253e:	b2c9      	uxtb	r1, r1
 8022540:	4603      	mov	r3, r0
 8022542:	4618      	mov	r0, r3
 8022544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022548:	b112      	cbz	r2, 8022550 <strchr+0x12>
 802254a:	428a      	cmp	r2, r1
 802254c:	d1f9      	bne.n	8022542 <strchr+0x4>
 802254e:	4770      	bx	lr
 8022550:	2900      	cmp	r1, #0
 8022552:	bf18      	it	ne
 8022554:	2000      	movne	r0, #0
 8022556:	4770      	bx	lr

08022558 <strncmp>:
 8022558:	b510      	push	{r4, lr}
 802255a:	b16a      	cbz	r2, 8022578 <strncmp+0x20>
 802255c:	3901      	subs	r1, #1
 802255e:	1884      	adds	r4, r0, r2
 8022560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022564:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022568:	429a      	cmp	r2, r3
 802256a:	d103      	bne.n	8022574 <strncmp+0x1c>
 802256c:	42a0      	cmp	r0, r4
 802256e:	d001      	beq.n	8022574 <strncmp+0x1c>
 8022570:	2a00      	cmp	r2, #0
 8022572:	d1f5      	bne.n	8022560 <strncmp+0x8>
 8022574:	1ad0      	subs	r0, r2, r3
 8022576:	bd10      	pop	{r4, pc}
 8022578:	4610      	mov	r0, r2
 802257a:	e7fc      	b.n	8022576 <strncmp+0x1e>

0802257c <strncpy>:
 802257c:	b510      	push	{r4, lr}
 802257e:	3901      	subs	r1, #1
 8022580:	4603      	mov	r3, r0
 8022582:	b132      	cbz	r2, 8022592 <strncpy+0x16>
 8022584:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022588:	f803 4b01 	strb.w	r4, [r3], #1
 802258c:	3a01      	subs	r2, #1
 802258e:	2c00      	cmp	r4, #0
 8022590:	d1f7      	bne.n	8022582 <strncpy+0x6>
 8022592:	441a      	add	r2, r3
 8022594:	2100      	movs	r1, #0
 8022596:	4293      	cmp	r3, r2
 8022598:	d100      	bne.n	802259c <strncpy+0x20>
 802259a:	bd10      	pop	{r4, pc}
 802259c:	f803 1b01 	strb.w	r1, [r3], #1
 80225a0:	e7f9      	b.n	8022596 <strncpy+0x1a>

080225a2 <strrchr>:
 80225a2:	b538      	push	{r3, r4, r5, lr}
 80225a4:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 80225a8:	4603      	mov	r3, r0
 80225aa:	d10e      	bne.n	80225ca <strrchr+0x28>
 80225ac:	4621      	mov	r1, r4
 80225ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225b2:	f7ff bfc4 	b.w	802253e <strchr>
 80225b6:	1c43      	adds	r3, r0, #1
 80225b8:	4605      	mov	r5, r0
 80225ba:	4621      	mov	r1, r4
 80225bc:	4618      	mov	r0, r3
 80225be:	f7ff ffbe 	bl	802253e <strchr>
 80225c2:	2800      	cmp	r0, #0
 80225c4:	d1f7      	bne.n	80225b6 <strrchr+0x14>
 80225c6:	4628      	mov	r0, r5
 80225c8:	bd38      	pop	{r3, r4, r5, pc}
 80225ca:	2500      	movs	r5, #0
 80225cc:	e7f5      	b.n	80225ba <strrchr+0x18>
	...

080225d0 <strtok>:
 80225d0:	4b16      	ldr	r3, [pc, #88]	@ (802262c <strtok+0x5c>)
 80225d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80225d6:	681f      	ldr	r7, [r3, #0]
 80225d8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80225da:	4605      	mov	r5, r0
 80225dc:	460e      	mov	r6, r1
 80225de:	b9ec      	cbnz	r4, 802261c <strtok+0x4c>
 80225e0:	2050      	movs	r0, #80	@ 0x50
 80225e2:	f7ff fcb7 	bl	8021f54 <malloc>
 80225e6:	4602      	mov	r2, r0
 80225e8:	6478      	str	r0, [r7, #68]	@ 0x44
 80225ea:	b920      	cbnz	r0, 80225f6 <strtok+0x26>
 80225ec:	4b10      	ldr	r3, [pc, #64]	@ (8022630 <strtok+0x60>)
 80225ee:	4811      	ldr	r0, [pc, #68]	@ (8022634 <strtok+0x64>)
 80225f0:	215b      	movs	r1, #91	@ 0x5b
 80225f2:	f7ff fc71 	bl	8021ed8 <__assert_func>
 80225f6:	e9c0 4400 	strd	r4, r4, [r0]
 80225fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80225fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8022602:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8022606:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 802260a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 802260e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8022612:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8022616:	6184      	str	r4, [r0, #24]
 8022618:	7704      	strb	r4, [r0, #28]
 802261a:	6244      	str	r4, [r0, #36]	@ 0x24
 802261c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802261e:	4631      	mov	r1, r6
 8022620:	4628      	mov	r0, r5
 8022622:	2301      	movs	r3, #1
 8022624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022628:	f000 b806 	b.w	8022638 <__strtok_r>
 802262c:	240007b4 	.word	0x240007b4
 8022630:	08032234 	.word	0x08032234
 8022634:	080323a4 	.word	0x080323a4

08022638 <__strtok_r>:
 8022638:	b5f0      	push	{r4, r5, r6, r7, lr}
 802263a:	4604      	mov	r4, r0
 802263c:	b908      	cbnz	r0, 8022642 <__strtok_r+0xa>
 802263e:	6814      	ldr	r4, [r2, #0]
 8022640:	b144      	cbz	r4, 8022654 <__strtok_r+0x1c>
 8022642:	4620      	mov	r0, r4
 8022644:	f814 5b01 	ldrb.w	r5, [r4], #1
 8022648:	460f      	mov	r7, r1
 802264a:	f817 6b01 	ldrb.w	r6, [r7], #1
 802264e:	b91e      	cbnz	r6, 8022658 <__strtok_r+0x20>
 8022650:	b965      	cbnz	r5, 802266c <__strtok_r+0x34>
 8022652:	6015      	str	r5, [r2, #0]
 8022654:	2000      	movs	r0, #0
 8022656:	e005      	b.n	8022664 <__strtok_r+0x2c>
 8022658:	42b5      	cmp	r5, r6
 802265a:	d1f6      	bne.n	802264a <__strtok_r+0x12>
 802265c:	2b00      	cmp	r3, #0
 802265e:	d1f0      	bne.n	8022642 <__strtok_r+0xa>
 8022660:	6014      	str	r4, [r2, #0]
 8022662:	7003      	strb	r3, [r0, #0]
 8022664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022666:	461c      	mov	r4, r3
 8022668:	e00c      	b.n	8022684 <__strtok_r+0x4c>
 802266a:	b915      	cbnz	r5, 8022672 <__strtok_r+0x3a>
 802266c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022670:	460e      	mov	r6, r1
 8022672:	f816 5b01 	ldrb.w	r5, [r6], #1
 8022676:	42ab      	cmp	r3, r5
 8022678:	d1f7      	bne.n	802266a <__strtok_r+0x32>
 802267a:	2b00      	cmp	r3, #0
 802267c:	d0f3      	beq.n	8022666 <__strtok_r+0x2e>
 802267e:	2300      	movs	r3, #0
 8022680:	f804 3c01 	strb.w	r3, [r4, #-1]
 8022684:	6014      	str	r4, [r2, #0]
 8022686:	e7ed      	b.n	8022664 <__strtok_r+0x2c>

08022688 <strstr>:
 8022688:	780a      	ldrb	r2, [r1, #0]
 802268a:	b570      	push	{r4, r5, r6, lr}
 802268c:	b96a      	cbnz	r2, 80226aa <strstr+0x22>
 802268e:	bd70      	pop	{r4, r5, r6, pc}
 8022690:	429a      	cmp	r2, r3
 8022692:	d109      	bne.n	80226a8 <strstr+0x20>
 8022694:	460c      	mov	r4, r1
 8022696:	4605      	mov	r5, r0
 8022698:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802269c:	2b00      	cmp	r3, #0
 802269e:	d0f6      	beq.n	802268e <strstr+0x6>
 80226a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80226a4:	429e      	cmp	r6, r3
 80226a6:	d0f7      	beq.n	8022698 <strstr+0x10>
 80226a8:	3001      	adds	r0, #1
 80226aa:	7803      	ldrb	r3, [r0, #0]
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	d1ef      	bne.n	8022690 <strstr+0x8>
 80226b0:	4618      	mov	r0, r3
 80226b2:	e7ec      	b.n	802268e <strstr+0x6>

080226b4 <_close_r>:
 80226b4:	b538      	push	{r3, r4, r5, lr}
 80226b6:	4d06      	ldr	r5, [pc, #24]	@ (80226d0 <_close_r+0x1c>)
 80226b8:	2300      	movs	r3, #0
 80226ba:	4604      	mov	r4, r0
 80226bc:	4608      	mov	r0, r1
 80226be:	602b      	str	r3, [r5, #0]
 80226c0:	f7f6 ff8a 	bl	80195d8 <_close>
 80226c4:	1c43      	adds	r3, r0, #1
 80226c6:	d102      	bne.n	80226ce <_close_r+0x1a>
 80226c8:	682b      	ldr	r3, [r5, #0]
 80226ca:	b103      	cbz	r3, 80226ce <_close_r+0x1a>
 80226cc:	6023      	str	r3, [r4, #0]
 80226ce:	bd38      	pop	{r3, r4, r5, pc}
 80226d0:	240190bc 	.word	0x240190bc

080226d4 <_reclaim_reent>:
 80226d4:	4b29      	ldr	r3, [pc, #164]	@ (802277c <_reclaim_reent+0xa8>)
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	4283      	cmp	r3, r0
 80226da:	b570      	push	{r4, r5, r6, lr}
 80226dc:	4604      	mov	r4, r0
 80226de:	d04b      	beq.n	8022778 <_reclaim_reent+0xa4>
 80226e0:	69c3      	ldr	r3, [r0, #28]
 80226e2:	b1ab      	cbz	r3, 8022710 <_reclaim_reent+0x3c>
 80226e4:	68db      	ldr	r3, [r3, #12]
 80226e6:	b16b      	cbz	r3, 8022704 <_reclaim_reent+0x30>
 80226e8:	2500      	movs	r5, #0
 80226ea:	69e3      	ldr	r3, [r4, #28]
 80226ec:	68db      	ldr	r3, [r3, #12]
 80226ee:	5959      	ldr	r1, [r3, r5]
 80226f0:	2900      	cmp	r1, #0
 80226f2:	d13b      	bne.n	802276c <_reclaim_reent+0x98>
 80226f4:	3504      	adds	r5, #4
 80226f6:	2d80      	cmp	r5, #128	@ 0x80
 80226f8:	d1f7      	bne.n	80226ea <_reclaim_reent+0x16>
 80226fa:	69e3      	ldr	r3, [r4, #28]
 80226fc:	4620      	mov	r0, r4
 80226fe:	68d9      	ldr	r1, [r3, #12]
 8022700:	f000 f8ce 	bl	80228a0 <_free_r>
 8022704:	69e3      	ldr	r3, [r4, #28]
 8022706:	6819      	ldr	r1, [r3, #0]
 8022708:	b111      	cbz	r1, 8022710 <_reclaim_reent+0x3c>
 802270a:	4620      	mov	r0, r4
 802270c:	f000 f8c8 	bl	80228a0 <_free_r>
 8022710:	6961      	ldr	r1, [r4, #20]
 8022712:	b111      	cbz	r1, 802271a <_reclaim_reent+0x46>
 8022714:	4620      	mov	r0, r4
 8022716:	f000 f8c3 	bl	80228a0 <_free_r>
 802271a:	69e1      	ldr	r1, [r4, #28]
 802271c:	b111      	cbz	r1, 8022724 <_reclaim_reent+0x50>
 802271e:	4620      	mov	r0, r4
 8022720:	f000 f8be 	bl	80228a0 <_free_r>
 8022724:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022726:	b111      	cbz	r1, 802272e <_reclaim_reent+0x5a>
 8022728:	4620      	mov	r0, r4
 802272a:	f000 f8b9 	bl	80228a0 <_free_r>
 802272e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022730:	b111      	cbz	r1, 8022738 <_reclaim_reent+0x64>
 8022732:	4620      	mov	r0, r4
 8022734:	f000 f8b4 	bl	80228a0 <_free_r>
 8022738:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802273a:	b111      	cbz	r1, 8022742 <_reclaim_reent+0x6e>
 802273c:	4620      	mov	r0, r4
 802273e:	f000 f8af 	bl	80228a0 <_free_r>
 8022742:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8022744:	b111      	cbz	r1, 802274c <_reclaim_reent+0x78>
 8022746:	4620      	mov	r0, r4
 8022748:	f000 f8aa 	bl	80228a0 <_free_r>
 802274c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802274e:	b111      	cbz	r1, 8022756 <_reclaim_reent+0x82>
 8022750:	4620      	mov	r0, r4
 8022752:	f000 f8a5 	bl	80228a0 <_free_r>
 8022756:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8022758:	b111      	cbz	r1, 8022760 <_reclaim_reent+0x8c>
 802275a:	4620      	mov	r0, r4
 802275c:	f000 f8a0 	bl	80228a0 <_free_r>
 8022760:	6a23      	ldr	r3, [r4, #32]
 8022762:	b14b      	cbz	r3, 8022778 <_reclaim_reent+0xa4>
 8022764:	4620      	mov	r0, r4
 8022766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802276a:	4718      	bx	r3
 802276c:	680e      	ldr	r6, [r1, #0]
 802276e:	4620      	mov	r0, r4
 8022770:	f000 f896 	bl	80228a0 <_free_r>
 8022774:	4631      	mov	r1, r6
 8022776:	e7bb      	b.n	80226f0 <_reclaim_reent+0x1c>
 8022778:	bd70      	pop	{r4, r5, r6, pc}
 802277a:	bf00      	nop
 802277c:	240007b4 	.word	0x240007b4

08022780 <_lseek_r>:
 8022780:	b538      	push	{r3, r4, r5, lr}
 8022782:	4d07      	ldr	r5, [pc, #28]	@ (80227a0 <_lseek_r+0x20>)
 8022784:	4604      	mov	r4, r0
 8022786:	4608      	mov	r0, r1
 8022788:	4611      	mov	r1, r2
 802278a:	2200      	movs	r2, #0
 802278c:	602a      	str	r2, [r5, #0]
 802278e:	461a      	mov	r2, r3
 8022790:	f7f6 ff49 	bl	8019626 <_lseek>
 8022794:	1c43      	adds	r3, r0, #1
 8022796:	d102      	bne.n	802279e <_lseek_r+0x1e>
 8022798:	682b      	ldr	r3, [r5, #0]
 802279a:	b103      	cbz	r3, 802279e <_lseek_r+0x1e>
 802279c:	6023      	str	r3, [r4, #0]
 802279e:	bd38      	pop	{r3, r4, r5, pc}
 80227a0:	240190bc 	.word	0x240190bc

080227a4 <_read_r>:
 80227a4:	b538      	push	{r3, r4, r5, lr}
 80227a6:	4d07      	ldr	r5, [pc, #28]	@ (80227c4 <_read_r+0x20>)
 80227a8:	4604      	mov	r4, r0
 80227aa:	4608      	mov	r0, r1
 80227ac:	4611      	mov	r1, r2
 80227ae:	2200      	movs	r2, #0
 80227b0:	602a      	str	r2, [r5, #0]
 80227b2:	461a      	mov	r2, r3
 80227b4:	f7f6 fef3 	bl	801959e <_read>
 80227b8:	1c43      	adds	r3, r0, #1
 80227ba:	d102      	bne.n	80227c2 <_read_r+0x1e>
 80227bc:	682b      	ldr	r3, [r5, #0]
 80227be:	b103      	cbz	r3, 80227c2 <_read_r+0x1e>
 80227c0:	6023      	str	r3, [r4, #0]
 80227c2:	bd38      	pop	{r3, r4, r5, pc}
 80227c4:	240190bc 	.word	0x240190bc

080227c8 <_sbrk_r>:
 80227c8:	b538      	push	{r3, r4, r5, lr}
 80227ca:	4d06      	ldr	r5, [pc, #24]	@ (80227e4 <_sbrk_r+0x1c>)
 80227cc:	2300      	movs	r3, #0
 80227ce:	4604      	mov	r4, r0
 80227d0:	4608      	mov	r0, r1
 80227d2:	602b      	str	r3, [r5, #0]
 80227d4:	f7f6 ff34 	bl	8019640 <_sbrk>
 80227d8:	1c43      	adds	r3, r0, #1
 80227da:	d102      	bne.n	80227e2 <_sbrk_r+0x1a>
 80227dc:	682b      	ldr	r3, [r5, #0]
 80227de:	b103      	cbz	r3, 80227e2 <_sbrk_r+0x1a>
 80227e0:	6023      	str	r3, [r4, #0]
 80227e2:	bd38      	pop	{r3, r4, r5, pc}
 80227e4:	240190bc 	.word	0x240190bc

080227e8 <_write_r>:
 80227e8:	b538      	push	{r3, r4, r5, lr}
 80227ea:	4d07      	ldr	r5, [pc, #28]	@ (8022808 <_write_r+0x20>)
 80227ec:	4604      	mov	r4, r0
 80227ee:	4608      	mov	r0, r1
 80227f0:	4611      	mov	r1, r2
 80227f2:	2200      	movs	r2, #0
 80227f4:	602a      	str	r2, [r5, #0]
 80227f6:	461a      	mov	r2, r3
 80227f8:	f7de fa68 	bl	8000ccc <_write>
 80227fc:	1c43      	adds	r3, r0, #1
 80227fe:	d102      	bne.n	8022806 <_write_r+0x1e>
 8022800:	682b      	ldr	r3, [r5, #0]
 8022802:	b103      	cbz	r3, 8022806 <_write_r+0x1e>
 8022804:	6023      	str	r3, [r4, #0]
 8022806:	bd38      	pop	{r3, r4, r5, pc}
 8022808:	240190bc 	.word	0x240190bc

0802280c <__errno>:
 802280c:	4b01      	ldr	r3, [pc, #4]	@ (8022814 <__errno+0x8>)
 802280e:	6818      	ldr	r0, [r3, #0]
 8022810:	4770      	bx	lr
 8022812:	bf00      	nop
 8022814:	240007b4 	.word	0x240007b4

08022818 <__libc_init_array>:
 8022818:	b570      	push	{r4, r5, r6, lr}
 802281a:	4d0d      	ldr	r5, [pc, #52]	@ (8022850 <__libc_init_array+0x38>)
 802281c:	4c0d      	ldr	r4, [pc, #52]	@ (8022854 <__libc_init_array+0x3c>)
 802281e:	1b64      	subs	r4, r4, r5
 8022820:	10a4      	asrs	r4, r4, #2
 8022822:	2600      	movs	r6, #0
 8022824:	42a6      	cmp	r6, r4
 8022826:	d109      	bne.n	802283c <__libc_init_array+0x24>
 8022828:	4d0b      	ldr	r5, [pc, #44]	@ (8022858 <__libc_init_array+0x40>)
 802282a:	4c0c      	ldr	r4, [pc, #48]	@ (802285c <__libc_init_array+0x44>)
 802282c:	f000 ff1c 	bl	8023668 <_init>
 8022830:	1b64      	subs	r4, r4, r5
 8022832:	10a4      	asrs	r4, r4, #2
 8022834:	2600      	movs	r6, #0
 8022836:	42a6      	cmp	r6, r4
 8022838:	d105      	bne.n	8022846 <__libc_init_array+0x2e>
 802283a:	bd70      	pop	{r4, r5, r6, pc}
 802283c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022840:	4798      	blx	r3
 8022842:	3601      	adds	r6, #1
 8022844:	e7ee      	b.n	8022824 <__libc_init_array+0xc>
 8022846:	f855 3b04 	ldr.w	r3, [r5], #4
 802284a:	4798      	blx	r3
 802284c:	3601      	adds	r6, #1
 802284e:	e7f2      	b.n	8022836 <__libc_init_array+0x1e>
 8022850:	0803243c 	.word	0x0803243c
 8022854:	0803243c 	.word	0x0803243c
 8022858:	0803243c 	.word	0x0803243c
 802285c:	08032440 	.word	0x08032440

08022860 <__retarget_lock_init_recursive>:
 8022860:	4770      	bx	lr

08022862 <__retarget_lock_acquire_recursive>:
 8022862:	4770      	bx	lr

08022864 <__retarget_lock_release_recursive>:
 8022864:	4770      	bx	lr

08022866 <strcpy>:
 8022866:	4603      	mov	r3, r0
 8022868:	f811 2b01 	ldrb.w	r2, [r1], #1
 802286c:	f803 2b01 	strb.w	r2, [r3], #1
 8022870:	2a00      	cmp	r2, #0
 8022872:	d1f9      	bne.n	8022868 <strcpy+0x2>
 8022874:	4770      	bx	lr

08022876 <memcpy>:
 8022876:	440a      	add	r2, r1
 8022878:	4291      	cmp	r1, r2
 802287a:	f100 33ff 	add.w	r3, r0, #4294967295
 802287e:	d100      	bne.n	8022882 <memcpy+0xc>
 8022880:	4770      	bx	lr
 8022882:	b510      	push	{r4, lr}
 8022884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022888:	f803 4f01 	strb.w	r4, [r3, #1]!
 802288c:	4291      	cmp	r1, r2
 802288e:	d1f9      	bne.n	8022884 <memcpy+0xe>
 8022890:	bd10      	pop	{r4, pc}

08022892 <abort>:
 8022892:	b508      	push	{r3, lr}
 8022894:	2006      	movs	r0, #6
 8022896:	f000 fe11 	bl	80234bc <raise>
 802289a:	2001      	movs	r0, #1
 802289c:	f7f6 fe74 	bl	8019588 <_exit>

080228a0 <_free_r>:
 80228a0:	b538      	push	{r3, r4, r5, lr}
 80228a2:	4605      	mov	r5, r0
 80228a4:	2900      	cmp	r1, #0
 80228a6:	d041      	beq.n	802292c <_free_r+0x8c>
 80228a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80228ac:	1f0c      	subs	r4, r1, #4
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	bfb8      	it	lt
 80228b2:	18e4      	addlt	r4, r4, r3
 80228b4:	f7ff fc00 	bl	80220b8 <__malloc_lock>
 80228b8:	4a1d      	ldr	r2, [pc, #116]	@ (8022930 <_free_r+0x90>)
 80228ba:	6813      	ldr	r3, [r2, #0]
 80228bc:	b933      	cbnz	r3, 80228cc <_free_r+0x2c>
 80228be:	6063      	str	r3, [r4, #4]
 80228c0:	6014      	str	r4, [r2, #0]
 80228c2:	4628      	mov	r0, r5
 80228c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80228c8:	f7ff bbfc 	b.w	80220c4 <__malloc_unlock>
 80228cc:	42a3      	cmp	r3, r4
 80228ce:	d908      	bls.n	80228e2 <_free_r+0x42>
 80228d0:	6820      	ldr	r0, [r4, #0]
 80228d2:	1821      	adds	r1, r4, r0
 80228d4:	428b      	cmp	r3, r1
 80228d6:	bf01      	itttt	eq
 80228d8:	6819      	ldreq	r1, [r3, #0]
 80228da:	685b      	ldreq	r3, [r3, #4]
 80228dc:	1809      	addeq	r1, r1, r0
 80228de:	6021      	streq	r1, [r4, #0]
 80228e0:	e7ed      	b.n	80228be <_free_r+0x1e>
 80228e2:	461a      	mov	r2, r3
 80228e4:	685b      	ldr	r3, [r3, #4]
 80228e6:	b10b      	cbz	r3, 80228ec <_free_r+0x4c>
 80228e8:	42a3      	cmp	r3, r4
 80228ea:	d9fa      	bls.n	80228e2 <_free_r+0x42>
 80228ec:	6811      	ldr	r1, [r2, #0]
 80228ee:	1850      	adds	r0, r2, r1
 80228f0:	42a0      	cmp	r0, r4
 80228f2:	d10b      	bne.n	802290c <_free_r+0x6c>
 80228f4:	6820      	ldr	r0, [r4, #0]
 80228f6:	4401      	add	r1, r0
 80228f8:	1850      	adds	r0, r2, r1
 80228fa:	4283      	cmp	r3, r0
 80228fc:	6011      	str	r1, [r2, #0]
 80228fe:	d1e0      	bne.n	80228c2 <_free_r+0x22>
 8022900:	6818      	ldr	r0, [r3, #0]
 8022902:	685b      	ldr	r3, [r3, #4]
 8022904:	6053      	str	r3, [r2, #4]
 8022906:	4408      	add	r0, r1
 8022908:	6010      	str	r0, [r2, #0]
 802290a:	e7da      	b.n	80228c2 <_free_r+0x22>
 802290c:	d902      	bls.n	8022914 <_free_r+0x74>
 802290e:	230c      	movs	r3, #12
 8022910:	602b      	str	r3, [r5, #0]
 8022912:	e7d6      	b.n	80228c2 <_free_r+0x22>
 8022914:	6820      	ldr	r0, [r4, #0]
 8022916:	1821      	adds	r1, r4, r0
 8022918:	428b      	cmp	r3, r1
 802291a:	bf04      	itt	eq
 802291c:	6819      	ldreq	r1, [r3, #0]
 802291e:	685b      	ldreq	r3, [r3, #4]
 8022920:	6063      	str	r3, [r4, #4]
 8022922:	bf04      	itt	eq
 8022924:	1809      	addeq	r1, r1, r0
 8022926:	6021      	streq	r1, [r4, #0]
 8022928:	6054      	str	r4, [r2, #4]
 802292a:	e7ca      	b.n	80228c2 <_free_r+0x22>
 802292c:	bd38      	pop	{r3, r4, r5, pc}
 802292e:	bf00      	nop
 8022930:	24018f7c 	.word	0x24018f7c

08022934 <__ssputs_r>:
 8022934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022938:	688e      	ldr	r6, [r1, #8]
 802293a:	461f      	mov	r7, r3
 802293c:	42be      	cmp	r6, r7
 802293e:	680b      	ldr	r3, [r1, #0]
 8022940:	4682      	mov	sl, r0
 8022942:	460c      	mov	r4, r1
 8022944:	4690      	mov	r8, r2
 8022946:	d82d      	bhi.n	80229a4 <__ssputs_r+0x70>
 8022948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802294c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022950:	d026      	beq.n	80229a0 <__ssputs_r+0x6c>
 8022952:	6965      	ldr	r5, [r4, #20]
 8022954:	6909      	ldr	r1, [r1, #16]
 8022956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802295a:	eba3 0901 	sub.w	r9, r3, r1
 802295e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022962:	1c7b      	adds	r3, r7, #1
 8022964:	444b      	add	r3, r9
 8022966:	106d      	asrs	r5, r5, #1
 8022968:	429d      	cmp	r5, r3
 802296a:	bf38      	it	cc
 802296c:	461d      	movcc	r5, r3
 802296e:	0553      	lsls	r3, r2, #21
 8022970:	d527      	bpl.n	80229c2 <__ssputs_r+0x8e>
 8022972:	4629      	mov	r1, r5
 8022974:	f7ff fb20 	bl	8021fb8 <_malloc_r>
 8022978:	4606      	mov	r6, r0
 802297a:	b360      	cbz	r0, 80229d6 <__ssputs_r+0xa2>
 802297c:	6921      	ldr	r1, [r4, #16]
 802297e:	464a      	mov	r2, r9
 8022980:	f7ff ff79 	bl	8022876 <memcpy>
 8022984:	89a3      	ldrh	r3, [r4, #12]
 8022986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802298a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802298e:	81a3      	strh	r3, [r4, #12]
 8022990:	6126      	str	r6, [r4, #16]
 8022992:	6165      	str	r5, [r4, #20]
 8022994:	444e      	add	r6, r9
 8022996:	eba5 0509 	sub.w	r5, r5, r9
 802299a:	6026      	str	r6, [r4, #0]
 802299c:	60a5      	str	r5, [r4, #8]
 802299e:	463e      	mov	r6, r7
 80229a0:	42be      	cmp	r6, r7
 80229a2:	d900      	bls.n	80229a6 <__ssputs_r+0x72>
 80229a4:	463e      	mov	r6, r7
 80229a6:	6820      	ldr	r0, [r4, #0]
 80229a8:	4632      	mov	r2, r6
 80229aa:	4641      	mov	r1, r8
 80229ac:	f7ff fda5 	bl	80224fa <memmove>
 80229b0:	68a3      	ldr	r3, [r4, #8]
 80229b2:	1b9b      	subs	r3, r3, r6
 80229b4:	60a3      	str	r3, [r4, #8]
 80229b6:	6823      	ldr	r3, [r4, #0]
 80229b8:	4433      	add	r3, r6
 80229ba:	6023      	str	r3, [r4, #0]
 80229bc:	2000      	movs	r0, #0
 80229be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229c2:	462a      	mov	r2, r5
 80229c4:	f000 fd96 	bl	80234f4 <_realloc_r>
 80229c8:	4606      	mov	r6, r0
 80229ca:	2800      	cmp	r0, #0
 80229cc:	d1e0      	bne.n	8022990 <__ssputs_r+0x5c>
 80229ce:	6921      	ldr	r1, [r4, #16]
 80229d0:	4650      	mov	r0, sl
 80229d2:	f7ff ff65 	bl	80228a0 <_free_r>
 80229d6:	230c      	movs	r3, #12
 80229d8:	f8ca 3000 	str.w	r3, [sl]
 80229dc:	89a3      	ldrh	r3, [r4, #12]
 80229de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80229e2:	81a3      	strh	r3, [r4, #12]
 80229e4:	f04f 30ff 	mov.w	r0, #4294967295
 80229e8:	e7e9      	b.n	80229be <__ssputs_r+0x8a>
	...

080229ec <_svfiprintf_r>:
 80229ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229f0:	4698      	mov	r8, r3
 80229f2:	898b      	ldrh	r3, [r1, #12]
 80229f4:	061b      	lsls	r3, r3, #24
 80229f6:	b09d      	sub	sp, #116	@ 0x74
 80229f8:	4607      	mov	r7, r0
 80229fa:	460d      	mov	r5, r1
 80229fc:	4614      	mov	r4, r2
 80229fe:	d510      	bpl.n	8022a22 <_svfiprintf_r+0x36>
 8022a00:	690b      	ldr	r3, [r1, #16]
 8022a02:	b973      	cbnz	r3, 8022a22 <_svfiprintf_r+0x36>
 8022a04:	2140      	movs	r1, #64	@ 0x40
 8022a06:	f7ff fad7 	bl	8021fb8 <_malloc_r>
 8022a0a:	6028      	str	r0, [r5, #0]
 8022a0c:	6128      	str	r0, [r5, #16]
 8022a0e:	b930      	cbnz	r0, 8022a1e <_svfiprintf_r+0x32>
 8022a10:	230c      	movs	r3, #12
 8022a12:	603b      	str	r3, [r7, #0]
 8022a14:	f04f 30ff 	mov.w	r0, #4294967295
 8022a18:	b01d      	add	sp, #116	@ 0x74
 8022a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a1e:	2340      	movs	r3, #64	@ 0x40
 8022a20:	616b      	str	r3, [r5, #20]
 8022a22:	2300      	movs	r3, #0
 8022a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a26:	2320      	movs	r3, #32
 8022a28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022a30:	2330      	movs	r3, #48	@ 0x30
 8022a32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8022bd0 <_svfiprintf_r+0x1e4>
 8022a36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022a3a:	f04f 0901 	mov.w	r9, #1
 8022a3e:	4623      	mov	r3, r4
 8022a40:	469a      	mov	sl, r3
 8022a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022a46:	b10a      	cbz	r2, 8022a4c <_svfiprintf_r+0x60>
 8022a48:	2a25      	cmp	r2, #37	@ 0x25
 8022a4a:	d1f9      	bne.n	8022a40 <_svfiprintf_r+0x54>
 8022a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8022a50:	d00b      	beq.n	8022a6a <_svfiprintf_r+0x7e>
 8022a52:	465b      	mov	r3, fp
 8022a54:	4622      	mov	r2, r4
 8022a56:	4629      	mov	r1, r5
 8022a58:	4638      	mov	r0, r7
 8022a5a:	f7ff ff6b 	bl	8022934 <__ssputs_r>
 8022a5e:	3001      	adds	r0, #1
 8022a60:	f000 80a7 	beq.w	8022bb2 <_svfiprintf_r+0x1c6>
 8022a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022a66:	445a      	add	r2, fp
 8022a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8022a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	f000 809f 	beq.w	8022bb2 <_svfiprintf_r+0x1c6>
 8022a74:	2300      	movs	r3, #0
 8022a76:	f04f 32ff 	mov.w	r2, #4294967295
 8022a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022a7e:	f10a 0a01 	add.w	sl, sl, #1
 8022a82:	9304      	str	r3, [sp, #16]
 8022a84:	9307      	str	r3, [sp, #28]
 8022a86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022a8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8022a8c:	4654      	mov	r4, sl
 8022a8e:	2205      	movs	r2, #5
 8022a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a94:	484e      	ldr	r0, [pc, #312]	@ (8022bd0 <_svfiprintf_r+0x1e4>)
 8022a96:	f7dd fc33 	bl	8000300 <memchr>
 8022a9a:	9a04      	ldr	r2, [sp, #16]
 8022a9c:	b9d8      	cbnz	r0, 8022ad6 <_svfiprintf_r+0xea>
 8022a9e:	06d0      	lsls	r0, r2, #27
 8022aa0:	bf44      	itt	mi
 8022aa2:	2320      	movmi	r3, #32
 8022aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022aa8:	0711      	lsls	r1, r2, #28
 8022aaa:	bf44      	itt	mi
 8022aac:	232b      	movmi	r3, #43	@ 0x2b
 8022aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8022ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8022ab8:	d015      	beq.n	8022ae6 <_svfiprintf_r+0xfa>
 8022aba:	9a07      	ldr	r2, [sp, #28]
 8022abc:	4654      	mov	r4, sl
 8022abe:	2000      	movs	r0, #0
 8022ac0:	f04f 0c0a 	mov.w	ip, #10
 8022ac4:	4621      	mov	r1, r4
 8022ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022aca:	3b30      	subs	r3, #48	@ 0x30
 8022acc:	2b09      	cmp	r3, #9
 8022ace:	d94b      	bls.n	8022b68 <_svfiprintf_r+0x17c>
 8022ad0:	b1b0      	cbz	r0, 8022b00 <_svfiprintf_r+0x114>
 8022ad2:	9207      	str	r2, [sp, #28]
 8022ad4:	e014      	b.n	8022b00 <_svfiprintf_r+0x114>
 8022ad6:	eba0 0308 	sub.w	r3, r0, r8
 8022ada:	fa09 f303 	lsl.w	r3, r9, r3
 8022ade:	4313      	orrs	r3, r2
 8022ae0:	9304      	str	r3, [sp, #16]
 8022ae2:	46a2      	mov	sl, r4
 8022ae4:	e7d2      	b.n	8022a8c <_svfiprintf_r+0xa0>
 8022ae6:	9b03      	ldr	r3, [sp, #12]
 8022ae8:	1d19      	adds	r1, r3, #4
 8022aea:	681b      	ldr	r3, [r3, #0]
 8022aec:	9103      	str	r1, [sp, #12]
 8022aee:	2b00      	cmp	r3, #0
 8022af0:	bfbb      	ittet	lt
 8022af2:	425b      	neglt	r3, r3
 8022af4:	f042 0202 	orrlt.w	r2, r2, #2
 8022af8:	9307      	strge	r3, [sp, #28]
 8022afa:	9307      	strlt	r3, [sp, #28]
 8022afc:	bfb8      	it	lt
 8022afe:	9204      	strlt	r2, [sp, #16]
 8022b00:	7823      	ldrb	r3, [r4, #0]
 8022b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8022b04:	d10a      	bne.n	8022b1c <_svfiprintf_r+0x130>
 8022b06:	7863      	ldrb	r3, [r4, #1]
 8022b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8022b0a:	d132      	bne.n	8022b72 <_svfiprintf_r+0x186>
 8022b0c:	9b03      	ldr	r3, [sp, #12]
 8022b0e:	1d1a      	adds	r2, r3, #4
 8022b10:	681b      	ldr	r3, [r3, #0]
 8022b12:	9203      	str	r2, [sp, #12]
 8022b14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022b18:	3402      	adds	r4, #2
 8022b1a:	9305      	str	r3, [sp, #20]
 8022b1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8022be0 <_svfiprintf_r+0x1f4>
 8022b20:	7821      	ldrb	r1, [r4, #0]
 8022b22:	2203      	movs	r2, #3
 8022b24:	4650      	mov	r0, sl
 8022b26:	f7dd fbeb 	bl	8000300 <memchr>
 8022b2a:	b138      	cbz	r0, 8022b3c <_svfiprintf_r+0x150>
 8022b2c:	9b04      	ldr	r3, [sp, #16]
 8022b2e:	eba0 000a 	sub.w	r0, r0, sl
 8022b32:	2240      	movs	r2, #64	@ 0x40
 8022b34:	4082      	lsls	r2, r0
 8022b36:	4313      	orrs	r3, r2
 8022b38:	3401      	adds	r4, #1
 8022b3a:	9304      	str	r3, [sp, #16]
 8022b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b40:	4824      	ldr	r0, [pc, #144]	@ (8022bd4 <_svfiprintf_r+0x1e8>)
 8022b42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022b46:	2206      	movs	r2, #6
 8022b48:	f7dd fbda 	bl	8000300 <memchr>
 8022b4c:	2800      	cmp	r0, #0
 8022b4e:	d036      	beq.n	8022bbe <_svfiprintf_r+0x1d2>
 8022b50:	4b21      	ldr	r3, [pc, #132]	@ (8022bd8 <_svfiprintf_r+0x1ec>)
 8022b52:	bb1b      	cbnz	r3, 8022b9c <_svfiprintf_r+0x1b0>
 8022b54:	9b03      	ldr	r3, [sp, #12]
 8022b56:	3307      	adds	r3, #7
 8022b58:	f023 0307 	bic.w	r3, r3, #7
 8022b5c:	3308      	adds	r3, #8
 8022b5e:	9303      	str	r3, [sp, #12]
 8022b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b62:	4433      	add	r3, r6
 8022b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8022b66:	e76a      	b.n	8022a3e <_svfiprintf_r+0x52>
 8022b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8022b6c:	460c      	mov	r4, r1
 8022b6e:	2001      	movs	r0, #1
 8022b70:	e7a8      	b.n	8022ac4 <_svfiprintf_r+0xd8>
 8022b72:	2300      	movs	r3, #0
 8022b74:	3401      	adds	r4, #1
 8022b76:	9305      	str	r3, [sp, #20]
 8022b78:	4619      	mov	r1, r3
 8022b7a:	f04f 0c0a 	mov.w	ip, #10
 8022b7e:	4620      	mov	r0, r4
 8022b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022b84:	3a30      	subs	r2, #48	@ 0x30
 8022b86:	2a09      	cmp	r2, #9
 8022b88:	d903      	bls.n	8022b92 <_svfiprintf_r+0x1a6>
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d0c6      	beq.n	8022b1c <_svfiprintf_r+0x130>
 8022b8e:	9105      	str	r1, [sp, #20]
 8022b90:	e7c4      	b.n	8022b1c <_svfiprintf_r+0x130>
 8022b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8022b96:	4604      	mov	r4, r0
 8022b98:	2301      	movs	r3, #1
 8022b9a:	e7f0      	b.n	8022b7e <_svfiprintf_r+0x192>
 8022b9c:	ab03      	add	r3, sp, #12
 8022b9e:	9300      	str	r3, [sp, #0]
 8022ba0:	462a      	mov	r2, r5
 8022ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8022bdc <_svfiprintf_r+0x1f0>)
 8022ba4:	a904      	add	r1, sp, #16
 8022ba6:	4638      	mov	r0, r7
 8022ba8:	f3af 8000 	nop.w
 8022bac:	1c42      	adds	r2, r0, #1
 8022bae:	4606      	mov	r6, r0
 8022bb0:	d1d6      	bne.n	8022b60 <_svfiprintf_r+0x174>
 8022bb2:	89ab      	ldrh	r3, [r5, #12]
 8022bb4:	065b      	lsls	r3, r3, #25
 8022bb6:	f53f af2d 	bmi.w	8022a14 <_svfiprintf_r+0x28>
 8022bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022bbc:	e72c      	b.n	8022a18 <_svfiprintf_r+0x2c>
 8022bbe:	ab03      	add	r3, sp, #12
 8022bc0:	9300      	str	r3, [sp, #0]
 8022bc2:	462a      	mov	r2, r5
 8022bc4:	4b05      	ldr	r3, [pc, #20]	@ (8022bdc <_svfiprintf_r+0x1f0>)
 8022bc6:	a904      	add	r1, sp, #16
 8022bc8:	4638      	mov	r0, r7
 8022bca:	f000 f9bb 	bl	8022f44 <_printf_i>
 8022bce:	e7ed      	b.n	8022bac <_svfiprintf_r+0x1c0>
 8022bd0:	080323fe 	.word	0x080323fe
 8022bd4:	08032408 	.word	0x08032408
 8022bd8:	00000000 	.word	0x00000000
 8022bdc:	08022935 	.word	0x08022935
 8022be0:	08032404 	.word	0x08032404

08022be4 <__sfputc_r>:
 8022be4:	6893      	ldr	r3, [r2, #8]
 8022be6:	3b01      	subs	r3, #1
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	b410      	push	{r4}
 8022bec:	6093      	str	r3, [r2, #8]
 8022bee:	da08      	bge.n	8022c02 <__sfputc_r+0x1e>
 8022bf0:	6994      	ldr	r4, [r2, #24]
 8022bf2:	42a3      	cmp	r3, r4
 8022bf4:	db01      	blt.n	8022bfa <__sfputc_r+0x16>
 8022bf6:	290a      	cmp	r1, #10
 8022bf8:	d103      	bne.n	8022c02 <__sfputc_r+0x1e>
 8022bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022bfe:	f000 bba1 	b.w	8023344 <__swbuf_r>
 8022c02:	6813      	ldr	r3, [r2, #0]
 8022c04:	1c58      	adds	r0, r3, #1
 8022c06:	6010      	str	r0, [r2, #0]
 8022c08:	7019      	strb	r1, [r3, #0]
 8022c0a:	4608      	mov	r0, r1
 8022c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c10:	4770      	bx	lr

08022c12 <__sfputs_r>:
 8022c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c14:	4606      	mov	r6, r0
 8022c16:	460f      	mov	r7, r1
 8022c18:	4614      	mov	r4, r2
 8022c1a:	18d5      	adds	r5, r2, r3
 8022c1c:	42ac      	cmp	r4, r5
 8022c1e:	d101      	bne.n	8022c24 <__sfputs_r+0x12>
 8022c20:	2000      	movs	r0, #0
 8022c22:	e007      	b.n	8022c34 <__sfputs_r+0x22>
 8022c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c28:	463a      	mov	r2, r7
 8022c2a:	4630      	mov	r0, r6
 8022c2c:	f7ff ffda 	bl	8022be4 <__sfputc_r>
 8022c30:	1c43      	adds	r3, r0, #1
 8022c32:	d1f3      	bne.n	8022c1c <__sfputs_r+0xa>
 8022c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022c38 <_vfiprintf_r>:
 8022c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c3c:	460d      	mov	r5, r1
 8022c3e:	b09d      	sub	sp, #116	@ 0x74
 8022c40:	4614      	mov	r4, r2
 8022c42:	4698      	mov	r8, r3
 8022c44:	4606      	mov	r6, r0
 8022c46:	b118      	cbz	r0, 8022c50 <_vfiprintf_r+0x18>
 8022c48:	6a03      	ldr	r3, [r0, #32]
 8022c4a:	b90b      	cbnz	r3, 8022c50 <_vfiprintf_r+0x18>
 8022c4c:	f7ff fb7e 	bl	802234c <__sinit>
 8022c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022c52:	07d9      	lsls	r1, r3, #31
 8022c54:	d405      	bmi.n	8022c62 <_vfiprintf_r+0x2a>
 8022c56:	89ab      	ldrh	r3, [r5, #12]
 8022c58:	059a      	lsls	r2, r3, #22
 8022c5a:	d402      	bmi.n	8022c62 <_vfiprintf_r+0x2a>
 8022c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022c5e:	f7ff fe00 	bl	8022862 <__retarget_lock_acquire_recursive>
 8022c62:	89ab      	ldrh	r3, [r5, #12]
 8022c64:	071b      	lsls	r3, r3, #28
 8022c66:	d501      	bpl.n	8022c6c <_vfiprintf_r+0x34>
 8022c68:	692b      	ldr	r3, [r5, #16]
 8022c6a:	b99b      	cbnz	r3, 8022c94 <_vfiprintf_r+0x5c>
 8022c6c:	4629      	mov	r1, r5
 8022c6e:	4630      	mov	r0, r6
 8022c70:	f000 fba6 	bl	80233c0 <__swsetup_r>
 8022c74:	b170      	cbz	r0, 8022c94 <_vfiprintf_r+0x5c>
 8022c76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022c78:	07dc      	lsls	r4, r3, #31
 8022c7a:	d504      	bpl.n	8022c86 <_vfiprintf_r+0x4e>
 8022c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8022c80:	b01d      	add	sp, #116	@ 0x74
 8022c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c86:	89ab      	ldrh	r3, [r5, #12]
 8022c88:	0598      	lsls	r0, r3, #22
 8022c8a:	d4f7      	bmi.n	8022c7c <_vfiprintf_r+0x44>
 8022c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022c8e:	f7ff fde9 	bl	8022864 <__retarget_lock_release_recursive>
 8022c92:	e7f3      	b.n	8022c7c <_vfiprintf_r+0x44>
 8022c94:	2300      	movs	r3, #0
 8022c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c98:	2320      	movs	r3, #32
 8022c9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022ca2:	2330      	movs	r3, #48	@ 0x30
 8022ca4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022e54 <_vfiprintf_r+0x21c>
 8022ca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022cac:	f04f 0901 	mov.w	r9, #1
 8022cb0:	4623      	mov	r3, r4
 8022cb2:	469a      	mov	sl, r3
 8022cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022cb8:	b10a      	cbz	r2, 8022cbe <_vfiprintf_r+0x86>
 8022cba:	2a25      	cmp	r2, #37	@ 0x25
 8022cbc:	d1f9      	bne.n	8022cb2 <_vfiprintf_r+0x7a>
 8022cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8022cc2:	d00b      	beq.n	8022cdc <_vfiprintf_r+0xa4>
 8022cc4:	465b      	mov	r3, fp
 8022cc6:	4622      	mov	r2, r4
 8022cc8:	4629      	mov	r1, r5
 8022cca:	4630      	mov	r0, r6
 8022ccc:	f7ff ffa1 	bl	8022c12 <__sfputs_r>
 8022cd0:	3001      	adds	r0, #1
 8022cd2:	f000 80a7 	beq.w	8022e24 <_vfiprintf_r+0x1ec>
 8022cd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022cd8:	445a      	add	r2, fp
 8022cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8022cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8022ce0:	2b00      	cmp	r3, #0
 8022ce2:	f000 809f 	beq.w	8022e24 <_vfiprintf_r+0x1ec>
 8022ce6:	2300      	movs	r3, #0
 8022ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8022cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022cf0:	f10a 0a01 	add.w	sl, sl, #1
 8022cf4:	9304      	str	r3, [sp, #16]
 8022cf6:	9307      	str	r3, [sp, #28]
 8022cf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022cfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8022cfe:	4654      	mov	r4, sl
 8022d00:	2205      	movs	r2, #5
 8022d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d06:	4853      	ldr	r0, [pc, #332]	@ (8022e54 <_vfiprintf_r+0x21c>)
 8022d08:	f7dd fafa 	bl	8000300 <memchr>
 8022d0c:	9a04      	ldr	r2, [sp, #16]
 8022d0e:	b9d8      	cbnz	r0, 8022d48 <_vfiprintf_r+0x110>
 8022d10:	06d1      	lsls	r1, r2, #27
 8022d12:	bf44      	itt	mi
 8022d14:	2320      	movmi	r3, #32
 8022d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022d1a:	0713      	lsls	r3, r2, #28
 8022d1c:	bf44      	itt	mi
 8022d1e:	232b      	movmi	r3, #43	@ 0x2b
 8022d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022d24:	f89a 3000 	ldrb.w	r3, [sl]
 8022d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8022d2a:	d015      	beq.n	8022d58 <_vfiprintf_r+0x120>
 8022d2c:	9a07      	ldr	r2, [sp, #28]
 8022d2e:	4654      	mov	r4, sl
 8022d30:	2000      	movs	r0, #0
 8022d32:	f04f 0c0a 	mov.w	ip, #10
 8022d36:	4621      	mov	r1, r4
 8022d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022d3c:	3b30      	subs	r3, #48	@ 0x30
 8022d3e:	2b09      	cmp	r3, #9
 8022d40:	d94b      	bls.n	8022dda <_vfiprintf_r+0x1a2>
 8022d42:	b1b0      	cbz	r0, 8022d72 <_vfiprintf_r+0x13a>
 8022d44:	9207      	str	r2, [sp, #28]
 8022d46:	e014      	b.n	8022d72 <_vfiprintf_r+0x13a>
 8022d48:	eba0 0308 	sub.w	r3, r0, r8
 8022d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8022d50:	4313      	orrs	r3, r2
 8022d52:	9304      	str	r3, [sp, #16]
 8022d54:	46a2      	mov	sl, r4
 8022d56:	e7d2      	b.n	8022cfe <_vfiprintf_r+0xc6>
 8022d58:	9b03      	ldr	r3, [sp, #12]
 8022d5a:	1d19      	adds	r1, r3, #4
 8022d5c:	681b      	ldr	r3, [r3, #0]
 8022d5e:	9103      	str	r1, [sp, #12]
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	bfbb      	ittet	lt
 8022d64:	425b      	neglt	r3, r3
 8022d66:	f042 0202 	orrlt.w	r2, r2, #2
 8022d6a:	9307      	strge	r3, [sp, #28]
 8022d6c:	9307      	strlt	r3, [sp, #28]
 8022d6e:	bfb8      	it	lt
 8022d70:	9204      	strlt	r2, [sp, #16]
 8022d72:	7823      	ldrb	r3, [r4, #0]
 8022d74:	2b2e      	cmp	r3, #46	@ 0x2e
 8022d76:	d10a      	bne.n	8022d8e <_vfiprintf_r+0x156>
 8022d78:	7863      	ldrb	r3, [r4, #1]
 8022d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8022d7c:	d132      	bne.n	8022de4 <_vfiprintf_r+0x1ac>
 8022d7e:	9b03      	ldr	r3, [sp, #12]
 8022d80:	1d1a      	adds	r2, r3, #4
 8022d82:	681b      	ldr	r3, [r3, #0]
 8022d84:	9203      	str	r2, [sp, #12]
 8022d86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022d8a:	3402      	adds	r4, #2
 8022d8c:	9305      	str	r3, [sp, #20]
 8022d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022e64 <_vfiprintf_r+0x22c>
 8022d92:	7821      	ldrb	r1, [r4, #0]
 8022d94:	2203      	movs	r2, #3
 8022d96:	4650      	mov	r0, sl
 8022d98:	f7dd fab2 	bl	8000300 <memchr>
 8022d9c:	b138      	cbz	r0, 8022dae <_vfiprintf_r+0x176>
 8022d9e:	9b04      	ldr	r3, [sp, #16]
 8022da0:	eba0 000a 	sub.w	r0, r0, sl
 8022da4:	2240      	movs	r2, #64	@ 0x40
 8022da6:	4082      	lsls	r2, r0
 8022da8:	4313      	orrs	r3, r2
 8022daa:	3401      	adds	r4, #1
 8022dac:	9304      	str	r3, [sp, #16]
 8022dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022db2:	4829      	ldr	r0, [pc, #164]	@ (8022e58 <_vfiprintf_r+0x220>)
 8022db4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022db8:	2206      	movs	r2, #6
 8022dba:	f7dd faa1 	bl	8000300 <memchr>
 8022dbe:	2800      	cmp	r0, #0
 8022dc0:	d03f      	beq.n	8022e42 <_vfiprintf_r+0x20a>
 8022dc2:	4b26      	ldr	r3, [pc, #152]	@ (8022e5c <_vfiprintf_r+0x224>)
 8022dc4:	bb1b      	cbnz	r3, 8022e0e <_vfiprintf_r+0x1d6>
 8022dc6:	9b03      	ldr	r3, [sp, #12]
 8022dc8:	3307      	adds	r3, #7
 8022dca:	f023 0307 	bic.w	r3, r3, #7
 8022dce:	3308      	adds	r3, #8
 8022dd0:	9303      	str	r3, [sp, #12]
 8022dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022dd4:	443b      	add	r3, r7
 8022dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8022dd8:	e76a      	b.n	8022cb0 <_vfiprintf_r+0x78>
 8022dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8022dde:	460c      	mov	r4, r1
 8022de0:	2001      	movs	r0, #1
 8022de2:	e7a8      	b.n	8022d36 <_vfiprintf_r+0xfe>
 8022de4:	2300      	movs	r3, #0
 8022de6:	3401      	adds	r4, #1
 8022de8:	9305      	str	r3, [sp, #20]
 8022dea:	4619      	mov	r1, r3
 8022dec:	f04f 0c0a 	mov.w	ip, #10
 8022df0:	4620      	mov	r0, r4
 8022df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022df6:	3a30      	subs	r2, #48	@ 0x30
 8022df8:	2a09      	cmp	r2, #9
 8022dfa:	d903      	bls.n	8022e04 <_vfiprintf_r+0x1cc>
 8022dfc:	2b00      	cmp	r3, #0
 8022dfe:	d0c6      	beq.n	8022d8e <_vfiprintf_r+0x156>
 8022e00:	9105      	str	r1, [sp, #20]
 8022e02:	e7c4      	b.n	8022d8e <_vfiprintf_r+0x156>
 8022e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8022e08:	4604      	mov	r4, r0
 8022e0a:	2301      	movs	r3, #1
 8022e0c:	e7f0      	b.n	8022df0 <_vfiprintf_r+0x1b8>
 8022e0e:	ab03      	add	r3, sp, #12
 8022e10:	9300      	str	r3, [sp, #0]
 8022e12:	462a      	mov	r2, r5
 8022e14:	4b12      	ldr	r3, [pc, #72]	@ (8022e60 <_vfiprintf_r+0x228>)
 8022e16:	a904      	add	r1, sp, #16
 8022e18:	4630      	mov	r0, r6
 8022e1a:	f3af 8000 	nop.w
 8022e1e:	4607      	mov	r7, r0
 8022e20:	1c78      	adds	r0, r7, #1
 8022e22:	d1d6      	bne.n	8022dd2 <_vfiprintf_r+0x19a>
 8022e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022e26:	07d9      	lsls	r1, r3, #31
 8022e28:	d405      	bmi.n	8022e36 <_vfiprintf_r+0x1fe>
 8022e2a:	89ab      	ldrh	r3, [r5, #12]
 8022e2c:	059a      	lsls	r2, r3, #22
 8022e2e:	d402      	bmi.n	8022e36 <_vfiprintf_r+0x1fe>
 8022e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022e32:	f7ff fd17 	bl	8022864 <__retarget_lock_release_recursive>
 8022e36:	89ab      	ldrh	r3, [r5, #12]
 8022e38:	065b      	lsls	r3, r3, #25
 8022e3a:	f53f af1f 	bmi.w	8022c7c <_vfiprintf_r+0x44>
 8022e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022e40:	e71e      	b.n	8022c80 <_vfiprintf_r+0x48>
 8022e42:	ab03      	add	r3, sp, #12
 8022e44:	9300      	str	r3, [sp, #0]
 8022e46:	462a      	mov	r2, r5
 8022e48:	4b05      	ldr	r3, [pc, #20]	@ (8022e60 <_vfiprintf_r+0x228>)
 8022e4a:	a904      	add	r1, sp, #16
 8022e4c:	4630      	mov	r0, r6
 8022e4e:	f000 f879 	bl	8022f44 <_printf_i>
 8022e52:	e7e4      	b.n	8022e1e <_vfiprintf_r+0x1e6>
 8022e54:	080323fe 	.word	0x080323fe
 8022e58:	08032408 	.word	0x08032408
 8022e5c:	00000000 	.word	0x00000000
 8022e60:	08022c13 	.word	0x08022c13
 8022e64:	08032404 	.word	0x08032404

08022e68 <_printf_common>:
 8022e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e6c:	4616      	mov	r6, r2
 8022e6e:	4698      	mov	r8, r3
 8022e70:	688a      	ldr	r2, [r1, #8]
 8022e72:	690b      	ldr	r3, [r1, #16]
 8022e74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022e78:	4293      	cmp	r3, r2
 8022e7a:	bfb8      	it	lt
 8022e7c:	4613      	movlt	r3, r2
 8022e7e:	6033      	str	r3, [r6, #0]
 8022e80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022e84:	4607      	mov	r7, r0
 8022e86:	460c      	mov	r4, r1
 8022e88:	b10a      	cbz	r2, 8022e8e <_printf_common+0x26>
 8022e8a:	3301      	adds	r3, #1
 8022e8c:	6033      	str	r3, [r6, #0]
 8022e8e:	6823      	ldr	r3, [r4, #0]
 8022e90:	0699      	lsls	r1, r3, #26
 8022e92:	bf42      	ittt	mi
 8022e94:	6833      	ldrmi	r3, [r6, #0]
 8022e96:	3302      	addmi	r3, #2
 8022e98:	6033      	strmi	r3, [r6, #0]
 8022e9a:	6825      	ldr	r5, [r4, #0]
 8022e9c:	f015 0506 	ands.w	r5, r5, #6
 8022ea0:	d106      	bne.n	8022eb0 <_printf_common+0x48>
 8022ea2:	f104 0a19 	add.w	sl, r4, #25
 8022ea6:	68e3      	ldr	r3, [r4, #12]
 8022ea8:	6832      	ldr	r2, [r6, #0]
 8022eaa:	1a9b      	subs	r3, r3, r2
 8022eac:	42ab      	cmp	r3, r5
 8022eae:	dc26      	bgt.n	8022efe <_printf_common+0x96>
 8022eb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022eb4:	6822      	ldr	r2, [r4, #0]
 8022eb6:	3b00      	subs	r3, #0
 8022eb8:	bf18      	it	ne
 8022eba:	2301      	movne	r3, #1
 8022ebc:	0692      	lsls	r2, r2, #26
 8022ebe:	d42b      	bmi.n	8022f18 <_printf_common+0xb0>
 8022ec0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022ec4:	4641      	mov	r1, r8
 8022ec6:	4638      	mov	r0, r7
 8022ec8:	47c8      	blx	r9
 8022eca:	3001      	adds	r0, #1
 8022ecc:	d01e      	beq.n	8022f0c <_printf_common+0xa4>
 8022ece:	6823      	ldr	r3, [r4, #0]
 8022ed0:	6922      	ldr	r2, [r4, #16]
 8022ed2:	f003 0306 	and.w	r3, r3, #6
 8022ed6:	2b04      	cmp	r3, #4
 8022ed8:	bf02      	ittt	eq
 8022eda:	68e5      	ldreq	r5, [r4, #12]
 8022edc:	6833      	ldreq	r3, [r6, #0]
 8022ede:	1aed      	subeq	r5, r5, r3
 8022ee0:	68a3      	ldr	r3, [r4, #8]
 8022ee2:	bf0c      	ite	eq
 8022ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022ee8:	2500      	movne	r5, #0
 8022eea:	4293      	cmp	r3, r2
 8022eec:	bfc4      	itt	gt
 8022eee:	1a9b      	subgt	r3, r3, r2
 8022ef0:	18ed      	addgt	r5, r5, r3
 8022ef2:	2600      	movs	r6, #0
 8022ef4:	341a      	adds	r4, #26
 8022ef6:	42b5      	cmp	r5, r6
 8022ef8:	d11a      	bne.n	8022f30 <_printf_common+0xc8>
 8022efa:	2000      	movs	r0, #0
 8022efc:	e008      	b.n	8022f10 <_printf_common+0xa8>
 8022efe:	2301      	movs	r3, #1
 8022f00:	4652      	mov	r2, sl
 8022f02:	4641      	mov	r1, r8
 8022f04:	4638      	mov	r0, r7
 8022f06:	47c8      	blx	r9
 8022f08:	3001      	adds	r0, #1
 8022f0a:	d103      	bne.n	8022f14 <_printf_common+0xac>
 8022f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8022f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f14:	3501      	adds	r5, #1
 8022f16:	e7c6      	b.n	8022ea6 <_printf_common+0x3e>
 8022f18:	18e1      	adds	r1, r4, r3
 8022f1a:	1c5a      	adds	r2, r3, #1
 8022f1c:	2030      	movs	r0, #48	@ 0x30
 8022f1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022f22:	4422      	add	r2, r4
 8022f24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022f28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022f2c:	3302      	adds	r3, #2
 8022f2e:	e7c7      	b.n	8022ec0 <_printf_common+0x58>
 8022f30:	2301      	movs	r3, #1
 8022f32:	4622      	mov	r2, r4
 8022f34:	4641      	mov	r1, r8
 8022f36:	4638      	mov	r0, r7
 8022f38:	47c8      	blx	r9
 8022f3a:	3001      	adds	r0, #1
 8022f3c:	d0e6      	beq.n	8022f0c <_printf_common+0xa4>
 8022f3e:	3601      	adds	r6, #1
 8022f40:	e7d9      	b.n	8022ef6 <_printf_common+0x8e>
	...

08022f44 <_printf_i>:
 8022f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022f48:	7e0f      	ldrb	r7, [r1, #24]
 8022f4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022f4c:	2f78      	cmp	r7, #120	@ 0x78
 8022f4e:	4691      	mov	r9, r2
 8022f50:	4680      	mov	r8, r0
 8022f52:	460c      	mov	r4, r1
 8022f54:	469a      	mov	sl, r3
 8022f56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022f5a:	d807      	bhi.n	8022f6c <_printf_i+0x28>
 8022f5c:	2f62      	cmp	r7, #98	@ 0x62
 8022f5e:	d80a      	bhi.n	8022f76 <_printf_i+0x32>
 8022f60:	2f00      	cmp	r7, #0
 8022f62:	f000 80d2 	beq.w	802310a <_printf_i+0x1c6>
 8022f66:	2f58      	cmp	r7, #88	@ 0x58
 8022f68:	f000 80b9 	beq.w	80230de <_printf_i+0x19a>
 8022f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022f70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022f74:	e03a      	b.n	8022fec <_printf_i+0xa8>
 8022f76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022f7a:	2b15      	cmp	r3, #21
 8022f7c:	d8f6      	bhi.n	8022f6c <_printf_i+0x28>
 8022f7e:	a101      	add	r1, pc, #4	@ (adr r1, 8022f84 <_printf_i+0x40>)
 8022f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022f84:	08022fdd 	.word	0x08022fdd
 8022f88:	08022ff1 	.word	0x08022ff1
 8022f8c:	08022f6d 	.word	0x08022f6d
 8022f90:	08022f6d 	.word	0x08022f6d
 8022f94:	08022f6d 	.word	0x08022f6d
 8022f98:	08022f6d 	.word	0x08022f6d
 8022f9c:	08022ff1 	.word	0x08022ff1
 8022fa0:	08022f6d 	.word	0x08022f6d
 8022fa4:	08022f6d 	.word	0x08022f6d
 8022fa8:	08022f6d 	.word	0x08022f6d
 8022fac:	08022f6d 	.word	0x08022f6d
 8022fb0:	080230f1 	.word	0x080230f1
 8022fb4:	0802301b 	.word	0x0802301b
 8022fb8:	080230ab 	.word	0x080230ab
 8022fbc:	08022f6d 	.word	0x08022f6d
 8022fc0:	08022f6d 	.word	0x08022f6d
 8022fc4:	08023113 	.word	0x08023113
 8022fc8:	08022f6d 	.word	0x08022f6d
 8022fcc:	0802301b 	.word	0x0802301b
 8022fd0:	08022f6d 	.word	0x08022f6d
 8022fd4:	08022f6d 	.word	0x08022f6d
 8022fd8:	080230b3 	.word	0x080230b3
 8022fdc:	6833      	ldr	r3, [r6, #0]
 8022fde:	1d1a      	adds	r2, r3, #4
 8022fe0:	681b      	ldr	r3, [r3, #0]
 8022fe2:	6032      	str	r2, [r6, #0]
 8022fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022fec:	2301      	movs	r3, #1
 8022fee:	e09d      	b.n	802312c <_printf_i+0x1e8>
 8022ff0:	6833      	ldr	r3, [r6, #0]
 8022ff2:	6820      	ldr	r0, [r4, #0]
 8022ff4:	1d19      	adds	r1, r3, #4
 8022ff6:	6031      	str	r1, [r6, #0]
 8022ff8:	0606      	lsls	r6, r0, #24
 8022ffa:	d501      	bpl.n	8023000 <_printf_i+0xbc>
 8022ffc:	681d      	ldr	r5, [r3, #0]
 8022ffe:	e003      	b.n	8023008 <_printf_i+0xc4>
 8023000:	0645      	lsls	r5, r0, #25
 8023002:	d5fb      	bpl.n	8022ffc <_printf_i+0xb8>
 8023004:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023008:	2d00      	cmp	r5, #0
 802300a:	da03      	bge.n	8023014 <_printf_i+0xd0>
 802300c:	232d      	movs	r3, #45	@ 0x2d
 802300e:	426d      	negs	r5, r5
 8023010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023014:	4859      	ldr	r0, [pc, #356]	@ (802317c <_printf_i+0x238>)
 8023016:	230a      	movs	r3, #10
 8023018:	e011      	b.n	802303e <_printf_i+0xfa>
 802301a:	6821      	ldr	r1, [r4, #0]
 802301c:	6833      	ldr	r3, [r6, #0]
 802301e:	0608      	lsls	r0, r1, #24
 8023020:	f853 5b04 	ldr.w	r5, [r3], #4
 8023024:	d402      	bmi.n	802302c <_printf_i+0xe8>
 8023026:	0649      	lsls	r1, r1, #25
 8023028:	bf48      	it	mi
 802302a:	b2ad      	uxthmi	r5, r5
 802302c:	2f6f      	cmp	r7, #111	@ 0x6f
 802302e:	4853      	ldr	r0, [pc, #332]	@ (802317c <_printf_i+0x238>)
 8023030:	6033      	str	r3, [r6, #0]
 8023032:	bf14      	ite	ne
 8023034:	230a      	movne	r3, #10
 8023036:	2308      	moveq	r3, #8
 8023038:	2100      	movs	r1, #0
 802303a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802303e:	6866      	ldr	r6, [r4, #4]
 8023040:	60a6      	str	r6, [r4, #8]
 8023042:	2e00      	cmp	r6, #0
 8023044:	bfa2      	ittt	ge
 8023046:	6821      	ldrge	r1, [r4, #0]
 8023048:	f021 0104 	bicge.w	r1, r1, #4
 802304c:	6021      	strge	r1, [r4, #0]
 802304e:	b90d      	cbnz	r5, 8023054 <_printf_i+0x110>
 8023050:	2e00      	cmp	r6, #0
 8023052:	d04b      	beq.n	80230ec <_printf_i+0x1a8>
 8023054:	4616      	mov	r6, r2
 8023056:	fbb5 f1f3 	udiv	r1, r5, r3
 802305a:	fb03 5711 	mls	r7, r3, r1, r5
 802305e:	5dc7      	ldrb	r7, [r0, r7]
 8023060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023064:	462f      	mov	r7, r5
 8023066:	42bb      	cmp	r3, r7
 8023068:	460d      	mov	r5, r1
 802306a:	d9f4      	bls.n	8023056 <_printf_i+0x112>
 802306c:	2b08      	cmp	r3, #8
 802306e:	d10b      	bne.n	8023088 <_printf_i+0x144>
 8023070:	6823      	ldr	r3, [r4, #0]
 8023072:	07df      	lsls	r7, r3, #31
 8023074:	d508      	bpl.n	8023088 <_printf_i+0x144>
 8023076:	6923      	ldr	r3, [r4, #16]
 8023078:	6861      	ldr	r1, [r4, #4]
 802307a:	4299      	cmp	r1, r3
 802307c:	bfde      	ittt	le
 802307e:	2330      	movle	r3, #48	@ 0x30
 8023080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023084:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023088:	1b92      	subs	r2, r2, r6
 802308a:	6122      	str	r2, [r4, #16]
 802308c:	f8cd a000 	str.w	sl, [sp]
 8023090:	464b      	mov	r3, r9
 8023092:	aa03      	add	r2, sp, #12
 8023094:	4621      	mov	r1, r4
 8023096:	4640      	mov	r0, r8
 8023098:	f7ff fee6 	bl	8022e68 <_printf_common>
 802309c:	3001      	adds	r0, #1
 802309e:	d14a      	bne.n	8023136 <_printf_i+0x1f2>
 80230a0:	f04f 30ff 	mov.w	r0, #4294967295
 80230a4:	b004      	add	sp, #16
 80230a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230aa:	6823      	ldr	r3, [r4, #0]
 80230ac:	f043 0320 	orr.w	r3, r3, #32
 80230b0:	6023      	str	r3, [r4, #0]
 80230b2:	4833      	ldr	r0, [pc, #204]	@ (8023180 <_printf_i+0x23c>)
 80230b4:	2778      	movs	r7, #120	@ 0x78
 80230b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80230ba:	6823      	ldr	r3, [r4, #0]
 80230bc:	6831      	ldr	r1, [r6, #0]
 80230be:	061f      	lsls	r7, r3, #24
 80230c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80230c4:	d402      	bmi.n	80230cc <_printf_i+0x188>
 80230c6:	065f      	lsls	r7, r3, #25
 80230c8:	bf48      	it	mi
 80230ca:	b2ad      	uxthmi	r5, r5
 80230cc:	6031      	str	r1, [r6, #0]
 80230ce:	07d9      	lsls	r1, r3, #31
 80230d0:	bf44      	itt	mi
 80230d2:	f043 0320 	orrmi.w	r3, r3, #32
 80230d6:	6023      	strmi	r3, [r4, #0]
 80230d8:	b11d      	cbz	r5, 80230e2 <_printf_i+0x19e>
 80230da:	2310      	movs	r3, #16
 80230dc:	e7ac      	b.n	8023038 <_printf_i+0xf4>
 80230de:	4827      	ldr	r0, [pc, #156]	@ (802317c <_printf_i+0x238>)
 80230e0:	e7e9      	b.n	80230b6 <_printf_i+0x172>
 80230e2:	6823      	ldr	r3, [r4, #0]
 80230e4:	f023 0320 	bic.w	r3, r3, #32
 80230e8:	6023      	str	r3, [r4, #0]
 80230ea:	e7f6      	b.n	80230da <_printf_i+0x196>
 80230ec:	4616      	mov	r6, r2
 80230ee:	e7bd      	b.n	802306c <_printf_i+0x128>
 80230f0:	6833      	ldr	r3, [r6, #0]
 80230f2:	6825      	ldr	r5, [r4, #0]
 80230f4:	6961      	ldr	r1, [r4, #20]
 80230f6:	1d18      	adds	r0, r3, #4
 80230f8:	6030      	str	r0, [r6, #0]
 80230fa:	062e      	lsls	r6, r5, #24
 80230fc:	681b      	ldr	r3, [r3, #0]
 80230fe:	d501      	bpl.n	8023104 <_printf_i+0x1c0>
 8023100:	6019      	str	r1, [r3, #0]
 8023102:	e002      	b.n	802310a <_printf_i+0x1c6>
 8023104:	0668      	lsls	r0, r5, #25
 8023106:	d5fb      	bpl.n	8023100 <_printf_i+0x1bc>
 8023108:	8019      	strh	r1, [r3, #0]
 802310a:	2300      	movs	r3, #0
 802310c:	6123      	str	r3, [r4, #16]
 802310e:	4616      	mov	r6, r2
 8023110:	e7bc      	b.n	802308c <_printf_i+0x148>
 8023112:	6833      	ldr	r3, [r6, #0]
 8023114:	1d1a      	adds	r2, r3, #4
 8023116:	6032      	str	r2, [r6, #0]
 8023118:	681e      	ldr	r6, [r3, #0]
 802311a:	6862      	ldr	r2, [r4, #4]
 802311c:	2100      	movs	r1, #0
 802311e:	4630      	mov	r0, r6
 8023120:	f7dd f8ee 	bl	8000300 <memchr>
 8023124:	b108      	cbz	r0, 802312a <_printf_i+0x1e6>
 8023126:	1b80      	subs	r0, r0, r6
 8023128:	6060      	str	r0, [r4, #4]
 802312a:	6863      	ldr	r3, [r4, #4]
 802312c:	6123      	str	r3, [r4, #16]
 802312e:	2300      	movs	r3, #0
 8023130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023134:	e7aa      	b.n	802308c <_printf_i+0x148>
 8023136:	6923      	ldr	r3, [r4, #16]
 8023138:	4632      	mov	r2, r6
 802313a:	4649      	mov	r1, r9
 802313c:	4640      	mov	r0, r8
 802313e:	47d0      	blx	sl
 8023140:	3001      	adds	r0, #1
 8023142:	d0ad      	beq.n	80230a0 <_printf_i+0x15c>
 8023144:	6823      	ldr	r3, [r4, #0]
 8023146:	079b      	lsls	r3, r3, #30
 8023148:	d413      	bmi.n	8023172 <_printf_i+0x22e>
 802314a:	68e0      	ldr	r0, [r4, #12]
 802314c:	9b03      	ldr	r3, [sp, #12]
 802314e:	4298      	cmp	r0, r3
 8023150:	bfb8      	it	lt
 8023152:	4618      	movlt	r0, r3
 8023154:	e7a6      	b.n	80230a4 <_printf_i+0x160>
 8023156:	2301      	movs	r3, #1
 8023158:	4632      	mov	r2, r6
 802315a:	4649      	mov	r1, r9
 802315c:	4640      	mov	r0, r8
 802315e:	47d0      	blx	sl
 8023160:	3001      	adds	r0, #1
 8023162:	d09d      	beq.n	80230a0 <_printf_i+0x15c>
 8023164:	3501      	adds	r5, #1
 8023166:	68e3      	ldr	r3, [r4, #12]
 8023168:	9903      	ldr	r1, [sp, #12]
 802316a:	1a5b      	subs	r3, r3, r1
 802316c:	42ab      	cmp	r3, r5
 802316e:	dcf2      	bgt.n	8023156 <_printf_i+0x212>
 8023170:	e7eb      	b.n	802314a <_printf_i+0x206>
 8023172:	2500      	movs	r5, #0
 8023174:	f104 0619 	add.w	r6, r4, #25
 8023178:	e7f5      	b.n	8023166 <_printf_i+0x222>
 802317a:	bf00      	nop
 802317c:	0803240f 	.word	0x0803240f
 8023180:	08032420 	.word	0x08032420

08023184 <__sflush_r>:
 8023184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802318c:	0716      	lsls	r6, r2, #28
 802318e:	4605      	mov	r5, r0
 8023190:	460c      	mov	r4, r1
 8023192:	d454      	bmi.n	802323e <__sflush_r+0xba>
 8023194:	684b      	ldr	r3, [r1, #4]
 8023196:	2b00      	cmp	r3, #0
 8023198:	dc02      	bgt.n	80231a0 <__sflush_r+0x1c>
 802319a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802319c:	2b00      	cmp	r3, #0
 802319e:	dd48      	ble.n	8023232 <__sflush_r+0xae>
 80231a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80231a2:	2e00      	cmp	r6, #0
 80231a4:	d045      	beq.n	8023232 <__sflush_r+0xae>
 80231a6:	2300      	movs	r3, #0
 80231a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80231ac:	682f      	ldr	r7, [r5, #0]
 80231ae:	6a21      	ldr	r1, [r4, #32]
 80231b0:	602b      	str	r3, [r5, #0]
 80231b2:	d030      	beq.n	8023216 <__sflush_r+0x92>
 80231b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80231b6:	89a3      	ldrh	r3, [r4, #12]
 80231b8:	0759      	lsls	r1, r3, #29
 80231ba:	d505      	bpl.n	80231c8 <__sflush_r+0x44>
 80231bc:	6863      	ldr	r3, [r4, #4]
 80231be:	1ad2      	subs	r2, r2, r3
 80231c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80231c2:	b10b      	cbz	r3, 80231c8 <__sflush_r+0x44>
 80231c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80231c6:	1ad2      	subs	r2, r2, r3
 80231c8:	2300      	movs	r3, #0
 80231ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80231cc:	6a21      	ldr	r1, [r4, #32]
 80231ce:	4628      	mov	r0, r5
 80231d0:	47b0      	blx	r6
 80231d2:	1c43      	adds	r3, r0, #1
 80231d4:	89a3      	ldrh	r3, [r4, #12]
 80231d6:	d106      	bne.n	80231e6 <__sflush_r+0x62>
 80231d8:	6829      	ldr	r1, [r5, #0]
 80231da:	291d      	cmp	r1, #29
 80231dc:	d82b      	bhi.n	8023236 <__sflush_r+0xb2>
 80231de:	4a2a      	ldr	r2, [pc, #168]	@ (8023288 <__sflush_r+0x104>)
 80231e0:	410a      	asrs	r2, r1
 80231e2:	07d6      	lsls	r6, r2, #31
 80231e4:	d427      	bmi.n	8023236 <__sflush_r+0xb2>
 80231e6:	2200      	movs	r2, #0
 80231e8:	6062      	str	r2, [r4, #4]
 80231ea:	04d9      	lsls	r1, r3, #19
 80231ec:	6922      	ldr	r2, [r4, #16]
 80231ee:	6022      	str	r2, [r4, #0]
 80231f0:	d504      	bpl.n	80231fc <__sflush_r+0x78>
 80231f2:	1c42      	adds	r2, r0, #1
 80231f4:	d101      	bne.n	80231fa <__sflush_r+0x76>
 80231f6:	682b      	ldr	r3, [r5, #0]
 80231f8:	b903      	cbnz	r3, 80231fc <__sflush_r+0x78>
 80231fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80231fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80231fe:	602f      	str	r7, [r5, #0]
 8023200:	b1b9      	cbz	r1, 8023232 <__sflush_r+0xae>
 8023202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023206:	4299      	cmp	r1, r3
 8023208:	d002      	beq.n	8023210 <__sflush_r+0x8c>
 802320a:	4628      	mov	r0, r5
 802320c:	f7ff fb48 	bl	80228a0 <_free_r>
 8023210:	2300      	movs	r3, #0
 8023212:	6363      	str	r3, [r4, #52]	@ 0x34
 8023214:	e00d      	b.n	8023232 <__sflush_r+0xae>
 8023216:	2301      	movs	r3, #1
 8023218:	4628      	mov	r0, r5
 802321a:	47b0      	blx	r6
 802321c:	4602      	mov	r2, r0
 802321e:	1c50      	adds	r0, r2, #1
 8023220:	d1c9      	bne.n	80231b6 <__sflush_r+0x32>
 8023222:	682b      	ldr	r3, [r5, #0]
 8023224:	2b00      	cmp	r3, #0
 8023226:	d0c6      	beq.n	80231b6 <__sflush_r+0x32>
 8023228:	2b1d      	cmp	r3, #29
 802322a:	d001      	beq.n	8023230 <__sflush_r+0xac>
 802322c:	2b16      	cmp	r3, #22
 802322e:	d11e      	bne.n	802326e <__sflush_r+0xea>
 8023230:	602f      	str	r7, [r5, #0]
 8023232:	2000      	movs	r0, #0
 8023234:	e022      	b.n	802327c <__sflush_r+0xf8>
 8023236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802323a:	b21b      	sxth	r3, r3
 802323c:	e01b      	b.n	8023276 <__sflush_r+0xf2>
 802323e:	690f      	ldr	r7, [r1, #16]
 8023240:	2f00      	cmp	r7, #0
 8023242:	d0f6      	beq.n	8023232 <__sflush_r+0xae>
 8023244:	0793      	lsls	r3, r2, #30
 8023246:	680e      	ldr	r6, [r1, #0]
 8023248:	bf08      	it	eq
 802324a:	694b      	ldreq	r3, [r1, #20]
 802324c:	600f      	str	r7, [r1, #0]
 802324e:	bf18      	it	ne
 8023250:	2300      	movne	r3, #0
 8023252:	eba6 0807 	sub.w	r8, r6, r7
 8023256:	608b      	str	r3, [r1, #8]
 8023258:	f1b8 0f00 	cmp.w	r8, #0
 802325c:	dde9      	ble.n	8023232 <__sflush_r+0xae>
 802325e:	6a21      	ldr	r1, [r4, #32]
 8023260:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023262:	4643      	mov	r3, r8
 8023264:	463a      	mov	r2, r7
 8023266:	4628      	mov	r0, r5
 8023268:	47b0      	blx	r6
 802326a:	2800      	cmp	r0, #0
 802326c:	dc08      	bgt.n	8023280 <__sflush_r+0xfc>
 802326e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023276:	81a3      	strh	r3, [r4, #12]
 8023278:	f04f 30ff 	mov.w	r0, #4294967295
 802327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023280:	4407      	add	r7, r0
 8023282:	eba8 0800 	sub.w	r8, r8, r0
 8023286:	e7e7      	b.n	8023258 <__sflush_r+0xd4>
 8023288:	dfbffffe 	.word	0xdfbffffe

0802328c <_fflush_r>:
 802328c:	b538      	push	{r3, r4, r5, lr}
 802328e:	690b      	ldr	r3, [r1, #16]
 8023290:	4605      	mov	r5, r0
 8023292:	460c      	mov	r4, r1
 8023294:	b913      	cbnz	r3, 802329c <_fflush_r+0x10>
 8023296:	2500      	movs	r5, #0
 8023298:	4628      	mov	r0, r5
 802329a:	bd38      	pop	{r3, r4, r5, pc}
 802329c:	b118      	cbz	r0, 80232a6 <_fflush_r+0x1a>
 802329e:	6a03      	ldr	r3, [r0, #32]
 80232a0:	b90b      	cbnz	r3, 80232a6 <_fflush_r+0x1a>
 80232a2:	f7ff f853 	bl	802234c <__sinit>
 80232a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232aa:	2b00      	cmp	r3, #0
 80232ac:	d0f3      	beq.n	8023296 <_fflush_r+0xa>
 80232ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80232b0:	07d0      	lsls	r0, r2, #31
 80232b2:	d404      	bmi.n	80232be <_fflush_r+0x32>
 80232b4:	0599      	lsls	r1, r3, #22
 80232b6:	d402      	bmi.n	80232be <_fflush_r+0x32>
 80232b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80232ba:	f7ff fad2 	bl	8022862 <__retarget_lock_acquire_recursive>
 80232be:	4628      	mov	r0, r5
 80232c0:	4621      	mov	r1, r4
 80232c2:	f7ff ff5f 	bl	8023184 <__sflush_r>
 80232c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80232c8:	07da      	lsls	r2, r3, #31
 80232ca:	4605      	mov	r5, r0
 80232cc:	d4e4      	bmi.n	8023298 <_fflush_r+0xc>
 80232ce:	89a3      	ldrh	r3, [r4, #12]
 80232d0:	059b      	lsls	r3, r3, #22
 80232d2:	d4e1      	bmi.n	8023298 <_fflush_r+0xc>
 80232d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80232d6:	f7ff fac5 	bl	8022864 <__retarget_lock_release_recursive>
 80232da:	e7dd      	b.n	8023298 <_fflush_r+0xc>

080232dc <_putc_r>:
 80232dc:	b570      	push	{r4, r5, r6, lr}
 80232de:	460d      	mov	r5, r1
 80232e0:	4614      	mov	r4, r2
 80232e2:	4606      	mov	r6, r0
 80232e4:	b118      	cbz	r0, 80232ee <_putc_r+0x12>
 80232e6:	6a03      	ldr	r3, [r0, #32]
 80232e8:	b90b      	cbnz	r3, 80232ee <_putc_r+0x12>
 80232ea:	f7ff f82f 	bl	802234c <__sinit>
 80232ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80232f0:	07d8      	lsls	r0, r3, #31
 80232f2:	d405      	bmi.n	8023300 <_putc_r+0x24>
 80232f4:	89a3      	ldrh	r3, [r4, #12]
 80232f6:	0599      	lsls	r1, r3, #22
 80232f8:	d402      	bmi.n	8023300 <_putc_r+0x24>
 80232fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80232fc:	f7ff fab1 	bl	8022862 <__retarget_lock_acquire_recursive>
 8023300:	68a3      	ldr	r3, [r4, #8]
 8023302:	3b01      	subs	r3, #1
 8023304:	2b00      	cmp	r3, #0
 8023306:	60a3      	str	r3, [r4, #8]
 8023308:	da05      	bge.n	8023316 <_putc_r+0x3a>
 802330a:	69a2      	ldr	r2, [r4, #24]
 802330c:	4293      	cmp	r3, r2
 802330e:	db12      	blt.n	8023336 <_putc_r+0x5a>
 8023310:	b2eb      	uxtb	r3, r5
 8023312:	2b0a      	cmp	r3, #10
 8023314:	d00f      	beq.n	8023336 <_putc_r+0x5a>
 8023316:	6823      	ldr	r3, [r4, #0]
 8023318:	1c5a      	adds	r2, r3, #1
 802331a:	6022      	str	r2, [r4, #0]
 802331c:	701d      	strb	r5, [r3, #0]
 802331e:	b2ed      	uxtb	r5, r5
 8023320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023322:	07da      	lsls	r2, r3, #31
 8023324:	d405      	bmi.n	8023332 <_putc_r+0x56>
 8023326:	89a3      	ldrh	r3, [r4, #12]
 8023328:	059b      	lsls	r3, r3, #22
 802332a:	d402      	bmi.n	8023332 <_putc_r+0x56>
 802332c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802332e:	f7ff fa99 	bl	8022864 <__retarget_lock_release_recursive>
 8023332:	4628      	mov	r0, r5
 8023334:	bd70      	pop	{r4, r5, r6, pc}
 8023336:	4629      	mov	r1, r5
 8023338:	4622      	mov	r2, r4
 802333a:	4630      	mov	r0, r6
 802333c:	f000 f802 	bl	8023344 <__swbuf_r>
 8023340:	4605      	mov	r5, r0
 8023342:	e7ed      	b.n	8023320 <_putc_r+0x44>

08023344 <__swbuf_r>:
 8023344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023346:	460e      	mov	r6, r1
 8023348:	4614      	mov	r4, r2
 802334a:	4605      	mov	r5, r0
 802334c:	b118      	cbz	r0, 8023356 <__swbuf_r+0x12>
 802334e:	6a03      	ldr	r3, [r0, #32]
 8023350:	b90b      	cbnz	r3, 8023356 <__swbuf_r+0x12>
 8023352:	f7fe fffb 	bl	802234c <__sinit>
 8023356:	69a3      	ldr	r3, [r4, #24]
 8023358:	60a3      	str	r3, [r4, #8]
 802335a:	89a3      	ldrh	r3, [r4, #12]
 802335c:	071a      	lsls	r2, r3, #28
 802335e:	d501      	bpl.n	8023364 <__swbuf_r+0x20>
 8023360:	6923      	ldr	r3, [r4, #16]
 8023362:	b943      	cbnz	r3, 8023376 <__swbuf_r+0x32>
 8023364:	4621      	mov	r1, r4
 8023366:	4628      	mov	r0, r5
 8023368:	f000 f82a 	bl	80233c0 <__swsetup_r>
 802336c:	b118      	cbz	r0, 8023376 <__swbuf_r+0x32>
 802336e:	f04f 37ff 	mov.w	r7, #4294967295
 8023372:	4638      	mov	r0, r7
 8023374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023376:	6823      	ldr	r3, [r4, #0]
 8023378:	6922      	ldr	r2, [r4, #16]
 802337a:	1a98      	subs	r0, r3, r2
 802337c:	6963      	ldr	r3, [r4, #20]
 802337e:	b2f6      	uxtb	r6, r6
 8023380:	4283      	cmp	r3, r0
 8023382:	4637      	mov	r7, r6
 8023384:	dc05      	bgt.n	8023392 <__swbuf_r+0x4e>
 8023386:	4621      	mov	r1, r4
 8023388:	4628      	mov	r0, r5
 802338a:	f7ff ff7f 	bl	802328c <_fflush_r>
 802338e:	2800      	cmp	r0, #0
 8023390:	d1ed      	bne.n	802336e <__swbuf_r+0x2a>
 8023392:	68a3      	ldr	r3, [r4, #8]
 8023394:	3b01      	subs	r3, #1
 8023396:	60a3      	str	r3, [r4, #8]
 8023398:	6823      	ldr	r3, [r4, #0]
 802339a:	1c5a      	adds	r2, r3, #1
 802339c:	6022      	str	r2, [r4, #0]
 802339e:	701e      	strb	r6, [r3, #0]
 80233a0:	6962      	ldr	r2, [r4, #20]
 80233a2:	1c43      	adds	r3, r0, #1
 80233a4:	429a      	cmp	r2, r3
 80233a6:	d004      	beq.n	80233b2 <__swbuf_r+0x6e>
 80233a8:	89a3      	ldrh	r3, [r4, #12]
 80233aa:	07db      	lsls	r3, r3, #31
 80233ac:	d5e1      	bpl.n	8023372 <__swbuf_r+0x2e>
 80233ae:	2e0a      	cmp	r6, #10
 80233b0:	d1df      	bne.n	8023372 <__swbuf_r+0x2e>
 80233b2:	4621      	mov	r1, r4
 80233b4:	4628      	mov	r0, r5
 80233b6:	f7ff ff69 	bl	802328c <_fflush_r>
 80233ba:	2800      	cmp	r0, #0
 80233bc:	d0d9      	beq.n	8023372 <__swbuf_r+0x2e>
 80233be:	e7d6      	b.n	802336e <__swbuf_r+0x2a>

080233c0 <__swsetup_r>:
 80233c0:	b538      	push	{r3, r4, r5, lr}
 80233c2:	4b29      	ldr	r3, [pc, #164]	@ (8023468 <__swsetup_r+0xa8>)
 80233c4:	4605      	mov	r5, r0
 80233c6:	6818      	ldr	r0, [r3, #0]
 80233c8:	460c      	mov	r4, r1
 80233ca:	b118      	cbz	r0, 80233d4 <__swsetup_r+0x14>
 80233cc:	6a03      	ldr	r3, [r0, #32]
 80233ce:	b90b      	cbnz	r3, 80233d4 <__swsetup_r+0x14>
 80233d0:	f7fe ffbc 	bl	802234c <__sinit>
 80233d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80233d8:	0719      	lsls	r1, r3, #28
 80233da:	d422      	bmi.n	8023422 <__swsetup_r+0x62>
 80233dc:	06da      	lsls	r2, r3, #27
 80233de:	d407      	bmi.n	80233f0 <__swsetup_r+0x30>
 80233e0:	2209      	movs	r2, #9
 80233e2:	602a      	str	r2, [r5, #0]
 80233e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80233e8:	81a3      	strh	r3, [r4, #12]
 80233ea:	f04f 30ff 	mov.w	r0, #4294967295
 80233ee:	e033      	b.n	8023458 <__swsetup_r+0x98>
 80233f0:	0758      	lsls	r0, r3, #29
 80233f2:	d512      	bpl.n	802341a <__swsetup_r+0x5a>
 80233f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80233f6:	b141      	cbz	r1, 802340a <__swsetup_r+0x4a>
 80233f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80233fc:	4299      	cmp	r1, r3
 80233fe:	d002      	beq.n	8023406 <__swsetup_r+0x46>
 8023400:	4628      	mov	r0, r5
 8023402:	f7ff fa4d 	bl	80228a0 <_free_r>
 8023406:	2300      	movs	r3, #0
 8023408:	6363      	str	r3, [r4, #52]	@ 0x34
 802340a:	89a3      	ldrh	r3, [r4, #12]
 802340c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023410:	81a3      	strh	r3, [r4, #12]
 8023412:	2300      	movs	r3, #0
 8023414:	6063      	str	r3, [r4, #4]
 8023416:	6923      	ldr	r3, [r4, #16]
 8023418:	6023      	str	r3, [r4, #0]
 802341a:	89a3      	ldrh	r3, [r4, #12]
 802341c:	f043 0308 	orr.w	r3, r3, #8
 8023420:	81a3      	strh	r3, [r4, #12]
 8023422:	6923      	ldr	r3, [r4, #16]
 8023424:	b94b      	cbnz	r3, 802343a <__swsetup_r+0x7a>
 8023426:	89a3      	ldrh	r3, [r4, #12]
 8023428:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802342c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023430:	d003      	beq.n	802343a <__swsetup_r+0x7a>
 8023432:	4621      	mov	r1, r4
 8023434:	4628      	mov	r0, r5
 8023436:	f000 f8b1 	bl	802359c <__smakebuf_r>
 802343a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802343e:	f013 0201 	ands.w	r2, r3, #1
 8023442:	d00a      	beq.n	802345a <__swsetup_r+0x9a>
 8023444:	2200      	movs	r2, #0
 8023446:	60a2      	str	r2, [r4, #8]
 8023448:	6962      	ldr	r2, [r4, #20]
 802344a:	4252      	negs	r2, r2
 802344c:	61a2      	str	r2, [r4, #24]
 802344e:	6922      	ldr	r2, [r4, #16]
 8023450:	b942      	cbnz	r2, 8023464 <__swsetup_r+0xa4>
 8023452:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8023456:	d1c5      	bne.n	80233e4 <__swsetup_r+0x24>
 8023458:	bd38      	pop	{r3, r4, r5, pc}
 802345a:	0799      	lsls	r1, r3, #30
 802345c:	bf58      	it	pl
 802345e:	6962      	ldrpl	r2, [r4, #20]
 8023460:	60a2      	str	r2, [r4, #8]
 8023462:	e7f4      	b.n	802344e <__swsetup_r+0x8e>
 8023464:	2000      	movs	r0, #0
 8023466:	e7f7      	b.n	8023458 <__swsetup_r+0x98>
 8023468:	240007b4 	.word	0x240007b4

0802346c <_raise_r>:
 802346c:	291f      	cmp	r1, #31
 802346e:	b538      	push	{r3, r4, r5, lr}
 8023470:	4605      	mov	r5, r0
 8023472:	460c      	mov	r4, r1
 8023474:	d904      	bls.n	8023480 <_raise_r+0x14>
 8023476:	2316      	movs	r3, #22
 8023478:	6003      	str	r3, [r0, #0]
 802347a:	f04f 30ff 	mov.w	r0, #4294967295
 802347e:	bd38      	pop	{r3, r4, r5, pc}
 8023480:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023482:	b112      	cbz	r2, 802348a <_raise_r+0x1e>
 8023484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023488:	b94b      	cbnz	r3, 802349e <_raise_r+0x32>
 802348a:	4628      	mov	r0, r5
 802348c:	f000 f830 	bl	80234f0 <_getpid_r>
 8023490:	4622      	mov	r2, r4
 8023492:	4601      	mov	r1, r0
 8023494:	4628      	mov	r0, r5
 8023496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802349a:	f000 b817 	b.w	80234cc <_kill_r>
 802349e:	2b01      	cmp	r3, #1
 80234a0:	d00a      	beq.n	80234b8 <_raise_r+0x4c>
 80234a2:	1c59      	adds	r1, r3, #1
 80234a4:	d103      	bne.n	80234ae <_raise_r+0x42>
 80234a6:	2316      	movs	r3, #22
 80234a8:	6003      	str	r3, [r0, #0]
 80234aa:	2001      	movs	r0, #1
 80234ac:	e7e7      	b.n	802347e <_raise_r+0x12>
 80234ae:	2100      	movs	r1, #0
 80234b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80234b4:	4620      	mov	r0, r4
 80234b6:	4798      	blx	r3
 80234b8:	2000      	movs	r0, #0
 80234ba:	e7e0      	b.n	802347e <_raise_r+0x12>

080234bc <raise>:
 80234bc:	4b02      	ldr	r3, [pc, #8]	@ (80234c8 <raise+0xc>)
 80234be:	4601      	mov	r1, r0
 80234c0:	6818      	ldr	r0, [r3, #0]
 80234c2:	f7ff bfd3 	b.w	802346c <_raise_r>
 80234c6:	bf00      	nop
 80234c8:	240007b4 	.word	0x240007b4

080234cc <_kill_r>:
 80234cc:	b538      	push	{r3, r4, r5, lr}
 80234ce:	4d07      	ldr	r5, [pc, #28]	@ (80234ec <_kill_r+0x20>)
 80234d0:	2300      	movs	r3, #0
 80234d2:	4604      	mov	r4, r0
 80234d4:	4608      	mov	r0, r1
 80234d6:	4611      	mov	r1, r2
 80234d8:	602b      	str	r3, [r5, #0]
 80234da:	f7f6 f845 	bl	8019568 <_kill>
 80234de:	1c43      	adds	r3, r0, #1
 80234e0:	d102      	bne.n	80234e8 <_kill_r+0x1c>
 80234e2:	682b      	ldr	r3, [r5, #0]
 80234e4:	b103      	cbz	r3, 80234e8 <_kill_r+0x1c>
 80234e6:	6023      	str	r3, [r4, #0]
 80234e8:	bd38      	pop	{r3, r4, r5, pc}
 80234ea:	bf00      	nop
 80234ec:	240190bc 	.word	0x240190bc

080234f0 <_getpid_r>:
 80234f0:	f7f6 b832 	b.w	8019558 <_getpid>

080234f4 <_realloc_r>:
 80234f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234f8:	4680      	mov	r8, r0
 80234fa:	4615      	mov	r5, r2
 80234fc:	460c      	mov	r4, r1
 80234fe:	b921      	cbnz	r1, 802350a <_realloc_r+0x16>
 8023500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023504:	4611      	mov	r1, r2
 8023506:	f7fe bd57 	b.w	8021fb8 <_malloc_r>
 802350a:	b92a      	cbnz	r2, 8023518 <_realloc_r+0x24>
 802350c:	f7ff f9c8 	bl	80228a0 <_free_r>
 8023510:	2400      	movs	r4, #0
 8023512:	4620      	mov	r0, r4
 8023514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023518:	f000 f89e 	bl	8023658 <_malloc_usable_size_r>
 802351c:	4285      	cmp	r5, r0
 802351e:	4606      	mov	r6, r0
 8023520:	d802      	bhi.n	8023528 <_realloc_r+0x34>
 8023522:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8023526:	d8f4      	bhi.n	8023512 <_realloc_r+0x1e>
 8023528:	4629      	mov	r1, r5
 802352a:	4640      	mov	r0, r8
 802352c:	f7fe fd44 	bl	8021fb8 <_malloc_r>
 8023530:	4607      	mov	r7, r0
 8023532:	2800      	cmp	r0, #0
 8023534:	d0ec      	beq.n	8023510 <_realloc_r+0x1c>
 8023536:	42b5      	cmp	r5, r6
 8023538:	462a      	mov	r2, r5
 802353a:	4621      	mov	r1, r4
 802353c:	bf28      	it	cs
 802353e:	4632      	movcs	r2, r6
 8023540:	f7ff f999 	bl	8022876 <memcpy>
 8023544:	4621      	mov	r1, r4
 8023546:	4640      	mov	r0, r8
 8023548:	f7ff f9aa 	bl	80228a0 <_free_r>
 802354c:	463c      	mov	r4, r7
 802354e:	e7e0      	b.n	8023512 <_realloc_r+0x1e>

08023550 <__swhatbuf_r>:
 8023550:	b570      	push	{r4, r5, r6, lr}
 8023552:	460c      	mov	r4, r1
 8023554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023558:	2900      	cmp	r1, #0
 802355a:	b096      	sub	sp, #88	@ 0x58
 802355c:	4615      	mov	r5, r2
 802355e:	461e      	mov	r6, r3
 8023560:	da0d      	bge.n	802357e <__swhatbuf_r+0x2e>
 8023562:	89a3      	ldrh	r3, [r4, #12]
 8023564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023568:	f04f 0100 	mov.w	r1, #0
 802356c:	bf14      	ite	ne
 802356e:	2340      	movne	r3, #64	@ 0x40
 8023570:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023574:	2000      	movs	r0, #0
 8023576:	6031      	str	r1, [r6, #0]
 8023578:	602b      	str	r3, [r5, #0]
 802357a:	b016      	add	sp, #88	@ 0x58
 802357c:	bd70      	pop	{r4, r5, r6, pc}
 802357e:	466a      	mov	r2, sp
 8023580:	f000 f848 	bl	8023614 <_fstat_r>
 8023584:	2800      	cmp	r0, #0
 8023586:	dbec      	blt.n	8023562 <__swhatbuf_r+0x12>
 8023588:	9901      	ldr	r1, [sp, #4]
 802358a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802358e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023592:	4259      	negs	r1, r3
 8023594:	4159      	adcs	r1, r3
 8023596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802359a:	e7eb      	b.n	8023574 <__swhatbuf_r+0x24>

0802359c <__smakebuf_r>:
 802359c:	898b      	ldrh	r3, [r1, #12]
 802359e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80235a0:	079d      	lsls	r5, r3, #30
 80235a2:	4606      	mov	r6, r0
 80235a4:	460c      	mov	r4, r1
 80235a6:	d507      	bpl.n	80235b8 <__smakebuf_r+0x1c>
 80235a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80235ac:	6023      	str	r3, [r4, #0]
 80235ae:	6123      	str	r3, [r4, #16]
 80235b0:	2301      	movs	r3, #1
 80235b2:	6163      	str	r3, [r4, #20]
 80235b4:	b003      	add	sp, #12
 80235b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80235b8:	ab01      	add	r3, sp, #4
 80235ba:	466a      	mov	r2, sp
 80235bc:	f7ff ffc8 	bl	8023550 <__swhatbuf_r>
 80235c0:	9f00      	ldr	r7, [sp, #0]
 80235c2:	4605      	mov	r5, r0
 80235c4:	4639      	mov	r1, r7
 80235c6:	4630      	mov	r0, r6
 80235c8:	f7fe fcf6 	bl	8021fb8 <_malloc_r>
 80235cc:	b948      	cbnz	r0, 80235e2 <__smakebuf_r+0x46>
 80235ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80235d2:	059a      	lsls	r2, r3, #22
 80235d4:	d4ee      	bmi.n	80235b4 <__smakebuf_r+0x18>
 80235d6:	f023 0303 	bic.w	r3, r3, #3
 80235da:	f043 0302 	orr.w	r3, r3, #2
 80235de:	81a3      	strh	r3, [r4, #12]
 80235e0:	e7e2      	b.n	80235a8 <__smakebuf_r+0xc>
 80235e2:	89a3      	ldrh	r3, [r4, #12]
 80235e4:	6020      	str	r0, [r4, #0]
 80235e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80235ea:	81a3      	strh	r3, [r4, #12]
 80235ec:	9b01      	ldr	r3, [sp, #4]
 80235ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80235f2:	b15b      	cbz	r3, 802360c <__smakebuf_r+0x70>
 80235f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80235f8:	4630      	mov	r0, r6
 80235fa:	f000 f81d 	bl	8023638 <_isatty_r>
 80235fe:	b128      	cbz	r0, 802360c <__smakebuf_r+0x70>
 8023600:	89a3      	ldrh	r3, [r4, #12]
 8023602:	f023 0303 	bic.w	r3, r3, #3
 8023606:	f043 0301 	orr.w	r3, r3, #1
 802360a:	81a3      	strh	r3, [r4, #12]
 802360c:	89a3      	ldrh	r3, [r4, #12]
 802360e:	431d      	orrs	r5, r3
 8023610:	81a5      	strh	r5, [r4, #12]
 8023612:	e7cf      	b.n	80235b4 <__smakebuf_r+0x18>

08023614 <_fstat_r>:
 8023614:	b538      	push	{r3, r4, r5, lr}
 8023616:	4d07      	ldr	r5, [pc, #28]	@ (8023634 <_fstat_r+0x20>)
 8023618:	2300      	movs	r3, #0
 802361a:	4604      	mov	r4, r0
 802361c:	4608      	mov	r0, r1
 802361e:	4611      	mov	r1, r2
 8023620:	602b      	str	r3, [r5, #0]
 8023622:	f7f5 ffe5 	bl	80195f0 <_fstat>
 8023626:	1c43      	adds	r3, r0, #1
 8023628:	d102      	bne.n	8023630 <_fstat_r+0x1c>
 802362a:	682b      	ldr	r3, [r5, #0]
 802362c:	b103      	cbz	r3, 8023630 <_fstat_r+0x1c>
 802362e:	6023      	str	r3, [r4, #0]
 8023630:	bd38      	pop	{r3, r4, r5, pc}
 8023632:	bf00      	nop
 8023634:	240190bc 	.word	0x240190bc

08023638 <_isatty_r>:
 8023638:	b538      	push	{r3, r4, r5, lr}
 802363a:	4d06      	ldr	r5, [pc, #24]	@ (8023654 <_isatty_r+0x1c>)
 802363c:	2300      	movs	r3, #0
 802363e:	4604      	mov	r4, r0
 8023640:	4608      	mov	r0, r1
 8023642:	602b      	str	r3, [r5, #0]
 8023644:	f7f5 ffe4 	bl	8019610 <_isatty>
 8023648:	1c43      	adds	r3, r0, #1
 802364a:	d102      	bne.n	8023652 <_isatty_r+0x1a>
 802364c:	682b      	ldr	r3, [r5, #0]
 802364e:	b103      	cbz	r3, 8023652 <_isatty_r+0x1a>
 8023650:	6023      	str	r3, [r4, #0]
 8023652:	bd38      	pop	{r3, r4, r5, pc}
 8023654:	240190bc 	.word	0x240190bc

08023658 <_malloc_usable_size_r>:
 8023658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802365c:	1f18      	subs	r0, r3, #4
 802365e:	2b00      	cmp	r3, #0
 8023660:	bfbc      	itt	lt
 8023662:	580b      	ldrlt	r3, [r1, r0]
 8023664:	18c0      	addlt	r0, r0, r3
 8023666:	4770      	bx	lr

08023668 <_init>:
 8023668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802366a:	bf00      	nop
 802366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802366e:	bc08      	pop	{r3}
 8023670:	469e      	mov	lr, r3
 8023672:	4770      	bx	lr

08023674 <_fini>:
 8023674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023676:	bf00      	nop
 8023678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802367a:	bc08      	pop	{r3}
 802367c:	469e      	mov	lr, r3
 802367e:	4770      	bx	lr

Disassembly of section .iram:

08023680 <mg_ota_boot>:
MG_IRAM void mg_ota_boot(void) {
 8023680:	b580      	push	{r7, lr}
 8023682:	b088      	sub	sp, #32
 8023684:	af00      	add	r7, sp, #0
  struct mg_otadata curr = mg_otadata(MG_FIRMWARE_CURRENT);
 8023686:	f107 0310 	add.w	r3, r7, #16
 802368a:	2100      	movs	r1, #0
 802368c:	4618      	mov	r0, r3
 802368e:	f000 fa87 	bl	8023ba0 <mg_otadata>
  struct mg_otadata prev = mg_otadata(MG_FIRMWARE_PREVIOUS);
 8023692:	463b      	mov	r3, r7
 8023694:	2101      	movs	r1, #1
 8023696:	4618      	mov	r0, r3
 8023698:	f000 fa82 	bl	8023ba0 <mg_otadata>
  if (curr.status == MG_OTA_FIRST_BOOT) {
 802369c:	69fb      	ldr	r3, [r7, #28]
 802369e:	2b01      	cmp	r3, #1
 80236a0:	d119      	bne.n	80236d6 <mg_ota_boot+0x56>
    if (prev.status == MG_OTA_UNAVAILABLE) {
 80236a2:	68fb      	ldr	r3, [r7, #12]
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	d10a      	bne.n	80236be <mg_ota_boot+0x3e>
      prev.status = MG_OTA_COMMITTED;
 80236a8:	2303      	movs	r3, #3
 80236aa:	60fb      	str	r3, [r7, #12]
      mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_PREVIOUS), &prev, sizeof(prev));
 80236ac:	2001      	movs	r0, #1
 80236ae:	f000 fa53 	bl	8023b58 <mg_fwkey>
 80236b2:	4601      	mov	r1, r0
 80236b4:	463a      	mov	r2, r7
 80236b6:	2310      	movs	r3, #16
 80236b8:	2000      	movs	r0, #0
 80236ba:	f7dd ffad 	bl	8001618 <mg_flash_save>
    curr.status = MG_OTA_UNCOMMITTED;
 80236be:	2302      	movs	r3, #2
 80236c0:	61fb      	str	r3, [r7, #28]
    mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_CURRENT), &curr, sizeof(curr));
 80236c2:	2000      	movs	r0, #0
 80236c4:	f000 fa48 	bl	8023b58 <mg_fwkey>
 80236c8:	4601      	mov	r1, r0
 80236ca:	f107 0210 	add.w	r2, r7, #16
 80236ce:	2310      	movs	r3, #16
 80236d0:	2000      	movs	r0, #0
 80236d2:	f7dd ffa1 	bl	8001618 <mg_flash_save>
}
 80236d6:	bf00      	nop
 80236d8:	3720      	adds	r7, #32
 80236da:	46bd      	mov	sp, r7
 80236dc:	bd80      	pop	{r7, pc}

080236de <mg_flash_start>:
MG_IRAM void *mg_flash_start(void) {
 80236de:	b480      	push	{r7}
 80236e0:	af00      	add	r7, sp, #0
  return (void *) 0x08000000;
 80236e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
}
 80236e6:	4618      	mov	r0, r3
 80236e8:	46bd      	mov	sp, r7
 80236ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236ee:	4770      	bx	lr

080236f0 <mg_flash_size>:
MG_IRAM size_t mg_flash_size(void) {
 80236f0:	b480      	push	{r7}
 80236f2:	af00      	add	r7, sp, #0
  return MG_REG(FLASH_SIZE_REG) * 1024;
 80236f4:	4b03      	ldr	r3, [pc, #12]	@ (8023704 <mg_flash_size+0x14>)
 80236f6:	681b      	ldr	r3, [r3, #0]
 80236f8:	029b      	lsls	r3, r3, #10
}
 80236fa:	4618      	mov	r0, r3
 80236fc:	46bd      	mov	sp, r7
 80236fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023702:	4770      	bx	lr
 8023704:	1ff1e880 	.word	0x1ff1e880

08023708 <mg_flash_sector_size>:
MG_IRAM size_t mg_flash_sector_size(void) {
 8023708:	b480      	push	{r7}
 802370a:	af00      	add	r7, sp, #0
  return 128 * 1024;  // 128k
 802370c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
}
 8023710:	4618      	mov	r0, r3
 8023712:	46bd      	mov	sp, r7
 8023714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023718:	4770      	bx	lr

0802371a <mg_flash_write_align>:
MG_IRAM size_t mg_flash_write_align(void) {
 802371a:	b480      	push	{r7}
 802371c:	af00      	add	r7, sp, #0
  return 32;  // 256 bit
 802371e:	2320      	movs	r3, #32
}
 8023720:	4618      	mov	r0, r3
 8023722:	46bd      	mov	sp, r7
 8023724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023728:	4770      	bx	lr

0802372a <mg_flash_bank>:
MG_IRAM int mg_flash_bank(void) {
 802372a:	b580      	push	{r7, lr}
 802372c:	af00      	add	r7, sp, #0
  if (mg_flash_size() < 2 * 1024 * 1024) return 0;  // No dual bank support
 802372e:	f7ff ffdf 	bl	80236f0 <mg_flash_size>
 8023732:	4603      	mov	r3, r0
 8023734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8023738:	d201      	bcs.n	802373e <mg_flash_bank+0x14>
 802373a:	2300      	movs	r3, #0
 802373c:	e006      	b.n	802374c <mg_flash_bank+0x22>
  return MG_REG(FLASH_BASE1 + FLASH_OPTCR) & MG_BIT(31) ? 2 : 1;
 802373e:	4b04      	ldr	r3, [pc, #16]	@ (8023750 <mg_flash_bank+0x26>)
 8023740:	681b      	ldr	r3, [r3, #0]
 8023742:	2b00      	cmp	r3, #0
 8023744:	da01      	bge.n	802374a <mg_flash_bank+0x20>
 8023746:	2302      	movs	r3, #2
 8023748:	e000      	b.n	802374c <mg_flash_bank+0x22>
 802374a:	2301      	movs	r3, #1
}
 802374c:	4618      	mov	r0, r3
 802374e:	bd80      	pop	{r7, pc}
 8023750:	52002018 	.word	0x52002018

08023754 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
 8023754:	b580      	push	{r7, lr}
 8023756:	af00      	add	r7, sp, #0
  if (unlocked == false) {
 8023758:	4b11      	ldr	r3, [pc, #68]	@ (80237a0 <flash_unlock+0x4c>)
 802375a:	781b      	ldrb	r3, [r3, #0]
 802375c:	f083 0301 	eor.w	r3, r3, #1
 8023760:	b2db      	uxtb	r3, r3
 8023762:	2b00      	cmp	r3, #0
 8023764:	d019      	beq.n	802379a <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
 8023766:	4b0f      	ldr	r3, [pc, #60]	@ (80237a4 <flash_unlock+0x50>)
 8023768:	4a0f      	ldr	r2, [pc, #60]	@ (80237a8 <flash_unlock+0x54>)
 802376a:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
 802376c:	4b0d      	ldr	r3, [pc, #52]	@ (80237a4 <flash_unlock+0x50>)
 802376e:	4a0f      	ldr	r2, [pc, #60]	@ (80237ac <flash_unlock+0x58>)
 8023770:	601a      	str	r2, [r3, #0]
    if (mg_flash_bank() > 0) {
 8023772:	f7ff ffda 	bl	802372a <mg_flash_bank>
 8023776:	4603      	mov	r3, r0
 8023778:	2b00      	cmp	r3, #0
 802377a:	dd05      	ble.n	8023788 <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
 802377c:	4b0c      	ldr	r3, [pc, #48]	@ (80237b0 <flash_unlock+0x5c>)
 802377e:	4a0a      	ldr	r2, [pc, #40]	@ (80237a8 <flash_unlock+0x54>)
 8023780:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
 8023782:	4b0b      	ldr	r3, [pc, #44]	@ (80237b0 <flash_unlock+0x5c>)
 8023784:	4a09      	ldr	r2, [pc, #36]	@ (80237ac <flash_unlock+0x58>)
 8023786:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
 8023788:	4b0a      	ldr	r3, [pc, #40]	@ (80237b4 <flash_unlock+0x60>)
 802378a:	4a0b      	ldr	r2, [pc, #44]	@ (80237b8 <flash_unlock+0x64>)
 802378c:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
 802378e:	4b09      	ldr	r3, [pc, #36]	@ (80237b4 <flash_unlock+0x60>)
 8023790:	4a0a      	ldr	r2, [pc, #40]	@ (80237bc <flash_unlock+0x68>)
 8023792:	601a      	str	r2, [r3, #0]
    unlocked = true;
 8023794:	4b02      	ldr	r3, [pc, #8]	@ (80237a0 <flash_unlock+0x4c>)
 8023796:	2201      	movs	r2, #1
 8023798:	701a      	strb	r2, [r3, #0]
}
 802379a:	bf00      	nop
 802379c:	bd80      	pop	{r7, pc}
 802379e:	bf00      	nop
 80237a0:	24005ca0 	.word	0x24005ca0
 80237a4:	52002004 	.word	0x52002004
 80237a8:	45670123 	.word	0x45670123
 80237ac:	cdef89ab 	.word	0xcdef89ab
 80237b0:	52002104 	.word	0x52002104
 80237b4:	52002008 	.word	0x52002008
 80237b8:	08192a3b 	.word	0x08192a3b
 80237bc:	4c5d6e7f 	.word	0x4c5d6e7f

080237c0 <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
 80237c0:	b590      	push	{r4, r7, lr}
 80237c2:	b087      	sub	sp, #28
 80237c4:	af00      	add	r7, sp, #0
 80237c6:	6078      	str	r0, [r7, #4]
  char *base = (char *) mg_flash_start(), *end = base + mg_flash_size();
 80237c8:	f7ff ff89 	bl	80236de <mg_flash_start>
 80237cc:	6178      	str	r0, [r7, #20]
 80237ce:	f7ff ff8f 	bl	80236f0 <mg_flash_size>
 80237d2:	4602      	mov	r2, r0
 80237d4:	697b      	ldr	r3, [r7, #20]
 80237d6:	4413      	add	r3, r2
 80237d8:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
 80237da:	687b      	ldr	r3, [r7, #4]
 80237dc:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % mg_flash_sector_size()) == 0;
 80237de:	68fa      	ldr	r2, [r7, #12]
 80237e0:	697b      	ldr	r3, [r7, #20]
 80237e2:	429a      	cmp	r2, r3
 80237e4:	d313      	bcc.n	802380e <flash_page_start+0x4e>
 80237e6:	68fa      	ldr	r2, [r7, #12]
 80237e8:	693b      	ldr	r3, [r7, #16]
 80237ea:	429a      	cmp	r2, r3
 80237ec:	d20f      	bcs.n	802380e <flash_page_start+0x4e>
 80237ee:	68fa      	ldr	r2, [r7, #12]
 80237f0:	697b      	ldr	r3, [r7, #20]
 80237f2:	1ad3      	subs	r3, r2, r3
 80237f4:	461c      	mov	r4, r3
 80237f6:	f7ff ff87 	bl	8023708 <mg_flash_sector_size>
 80237fa:	4603      	mov	r3, r0
 80237fc:	fbb4 f2f3 	udiv	r2, r4, r3
 8023800:	fb02 f303 	mul.w	r3, r2, r3
 8023804:	1ae3      	subs	r3, r4, r3
 8023806:	2b00      	cmp	r3, #0
 8023808:	d101      	bne.n	802380e <flash_page_start+0x4e>
 802380a:	2301      	movs	r3, #1
 802380c:	e000      	b.n	8023810 <flash_page_start+0x50>
 802380e:	2300      	movs	r3, #0
 8023810:	f003 0301 	and.w	r3, r3, #1
 8023814:	b2db      	uxtb	r3, r3
}
 8023816:	4618      	mov	r0, r3
 8023818:	371c      	adds	r7, #28
 802381a:	46bd      	mov	sp, r7
 802381c:	bd90      	pop	{r4, r7, pc}

0802381e <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
 802381e:	b480      	push	{r7}
 8023820:	b083      	sub	sp, #12
 8023822:	af00      	add	r7, sp, #0
 8023824:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
 8023826:	687b      	ldr	r3, [r7, #4]
 8023828:	3310      	adds	r3, #16
 802382a:	681a      	ldr	r2, [r3, #0]
 802382c:	4b06      	ldr	r3, [pc, #24]	@ (8023848 <flash_is_err+0x2a>)
 802382e:	4013      	ands	r3, r2
 8023830:	2b00      	cmp	r3, #0
 8023832:	bf14      	ite	ne
 8023834:	2301      	movne	r3, #1
 8023836:	2300      	moveq	r3, #0
 8023838:	b2db      	uxtb	r3, r3
}
 802383a:	4618      	mov	r0, r3
 802383c:	370c      	adds	r7, #12
 802383e:	46bd      	mov	sp, r7
 8023840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023844:	4770      	bx	lr
 8023846:	bf00      	nop
 8023848:	0ffe0000 	.word	0x0ffe0000

0802384c <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
 802384c:	b480      	push	{r7}
 802384e:	b083      	sub	sp, #12
 8023850:	af00      	add	r7, sp, #0
 8023852:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
 8023854:	bf00      	nop
 8023856:	687b      	ldr	r3, [r7, #4]
 8023858:	3310      	adds	r3, #16
 802385a:	681b      	ldr	r3, [r3, #0]
 802385c:	f003 0305 	and.w	r3, r3, #5
 8023860:	2b00      	cmp	r3, #0
 8023862:	d1f8      	bne.n	8023856 <flash_wait+0xa>
}
 8023864:	bf00      	nop
 8023866:	bf00      	nop
 8023868:	370c      	adds	r7, #12
 802386a:	46bd      	mov	sp, r7
 802386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023870:	4770      	bx	lr

08023872 <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
 8023872:	b580      	push	{r7, lr}
 8023874:	b082      	sub	sp, #8
 8023876:	af00      	add	r7, sp, #0
 8023878:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
 802387a:	6878      	ldr	r0, [r7, #4]
 802387c:	f7ff ffe6 	bl	802384c <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
 8023880:	687b      	ldr	r3, [r7, #4]
 8023882:	3314      	adds	r3, #20
 8023884:	461a      	mov	r2, r3
 8023886:	4b03      	ldr	r3, [pc, #12]	@ (8023894 <flash_clear_err+0x22>)
 8023888:	6013      	str	r3, [r2, #0]
}
 802388a:	bf00      	nop
 802388c:	3708      	adds	r7, #8
 802388e:	46bd      	mov	sp, r7
 8023890:	bd80      	pop	{r7, pc}
 8023892:	bf00      	nop
 8023894:	07ff0000 	.word	0x07ff0000

08023898 <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
 8023898:	b480      	push	{r7}
 802389a:	b083      	sub	sp, #12
 802389c:	af00      	add	r7, sp, #0
 802389e:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	3318      	adds	r3, #24
 80238a4:	681b      	ldr	r3, [r3, #0]
 80238a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80238aa:	2b00      	cmp	r3, #0
 80238ac:	bf14      	ite	ne
 80238ae:	2301      	movne	r3, #1
 80238b0:	2300      	moveq	r3, #0
 80238b2:	b2db      	uxtb	r3, r3
}
 80238b4:	4618      	mov	r0, r3
 80238b6:	370c      	adds	r7, #12
 80238b8:	46bd      	mov	sp, r7
 80238ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238be:	4770      	bx	lr

080238c0 <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
 80238c0:	b580      	push	{r7, lr}
 80238c2:	b084      	sub	sp, #16
 80238c4:	af00      	add	r7, sp, #0
 80238c6:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) mg_flash_start();
 80238c8:	f7ff ff09 	bl	80236de <mg_flash_start>
 80238cc:	4602      	mov	r2, r0
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	1a9b      	subs	r3, r3, r2
 80238d2:	60fb      	str	r3, [r7, #12]
  if (mg_flash_bank() == 0) return FLASH_BASE1;
 80238d4:	f7ff ff29 	bl	802372a <mg_flash_bank>
 80238d8:	4603      	mov	r3, r0
 80238da:	2b00      	cmp	r3, #0
 80238dc:	d101      	bne.n	80238e2 <flash_bank+0x22>
 80238de:	4b08      	ldr	r3, [pc, #32]	@ (8023900 <flash_bank+0x40>)
 80238e0:	e009      	b.n	80238f6 <flash_bank+0x36>
  return ofs < mg_flash_size() / 2 ? FLASH_BASE1 : FLASH_BASE2;
 80238e2:	f7ff ff05 	bl	80236f0 <mg_flash_size>
 80238e6:	4603      	mov	r3, r0
 80238e8:	085b      	lsrs	r3, r3, #1
 80238ea:	68fa      	ldr	r2, [r7, #12]
 80238ec:	429a      	cmp	r2, r3
 80238ee:	d201      	bcs.n	80238f4 <flash_bank+0x34>
 80238f0:	4b03      	ldr	r3, [pc, #12]	@ (8023900 <flash_bank+0x40>)
 80238f2:	e000      	b.n	80238f6 <flash_bank+0x36>
 80238f4:	4b03      	ldr	r3, [pc, #12]	@ (8023904 <flash_bank+0x44>)
}
 80238f6:	4618      	mov	r0, r3
 80238f8:	3710      	adds	r7, #16
 80238fa:	46bd      	mov	sp, r7
 80238fc:	bd80      	pop	{r7, pc}
 80238fe:	bf00      	nop
 8023900:	52002000 	.word	0x52002000
 8023904:	52002100 	.word	0x52002100

08023908 <mg_flash_erase>:
MG_IRAM bool mg_flash_erase(void *addr) {
 8023908:	b580      	push	{r7, lr}
 802390a:	b088      	sub	sp, #32
 802390c:	af00      	add	r7, sp, #0
 802390e:	6078      	str	r0, [r7, #4]
  bool ok = false;
 8023910:	2300      	movs	r3, #0
 8023912:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
 8023914:	6878      	ldr	r0, [r7, #4]
 8023916:	f7ff ff53 	bl	80237c0 <flash_page_start>
 802391a:	4603      	mov	r3, r0
 802391c:	f083 0301 	eor.w	r3, r3, #1
 8023920:	b2db      	uxtb	r3, r3
 8023922:	2b00      	cmp	r3, #0
 8023924:	d155      	bne.n	80239d2 <mg_flash_erase+0xca>
    uintptr_t diff = (char *) addr - (char *) mg_flash_start();
 8023926:	f7ff feda 	bl	80236de <mg_flash_start>
 802392a:	4602      	mov	r2, r0
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	1a9b      	subs	r3, r3, r2
 8023930:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / mg_flash_sector_size();
 8023932:	f7ff fee9 	bl	8023708 <mg_flash_sector_size>
 8023936:	4602      	mov	r2, r0
 8023938:	697b      	ldr	r3, [r7, #20]
 802393a:	fbb3 f3f2 	udiv	r3, r3, r2
 802393e:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
 8023940:	6878      	ldr	r0, [r7, #4]
 8023942:	f7ff ffbd 	bl	80238c0 <flash_bank>
 8023946:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
 8023948:	693b      	ldr	r3, [r7, #16]
 802394a:	330c      	adds	r3, #12
 802394c:	681b      	ldr	r3, [r3, #0]
 802394e:	60fb      	str	r3, [r7, #12]
    flash_unlock();
 8023950:	f7ff ff00 	bl	8023754 <flash_unlock>
    if (sector > 7) sector -= 8;
 8023954:	69bb      	ldr	r3, [r7, #24]
 8023956:	2b07      	cmp	r3, #7
 8023958:	d902      	bls.n	8023960 <mg_flash_erase+0x58>
 802395a:	69bb      	ldr	r3, [r7, #24]
 802395c:	3b08      	subs	r3, #8
 802395e:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
 8023960:	6938      	ldr	r0, [r7, #16]
 8023962:	f7ff ff86 	bl	8023872 <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
 8023966:	693b      	ldr	r3, [r7, #16]
 8023968:	330c      	adds	r3, #12
 802396a:	461a      	mov	r2, r3
 802396c:	2320      	movs	r3, #32
 802396e:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
 8023970:	693b      	ldr	r3, [r7, #16]
 8023972:	330c      	adds	r3, #12
 8023974:	681a      	ldr	r2, [r3, #0]
 8023976:	69bb      	ldr	r3, [r7, #24]
 8023978:	021b      	lsls	r3, r3, #8
 802397a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 802397e:	6939      	ldr	r1, [r7, #16]
 8023980:	310c      	adds	r1, #12
 8023982:	4313      	orrs	r3, r2
 8023984:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
 8023986:	693b      	ldr	r3, [r7, #16]
 8023988:	330c      	adds	r3, #12
 802398a:	681b      	ldr	r3, [r3, #0]
 802398c:	693a      	ldr	r2, [r7, #16]
 802398e:	320c      	adds	r2, #12
 8023990:	f043 0304 	orr.w	r3, r3, #4
 8023994:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
 8023996:	693b      	ldr	r3, [r7, #16]
 8023998:	330c      	adds	r3, #12
 802399a:	681b      	ldr	r3, [r3, #0]
 802399c:	693a      	ldr	r2, [r7, #16]
 802399e:	320c      	adds	r2, #12
 80239a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80239a4:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
 80239a6:	6938      	ldr	r0, [r7, #16]
 80239a8:	f7ff ff39 	bl	802381e <flash_is_err>
 80239ac:	4603      	mov	r3, r0
 80239ae:	2b00      	cmp	r3, #0
 80239b0:	bf14      	ite	ne
 80239b2:	2301      	movne	r3, #1
 80239b4:	2300      	moveq	r3, #0
 80239b6:	b2db      	uxtb	r3, r3
 80239b8:	f083 0301 	eor.w	r3, r3, #1
 80239bc:	b2db      	uxtb	r3, r3
 80239be:	77fb      	strb	r3, [r7, #31]
 80239c0:	7ffb      	ldrb	r3, [r7, #31]
 80239c2:	f003 0301 	and.w	r3, r3, #1
 80239c6:	77fb      	strb	r3, [r7, #31]
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
 80239c8:	693b      	ldr	r3, [r7, #16]
 80239ca:	330c      	adds	r3, #12
 80239cc:	461a      	mov	r2, r3
 80239ce:	68fb      	ldr	r3, [r7, #12]
 80239d0:	6013      	str	r3, [r2, #0]
  return ok;
 80239d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80239d4:	4618      	mov	r0, r3
 80239d6:	3720      	adds	r7, #32
 80239d8:	46bd      	mov	sp, r7
 80239da:	bd80      	pop	{r7, pc}

080239dc <mg_flash_swap_bank>:
MG_IRAM bool mg_flash_swap_bank(size_t size) {
 80239dc:	b580      	push	{r7, lr}
 80239de:	b084      	sub	sp, #16
 80239e0:	af00      	add	r7, sp, #0
 80239e2:	6078      	str	r0, [r7, #4]
  if (mg_flash_bank() == 0) return true;
 80239e4:	f7ff fea1 	bl	802372a <mg_flash_bank>
 80239e8:	4603      	mov	r3, r0
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d101      	bne.n	80239f2 <mg_flash_swap_bank+0x16>
 80239ee:	2301      	movs	r3, #1
 80239f0:	e02e      	b.n	8023a50 <mg_flash_swap_bank+0x74>
  uint32_t bank = FLASH_BASE1;
 80239f2:	4b19      	ldr	r3, [pc, #100]	@ (8023a58 <mg_flash_swap_bank+0x7c>)
 80239f4:	60fb      	str	r3, [r7, #12]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
 80239f6:	68f8      	ldr	r0, [r7, #12]
 80239f8:	f7ff ff4e 	bl	8023898 <flash_bank_is_swapped>
 80239fc:	4603      	mov	r3, r0
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	d001      	beq.n	8023a06 <mg_flash_swap_bank+0x2a>
 8023a02:	2300      	movs	r3, #0
 8023a04:	e001      	b.n	8023a0a <mg_flash_swap_bank+0x2e>
 8023a06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023a0a:	60bb      	str	r3, [r7, #8]
  flash_unlock();
 8023a0c:	f7ff fea2 	bl	8023754 <flash_unlock>
  flash_clear_err(bank);
 8023a10:	68f8      	ldr	r0, [r7, #12]
 8023a12:	f7ff ff2e 	bl	8023872 <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
 8023a16:	68fb      	ldr	r3, [r7, #12]
 8023a18:	3320      	adds	r3, #32
 8023a1a:	681b      	ldr	r3, [r3, #0]
 8023a1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8023a20:	68fb      	ldr	r3, [r7, #12]
 8023a22:	3320      	adds	r3, #32
 8023a24:	4619      	mov	r1, r3
 8023a26:	68bb      	ldr	r3, [r7, #8]
 8023a28:	4313      	orrs	r3, r2
 8023a2a:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
 8023a2c:	68fb      	ldr	r3, [r7, #12]
 8023a2e:	3318      	adds	r3, #24
 8023a30:	681b      	ldr	r3, [r3, #0]
 8023a32:	68fa      	ldr	r2, [r7, #12]
 8023a34:	3218      	adds	r2, #24
 8023a36:	f043 0302 	orr.w	r3, r3, #2
 8023a3a:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
 8023a3c:	bf00      	nop
 8023a3e:	68fb      	ldr	r3, [r7, #12]
 8023a40:	331c      	adds	r3, #28
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8023a48:	68ba      	ldr	r2, [r7, #8]
 8023a4a:	429a      	cmp	r2, r3
 8023a4c:	d1f7      	bne.n	8023a3e <mg_flash_swap_bank+0x62>
  return true;
 8023a4e:	2301      	movs	r3, #1
}
 8023a50:	4618      	mov	r0, r3
 8023a52:	3710      	adds	r7, #16
 8023a54:	46bd      	mov	sp, r7
 8023a56:	bd80      	pop	{r7, pc}
 8023a58:	52002000 	.word	0x52002000

08023a5c <mg_flash_write>:
MG_IRAM bool mg_flash_write(void *addr, const void *buf, size_t len) {
 8023a5c:	b580      	push	{r7, lr}
 8023a5e:	b08a      	sub	sp, #40	@ 0x28
 8023a60:	af00      	add	r7, sp, #0
 8023a62:	60f8      	str	r0, [r7, #12]
 8023a64:	60b9      	str	r1, [r7, #8]
 8023a66:	607a      	str	r2, [r7, #4]
  if ((len % mg_flash_write_align()) != 0) {
 8023a68:	f7ff fe57 	bl	802371a <mg_flash_write_align>
 8023a6c:	4602      	mov	r2, r0
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8023a74:	fb01 f202 	mul.w	r2, r1, r2
 8023a78:	1a9b      	subs	r3, r3, r2
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	d001      	beq.n	8023a82 <mg_flash_write+0x26>
    return false;
 8023a7e:	2300      	movs	r3, #0
 8023a80:	e057      	b.n	8023b32 <mg_flash_write+0xd6>
  uint32_t bank = flash_bank(addr);
 8023a82:	68f8      	ldr	r0, [r7, #12]
 8023a84:	f7ff ff1c 	bl	80238c0 <flash_bank>
 8023a88:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
 8023a8a:	68fb      	ldr	r3, [r7, #12]
 8023a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
 8023a8e:	68bb      	ldr	r3, [r7, #8]
 8023a90:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
 8023a92:	68ba      	ldr	r2, [r7, #8]
 8023a94:	687b      	ldr	r3, [r7, #4]
 8023a96:	4413      	add	r3, r2
 8023a98:	617b      	str	r3, [r7, #20]
  bool ok = true;
 8023a9a:	2301      	movs	r3, #1
 8023a9c:	77fb      	strb	r3, [r7, #31]
  flash_unlock();
 8023a9e:	f7ff fe59 	bl	8023754 <flash_unlock>
  flash_clear_err(bank);
 8023aa2:	69b8      	ldr	r0, [r7, #24]
 8023aa4:	f7ff fee5 	bl	8023872 <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
 8023aa8:	69bb      	ldr	r3, [r7, #24]
 8023aaa:	330c      	adds	r3, #12
 8023aac:	461a      	mov	r2, r3
 8023aae:	2302      	movs	r3, #2
 8023ab0:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
 8023ab2:	69bb      	ldr	r3, [r7, #24]
 8023ab4:	330c      	adds	r3, #12
 8023ab6:	681b      	ldr	r3, [r3, #0]
 8023ab8:	69ba      	ldr	r2, [r7, #24]
 8023aba:	320c      	adds	r2, #12
 8023abc:	f043 0320 	orr.w	r3, r3, #32
 8023ac0:	6013      	str	r3, [r2, #0]
  MG_ARM_DISABLE_IRQ();
 8023ac2:	b672      	cpsid	i
  while (ok && src < end) {
 8023ac4:	e024      	b.n	8023b10 <mg_flash_write+0xb4>
    if (flash_page_start(dst) && mg_flash_erase(dst) == false) {
 8023ac6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023ac8:	f7ff fe7a 	bl	80237c0 <flash_page_start>
 8023acc:	4603      	mov	r3, r0
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	d00b      	beq.n	8023aea <mg_flash_write+0x8e>
 8023ad2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023ad4:	f7ff ff18 	bl	8023908 <mg_flash_erase>
 8023ad8:	4603      	mov	r3, r0
 8023ada:	f083 0301 	eor.w	r3, r3, #1
 8023ade:	b2db      	uxtb	r3, r3
 8023ae0:	2b00      	cmp	r3, #0
 8023ae2:	d002      	beq.n	8023aea <mg_flash_write+0x8e>
      ok = false;
 8023ae4:	2300      	movs	r3, #0
 8023ae6:	77fb      	strb	r3, [r7, #31]
      break;
 8023ae8:	e019      	b.n	8023b1e <mg_flash_write+0xc2>
    *(volatile uint32_t *) dst++ = *src++;
 8023aea:	6a3a      	ldr	r2, [r7, #32]
 8023aec:	1d13      	adds	r3, r2, #4
 8023aee:	623b      	str	r3, [r7, #32]
 8023af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023af2:	1d19      	adds	r1, r3, #4
 8023af4:	6279      	str	r1, [r7, #36]	@ 0x24
 8023af6:	6812      	ldr	r2, [r2, #0]
 8023af8:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
 8023afa:	69b8      	ldr	r0, [r7, #24]
 8023afc:	f7ff fea6 	bl	802384c <flash_wait>
    if (flash_is_err(bank)) ok = false;
 8023b00:	69b8      	ldr	r0, [r7, #24]
 8023b02:	f7ff fe8c 	bl	802381e <flash_is_err>
 8023b06:	4603      	mov	r3, r0
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	d001      	beq.n	8023b10 <mg_flash_write+0xb4>
 8023b0c:	2300      	movs	r3, #0
 8023b0e:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
 8023b10:	7ffb      	ldrb	r3, [r7, #31]
 8023b12:	2b00      	cmp	r3, #0
 8023b14:	d003      	beq.n	8023b1e <mg_flash_write+0xc2>
 8023b16:	6a3a      	ldr	r2, [r7, #32]
 8023b18:	697b      	ldr	r3, [r7, #20]
 8023b1a:	429a      	cmp	r2, r3
 8023b1c:	d3d3      	bcc.n	8023ac6 <mg_flash_write+0x6a>
  MG_ARM_ENABLE_IRQ();
 8023b1e:	b662      	cpsie	i
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
 8023b20:	69bb      	ldr	r3, [r7, #24]
 8023b22:	330c      	adds	r3, #12
 8023b24:	681b      	ldr	r3, [r3, #0]
 8023b26:	69ba      	ldr	r2, [r7, #24]
 8023b28:	320c      	adds	r2, #12
 8023b2a:	f023 0302 	bic.w	r3, r3, #2
 8023b2e:	6013      	str	r3, [r2, #0]
  return ok;
 8023b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8023b32:	4618      	mov	r0, r3
 8023b34:	3728      	adds	r7, #40	@ 0x28
 8023b36:	46bd      	mov	sp, r7
 8023b38:	bd80      	pop	{r7, pc}

08023b3a <mg_device_reset>:
MG_IRAM void mg_device_reset(void) {
 8023b3a:	b480      	push	{r7}
 8023b3c:	af00      	add	r7, sp, #0
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 8023b3e:	4b04      	ldr	r3, [pc, #16]	@ (8023b50 <mg_device_reset+0x16>)
 8023b40:	4a04      	ldr	r2, [pc, #16]	@ (8023b54 <mg_device_reset+0x1a>)
 8023b42:	601a      	str	r2, [r3, #0]
}
 8023b44:	bf00      	nop
 8023b46:	46bd      	mov	sp, r7
 8023b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b4c:	4770      	bx	lr
 8023b4e:	bf00      	nop
 8023b50:	e000ed0c 	.word	0xe000ed0c
 8023b54:	05fa0004 	.word	0x05fa0004

08023b58 <mg_fwkey>:
MG_IRAM static uint32_t mg_fwkey(int fw) {
 8023b58:	b580      	push	{r7, lr}
 8023b5a:	b084      	sub	sp, #16
 8023b5c:	af00      	add	r7, sp, #0
 8023b5e:	6078      	str	r0, [r7, #4]
  uint32_t key = MG_OTADATA_KEY + fw;
 8023b60:	687a      	ldr	r2, [r7, #4]
 8023b62:	4b0e      	ldr	r3, [pc, #56]	@ (8023b9c <mg_fwkey+0x44>)
 8023b64:	4413      	add	r3, r2
 8023b66:	60fb      	str	r3, [r7, #12]
  int bank = mg_flash_bank();
 8023b68:	f7ff fddf 	bl	802372a <mg_flash_bank>
 8023b6c:	60b8      	str	r0, [r7, #8]
  if (bank == 2 && fw == MG_FIRMWARE_PREVIOUS) key--;
 8023b6e:	68bb      	ldr	r3, [r7, #8]
 8023b70:	2b02      	cmp	r3, #2
 8023b72:	d105      	bne.n	8023b80 <mg_fwkey+0x28>
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	2b01      	cmp	r3, #1
 8023b78:	d102      	bne.n	8023b80 <mg_fwkey+0x28>
 8023b7a:	68fb      	ldr	r3, [r7, #12]
 8023b7c:	3b01      	subs	r3, #1
 8023b7e:	60fb      	str	r3, [r7, #12]
  if (bank == 2 && fw == MG_FIRMWARE_CURRENT) key++;
 8023b80:	68bb      	ldr	r3, [r7, #8]
 8023b82:	2b02      	cmp	r3, #2
 8023b84:	d105      	bne.n	8023b92 <mg_fwkey+0x3a>
 8023b86:	687b      	ldr	r3, [r7, #4]
 8023b88:	2b00      	cmp	r3, #0
 8023b8a:	d102      	bne.n	8023b92 <mg_fwkey+0x3a>
 8023b8c:	68fb      	ldr	r3, [r7, #12]
 8023b8e:	3301      	adds	r3, #1
 8023b90:	60fb      	str	r3, [r7, #12]
  return key;
 8023b92:	68fb      	ldr	r3, [r7, #12]
}
 8023b94:	4618      	mov	r0, r3
 8023b96:	3710      	adds	r7, #16
 8023b98:	46bd      	mov	sp, r7
 8023b9a:	bd80      	pop	{r7, pc}
 8023b9c:	b07afed0 	.word	0xb07afed0

08023ba0 <mg_otadata>:
MG_IRAM static struct mg_otadata mg_otadata(int fw) {
 8023ba0:	b590      	push	{r4, r7, lr}
 8023ba2:	b089      	sub	sp, #36	@ 0x24
 8023ba4:	af00      	add	r7, sp, #0
 8023ba6:	6078      	str	r0, [r7, #4]
 8023ba8:	6039      	str	r1, [r7, #0]
  uint32_t key = mg_fwkey(fw);
 8023baa:	6838      	ldr	r0, [r7, #0]
 8023bac:	f7ff ffd4 	bl	8023b58 <mg_fwkey>
 8023bb0:	61f8      	str	r0, [r7, #28]
  struct mg_otadata od = {};
 8023bb2:	f107 030c 	add.w	r3, r7, #12
 8023bb6:	2200      	movs	r2, #0
 8023bb8:	601a      	str	r2, [r3, #0]
 8023bba:	605a      	str	r2, [r3, #4]
 8023bbc:	609a      	str	r2, [r3, #8]
 8023bbe:	60da      	str	r2, [r3, #12]
  mg_flash_load(NULL, key, &od, sizeof(od));
 8023bc0:	f107 020c 	add.w	r2, r7, #12
 8023bc4:	2310      	movs	r3, #16
 8023bc6:	69f9      	ldr	r1, [r7, #28]
 8023bc8:	2000      	movs	r0, #0
 8023bca:	f7dd fc2d 	bl	8001428 <mg_flash_load>
  return od;
 8023bce:	687b      	ldr	r3, [r7, #4]
 8023bd0:	461c      	mov	r4, r3
 8023bd2:	f107 030c 	add.w	r3, r7, #12
 8023bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8023bdc:	6878      	ldr	r0, [r7, #4]
 8023bde:	3724      	adds	r7, #36	@ 0x24
 8023be0:	46bd      	mov	sp, r7
 8023be2:	bd90      	pop	{r4, r7, pc}

08023be4 <mg_ota_commit>:
MG_IRAM bool mg_ota_commit(void) {
 8023be4:	b580      	push	{r7, lr}
 8023be6:	b086      	sub	sp, #24
 8023be8:	af00      	add	r7, sp, #0
  bool ok = true;
 8023bea:	2301      	movs	r3, #1
 8023bec:	75fb      	strb	r3, [r7, #23]
  struct mg_otadata od = mg_otadata(MG_FIRMWARE_CURRENT);
 8023bee:	1d3b      	adds	r3, r7, #4
 8023bf0:	2100      	movs	r1, #0
 8023bf2:	4618      	mov	r0, r3
 8023bf4:	f7ff ffd4 	bl	8023ba0 <mg_otadata>
  if (od.status != MG_OTA_COMMITTED) {
 8023bf8:	693b      	ldr	r3, [r7, #16]
 8023bfa:	2b03      	cmp	r3, #3
 8023bfc:	d00c      	beq.n	8023c18 <mg_ota_commit+0x34>
    od.status = MG_OTA_COMMITTED;
 8023bfe:	2303      	movs	r3, #3
 8023c00:	613b      	str	r3, [r7, #16]
    ok = mg_flash_save(NULL, mg_fwkey(MG_FIRMWARE_CURRENT), &od, sizeof(od));
 8023c02:	2000      	movs	r0, #0
 8023c04:	f7ff ffa8 	bl	8023b58 <mg_fwkey>
 8023c08:	4601      	mov	r1, r0
 8023c0a:	1d3a      	adds	r2, r7, #4
 8023c0c:	2310      	movs	r3, #16
 8023c0e:	2000      	movs	r0, #0
 8023c10:	f7dd fd02 	bl	8001618 <mg_flash_save>
 8023c14:	4603      	mov	r3, r0
 8023c16:	75fb      	strb	r3, [r7, #23]
  return ok;
 8023c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8023c1a:	4618      	mov	r0, r3
 8023c1c:	3718      	adds	r7, #24
 8023c1e:	46bd      	mov	sp, r7
 8023c20:	bd80      	pop	{r7, pc}
 8023c22:	bf00      	nop
